
Authcrypt test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c20  08016358  08016358  00026358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f78  08019f78  00030074  2**0
                  CONTENTS
  4 .ARM          00000000  08019f78  08019f78  00030074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019f78  08019f78  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f78  08019f78  00029f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f7c  08019f7c  00029f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08019f80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002854  20000078  08019ff4  00030078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200028cc  08019ff4  000328cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033afc  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006656  00000000  00000000  00063ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001af0  00000000  00000000  0006a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001950  00000000  00000000  0006bce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b373  00000000  00000000  0006d638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d75d  00000000  00000000  000989ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000daf1a  00000000  00000000  000b6108  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00191022  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ce4  00000000  00000000  001910a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016340 	.word	0x08016340

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08016340 	.word	0x08016340

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <_ZN9AuthcryptC1Ev>:

const char Authcrypt::message[] = "Some things are better left unread";

const char Authcrypt::metadata[] = "eg sequence number, routing info";

Authcrypt::Authcrypt()
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
{
    memset(ciphertext, 0, sizeof(ciphertext));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f014 ff67 	bl	8015162 <memset>
    memset(decrypted, 0, sizeof(decrypted));
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3380      	adds	r3, #128	; 0x80
 8000298:	2280      	movs	r2, #128	; 0x80
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f014 ff60 	bl	8015162 <memset>

    mbedtls_entropy_init(&entropy);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80002a8:	4618      	mov	r0, r3
 80002aa:	f00c fd11 	bl	800ccd0 <mbedtls_entropy_init>
    mbedtls_ctr_drbg_init(&drbg);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80002b4:	4618      	mov	r0, r3
 80002b6:	f00a fec9 	bl	800b04c <mbedtls_ctr_drbg_init>
    mbedtls_cipher_init(&cipher);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80002c0:	4618      	mov	r0, r3
 80002c2:	f009 f927 	bl	8009514 <mbedtls_cipher_init>
}
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4618      	mov	r0, r3
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <_ZN9AuthcryptD1Ev>:

Authcrypt::~Authcrypt()
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
{
    memset(ciphertext, 0, sizeof(ciphertext));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2280      	movs	r2, #128	; 0x80
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f014 ff3f 	bl	8015162 <memset>
    memset(decrypted, 0, sizeof(decrypted));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3380      	adds	r3, #128	; 0x80
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f014 ff38 	bl	8015162 <memset>

    mbedtls_cipher_free(&cipher);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80002f8:	4618      	mov	r0, r3
 80002fa:	f009 f918 	bl	800952e <mbedtls_cipher_free>
    mbedtls_ctr_drbg_free(&drbg);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8000304:	4618      	mov	r0, r3
 8000306:	f00a feb7 	bl	800b078 <mbedtls_ctr_drbg_free>
    mbedtls_entropy_free(&entropy);
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000310:	4618      	mov	r0, r3
 8000312:	f00c fd07 	bl	800cd24 <mbedtls_entropy_free>
}
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4618      	mov	r0, r3
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <_ZN9Authcrypt3runEv>:

int Authcrypt::run()
{
 8000320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000322:	b091      	sub	sp, #68	; 0x44
 8000324:	af08      	add	r7, sp, #32
 8000326:	6078      	str	r0, [r7, #4]
    printf("\n\n");
 8000328:	4871      	ldr	r0, [pc, #452]	; (80004f0 <_ZN9Authcrypt3runEv+0x1d0>)
 800032a:	f015 f873 	bl	8015414 <puts>
    print_hex("plaintext message",
 800032e:	2323      	movs	r3, #35	; 0x23
 8000330:	4a70      	ldr	r2, [pc, #448]	; (80004f4 <_ZN9Authcrypt3runEv+0x1d4>)
 8000332:	4971      	ldr	r1, [pc, #452]	; (80004f8 <_ZN9Authcrypt3runEv+0x1d8>)
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 f8f9 	bl	800052c <_ZN9Authcrypt9print_hexEPKcPKhj>

    /*
     * Seed the PRNG using the entropy pool, and throw in our secret key as an
     * additional source of randomness.
     */
    int ret = mbedtls_ctr_drbg_seed(&drbg, mbedtls_entropy_func, &entropy,
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f503 705e 	add.w	r0, r3, #888	; 0x378
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f503 7280 	add.w	r2, r3, #256	; 0x100
                                    secret_key, sizeof(secret_key));
 8000346:	2310      	movs	r3, #16
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	4b6c      	ldr	r3, [pc, #432]	; (80004fc <_ZN9Authcrypt3runEv+0x1dc>)
 800034c:	496c      	ldr	r1, [pc, #432]	; (8000500 <_ZN9Authcrypt3runEv+0x1e0>)
 800034e:	f00b f9b0 	bl	800b6b2 <mbedtls_ctr_drbg_seed>
 8000352:	61f8      	str	r0, [r7, #28]
    if (ret != 0) {
 8000354:	69fb      	ldr	r3, [r7, #28]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d007      	beq.n	800036a <_ZN9Authcrypt3runEv+0x4a>
        printf("mbedtls_ctr_drbg_seed() returned -0x%04X\n", -ret);
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	425b      	negs	r3, r3
 800035e:	4619      	mov	r1, r3
 8000360:	4868      	ldr	r0, [pc, #416]	; (8000504 <_ZN9Authcrypt3runEv+0x1e4>)
 8000362:	f014 ffcf 	bl	8015304 <iprintf>
        return ret;
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	e0bd      	b.n	80004e6 <_ZN9Authcrypt3runEv+0x1c6>
    }

    /* Setup AES-CCM contex */
    ret = mbedtls_cipher_setup(&cipher,
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	f503 6497 	add.w	r4, r3, #1208	; 0x4b8
 8000370:	202b      	movs	r0, #43	; 0x2b
 8000372:	f009 f87d 	bl	8009470 <mbedtls_cipher_info_from_type>
 8000376:	4603      	mov	r3, r0
 8000378:	4619      	mov	r1, r3
 800037a:	4620      	mov	r0, r4
 800037c:	f009 f924 	bl	80095c8 <mbedtls_cipher_setup>
 8000380:	61f8      	str	r0, [r7, #28]
                    mbedtls_cipher_info_from_type(MBEDTLS_CIPHER_AES_128_CCM));
    if (ret != 0) {
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d007      	beq.n	8000398 <_ZN9Authcrypt3runEv+0x78>
        printf("mbedtls_cipher_setup() returned -0x%04X\n", -ret);
 8000388:	69fb      	ldr	r3, [r7, #28]
 800038a:	425b      	negs	r3, r3
 800038c:	4619      	mov	r1, r3
 800038e:	485e      	ldr	r0, [pc, #376]	; (8000508 <_ZN9Authcrypt3runEv+0x1e8>)
 8000390:	f014 ffb8 	bl	8015304 <iprintf>
        return ret;
 8000394:	69fb      	ldr	r3, [r7, #28]
 8000396:	e0a6      	b.n	80004e6 <_ZN9Authcrypt3runEv+0x1c6>
    }

    ret = mbedtls_cipher_setkey(&cipher, secret_key,
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 800039e:	2301      	movs	r3, #1
 80003a0:	2280      	movs	r2, #128	; 0x80
 80003a2:	4956      	ldr	r1, [pc, #344]	; (80004fc <_ZN9Authcrypt3runEv+0x1dc>)
 80003a4:	f009 f93c 	bl	8009620 <mbedtls_cipher_setkey>
 80003a8:	61f8      	str	r0, [r7, #28]
                                8 * sizeof(secret_key), MBEDTLS_ENCRYPT);
    if (ret != 0) {
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d007      	beq.n	80003c0 <_ZN9Authcrypt3runEv+0xa0>
        printf("mbedtls_cipher_setkey() returned -0x%04X\n", -ret);
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	425b      	negs	r3, r3
 80003b4:	4619      	mov	r1, r3
 80003b6:	4855      	ldr	r0, [pc, #340]	; (800050c <_ZN9Authcrypt3runEv+0x1ec>)
 80003b8:	f014 ffa4 	bl	8015304 <iprintf>
        return ret;
 80003bc:	69fb      	ldr	r3, [r7, #28]
 80003be:	e092      	b.n	80004e6 <_ZN9Authcrypt3runEv+0x1c6>
     * However, this means you should save the counter accross rebots, if
     * the key is a long-term one. The alternative we choose here is to
     * generate the nonce randomly. However it only works if you have a
     * good source of randomness.
     */
    const size_t nonce_len = 8;
 80003c0:	2308      	movs	r3, #8
 80003c2:	61bb      	str	r3, [r7, #24]
    mbedtls_ctr_drbg_random(&drbg, ciphertext, nonce_len);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f503 735e 	add.w	r3, r3, #888	; 0x378
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	2208      	movs	r2, #8
 80003ce:	4618      	mov	r0, r3
 80003d0:	f00b fa77 	bl	800b8c2 <mbedtls_ctr_drbg_random>

    size_t ciphertext_len = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
    /*
     * Go for a conservative 16-byte (128-bit) tag and append it to the
     * ciphertext
     */
    const size_t tag_len = 16;
 80003d8:	2310      	movs	r3, #16
 80003da:	617b      	str	r3, [r7, #20]
    ret = mbedtls_cipher_auth_encrypt(&cipher, ciphertext, nonce_len,
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 80003e2:	687c      	ldr	r4, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3308      	adds	r3, #8
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	322b      	adds	r2, #43	; 0x2b
 80003ec:	2110      	movs	r1, #16
 80003ee:	9106      	str	r1, [sp, #24]
 80003f0:	9205      	str	r2, [sp, #20]
 80003f2:	f107 0210 	add.w	r2, r7, #16
 80003f6:	9204      	str	r2, [sp, #16]
 80003f8:	9303      	str	r3, [sp, #12]
 80003fa:	2323      	movs	r3, #35	; 0x23
 80003fc:	9302      	str	r3, [sp, #8]
 80003fe:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <_ZN9Authcrypt3runEv+0x1d4>)
 8000400:	9301      	str	r3, [sp, #4]
 8000402:	2321      	movs	r3, #33	; 0x21
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	4b42      	ldr	r3, [pc, #264]	; (8000510 <_ZN9Authcrypt3runEv+0x1f0>)
 8000408:	2208      	movs	r2, #8
 800040a:	4621      	mov	r1, r4
 800040c:	f009 fffa 	bl	800a404 <mbedtls_cipher_auth_encrypt>
 8000410:	61f8      	str	r0, [r7, #28]
                        reinterpret_cast<const unsigned char *>(message),
                        sizeof(message),
                        ciphertext + nonce_len, &ciphertext_len,
                        ciphertext + nonce_len + sizeof(message),
                        tag_len);
    if (ret != 0) {
 8000412:	69fb      	ldr	r3, [r7, #28]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d007      	beq.n	8000428 <_ZN9Authcrypt3runEv+0x108>
        printf("mbedtls_cipher_auth_encrypt() returned -0x%04X\n",
 8000418:	69fb      	ldr	r3, [r7, #28]
 800041a:	425b      	negs	r3, r3
 800041c:	4619      	mov	r1, r3
 800041e:	483d      	ldr	r0, [pc, #244]	; (8000514 <_ZN9Authcrypt3runEv+0x1f4>)
 8000420:	f014 ff70 	bl	8015304 <iprintf>
                       -ret);
        return ret;
 8000424:	69fb      	ldr	r3, [r7, #28]
 8000426:	e05e      	b.n	80004e6 <_ZN9Authcrypt3runEv+0x1c6>
    }
    ciphertext_len += nonce_len + tag_len;
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	3318      	adds	r3, #24
 800042c:	613b      	str	r3, [r7, #16]
    /*
     * The following information should now be transmitted:
     * - First ciphertext_len bytes of ciphertext buffer
     * - Metadata if not already transmitted elsewhere
     */
    print_hex("ciphertext", ciphertext, ciphertext_len);
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	693b      	ldr	r3, [r7, #16]
 8000432:	4939      	ldr	r1, [pc, #228]	; (8000518 <_ZN9Authcrypt3runEv+0x1f8>)
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f000 f879 	bl	800052c <_ZN9Authcrypt9print_hexEPKcPKhj>

    /* Decrypt-authenticate */
    size_t decrypted_len = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]

    ret = mbedtls_cipher_setkey(&cipher, secret_key, 8 * sizeof(secret_key),
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f503 6097 	add.w	r0, r3, #1208	; 0x4b8
 8000444:	2300      	movs	r3, #0
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	492c      	ldr	r1, [pc, #176]	; (80004fc <_ZN9Authcrypt3runEv+0x1dc>)
 800044a:	f009 f8e9 	bl	8009620 <mbedtls_cipher_setkey>
 800044e:	61f8      	str	r0, [r7, #28]
                                MBEDTLS_DECRYPT);
    if (ret != 0) {
 8000450:	69fb      	ldr	r3, [r7, #28]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d007      	beq.n	8000466 <_ZN9Authcrypt3runEv+0x146>
        printf("mbedtls_cipher_setkey() returned -0x%04X\n", -ret);
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	425b      	negs	r3, r3
 800045a:	4619      	mov	r1, r3
 800045c:	482b      	ldr	r0, [pc, #172]	; (800050c <_ZN9Authcrypt3runEv+0x1ec>)
 800045e:	f014 ff51 	bl	8015304 <iprintf>
        return ret;
 8000462:	69fb      	ldr	r3, [r7, #28]
 8000464:	e03f      	b.n	80004e6 <_ZN9Authcrypt3runEv+0x1c6>
    }

    ret = mbedtls_cipher_auth_decrypt(&cipher, ciphertext, nonce_len,
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f503 6597 	add.w	r5, r3, #1208	; 0x4b8
 800046c:	687e      	ldr	r6, [r7, #4]
                    reinterpret_cast<const unsigned char *>(metadata),
                    sizeof(metadata), ciphertext + nonce_len,
 800046e:	687b      	ldr	r3, [r7, #4]
    ret = mbedtls_cipher_auth_decrypt(&cipher, ciphertext, nonce_len,
 8000470:	3308      	adds	r3, #8
 8000472:	693a      	ldr	r2, [r7, #16]
 8000474:	3a18      	subs	r2, #24
 8000476:	6879      	ldr	r1, [r7, #4]
 8000478:	3180      	adds	r1, #128	; 0x80
                    ciphertext_len - nonce_len - tag_len, decrypted,
                    &decrypted_len, ciphertext + ciphertext_len - tag_len,
 800047a:	687c      	ldr	r4, [r7, #4]
 800047c:	6938      	ldr	r0, [r7, #16]
 800047e:	3810      	subs	r0, #16
    ret = mbedtls_cipher_auth_decrypt(&cipher, ciphertext, nonce_len,
 8000480:	4420      	add	r0, r4
 8000482:	2410      	movs	r4, #16
 8000484:	9406      	str	r4, [sp, #24]
 8000486:	9005      	str	r0, [sp, #20]
 8000488:	f107 000c 	add.w	r0, r7, #12
 800048c:	9004      	str	r0, [sp, #16]
 800048e:	9103      	str	r1, [sp, #12]
 8000490:	9202      	str	r2, [sp, #8]
 8000492:	9301      	str	r3, [sp, #4]
 8000494:	2321      	movs	r3, #33	; 0x21
 8000496:	9300      	str	r3, [sp, #0]
 8000498:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <_ZN9Authcrypt3runEv+0x1f0>)
 800049a:	2208      	movs	r2, #8
 800049c:	4631      	mov	r1, r6
 800049e:	4628      	mov	r0, r5
 80004a0:	f009 ffd0 	bl	800a444 <mbedtls_cipher_auth_decrypt>
 80004a4:	61f8      	str	r0, [r7, #28]
                    tag_len);
    /* Checking the return code is CRITICAL for security here */
    if (ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED) {
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	f513 4fc6 	cmn.w	r3, #25344	; 0x6300
 80004ac:	d104      	bne.n	80004b8 <_ZN9Authcrypt3runEv+0x198>
        printf("Something bad is happening! Data is not "
 80004ae:	481b      	ldr	r0, [pc, #108]	; (800051c <_ZN9Authcrypt3runEv+0x1fc>)
 80004b0:	f014 ffb0 	bl	8015414 <puts>
                       "authentic!\n");
        return ret;
 80004b4:	69fb      	ldr	r3, [r7, #28]
 80004b6:	e016      	b.n	80004e6 <_ZN9Authcrypt3runEv+0x1c6>
    } else if (ret != 0) {
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d007      	beq.n	80004ce <_ZN9Authcrypt3runEv+0x1ae>
        printf("mbedtls_cipher_authdecrypt() returned -0x%04X\n",
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	425b      	negs	r3, r3
 80004c2:	4619      	mov	r1, r3
 80004c4:	4816      	ldr	r0, [pc, #88]	; (8000520 <_ZN9Authcrypt3runEv+0x200>)
 80004c6:	f014 ff1d 	bl	8015304 <iprintf>
                       -ret);
        return ret;
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	e00b      	b.n	80004e6 <_ZN9Authcrypt3runEv+0x1c6>
    }

    print_hex("decrypted", decrypted, decrypted_len);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4913      	ldr	r1, [pc, #76]	; (8000524 <_ZN9Authcrypt3runEv+0x204>)
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 f827 	bl	800052c <_ZN9Authcrypt9print_hexEPKcPKhj>

    printf("\nDONE\n");
 80004de:	4812      	ldr	r0, [pc, #72]	; (8000528 <_ZN9Authcrypt3runEv+0x208>)
 80004e0:	f014 ff98 	bl	8015414 <puts>

    return 0;
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3724      	adds	r7, #36	; 0x24
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ee:	bf00      	nop
 80004f0:	08016358 	.word	0x08016358
 80004f4:	08016b20 	.word	0x08016b20
 80004f8:	0801635c 	.word	0x0801635c
 80004fc:	08016b10 	.word	0x08016b10
 8000500:	0800d019 	.word	0x0800d019
 8000504:	08016370 	.word	0x08016370
 8000508:	0801639c 	.word	0x0801639c
 800050c:	080163c8 	.word	0x080163c8
 8000510:	08016b44 	.word	0x08016b44
 8000514:	080163f4 	.word	0x080163f4
 8000518:	08016424 	.word	0x08016424
 800051c:	08016430 	.word	0x08016430
 8000520:	08016464 	.word	0x08016464
 8000524:	08016494 	.word	0x08016494
 8000528:	080164a0 	.word	0x080164a0

0800052c <_ZN9Authcrypt9print_hexEPKcPKhj>:

void Authcrypt::print_hex(const char *title,
                          const unsigned char buf[],
                          size_t len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
 8000538:	603b      	str	r3, [r7, #0]
    printf("%s: ", title);
 800053a:	68b9      	ldr	r1, [r7, #8]
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <_ZN9Authcrypt9print_hexEPKcPKhj+0x48>)
 800053e:	f014 fee1 	bl	8015304 <iprintf>

    for (size_t i = 0; i < len; i++)
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	429a      	cmp	r2, r3
 800054c:	d20b      	bcs.n	8000566 <_ZN9Authcrypt9print_hexEPKcPKhj+0x3a>
        printf("%02x", buf[i]);
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	4413      	add	r3, r2
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	4619      	mov	r1, r3
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <_ZN9Authcrypt9print_hexEPKcPKhj+0x4c>)
 800055a:	f014 fed3 	bl	8015304 <iprintf>
    for (size_t i = 0; i < len; i++)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3301      	adds	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	e7ef      	b.n	8000546 <_ZN9Authcrypt9print_hexEPKcPKhj+0x1a>

    printf("\n");
 8000566:	200a      	movs	r0, #10
 8000568:	f014 fee4 	bl	8015334 <putchar>
}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	080164a8 	.word	0x080164a8
 8000578:	080164b0 	.word	0x080164b0

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fb19 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f84b 	bl	8000620 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8eb 	bl	8000764 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800058e:	f000 f8b5 	bl	80006fc <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  	  int exit_code = MBEDTLS_EXIT_SUCCESS;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  	  int ret;

      if ((ret = mbedtls_platform_setup(NULL)) != 0) {
 8000596:	2000      	movs	r0, #0
 8000598:	f00d fe94 	bl	800e2c4 <mbedtls_platform_setup>
 800059c:	60b8      	str	r0, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	bf14      	ite	ne
 80005a4:	2301      	movne	r3, #1
 80005a6:	2300      	moveq	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d005      	beq.n	80005ba <main+0x3e>
          printf("Platform initialization failed with error %d\n", ret);
 80005ae:	68b9      	ldr	r1, [r7, #8]
 80005b0:	4819      	ldr	r0, [pc, #100]	; (8000618 <main+0x9c>)
 80005b2:	f014 fea7 	bl	8015304 <iprintf>
          return MBEDTLS_EXIT_FAILURE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	e02a      	b.n	8000610 <main+0x94>
      }

      Authcrypt *authcrypt = new Authcrypt();
 80005ba:	f44f 609f 	mov.w	r0, #1272	; 0x4f8
 80005be:	f014 f931 	bl	8014824 <_Znwj>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461c      	mov	r4, r3
 80005c6:	4620      	mov	r0, r4
 80005c8:	f7ff fe5a 	bl	8000280 <_ZN9AuthcryptC1Ev>
 80005cc:	607c      	str	r4, [r7, #4]

      if ((ret = authcrypt->run()) != 0) {
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff fea6 	bl	8000320 <_ZN9Authcrypt3runEv>
 80005d4:	60b8      	str	r0, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf14      	ite	ne
 80005dc:	2301      	movne	r3, #1
 80005de:	2300      	moveq	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d005      	beq.n	80005f2 <main+0x76>
          mbedtls_printf("Example failed with error %d\n", ret);
 80005e6:	68b9      	ldr	r1, [r7, #8]
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <main+0xa0>)
 80005ea:	f014 fe8b 	bl	8015304 <iprintf>
          exit_code = MBEDTLS_EXIT_FAILURE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
      }

      delete authcrypt;
 80005f2:	687c      	ldr	r4, [r7, #4]
 80005f4:	2c00      	cmp	r4, #0
 80005f6:	d007      	beq.n	8000608 <main+0x8c>
 80005f8:	4620      	mov	r0, r4
 80005fa:	f7ff fe69 	bl	80002d0 <_ZN9AuthcryptD1Ev>
 80005fe:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8000602:	4620      	mov	r0, r4
 8000604:	f014 f90c 	bl	8014820 <_ZdlPvj>

      mbedtls_platform_teardown(NULL);
 8000608:	2000      	movs	r0, #0
 800060a:	f00d fe66 	bl	800e2da <mbedtls_platform_teardown>

      return exit_code;
 800060e:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000610:	4618      	mov	r0, r3
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	080164b8 	.word	0x080164b8
 800061c:	080164e8 	.word	0x080164e8

08000620 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0a6      	sub	sp, #152	; 0x98
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800062a:	2228      	movs	r2, #40	; 0x28
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f014 fd97 	bl	8015162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2258      	movs	r2, #88	; 0x58
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f014 fd89 	bl	8015162 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800066c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000670:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fd88 	bl	8001194 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8000694:	f000 f8ce 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b2:	2102      	movs	r1, #2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fc83 	bl	8001fc0 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf14      	ite	ne
 80006c0:	2301      	movne	r3, #1
 80006c2:	2300      	moveq	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80006ca:	f000 f8b3 	bl	8000834 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fea7 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 80006ee:	f000 f8a1 	bl	8000834 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3798      	adds	r7, #152	; 0x98
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000708:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000740:	f002 f892 	bl	8002868 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	bf14      	ite	ne
 800074a:	2301      	movne	r3, #1
 800074c:	2300      	moveq	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000754:	f000 f86e 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000094 	.word	0x20000094
 8000760:	40004400 	.word	0x40004400

08000764 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 8000780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a24      	ldr	r2, [pc, #144]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 8000798:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800079c:	6153      	str	r3, [r2, #20]
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a1e      	ldr	r2, [pc, #120]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 80007b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 80007c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <_ZL12MX_GPIO_Initv+0xc4>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 fcbf 	bl	8001164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <_ZL12MX_GPIO_Initv+0xc8>)
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <_ZL12MX_GPIO_Initv+0xcc>)
 80007fc:	f000 fb28 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000800:	2320      	movs	r3, #32
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 fb19 	bl	8000e50 <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	10210000 	.word	0x10210000
 8000830:	48000800 	.word	0x48000800

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083a:	e7fe      	b.n	800083a <Error_Handler+0x6>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000872:	2007      	movs	r0, #7
 8000874:	f000 fab8 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x7c>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d128      	bne.n	80008f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_UART_MspInit+0x80>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d6:	230c      	movs	r3, #12
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e6:	2307      	movs	r3, #7
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f000 faac 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40004400 	.word	0x40004400
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f976 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
	return 1;
 8000960:	2301      	movs	r3, #1
}
 8000962:	4618      	mov	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_kill>:

int _kill(int pid, int sig)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000976:	f013 ff81 	bl	801487c <__errno>
 800097a:	4602      	mov	r2, r0
 800097c:	2316      	movs	r3, #22
 800097e:	6013      	str	r3, [r2, #0]
	return -1;
 8000980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <_exit>:

void _exit (int status)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000994:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ffe7 	bl	800096c <_kill>
	while (1) {}		/* Make sure we hang here */
 800099e:	e7fe      	b.n	800099e <_exit+0x12>

080009a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e00a      	b.n	80009c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009b2:	f3af 8000 	nop.w
 80009b6:	4601      	mov	r1, r0
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	b2ca      	uxtb	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf0      	blt.n	80009b2 <_read+0x12>
	}

return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	e009      	b.n	8000a00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60ba      	str	r2, [r7, #8]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf1      	blt.n	80009ec <_write+0x12>
	}
	return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_close>:

int _close(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	return -1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_isatty>:

int _isatty(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	return 1;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <_open>:

int _open(char *path, int flags, ...)
{
 8000a7a:	b40e      	push	{r1, r2, r3}
 8000a7c:	b480      	push	{r7}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	b003      	add	sp, #12
 8000a94:	4770      	bx	lr

08000a96 <_unlink>:
	errno = ECHILD;
	return -1;
}

int _unlink(char *name)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 8000a9e:	f013 feed 	bl	801487c <__errno>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	6013      	str	r3, [r2, #0]
	return -1;
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_link>:
	st->st_mode = S_IFCHR;
	return 0;
}

int _link(char *old, char *new)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8000abe:	f013 fedd 	bl	801487c <__errno>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	231f      	movs	r3, #31
 8000ac6:	6013      	str	r3, [r2, #0]
	return -1;
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <_sbrk+0x5c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <_sbrk+0x60>)
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <_sbrk+0x64>)
 8000af2:	4a12      	ldr	r2, [pc, #72]	; (8000b3c <_sbrk+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d207      	bcs.n	8000b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b04:	f013 feba 	bl	801487c <__errno>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b12:	e009      	b.n	8000b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <_sbrk+0x64>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <_sbrk+0x64>)
 8000b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b26:	68fb      	ldr	r3, [r7, #12]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20010000 	.word	0x20010000
 8000b34:	00000400 	.word	0x00000400
 8000b38:	20000118 	.word	0x20000118
 8000b3c:	200028d0 	.word	0x200028d0

08000b40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490e      	ldr	r1, [pc, #56]	; (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0b      	ldr	r4, [pc, #44]	; (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8e:	f7ff ffd7 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b92:	f014 fa1b 	bl	8014fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b96:	f7ff fcf1 	bl	800057c <main>

08000b9a <LoopForever>:

LoopForever:
    b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ba8:	08019f80 	.word	0x08019f80
  ldr r2, =_sbss
 8000bac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bb0:	200028cc 	.word	0x200028cc

08000bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x28>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f90d 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fe32 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f917 	bl	8000e36 <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	f000 f8ed 	bl	8000dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000004 	.word	0x20000004

08000c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_IncTick+0x20>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x24>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_IncTick+0x24>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200028a8 	.word	0x200028a8

08000c6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <HAL_GetTick+0x14>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200028a8 	.word	0x200028a8

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db4:	d301      	bcc.n	8000dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00f      	b.n	8000dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <SysTick_Config+0x40>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc8:	f7ff ff8e 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SysTick_Config+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SysTick_Config+0x40>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff47 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff5c 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff8e 	bl	8000d3c <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5d 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffb0 	bl	8000da4 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e160      	b.n	8001122 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 8152 	beq.w	800111c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d00b      	beq.n	8000e98 <HAL_GPIO_Init+0x48>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d007      	beq.n	8000e98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8c:	2b11      	cmp	r3, #17
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b12      	cmp	r3, #18
 8000e96:	d130      	bne.n	8000efa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	f003 0201 	and.w	r2, r3, #1
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0xea>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b12      	cmp	r3, #18
 8000f38:	d123      	bne.n	8000f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	6939      	ldr	r1, [r7, #16]
 8000f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0203 	and.w	r2, r3, #3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 80ac 	beq.w	800111c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc4:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <HAL_GPIO_Init+0x2f0>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a5d      	ldr	r2, [pc, #372]	; (8001140 <HAL_GPIO_Init+0x2f0>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <HAL_GPIO_Init+0x2f0>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fdc:	4a59      	ldr	r2, [pc, #356]	; (8001144 <HAL_GPIO_Init+0x2f4>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001006:	d025      	beq.n	8001054 <HAL_GPIO_Init+0x204>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a4f      	ldr	r2, [pc, #316]	; (8001148 <HAL_GPIO_Init+0x2f8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d01f      	beq.n	8001050 <HAL_GPIO_Init+0x200>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a4e      	ldr	r2, [pc, #312]	; (800114c <HAL_GPIO_Init+0x2fc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d019      	beq.n	800104c <HAL_GPIO_Init+0x1fc>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a4d      	ldr	r2, [pc, #308]	; (8001150 <HAL_GPIO_Init+0x300>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d013      	beq.n	8001048 <HAL_GPIO_Init+0x1f8>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <HAL_GPIO_Init+0x304>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d00d      	beq.n	8001044 <HAL_GPIO_Init+0x1f4>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a4b      	ldr	r2, [pc, #300]	; (8001158 <HAL_GPIO_Init+0x308>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d007      	beq.n	8001040 <HAL_GPIO_Init+0x1f0>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a4a      	ldr	r2, [pc, #296]	; (800115c <HAL_GPIO_Init+0x30c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d101      	bne.n	800103c <HAL_GPIO_Init+0x1ec>
 8001038:	2306      	movs	r3, #6
 800103a:	e00c      	b.n	8001056 <HAL_GPIO_Init+0x206>
 800103c:	2307      	movs	r3, #7
 800103e:	e00a      	b.n	8001056 <HAL_GPIO_Init+0x206>
 8001040:	2305      	movs	r3, #5
 8001042:	e008      	b.n	8001056 <HAL_GPIO_Init+0x206>
 8001044:	2304      	movs	r3, #4
 8001046:	e006      	b.n	8001056 <HAL_GPIO_Init+0x206>
 8001048:	2303      	movs	r3, #3
 800104a:	e004      	b.n	8001056 <HAL_GPIO_Init+0x206>
 800104c:	2302      	movs	r3, #2
 800104e:	e002      	b.n	8001056 <HAL_GPIO_Init+0x206>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_GPIO_Init+0x206>
 8001054:	2300      	movs	r3, #0
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	f002 0203 	and.w	r2, r2, #3
 800105c:	0092      	lsls	r2, r2, #2
 800105e:	4093      	lsls	r3, r2
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001066:	4937      	ldr	r1, [pc, #220]	; (8001144 <HAL_GPIO_Init+0x2f4>)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001074:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_GPIO_Init+0x310>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001098:	4a31      	ldr	r2, [pc, #196]	; (8001160 <HAL_GPIO_Init+0x310>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_GPIO_Init+0x310>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010c2:	4a27      	ldr	r2, [pc, #156]	; (8001160 <HAL_GPIO_Init+0x310>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c8:	4b25      	ldr	r3, [pc, #148]	; (8001160 <HAL_GPIO_Init+0x310>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010ec:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <HAL_GPIO_Init+0x310>)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_GPIO_Init+0x310>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <HAL_GPIO_Init+0x310>)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	fa22 f303 	lsr.w	r3, r2, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	f47f ae97 	bne.w	8000e60 <HAL_GPIO_Init+0x10>
  }
}
 8001132:	bf00      	nop
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000
 8001148:	48000400 	.word	0x48000400
 800114c:	48000800 	.word	0x48000800
 8001150:	48000c00 	.word	0x48000c00
 8001154:	48001000 	.word	0x48001000
 8001158:	48001400 	.word	0x48001400
 800115c:	48001800 	.word	0x48001800
 8001160:	40010400 	.word	0x40010400

08001164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001174:	787b      	ldrb	r3, [r7, #1]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001180:	e002      	b.n	8001188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800119a:	af00      	add	r7, sp, #0
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	f000 bf01 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8160 	beq.w	800147e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011be:	4bae      	ldr	r3, [pc, #696]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d00c      	beq.n	80011e4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ca:	4bab      	ldr	r3, [pc, #684]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 030c 	and.w	r3, r3, #12
 80011d2:	2b08      	cmp	r3, #8
 80011d4:	d159      	bne.n	800128a <HAL_RCC_OscConfig+0xf6>
 80011d6:	4ba8      	ldr	r3, [pc, #672]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e2:	d152      	bne.n	800128a <HAL_RCC_OscConfig+0xf6>
 80011e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d102      	bne.n	8001216 <HAL_RCC_OscConfig+0x82>
 8001210:	4b99      	ldr	r3, [pc, #612]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	e015      	b.n	8001242 <HAL_RCC_OscConfig+0xae>
 8001216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800122a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800122e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001232:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800123e:	4b8e      	ldr	r3, [pc, #568]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001246:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800124a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800124e:	fa92 f2a2 	rbit	r2, r2
 8001252:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001256:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800125a:	fab2 f282 	clz	r2, r2
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f042 0220 	orr.w	r2, r2, #32
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f002 021f 	and.w	r2, r2, #31
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8102 	beq.w	800147c <HAL_RCC_OscConfig+0x2e8>
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 80fc 	bne.w	800147c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	f000 be93 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d106      	bne.n	80012a4 <HAL_RCC_OscConfig+0x110>
 8001296:	4b78      	ldr	r3, [pc, #480]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a77      	ldr	r2, [pc, #476]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e030      	b.n	8001306 <HAL_RCC_OscConfig+0x172>
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x134>
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a71      	ldr	r2, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6e      	ldr	r2, [pc, #440]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01e      	b.n	8001306 <HAL_RCC_OscConfig+0x172>
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x15a>
 80012d4:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a67      	ldr	r2, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a64      	ldr	r2, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	e00b      	b.n	8001306 <HAL_RCC_OscConfig+0x172>
 80012ee:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a61      	ldr	r2, [pc, #388]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a5e      	ldr	r2, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001300:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d059      	beq.n	80013c4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fcac 	bl	8000c6c <HAL_GetTick>
 8001314:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131a:	f7ff fca7 	bl	8000c6c <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d902      	bls.n	8001330 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	f000 be40 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001334:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001344:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b01      	cmp	r3, #1
 800135a:	d102      	bne.n	8001362 <HAL_RCC_OscConfig+0x1ce>
 800135c:	4b46      	ldr	r3, [pc, #280]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	e015      	b.n	800138e <HAL_RCC_OscConfig+0x1fa>
 8001362:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001366:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800137a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800137e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001392:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001396:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800139a:	fa92 f2a2 	rbit	r2, r2
 800139e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80013a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013a6:	fab2 f282 	clz	r2, r2
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	f002 021f 	and.w	r2, r2, #31
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ab      	beq.n	800131a <HAL_RCC_OscConfig+0x186>
 80013c2:	e05c      	b.n	800147e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc52 	bl	8000c6c <HAL_GetTick>
 80013c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ce:	f7ff fc4d 	bl	8000c6c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d902      	bls.n	80013e4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	f000 bde6 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80013e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80013f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b01      	cmp	r3, #1
 800140e:	d102      	bne.n	8001416 <HAL_RCC_OscConfig+0x282>
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x2ae>
 8001416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800142a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001432:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_RCC_OscConfig+0x2e4>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001446:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800144a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800144e:	fa92 f2a2 	rbit	r2, r2
 8001452:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001456:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800145a:	fab2 f282 	clz	r2, r2
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	f042 0220 	orr.w	r2, r2, #32
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	f002 021f 	and.w	r2, r2, #31
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f202 	lsl.w	r2, r1, r2
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ab      	bne.n	80013ce <HAL_RCC_OscConfig+0x23a>
 8001476:	e002      	b.n	800147e <HAL_RCC_OscConfig+0x2ea>
 8001478:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8170 	beq.w	800176e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800148e:	4bd0      	ldr	r3, [pc, #832]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800149a:	4bcd      	ldr	r3, [pc, #820]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d16d      	bne.n	8001582 <HAL_RCC_OscConfig+0x3ee>
 80014a6:	4bca      	ldr	r3, [pc, #808]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b2:	d166      	bne.n	8001582 <HAL_RCC_OscConfig+0x3ee>
 80014b4:	2302      	movs	r3, #2
 80014b6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80014c6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	095b      	lsrs	r3, r3, #5
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d102      	bne.n	80014e4 <HAL_RCC_OscConfig+0x350>
 80014de:	4bbc      	ldr	r3, [pc, #752]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	e013      	b.n	800150c <HAL_RCC_OscConfig+0x378>
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001508:	4bb1      	ldr	r3, [pc, #708]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	2202      	movs	r2, #2
 800150e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001512:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001516:	fa92 f2a2 	rbit	r2, r2
 800151a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800151e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001522:	fab2 f282 	clz	r2, r2
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	f042 0220 	orr.w	r2, r2, #32
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	f002 021f 	and.w	r2, r2, #31
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <HAL_RCC_OscConfig+0x3ba>
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d002      	beq.n	800154e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	f000 bd31 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4ba0      	ldr	r3, [pc, #640]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	21f8      	movs	r1, #248	; 0xf8
 800155e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001566:	fa91 f1a1 	rbit	r1, r1
 800156a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800156e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001572:	fab1 f181 	clz	r1, r1
 8001576:	b2c9      	uxtb	r1, r1
 8001578:	408b      	lsls	r3, r1
 800157a:	4995      	ldr	r1, [pc, #596]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001580:	e0f5      	b.n	800176e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8085 	beq.w	8001698 <HAL_RCC_OscConfig+0x504>
 800158e:	2301      	movs	r3, #1
 8001590:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	461a      	mov	r2, r3
 80015b6:	2301      	movs	r3, #1
 80015b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb57 	bl	8000c6c <HAL_GetTick>
 80015be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fb52 	bl	8000c6c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d902      	bls.n	80015da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f000 bceb 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80015e4:	fa93 f3a3 	rbit	r3, r3
 80015e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80015ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d102      	bne.n	800160a <HAL_RCC_OscConfig+0x476>
 8001604:	4b72      	ldr	r3, [pc, #456]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	e013      	b.n	8001632 <HAL_RCC_OscConfig+0x49e>
 800160a:	2302      	movs	r3, #2
 800160c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001610:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001614:	fa93 f3a3 	rbit	r3, r3
 8001618:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001622:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800162e:	4b68      	ldr	r3, [pc, #416]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	2202      	movs	r2, #2
 8001634:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001638:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800163c:	fa92 f2a2 	rbit	r2, r2
 8001640:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001644:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001648:	fab2 f282 	clz	r2, r2
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	f042 0220 	orr.w	r2, r2, #32
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	f002 021f 	and.w	r2, r2, #31
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	4013      	ands	r3, r2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0af      	beq.n	80015c4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b5a      	ldr	r3, [pc, #360]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	21f8      	movs	r1, #248	; 0xf8
 8001674:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001678:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800167c:	fa91 f1a1 	rbit	r1, r1
 8001680:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001684:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001688:	fab1 f181 	clz	r1, r1
 800168c:	b2c9      	uxtb	r1, r1
 800168e:	408b      	lsls	r3, r1
 8001690:	494f      	ldr	r1, [pc, #316]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
 8001696:	e06a      	b.n	800176e <HAL_RCC_OscConfig+0x5da>
 8001698:	2301      	movs	r3, #1
 800169a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	461a      	mov	r2, r3
 80016c0:	2300      	movs	r3, #0
 80016c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fad2 	bl	8000c6c <HAL_GetTick>
 80016c8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff facd 	bl	8000c6c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d902      	bls.n	80016e4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	f000 bc66 	b.w	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80016f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d102      	bne.n	8001714 <HAL_RCC_OscConfig+0x580>
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	e013      	b.n	800173c <HAL_RCC_OscConfig+0x5a8>
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800172c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2202      	movs	r2, #2
 800173e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001742:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001746:	fa92 f2a2 	rbit	r2, r2
 800174a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800174e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001752:	fab2 f282 	clz	r2, r2
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f042 0220 	orr.w	r2, r2, #32
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f002 021f 	and.w	r2, r2, #31
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1af      	bne.n	80016ce <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80da 	beq.w	8001932 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d069      	beq.n	800185c <HAL_RCC_OscConfig+0x6c8>
 8001788:	2301      	movs	r3, #1
 800178a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800179a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x640>)
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	461a      	mov	r2, r3
 80017ae:	2301      	movs	r3, #1
 80017b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fa5b 	bl	8000c6c <HAL_GetTick>
 80017b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e00d      	b.n	80017d8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fa56 	bl	8000c6c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d905      	bls.n	80017d8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e3ef      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80017d0:	40021000 	.word	0x40021000
 80017d4:	10908120 	.word	0x10908120
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017e2:	fa93 f2a3 	rbit	r2, r3
 80017e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80017f0:	2202      	movs	r2, #2
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001808:	2202      	movs	r2, #2
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f2a3 	rbit	r2, r3
 8001816:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800181a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181c:	4ba4      	ldr	r3, [pc, #656]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 800181e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001820:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001824:	2102      	movs	r1, #2
 8001826:	6019      	str	r1, [r3, #0]
 8001828:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f1a3 	rbit	r1, r3
 8001832:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001836:	6019      	str	r1, [r3, #0]
  return result;
 8001838:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fab3 f383 	clz	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0b0      	beq.n	80017bc <HAL_RCC_OscConfig+0x628>
 800185a:	e06a      	b.n	8001932 <HAL_RCC_OscConfig+0x79e>
 800185c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	fa93 f2a3 	rbit	r2, r3
 800186e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001872:	601a      	str	r2, [r3, #0]
  return result;
 8001874:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001878:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	4b8c      	ldr	r3, [pc, #560]	; (8001ab4 <HAL_RCC_OscConfig+0x920>)
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	461a      	mov	r2, r3
 800188a:	2300      	movs	r3, #0
 800188c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff f9ed 	bl	8000c6c <HAL_GetTick>
 8001892:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001896:	e009      	b.n	80018ac <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff f9e8 	bl	8000c6c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e381      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 80018ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018b0:	2202      	movs	r2, #2
 80018b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018c8:	2202      	movs	r2, #2
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	fa93 f2a3 	rbit	r2, r3
 80018d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e0:	2202      	movs	r2, #2
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	fa93 f2a3 	rbit	r2, r3
 80018ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80018f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018fc:	2102      	movs	r1, #2
 80018fe:	6019      	str	r1, [r3, #0]
 8001900:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	fa93 f1a3 	rbit	r1, r3
 800190a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800190e:	6019      	str	r1, [r3, #0]
  return result;
 8001910:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1b2      	bne.n	8001898 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8157 	beq.w	8001bf0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d112      	bne.n	800197a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001954:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	4a55      	ldr	r2, [pc, #340]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195e:	61d3      	str	r3, [r2, #28]
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <HAL_RCC_OscConfig+0x924>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d11a      	bne.n	80019bc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <HAL_RCC_OscConfig+0x924>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a4b      	ldr	r2, [pc, #300]	; (8001ab8 <HAL_RCC_OscConfig+0x924>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001992:	f7ff f96b 	bl	8000c6c <HAL_GetTick>
 8001996:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	e009      	b.n	80019b0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199c:	f7ff f966 	bl	8000c6c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e2ff      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x924>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x840>
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a39      	ldr	r2, [pc, #228]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	e02f      	b.n	8001a34 <HAL_RCC_OscConfig+0x8a0>
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x864>
 80019de:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a33      	ldr	r2, [pc, #204]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	4a30      	ldr	r2, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	6213      	str	r3, [r2, #32]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0x8a0>
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x888>
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0x8a0>
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001a2e:	f023 0304 	bic.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d06a      	beq.n	8001b14 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff f915 	bl	8000c6c <HAL_GetTick>
 8001a42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7ff f910 	bl	8000c6c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e2a7      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001a60:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fa93 f2a3 	rbit	r2, r3
 8001a72:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	fa93 f2a3 	rbit	r2, r3
 8001a8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a8e:	601a      	str	r2, [r3, #0]
  return result;
 8001a90:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	095b      	lsrs	r3, r3, #5
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d108      	bne.n	8001abc <HAL_RCC_OscConfig+0x928>
 8001aaa:	4b01      	ldr	r3, [pc, #4]	; (8001ab0 <HAL_RCC_OscConfig+0x91c>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	e013      	b.n	8001ad8 <HAL_RCC_OscConfig+0x944>
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	10908120 	.word	0x10908120
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	4bc0      	ldr	r3, [pc, #768]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001adc:	2102      	movs	r1, #2
 8001ade:	6011      	str	r1, [r2, #0]
 8001ae0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	fa92 f1a2 	rbit	r1, r2
 8001aea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001aee:	6011      	str	r1, [r2, #0]
  return result;
 8001af0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f002 021f 	and.w	r2, r2, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d09a      	beq.n	8001a48 <HAL_RCC_OscConfig+0x8b4>
 8001b12:	e063      	b.n	8001bdc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7ff f8aa 	bl	8000c6c <HAL_GetTick>
 8001b18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1c:	e00b      	b.n	8001b36 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff f8a5 	bl	8000c6c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e23c      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001b36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b52:	2202      	movs	r2, #2
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b64:	601a      	str	r2, [r3, #0]
  return result;
 8001b66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x9f2>
 8001b80:	4b95      	ldr	r3, [pc, #596]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	e00d      	b.n	8001ba2 <HAL_RCC_OscConfig+0xa0e>
 8001b86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fa93 f2a3 	rbit	r2, r3
 8001b98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	4b8e      	ldr	r3, [pc, #568]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	6011      	str	r1, [r2, #0]
 8001baa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	fa92 f1a2 	rbit	r1, r2
 8001bb4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bb8:	6011      	str	r1, [r2, #0]
  return result;
 8001bba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	fab2 f282 	clz	r2, r2
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f002 021f 	and.w	r2, r2, #31
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1a0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bdc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be4:	4b7c      	ldr	r3, [pc, #496]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	4a7b      	ldr	r2, [pc, #492]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 81d9 	beq.w	8001fae <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bfc:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	f000 81a6 	beq.w	8001f56 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	f040 811e 	bne.w	8001e52 <HAL_RCC_OscConfig+0xcbe>
 8001c16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c2e:	601a      	str	r2, [r3, #0]
  return result;
 8001c30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	461a      	mov	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f80e 	bl	8000c6c <HAL_GetTick>
 8001c50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c54:	e009      	b.n	8001c6a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff f809 	bl	8000c6c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1a2      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001c6a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c82:	601a      	str	r2, [r3, #0]
  return result;
 8001c84:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	095b      	lsrs	r3, r3, #5
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d102      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xb10>
 8001c9e:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	e01b      	b.n	8001cdc <HAL_RCC_OscConfig+0xb48>
 8001ca4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	fa93 f2a3 	rbit	r2, r3
 8001cd2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ce0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ce4:	6011      	str	r1, [r2, #0]
 8001ce6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	fa92 f1a2 	rbit	r1, r2
 8001cf0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cf4:	6011      	str	r1, [r2, #0]
  return result;
 8001cf6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d19e      	bne.n	8001c56 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	f023 020f 	bic.w	r2, r3, #15
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	492c      	ldr	r1, [pc, #176]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a19      	ldr	r1, [r3, #32]
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	4925      	ldr	r1, [pc, #148]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
 8001d48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d60:	601a      	str	r2, [r3, #0]
  return result;
 8001d62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d66:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe ff75 	bl	8000c6c <HAL_GetTick>
 8001d82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d86:	e009      	b.n	8001d9c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe ff70 	bl	8000c6c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e109      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001d9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001db4:	601a      	str	r2, [r3, #0]
  return result;
 8001db6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dbc:	fab3 f383 	clz	r3, r3
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_RCC_OscConfig+0xc48>
 8001dd0:	4b01      	ldr	r3, [pc, #4]	; (8001dd8 <HAL_RCC_OscConfig+0xc44>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	e01e      	b.n	8001e14 <HAL_RCC_OscConfig+0xc80>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f2a3 	rbit	r2, r3
 8001df0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e14:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e1c:	6011      	str	r1, [r2, #0]
 8001e1e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	fa92 f1a2 	rbit	r1, r2
 8001e28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e2c:	6011      	str	r1, [r2, #0]
  return result;
 8001e2e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	fab2 f282 	clz	r2, r2
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f002 021f 	and.w	r2, r2, #31
 8001e44:	2101      	movs	r1, #1
 8001e46:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d09b      	beq.n	8001d88 <HAL_RCC_OscConfig+0xbf4>
 8001e50:	e0ad      	b.n	8001fae <HAL_RCC_OscConfig+0xe1a>
 8001e52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	fa93 f2a3 	rbit	r2, r3
 8001e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e6a:	601a      	str	r2, [r3, #0]
  return result;
 8001e6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e70:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	461a      	mov	r2, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7fe fef0 	bl	8000c6c <HAL_GetTick>
 8001e8c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e90:	e009      	b.n	8001ea6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e92:	f7fe feeb 	bl	8000c6c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e084      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ebe:	601a      	str	r2, [r3, #0]
  return result;
 8001ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xd4c>
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	e01b      	b.n	8001f18 <HAL_RCC_OscConfig+0xd84>
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f107 0320 	add.w	r3, r7, #32
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	f107 0214 	add.w	r2, r7, #20
 8001f1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f20:	6011      	str	r1, [r2, #0]
 8001f22:	f107 0214 	add.w	r2, r7, #20
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	fa92 f1a2 	rbit	r1, r2
 8001f2c:	f107 0210 	add.w	r2, r7, #16
 8001f30:	6011      	str	r1, [r2, #0]
  return result;
 8001f32:	f107 0210 	add.w	r2, r7, #16
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d19e      	bne.n	8001e92 <HAL_RCC_OscConfig+0xcfe>
 8001f54:	e02b      	b.n	8001fae <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e025      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_OscConfig+0xe28>)
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f78:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d111      	bne.n	8001faa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d108      	bne.n	8001faa <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b09e      	sub	sp, #120	; 0x78
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e162      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b90      	ldr	r3, [pc, #576]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d910      	bls.n	8002008 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 0207 	bic.w	r2, r3, #7
 8001fee:	498b      	ldr	r1, [pc, #556]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b89      	ldr	r3, [pc, #548]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e14a      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b82      	ldr	r3, [pc, #520]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	497f      	ldr	r1, [pc, #508]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80dc 	beq.w	80021ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d13c      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xf6>
 800203c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002040:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d102      	bne.n	8002066 <HAL_RCC_ClockConfig+0xa6>
 8002060:	4b6f      	ldr	r3, [pc, #444]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	e00f      	b.n	8002086 <HAL_RCC_ClockConfig+0xc6>
 8002066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	667b      	str	r3, [r7, #100]	; 0x64
 8002074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
 800207a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800208a:	65ba      	str	r2, [r7, #88]	; 0x58
 800208c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002094:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d17b      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0f3      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d13c      	bne.n	8002138 <HAL_RCC_ClockConfig+0x178>
 80020be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x128>
 80020e2:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_ClockConfig+0x148>
 80020e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	647b      	str	r3, [r7, #68]	; 0x44
 80020f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002104:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210c:	63ba      	str	r2, [r7, #56]	; 0x38
 800210e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002110:	fa92 f2a2 	rbit	r2, r2
 8002114:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002118:	fab2 f282 	clz	r2, r2
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f042 0220 	orr.w	r2, r2, #32
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f002 021f 	and.w	r2, r2, #31
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13a      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0b2      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 8002138:	2302      	movs	r3, #2
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	fab3 f383 	clz	r3, r3
 800214a:	b2db      	uxtb	r3, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d102      	bne.n	8002160 <HAL_RCC_ClockConfig+0x1a0>
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e00d      	b.n	800217c <HAL_RCC_ClockConfig+0x1bc>
 8002160:	2302      	movs	r3, #2
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	2302      	movs	r3, #2
 800216e:	623b      	str	r3, [r7, #32]
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2202      	movs	r2, #2
 800217e:	61ba      	str	r2, [r7, #24]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	617a      	str	r2, [r7, #20]
  return result;
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f002 021f 	and.w	r2, r2, #31
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e079      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f023 0203 	bic.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021bc:	f7fe fd56 	bl	8000c6c <HAL_GetTick>
 80021c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	e00a      	b.n	80021da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe fd52 	bl	8000c6c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e061      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_RCC_ClockConfig+0x260>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 020c 	and.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1eb      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d214      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 0207 	bic.w	r2, r3, #7
 8002202:	4906      	ldr	r1, [pc, #24]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <HAL_RCC_ClockConfig+0x25c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e040      	b.n	800229e <HAL_RCC_ClockConfig+0x2de>
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	491a      	ldr	r1, [pc, #104]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4912      	ldr	r1, [pc, #72]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002262:	f000 f829 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002266:	4601      	mov	r1, r0
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_RCC_ClockConfig+0x2e8>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002270:	22f0      	movs	r2, #240	; 0xf0
 8002272:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	fa92 f2a2 	rbit	r2, r2
 800227a:	60fa      	str	r2, [r7, #12]
  return result;
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	40d3      	lsrs	r3, r2
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x2ec>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	fa21 f303 	lsr.w	r3, r1, r3
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <HAL_RCC_ClockConfig+0x2f0>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCC_ClockConfig+0x2f4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fca4 	bl	8000be4 <HAL_InitTick>
  
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3778      	adds	r7, #120	; 0x78
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	08016b68 	.word	0x08016b68
 80022b0:	20000000 	.word	0x20000000
 80022b4:	20000004 	.word	0x20000004

080022b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b08b      	sub	sp, #44	; 0x2c
 80022bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x36>
 80022e6:	e03f      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ea:	623b      	str	r3, [r7, #32]
      break;
 80022ec:	e03f      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	fa92 f2a2 	rbit	r2, r2
 8002300:	607a      	str	r2, [r7, #4]
  return result;
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	fab2 f282 	clz	r2, r2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	40d3      	lsrs	r3, r2
 800230c:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_RCC_GetSysClockFreq+0xcc>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	220f      	movs	r2, #15
 800231c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	60fa      	str	r2, [r7, #12]
  return result;
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	40d3      	lsrs	r3, r2
 8002330:	4a15      	ldr	r2, [pc, #84]	; (8002388 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002340:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	fbb2 f2f3 	udiv	r2, r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
 8002350:	e007      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002352:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fbb2 f2f3 	udiv	r2, r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	623b      	str	r3, [r7, #32]
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc8>)
 800236a:	623b      	str	r3, [r7, #32]
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	6a3b      	ldr	r3, [r7, #32]
}
 8002370:	4618      	mov	r0, r3
 8002372:	372c      	adds	r7, #44	; 0x2c
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40021000 	.word	0x40021000
 8002380:	007a1200 	.word	0x007a1200
 8002384:	08016b80 	.word	0x08016b80
 8002388:	08016b90 	.word	0x08016b90

0800238c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023aa:	f7ff ffef 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	603a      	str	r2, [r7, #0]
  return result;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08016b78 	.word	0x08016b78

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023ee:	f7ff ffcd 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023f2:	4601      	mov	r1, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002400:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	603a      	str	r2, [r7, #0]
  return result;
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08016b78 	.word	0x08016b78

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b092      	sub	sp, #72	; 0x48
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80d4 	beq.w	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002450:	4b4e      	ldr	r3, [pc, #312]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10e      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	4b4b      	ldr	r3, [pc, #300]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a4a      	ldr	r2, [pc, #296]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002466:	61d3      	str	r3, [r2, #28]
 8002468:	4b48      	ldr	r3, [pc, #288]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b45      	ldr	r3, [pc, #276]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b42      	ldr	r3, [pc, #264]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a41      	ldr	r2, [pc, #260]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe fbeb 	bl	8000c6c <HAL_GetTick>
 8002496:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe fbe7 	bl	8000c6c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1d6      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8084 	beq.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d07c      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024d8:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	461a      	mov	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	461a      	mov	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800252a:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d04b      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe fb97 	bl	8000c6c <HAL_GetTick>
 800253e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fb93 	bl	8000c6c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e180      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002558:	2302      	movs	r3, #2
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	61fb      	str	r3, [r7, #28]
  return result;
 8002570:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d108      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002586:	4b01      	ldr	r3, [pc, #4]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	e00d      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	10908100 	.word	0x10908100
 8002598:	2302      	movs	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	4ba0      	ldr	r3, [pc, #640]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2202      	movs	r2, #2
 80025aa:	613a      	str	r2, [r7, #16]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	fa92 f2a2 	rbit	r2, r2
 80025b2:	60fa      	str	r2, [r7, #12]
  return result;
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	fab2 f282 	clz	r2, r2
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	f002 021f 	and.w	r2, r2, #31
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0b7      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025d2:	4b95      	ldr	r3, [pc, #596]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4992      	ldr	r1, [pc, #584]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b8e      	ldr	r3, [pc, #568]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4a8d      	ldr	r2, [pc, #564]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002604:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f023 0203 	bic.w	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4985      	ldr	r1, [pc, #532]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002622:	4b81      	ldr	r3, [pc, #516]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	497e      	ldr	r1, [pc, #504]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002630:	4313      	orrs	r3, r2
 8002632:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002640:	4b79      	ldr	r3, [pc, #484]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	4976      	ldr	r1, [pc, #472]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265e:	4b72      	ldr	r3, [pc, #456]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f023 0210 	bic.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	496f      	ldr	r1, [pc, #444]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800267c:	4b6a      	ldr	r3, [pc, #424]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	4967      	ldr	r1, [pc, #412]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800269a:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f023 0220 	bic.w	r2, r3, #32
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4960      	ldr	r1, [pc, #384]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b8:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	4958      	ldr	r1, [pc, #352]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d6:	4b54      	ldr	r3, [pc, #336]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	4951      	ldr	r1, [pc, #324]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f4:	4b4c      	ldr	r3, [pc, #304]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4949      	ldr	r1, [pc, #292]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002712:	4b45      	ldr	r3, [pc, #276]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4942      	ldr	r1, [pc, #264]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002730:	4b3d      	ldr	r3, [pc, #244]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	493a      	ldr	r1, [pc, #232]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	4933      	ldr	r1, [pc, #204]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800276c:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	492b      	ldr	r1, [pc, #172]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4924      	ldr	r1, [pc, #144]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027a8:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	491c      	ldr	r1, [pc, #112]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	4915      	ldr	r1, [pc, #84]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	490d      	ldr	r1, [pc, #52]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280e:	4906      	ldr	r1, [pc, #24]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002810:	4313      	orrs	r3, r2
 8002812:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002820:	4b01      	ldr	r3, [pc, #4]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	e002      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002834:	490b      	ldr	r1, [pc, #44]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002836:	4313      	orrs	r3, r2
 8002838:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	4904      	ldr	r1, [pc, #16]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002854:	4313      	orrs	r3, r2
 8002856:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3748      	adds	r7, #72	; 0x48
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e040      	b.n	80028fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fd fffa 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2224      	movs	r2, #36	; 0x24
 8002894:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f82c 	bl	8002904 <UART_SetConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e022      	b.n	80028fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f9f4 	bl	8002cac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fa7b 	bl	8002df0 <UART_CheckIdleState>
 80028fa:	4603      	mov	r3, r0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4baa      	ldr	r3, [pc, #680]	; (8002bd8 <UART_SetConfig+0x2d4>)
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	6979      	ldr	r1, [r7, #20]
 8002938:	430b      	orrs	r3, r1
 800293a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	430a      	orrs	r2, r1
 8002974:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a98      	ldr	r2, [pc, #608]	; (8002bdc <UART_SetConfig+0x2d8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d121      	bne.n	80029c4 <UART_SetConfig+0xc0>
 8002980:	4b97      	ldr	r3, [pc, #604]	; (8002be0 <UART_SetConfig+0x2dc>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d817      	bhi.n	80029bc <UART_SetConfig+0xb8>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <UART_SetConfig+0x90>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029b1 	.word	0x080029b1
 800299c:	080029b7 	.word	0x080029b7
 80029a0:	080029ab 	.word	0x080029ab
 80029a4:	2301      	movs	r3, #1
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e0b2      	b.n	8002b10 <UART_SetConfig+0x20c>
 80029aa:	2302      	movs	r3, #2
 80029ac:	77fb      	strb	r3, [r7, #31]
 80029ae:	e0af      	b.n	8002b10 <UART_SetConfig+0x20c>
 80029b0:	2304      	movs	r3, #4
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	e0ac      	b.n	8002b10 <UART_SetConfig+0x20c>
 80029b6:	2308      	movs	r3, #8
 80029b8:	77fb      	strb	r3, [r7, #31]
 80029ba:	e0a9      	b.n	8002b10 <UART_SetConfig+0x20c>
 80029bc:	2310      	movs	r3, #16
 80029be:	77fb      	strb	r3, [r7, #31]
 80029c0:	bf00      	nop
 80029c2:	e0a5      	b.n	8002b10 <UART_SetConfig+0x20c>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a86      	ldr	r2, [pc, #536]	; (8002be4 <UART_SetConfig+0x2e0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d123      	bne.n	8002a16 <UART_SetConfig+0x112>
 80029ce:	4b84      	ldr	r3, [pc, #528]	; (8002be0 <UART_SetConfig+0x2dc>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029da:	d012      	beq.n	8002a02 <UART_SetConfig+0xfe>
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e0:	d802      	bhi.n	80029e8 <UART_SetConfig+0xe4>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <UART_SetConfig+0xf2>
 80029e6:	e012      	b.n	8002a0e <UART_SetConfig+0x10a>
 80029e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ec:	d00c      	beq.n	8002a08 <UART_SetConfig+0x104>
 80029ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029f2:	d003      	beq.n	80029fc <UART_SetConfig+0xf8>
 80029f4:	e00b      	b.n	8002a0e <UART_SetConfig+0x10a>
 80029f6:	2300      	movs	r3, #0
 80029f8:	77fb      	strb	r3, [r7, #31]
 80029fa:	e089      	b.n	8002b10 <UART_SetConfig+0x20c>
 80029fc:	2302      	movs	r3, #2
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	e086      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002a02:	2304      	movs	r3, #4
 8002a04:	77fb      	strb	r3, [r7, #31]
 8002a06:	e083      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002a08:	2308      	movs	r3, #8
 8002a0a:	77fb      	strb	r3, [r7, #31]
 8002a0c:	e080      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002a0e:	2310      	movs	r3, #16
 8002a10:	77fb      	strb	r3, [r7, #31]
 8002a12:	bf00      	nop
 8002a14:	e07c      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a73      	ldr	r2, [pc, #460]	; (8002be8 <UART_SetConfig+0x2e4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d123      	bne.n	8002a68 <UART_SetConfig+0x164>
 8002a20:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <UART_SetConfig+0x2dc>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a2c:	d012      	beq.n	8002a54 <UART_SetConfig+0x150>
 8002a2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a32:	d802      	bhi.n	8002a3a <UART_SetConfig+0x136>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <UART_SetConfig+0x144>
 8002a38:	e012      	b.n	8002a60 <UART_SetConfig+0x15c>
 8002a3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a3e:	d00c      	beq.n	8002a5a <UART_SetConfig+0x156>
 8002a40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a44:	d003      	beq.n	8002a4e <UART_SetConfig+0x14a>
 8002a46:	e00b      	b.n	8002a60 <UART_SetConfig+0x15c>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77fb      	strb	r3, [r7, #31]
 8002a4c:	e060      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	77fb      	strb	r3, [r7, #31]
 8002a52:	e05d      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002a54:	2304      	movs	r3, #4
 8002a56:	77fb      	strb	r3, [r7, #31]
 8002a58:	e05a      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	77fb      	strb	r3, [r7, #31]
 8002a5e:	e057      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002a60:	2310      	movs	r3, #16
 8002a62:	77fb      	strb	r3, [r7, #31]
 8002a64:	bf00      	nop
 8002a66:	e053      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5f      	ldr	r2, [pc, #380]	; (8002bec <UART_SetConfig+0x2e8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d123      	bne.n	8002aba <UART_SetConfig+0x1b6>
 8002a72:	4b5b      	ldr	r3, [pc, #364]	; (8002be0 <UART_SetConfig+0x2dc>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a7e:	d012      	beq.n	8002aa6 <UART_SetConfig+0x1a2>
 8002a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a84:	d802      	bhi.n	8002a8c <UART_SetConfig+0x188>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <UART_SetConfig+0x196>
 8002a8a:	e012      	b.n	8002ab2 <UART_SetConfig+0x1ae>
 8002a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a90:	d00c      	beq.n	8002aac <UART_SetConfig+0x1a8>
 8002a92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a96:	d003      	beq.n	8002aa0 <UART_SetConfig+0x19c>
 8002a98:	e00b      	b.n	8002ab2 <UART_SetConfig+0x1ae>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	77fb      	strb	r3, [r7, #31]
 8002a9e:	e037      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	77fb      	strb	r3, [r7, #31]
 8002aa4:	e034      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	77fb      	strb	r3, [r7, #31]
 8002aaa:	e031      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002aac:	2308      	movs	r3, #8
 8002aae:	77fb      	strb	r3, [r7, #31]
 8002ab0:	e02e      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	bf00      	nop
 8002ab8:	e02a      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a4c      	ldr	r2, [pc, #304]	; (8002bf0 <UART_SetConfig+0x2ec>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d123      	bne.n	8002b0c <UART_SetConfig+0x208>
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <UART_SetConfig+0x2dc>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad0:	d012      	beq.n	8002af8 <UART_SetConfig+0x1f4>
 8002ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad6:	d802      	bhi.n	8002ade <UART_SetConfig+0x1da>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <UART_SetConfig+0x1e8>
 8002adc:	e012      	b.n	8002b04 <UART_SetConfig+0x200>
 8002ade:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ae2:	d00c      	beq.n	8002afe <UART_SetConfig+0x1fa>
 8002ae4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ae8:	d003      	beq.n	8002af2 <UART_SetConfig+0x1ee>
 8002aea:	e00b      	b.n	8002b04 <UART_SetConfig+0x200>
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	e00e      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002af2:	2302      	movs	r3, #2
 8002af4:	77fb      	strb	r3, [r7, #31]
 8002af6:	e00b      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002af8:	2304      	movs	r3, #4
 8002afa:	77fb      	strb	r3, [r7, #31]
 8002afc:	e008      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002afe:	2308      	movs	r3, #8
 8002b00:	77fb      	strb	r3, [r7, #31]
 8002b02:	e005      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002b04:	2310      	movs	r3, #16
 8002b06:	77fb      	strb	r3, [r7, #31]
 8002b08:	bf00      	nop
 8002b0a:	e001      	b.n	8002b10 <UART_SetConfig+0x20c>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b18:	d16e      	bne.n	8002bf8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d828      	bhi.n	8002b72 <UART_SetConfig+0x26e>
 8002b20:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <UART_SetConfig+0x224>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b4d 	.word	0x08002b4d
 8002b2c:	08002b55 	.word	0x08002b55
 8002b30:	08002b5d 	.word	0x08002b5d
 8002b34:	08002b73 	.word	0x08002b73
 8002b38:	08002b63 	.word	0x08002b63
 8002b3c:	08002b73 	.word	0x08002b73
 8002b40:	08002b73 	.word	0x08002b73
 8002b44:	08002b73 	.word	0x08002b73
 8002b48:	08002b6b 	.word	0x08002b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f7ff fc2a 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8002b50:	61b8      	str	r0, [r7, #24]
        break;
 8002b52:	e013      	b.n	8002b7c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b54:	f7ff fc48 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8002b58:	61b8      	str	r0, [r7, #24]
        break;
 8002b5a:	e00f      	b.n	8002b7c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <UART_SetConfig+0x2f0>)
 8002b5e:	61bb      	str	r3, [r7, #24]
        break;
 8002b60:	e00c      	b.n	8002b7c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b62:	f7ff fba9 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002b66:	61b8      	str	r0, [r7, #24]
        break;
 8002b68:	e008      	b.n	8002b7c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b6e:	61bb      	str	r3, [r7, #24]
        break;
 8002b70:	e004      	b.n	8002b7c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	77bb      	strb	r3, [r7, #30]
        break;
 8002b7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8086 	beq.w	8002c90 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	005a      	lsls	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b0f      	cmp	r3, #15
 8002ba0:	d916      	bls.n	8002bd0 <UART_SetConfig+0x2cc>
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba8:	d212      	bcs.n	8002bd0 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f023 030f 	bic.w	r3, r3, #15
 8002bb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	89fb      	ldrh	r3, [r7, #14]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	89fa      	ldrh	r2, [r7, #14]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	e05f      	b.n	8002c90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	77bb      	strb	r3, [r7, #30]
 8002bd4:	e05c      	b.n	8002c90 <UART_SetConfig+0x38c>
 8002bd6:	bf00      	nop
 8002bd8:	efff69f3 	.word	0xefff69f3
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40004800 	.word	0x40004800
 8002bec:	40004c00 	.word	0x40004c00
 8002bf0:	40005000 	.word	0x40005000
 8002bf4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bf8:	7ffb      	ldrb	r3, [r7, #31]
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d827      	bhi.n	8002c4e <UART_SetConfig+0x34a>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <UART_SetConfig+0x300>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c29 	.word	0x08002c29
 8002c08:	08002c31 	.word	0x08002c31
 8002c0c:	08002c39 	.word	0x08002c39
 8002c10:	08002c4f 	.word	0x08002c4f
 8002c14:	08002c3f 	.word	0x08002c3f
 8002c18:	08002c4f 	.word	0x08002c4f
 8002c1c:	08002c4f 	.word	0x08002c4f
 8002c20:	08002c4f 	.word	0x08002c4f
 8002c24:	08002c47 	.word	0x08002c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c28:	f7ff fbbc 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	61b8      	str	r0, [r7, #24]
        break;
 8002c2e:	e013      	b.n	8002c58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7ff fbda 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8002c34:	61b8      	str	r0, [r7, #24]
        break;
 8002c36:	e00f      	b.n	8002c58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <UART_SetConfig+0x3a4>)
 8002c3a:	61bb      	str	r3, [r7, #24]
        break;
 8002c3c:	e00c      	b.n	8002c58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3e:	f7ff fb3b 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002c42:	61b8      	str	r0, [r7, #24]
        break;
 8002c44:	e008      	b.n	8002c58 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4a:	61bb      	str	r3, [r7, #24]
        break;
 8002c4c:	e004      	b.n	8002c58 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77bb      	strb	r3, [r7, #30]
        break;
 8002c56:	bf00      	nop
    }

    if (pclk != 0U)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d018      	beq.n	8002c90 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	085a      	lsrs	r2, r3, #1
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	441a      	add	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	d908      	bls.n	8002c8c <UART_SetConfig+0x388>
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c80:	d204      	bcs.n	8002c8c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	e001      	b.n	8002c90 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	007a1200 	.word	0x007a1200

08002cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01a      	beq.n	8002dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002daa:	d10a      	bne.n	8002dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]
  }
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e00:	f7fd ff34 	bl	8000c6c <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d10e      	bne.n	8002e32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f82d 	bl	8002e82 <UART_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e023      	b.n	8002e7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d10e      	bne.n	8002e5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f817 	bl	8002e82 <UART_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e00d      	b.n	8002e7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e92:	e05e      	b.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e9a:	d05a      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	f7fd fee6 	bl	8000c6c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11b      	bne.n	8002eea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ec0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e043      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d02c      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f06:	d124      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e00f      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d091      	beq.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
 8002f82:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002f90:	e026      	b.n	8002fe0 <aes_gen_tables+0x64>
    {
        pow[i] = x;
 8002f92:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002f96:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8002f9a:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8002f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002fa8:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8002fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8002fb0:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002fba:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002fbe:	2a00      	cmp	r2, #0
 8002fc0:	d001      	beq.n	8002fc6 <aes_gen_tables+0x4a>
 8002fc2:	221b      	movs	r2, #27
 8002fc4:	e000      	b.n	8002fc8 <aes_gen_tables+0x4c>
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	405a      	eors	r2, r3
 8002fca:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002fce:	4053      	eors	r3, r2
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8002fd6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002fe0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002fe4:	2bff      	cmp	r3, #255	; 0xff
 8002fe6:	ddd4      	ble.n	8002f92 <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002ff4:	e01b      	b.n	800302e <aes_gen_tables+0xb2>
    {
        RCON[i] = (uint32_t) x;
 8002ff6:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002ffa:	49d9      	ldr	r1, [pc, #868]	; (8003360 <aes_gen_tables+0x3e4>)
 8002ffc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME( x ) & 0xFF;
 8003004:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 800300e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003012:	2a00      	cmp	r2, #0
 8003014:	d001      	beq.n	800301a <aes_gen_tables+0x9e>
 8003016:	221b      	movs	r2, #27
 8003018:	e000      	b.n	800301c <aes_gen_tables+0xa0>
 800301a:	2200      	movs	r2, #0
 800301c:	4053      	eors	r3, r2
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8003024:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003028:	3301      	adds	r3, #1
 800302a:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800302e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003032:	2b09      	cmp	r3, #9
 8003034:	dddf      	ble.n	8002ff6 <aes_gen_tables+0x7a>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8003036:	4bcb      	ldr	r3, [pc, #812]	; (8003364 <aes_gen_tables+0x3e8>)
 8003038:	2263      	movs	r2, #99	; 0x63
 800303a:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 800303c:	4bca      	ldr	r3, [pc, #808]	; (8003368 <aes_gen_tables+0x3ec>)
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 8003044:	2301      	movs	r3, #1
 8003046:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 800304a:	e06d      	b.n	8003128 <aes_gen_tables+0x1ac>
    {
        x = pow[255 - log[i]];
 800304c:	463b      	mov	r3, r7
 800304e:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8003052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003056:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800305a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003062:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8003066:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800306a:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800306e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003072:	005a      	lsls	r2, r3, #1
 8003074:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003078:	11db      	asrs	r3, r3, #7
 800307a:	4313      	orrs	r3, r2
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8003082:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8003086:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800308a:	4053      	eors	r3, r2
 800308c:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8003090:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003094:	005a      	lsls	r2, r3, #1
 8003096:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800309a:	11db      	asrs	r3, r3, #7
 800309c:	4313      	orrs	r3, r2
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80030a4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80030a8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030ac:	4053      	eors	r3, r2
 80030ae:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80030b2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030b6:	005a      	lsls	r2, r3, #1
 80030b8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030bc:	11db      	asrs	r3, r3, #7
 80030be:	4313      	orrs	r3, r2
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80030c6:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80030ca:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030ce:	4053      	eors	r3, r2
 80030d0:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 80030d4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030d8:	005a      	lsls	r2, r3, #1
 80030da:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030de:	11db      	asrs	r3, r3, #7
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        x ^= y ^ 0x63;
 80030e8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80030ec:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 80030f0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80030f4:	4053      	eors	r3, r2
 80030f6:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        FSb[i] = (unsigned char) x;
 80030fa:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80030fe:	b2d9      	uxtb	r1, r3
 8003100:	4a98      	ldr	r2, [pc, #608]	; (8003364 <aes_gen_tables+0x3e8>)
 8003102:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003106:	4413      	add	r3, r2
 8003108:	460a      	mov	r2, r1
 800310a:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 800310c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003110:	b2d9      	uxtb	r1, r3
 8003112:	4a95      	ldr	r2, [pc, #596]	; (8003368 <aes_gen_tables+0x3ec>)
 8003114:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003118:	4413      	add	r3, r2
 800311a:	460a      	mov	r2, r1
 800311c:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 800311e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003122:	3301      	adds	r3, #1
 8003124:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8003128:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800312c:	2bff      	cmp	r3, #255	; 0xff
 800312e:	dd8d      	ble.n	800304c <aes_gen_tables+0xd0>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8003130:	2300      	movs	r3, #0
 8003132:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8003136:	e106      	b.n	8003346 <aes_gen_tables+0x3ca>
    {
        x = FSb[i];
 8003138:	4a8a      	ldr	r2, [pc, #552]	; (8003364 <aes_gen_tables+0x3e8>)
 800313a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800313e:	4413      	add	r3, r2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
        y = XTIME( x ) & 0xFF;
 8003146:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8003150:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003154:	2a00      	cmp	r2, #0
 8003156:	d001      	beq.n	800315c <aes_gen_tables+0x1e0>
 8003158:	221b      	movs	r2, #27
 800315a:	e000      	b.n	800315e <aes_gen_tables+0x1e2>
 800315c:	2200      	movs	r2, #0
 800315e:	4053      	eors	r3, r2
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
        z =  ( y ^ x ) & 0xFF;
 8003166:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800316a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800316e:	4053      	eors	r3, r2
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8003176:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800317a:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 800317c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8003180:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 8003182:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003186:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8003188:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 800318a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 800318e:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 8003190:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 8003192:	4976      	ldr	r1, [pc, #472]	; (800336c <aes_gen_tables+0x3f0>)
 8003194:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 800319c:	4a73      	ldr	r2, [pc, #460]	; (800336c <aes_gen_tables+0x3f0>)
 800319e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80031a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a6:	ea4f 6233 	mov.w	r2, r3, ror #24
 80031aa:	4971      	ldr	r1, [pc, #452]	; (8003370 <aes_gen_tables+0x3f4>)
 80031ac:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80031b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80031b4:	4a6e      	ldr	r2, [pc, #440]	; (8003370 <aes_gen_tables+0x3f4>)
 80031b6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	ea4f 6233 	mov.w	r2, r3, ror #24
 80031c2:	496c      	ldr	r1, [pc, #432]	; (8003374 <aes_gen_tables+0x3f8>)
 80031c4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80031c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 80031cc:	4a69      	ldr	r2, [pc, #420]	; (8003374 <aes_gen_tables+0x3f8>)
 80031ce:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80031d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d6:	ea4f 6233 	mov.w	r2, r3, ror #24
 80031da:	4967      	ldr	r1, [pc, #412]	; (8003378 <aes_gen_tables+0x3fc>)
 80031dc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80031e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 80031e4:	4a60      	ldr	r2, [pc, #384]	; (8003368 <aes_gen_tables+0x3ec>)
 80031e6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80031f2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d018      	beq.n	800322c <aes_gen_tables+0x2b0>
 80031fa:	463b      	mov	r3, r7
 80031fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fe:	463b      	mov	r3, r7
 8003200:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8003204:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003208:	441a      	add	r2, r3
 800320a:	4b5c      	ldr	r3, [pc, #368]	; (800337c <aes_gen_tables+0x400>)
 800320c:	fb83 1302 	smull	r1, r3, r3, r2
 8003210:	4413      	add	r3, r2
 8003212:	11d9      	asrs	r1, r3, #7
 8003214:	17d3      	asrs	r3, r2, #31
 8003216:	1ac9      	subs	r1, r1, r3
 8003218:	460b      	mov	r3, r1
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	1a5b      	subs	r3, r3, r1
 800321e:	1ad1      	subs	r1, r2, r3
 8003220:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003228:	4618      	mov	r0, r3
 800322a:	e000      	b.n	800322e <aes_gen_tables+0x2b2>
 800322c:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800322e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003232:	2b00      	cmp	r3, #0
 8003234:	d018      	beq.n	8003268 <aes_gen_tables+0x2ec>
 8003236:	463b      	mov	r3, r7
 8003238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800323a:	463b      	mov	r3, r7
 800323c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8003240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003244:	441a      	add	r2, r3
 8003246:	4b4d      	ldr	r3, [pc, #308]	; (800337c <aes_gen_tables+0x400>)
 8003248:	fb83 1302 	smull	r1, r3, r3, r2
 800324c:	4413      	add	r3, r2
 800324e:	11d9      	asrs	r1, r3, #7
 8003250:	17d3      	asrs	r3, r2, #31
 8003252:	1ac9      	subs	r1, r1, r3
 8003254:	460b      	mov	r3, r1
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	1a5b      	subs	r3, r3, r1
 800325a:	1ad1      	subs	r1, r2, r3
 800325c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003264:	021b      	lsls	r3, r3, #8
 8003266:	e000      	b.n	800326a <aes_gen_tables+0x2ee>
 8003268:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800326a:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800326c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8003270:	2b00      	cmp	r3, #0
 8003272:	d018      	beq.n	80032a6 <aes_gen_tables+0x32a>
 8003274:	463b      	mov	r3, r7
 8003276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003278:	463b      	mov	r3, r7
 800327a:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800327e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003282:	441a      	add	r2, r3
 8003284:	4b3d      	ldr	r3, [pc, #244]	; (800337c <aes_gen_tables+0x400>)
 8003286:	fb83 1302 	smull	r1, r3, r3, r2
 800328a:	4413      	add	r3, r2
 800328c:	11d9      	asrs	r1, r3, #7
 800328e:	17d3      	asrs	r3, r2, #31
 8003290:	1ac9      	subs	r1, r1, r3
 8003292:	460b      	mov	r3, r1
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	1a5b      	subs	r3, r3, r1
 8003298:	1ad1      	subs	r1, r2, r3
 800329a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800329e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	e000      	b.n	80032a8 <aes_gen_tables+0x32c>
 80032a6:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80032a8:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80032aa:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <aes_gen_tables+0x368>
 80032b2:	463b      	mov	r3, r7
 80032b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b6:	463b      	mov	r3, r7
 80032b8:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 80032bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032c0:	441a      	add	r2, r3
 80032c2:	4b2e      	ldr	r3, [pc, #184]	; (800337c <aes_gen_tables+0x400>)
 80032c4:	fb83 1302 	smull	r1, r3, r3, r2
 80032c8:	4413      	add	r3, r2
 80032ca:	11d9      	asrs	r1, r3, #7
 80032cc:	17d3      	asrs	r3, r2, #31
 80032ce:	1ac9      	subs	r1, r1, r3
 80032d0:	460b      	mov	r3, r1
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	1a5b      	subs	r3, r3, r1
 80032d6:	1ad1      	subs	r1, r2, r3
 80032d8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80032dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032e0:	061b      	lsls	r3, r3, #24
 80032e2:	e000      	b.n	80032e6 <aes_gen_tables+0x36a>
 80032e4:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80032e6:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80032ea:	4925      	ldr	r1, [pc, #148]	; (8003380 <aes_gen_tables+0x404>)
 80032ec:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80032f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 80032f4:	4a22      	ldr	r2, [pc, #136]	; (8003380 <aes_gen_tables+0x404>)
 80032f6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80032fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fe:	ea4f 6233 	mov.w	r2, r3, ror #24
 8003302:	4920      	ldr	r1, [pc, #128]	; (8003384 <aes_gen_tables+0x408>)
 8003304:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <aes_gen_tables+0x408>)
 800330e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003316:	ea4f 6233 	mov.w	r2, r3, ror #24
 800331a:	491b      	ldr	r1, [pc, #108]	; (8003388 <aes_gen_tables+0x40c>)
 800331c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8003324:	4a18      	ldr	r2, [pc, #96]	; (8003388 <aes_gen_tables+0x40c>)
 8003326:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800332a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332e:	ea4f 6233 	mov.w	r2, r3, ror #24
 8003332:	4916      	ldr	r1, [pc, #88]	; (800338c <aes_gen_tables+0x410>)
 8003334:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 800333c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8003340:	3301      	adds	r3, #1
 8003342:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8003346:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 800334a:	2bff      	cmp	r3, #255	; 0xff
 800334c:	f77f aef4 	ble.w	8003138 <aes_gen_tables+0x1bc>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8003350:	bf00      	nop
 8003352:	f607 0714 	addw	r7, r7, #2068	; 0x814
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	2000231c 	.word	0x2000231c
 8003364:	2000011c 	.word	0x2000011c
 8003368:	2000121c 	.word	0x2000121c
 800336c:	2000021c 	.word	0x2000021c
 8003370:	2000061c 	.word	0x2000061c
 8003374:	20000a1c 	.word	0x20000a1c
 8003378:	20000e1c 	.word	0x20000e1c
 800337c:	80808081 	.word	0x80808081
 8003380:	2000131c 	.word	0x2000131c
 8003384:	2000171c 	.word	0x2000171c
 8003388:	20001b1c 	.word	0x20001b1c
 800338c:	20001f1c 	.word	0x20001f1c

08003390 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8003398:	f44f 728c 	mov.w	r2, #280	; 0x118
 800339c:	2100      	movs	r1, #0
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f011 fedf 	bl	8015162 <memset>
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 80033ba:	f44f 718c 	mov.w	r1, #280	; 0x118
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f00a ff96 	bl	800e2f0 <mbedtls_platform_zeroize>
 80033c4:	e000      	b.n	80033c8 <mbedtls_aes_free+0x1c>
        return;
 80033c6:	bf00      	nop
}
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <mbedtls_aes_xts_init>:

#if defined(MBEDTLS_CIPHER_MODE_XTS)
void mbedtls_aes_xts_init( mbedtls_aes_xts_context *ctx )
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    mbedtls_aes_init( &ctx->crypt );
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ffd9 	bl	8003390 <mbedtls_aes_init>
    mbedtls_aes_init( &ctx->tweak );
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ffd3 	bl	8003390 <mbedtls_aes_init>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <mbedtls_aes_xts_free>:

void mbedtls_aes_xts_free( mbedtls_aes_xts_context *ctx )
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <mbedtls_aes_xts_free+0x24>
        return;

    mbedtls_aes_free( &ctx->crypt );
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff ffd2 	bl	80033ac <mbedtls_aes_free>
    mbedtls_aes_free( &ctx->tweak );
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff ffcc 	bl	80033ac <mbedtls_aes_free>
 8003414:	e000      	b.n	8003418 <mbedtls_aes_xts_free+0x26>
        return;
 8003416:	bf00      	nop
}
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2bc0      	cmp	r3, #192	; 0xc0
 8003430:	d008      	beq.n	8003444 <mbedtls_aes_setkey_enc+0x24>
 8003432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003436:	d009      	beq.n	800344c <mbedtls_aes_setkey_enc+0x2c>
 8003438:	2b80      	cmp	r3, #128	; 0x80
 800343a:	d10b      	bne.n	8003454 <mbedtls_aes_setkey_enc+0x34>
    {
        case 128: ctx->nr = 10; break;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	220a      	movs	r2, #10
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e00a      	b.n	800345a <mbedtls_aes_setkey_enc+0x3a>
        case 192: ctx->nr = 12; break;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	220c      	movs	r2, #12
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e006      	b.n	800345a <mbedtls_aes_setkey_enc+0x3a>
        case 256: ctx->nr = 14; break;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	220e      	movs	r2, #14
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e002      	b.n	800345a <mbedtls_aes_setkey_enc+0x3a>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8003454:	f06f 031f 	mvn.w	r3, #31
 8003458:	e1b0      	b.n	80037bc <mbedtls_aes_setkey_enc+0x39c>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 800345a:	4b87      	ldr	r3, [pc, #540]	; (8003678 <mbedtls_aes_setkey_enc+0x258>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <mbedtls_aes_setkey_enc+0x4c>
    {
        aes_gen_tables();
 8003462:	f7ff fd8b 	bl	8002f7c <aes_gen_tables>
        aes_init_done = 1;
 8003466:	4b84      	ldr	r3, [pc, #528]	; (8003678 <mbedtls_aes_setkey_enc+0x258>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3308      	adds	r3, #8
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
 800347c:	e027      	b.n	80034ce <mbedtls_aes_setkey_enc+0xae>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4413      	add	r3, r2
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	3301      	adds	r3, #1
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4413      	add	r3, r2
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	ea41 0203 	orr.w	r2, r1, r3
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	440b      	add	r3, r1
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	ea42 0103 	orr.w	r1, r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	3303      	adds	r3, #3
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	4413      	add	r3, r2
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	061a      	lsls	r2, r3, #24
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	6938      	ldr	r0, [r7, #16]
 80034c2:	4403      	add	r3, r0
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3301      	adds	r3, #1
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d3d2      	bcc.n	800347e <mbedtls_aes_setkey_enc+0x5e>
    }

    switch( ctx->nr )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d05c      	beq.n	800359a <mbedtls_aes_setkey_enc+0x17a>
 80034e0:	2b0e      	cmp	r3, #14
 80034e2:	f000 80c5 	beq.w	8003670 <mbedtls_aes_setkey_enc+0x250>
 80034e6:	2b0a      	cmp	r3, #10
 80034e8:	f040 8167 	bne.w	80037ba <mbedtls_aes_setkey_enc+0x39a>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e04f      	b.n	8003592 <mbedtls_aes_setkey_enc+0x172>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4961      	ldr	r1, [pc, #388]	; (800367c <mbedtls_aes_setkey_enc+0x25c>)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034fe:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	320c      	adds	r2, #12
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	0a12      	lsrs	r2, r2, #8
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	495d      	ldr	r1, [pc, #372]	; (8003680 <mbedtls_aes_setkey_enc+0x260>)
 800350c:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 800350e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	330c      	adds	r3, #12
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4959      	ldr	r1, [pc, #356]	; (8003680 <mbedtls_aes_setkey_enc+0x260>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8003520:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	330c      	adds	r3, #12
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e1b      	lsrs	r3, r3, #24
 800352a:	4955      	ldr	r1, [pc, #340]	; (8003680 <mbedtls_aes_setkey_enc+0x260>)
 800352c:	5ccb      	ldrb	r3, [r1, r3]
 800352e:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8003530:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	330c      	adds	r3, #12
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4a50      	ldr	r2, [pc, #320]	; (8003680 <mbedtls_aes_setkey_enc+0x260>)
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003546:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8003548:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	3304      	adds	r3, #4
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	3310      	adds	r3, #16
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3314      	adds	r3, #20
 800355a:	404a      	eors	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	3308      	adds	r3, #8
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	3314      	adds	r3, #20
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	3318      	adds	r3, #24
 800356e:	404a      	eors	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	330c      	adds	r3, #12
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	3318      	adds	r3, #24
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	331c      	adds	r3, #28
 8003582:	404a      	eors	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3301      	adds	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	3310      	adds	r3, #16
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b09      	cmp	r3, #9
 8003596:	d9ac      	bls.n	80034f2 <mbedtls_aes_setkey_enc+0xd2>
            }
            break;
 8003598:	e10f      	b.n	80037ba <mbedtls_aes_setkey_enc+0x39a>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	e063      	b.n	8003668 <mbedtls_aes_setkey_enc+0x248>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4935      	ldr	r1, [pc, #212]	; (800367c <mbedtls_aes_setkey_enc+0x25c>)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035ac:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	3214      	adds	r2, #20
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	0a12      	lsrs	r2, r2, #8
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	4931      	ldr	r1, [pc, #196]	; (8003680 <mbedtls_aes_setkey_enc+0x260>)
 80035ba:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 80035bc:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3314      	adds	r3, #20
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	492d      	ldr	r1, [pc, #180]	; (8003680 <mbedtls_aes_setkey_enc+0x260>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80035ce:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	3314      	adds	r3, #20
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	0e1b      	lsrs	r3, r3, #24
 80035d8:	4929      	ldr	r1, [pc, #164]	; (8003680 <mbedtls_aes_setkey_enc+0x260>)
 80035da:	5ccb      	ldrb	r3, [r1, r3]
 80035dc:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80035de:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3314      	adds	r3, #20
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	4a25      	ldr	r2, [pc, #148]	; (8003680 <mbedtls_aes_setkey_enc+0x260>)
 80035ec:	5cd3      	ldrb	r3, [r2, r3]
 80035ee:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80035f4:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 80035f6:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	3304      	adds	r3, #4
 80035fc:	6819      	ldr	r1, [r3, #0]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	3318      	adds	r3, #24
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	331c      	adds	r3, #28
 8003608:	404a      	eors	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	3308      	adds	r3, #8
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	331c      	adds	r3, #28
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3320      	adds	r3, #32
 800361c:	404a      	eors	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	330c      	adds	r3, #12
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	3320      	adds	r3, #32
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	3324      	adds	r3, #36	; 0x24
 8003630:	404a      	eors	r2, r1
 8003632:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	3310      	adds	r3, #16
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	3324      	adds	r3, #36	; 0x24
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3328      	adds	r3, #40	; 0x28
 8003644:	404a      	eors	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	3314      	adds	r3, #20
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	3328      	adds	r3, #40	; 0x28
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	332c      	adds	r3, #44	; 0x2c
 8003658:	404a      	eors	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	3318      	adds	r3, #24
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b07      	cmp	r3, #7
 800366c:	d998      	bls.n	80035a0 <mbedtls_aes_setkey_enc+0x180>
            }
            break;
 800366e:	e0a4      	b.n	80037ba <mbedtls_aes_setkey_enc+0x39a>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e09c      	b.n	80037b0 <mbedtls_aes_setkey_enc+0x390>
 8003676:	bf00      	nop
 8003678:	20002344 	.word	0x20002344
 800367c:	2000231c 	.word	0x2000231c
 8003680:	2000011c 	.word	0x2000011c
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	494e      	ldr	r1, [pc, #312]	; (80037c4 <mbedtls_aes_setkey_enc+0x3a4>)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003690:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	321c      	adds	r2, #28
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	0a12      	lsrs	r2, r2, #8
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	494a      	ldr	r1, [pc, #296]	; (80037c8 <mbedtls_aes_setkey_enc+0x3a8>)
 800369e:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 80036a0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	331c      	adds	r3, #28
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	4946      	ldr	r1, [pc, #280]	; (80037c8 <mbedtls_aes_setkey_enc+0x3a8>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80036b2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	331c      	adds	r3, #28
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0e1b      	lsrs	r3, r3, #24
 80036bc:	4942      	ldr	r1, [pc, #264]	; (80037c8 <mbedtls_aes_setkey_enc+0x3a8>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80036c2:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	331c      	adds	r3, #28
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	4a3e      	ldr	r2, [pc, #248]	; (80037c8 <mbedtls_aes_setkey_enc+0x3a8>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
 80036d2:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80036d8:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 80036da:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	3304      	adds	r3, #4
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	3320      	adds	r3, #32
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3324      	adds	r3, #36	; 0x24
 80036ec:	404a      	eors	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	3308      	adds	r3, #8
 80036f4:	6819      	ldr	r1, [r3, #0]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3324      	adds	r3, #36	; 0x24
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	3328      	adds	r3, #40	; 0x28
 8003700:	404a      	eors	r2, r1
 8003702:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	330c      	adds	r3, #12
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	3328      	adds	r3, #40	; 0x28
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	332c      	adds	r3, #44	; 0x2c
 8003714:	404a      	eors	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	3310      	adds	r3, #16
 800371c:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	322c      	adds	r2, #44	; 0x2c
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	4928      	ldr	r1, [pc, #160]	; (80037c8 <mbedtls_aes_setkey_enc+0x3a8>)
 8003728:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 800372a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	332c      	adds	r3, #44	; 0x2c
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b2db      	uxtb	r3, r3
 8003736:	4924      	ldr	r1, [pc, #144]	; (80037c8 <mbedtls_aes_setkey_enc+0x3a8>)
 8003738:	5ccb      	ldrb	r3, [r1, r3]
 800373a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800373c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	332c      	adds	r3, #44	; 0x2c
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	b2db      	uxtb	r3, r3
 8003748:	491f      	ldr	r1, [pc, #124]	; (80037c8 <mbedtls_aes_setkey_enc+0x3a8>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800374e:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	332c      	adds	r3, #44	; 0x2c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e1b      	lsrs	r3, r3, #24
 800375a:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <mbedtls_aes_setkey_enc+0x3a8>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	3330      	adds	r3, #48	; 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003764:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8003766:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3314      	adds	r3, #20
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	3330      	adds	r3, #48	; 0x30
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	3334      	adds	r3, #52	; 0x34
 8003778:	404a      	eors	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	3318      	adds	r3, #24
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	3334      	adds	r3, #52	; 0x34
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	3338      	adds	r3, #56	; 0x38
 800378c:	404a      	eors	r2, r1
 800378e:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	331c      	adds	r3, #28
 8003794:	6819      	ldr	r1, [r3, #0]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	3338      	adds	r3, #56	; 0x38
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	333c      	adds	r3, #60	; 0x3c
 80037a0:	404a      	eors	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	3320      	adds	r3, #32
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	f67f af66 	bls.w	8003684 <mbedtls_aes_setkey_enc+0x264>
            }
            break;
 80037b8:	bf00      	nop
    }

    return( 0 );
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000231c 	.word	0x2000231c
 80037c8:	2000011c 	.word	0x2000011c

080037cc <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b0d0      	sub	sp, #320	; 0x140
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	f107 030c 	add.w	r3, r7, #12
 80037d6:	6018      	str	r0, [r3, #0]
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	6019      	str	r1, [r3, #0]
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 80037e2:	f107 0314 	add.w	r3, r7, #20
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fdd2 	bl	8003390 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3308      	adds	r3, #8
 80037f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003802:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8003804:	1d3a      	adds	r2, r7, #4
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	f107 0014 	add.w	r0, r7, #20
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	f7ff fe05 	bl	8003420 <mbedtls_aes_setkey_enc>
 8003816:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 800381a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 80d3 	bne.w	80039ca <mbedtls_aes_setkey_dec+0x1fe>
        goto exit;

    ctx->nr = cty.nr;
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8003832:	f107 0314 	add.w	r3, r7, #20
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f107 0214 	add.w	r2, r7, #20
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	4413      	add	r3, r2
 8003842:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    *RK++ = *SK++;
 8003846:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800384a:	1d13      	adds	r3, r2, #4
 800384c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003850:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003854:	1d19      	adds	r1, r3, #4
 8003856:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800385e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003862:	1d13      	adds	r3, r2, #4
 8003864:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003868:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800386c:	1d19      	adds	r1, r3, #4
 800386e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003876:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800387a:	1d13      	adds	r3, r2, #4
 800387c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003880:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003884:	1d19      	adds	r1, r3, #4
 8003886:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800388e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003892:	1d13      	adds	r3, r2, #4
 8003894:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003898:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800389c:	1d19      	adds	r1, r3, #4
 800389e:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80038b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038b8:	3b20      	subs	r3, #32
 80038ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80038be:	e04f      	b.n	8003960 <mbedtls_aes_setkey_dec+0x194>
    {
        for( j = 0; j < 4; j++, SK++ )
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80038c6:	e03d      	b.n	8003944 <mbedtls_aes_setkey_dec+0x178>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80038c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	4a44      	ldr	r2, [pc, #272]	; (80039e4 <mbedtls_aes_setkey_dec+0x218>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <mbedtls_aes_setkey_dec+0x21c>)
 80038d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80038dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	493f      	ldr	r1, [pc, #252]	; (80039e4 <mbedtls_aes_setkey_dec+0x218>)
 80038e8:	5ccb      	ldrb	r3, [r1, r3]
 80038ea:	4619      	mov	r1, r3
 80038ec:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <mbedtls_aes_setkey_dec+0x220>)
 80038ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80038f2:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80038f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	4939      	ldr	r1, [pc, #228]	; (80039e4 <mbedtls_aes_setkey_dec+0x218>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
 8003902:	4619      	mov	r1, r3
 8003904:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <mbedtls_aes_setkey_dec+0x224>)
 8003906:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800390a:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 800390e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0e1b      	lsrs	r3, r3, #24
 8003916:	4a33      	ldr	r2, [pc, #204]	; (80039e4 <mbedtls_aes_setkey_dec+0x218>)
 8003918:	5cd3      	ldrb	r3, [r2, r3]
 800391a:	461a      	mov	r2, r3
 800391c:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <mbedtls_aes_setkey_dec+0x228>)
 800391e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003922:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003926:	1d18      	adds	r0, r3, #4
 8003928:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800392c:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800392e:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 8003930:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003934:	3301      	adds	r3, #1
 8003936:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800393a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800393e:	3304      	adds	r3, #4
 8003940:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003944:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003948:	2b03      	cmp	r3, #3
 800394a:	ddbd      	ble.n	80038c8 <mbedtls_aes_setkey_dec+0xfc>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800394c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003950:	3b01      	subs	r3, #1
 8003952:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003956:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800395a:	3b20      	subs	r3, #32
 800395c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003960:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003964:	2b00      	cmp	r3, #0
 8003966:	dcab      	bgt.n	80038c0 <mbedtls_aes_setkey_dec+0xf4>
        }
    }

    *RK++ = *SK++;
 8003968:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800396c:	1d13      	adds	r3, r2, #4
 800396e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003972:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003976:	1d19      	adds	r1, r3, #4
 8003978:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003980:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003984:	1d13      	adds	r3, r2, #4
 8003986:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800398a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800398e:	1d19      	adds	r1, r3, #4
 8003990:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003998:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800399c:	1d13      	adds	r3, r2, #4
 800399e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80039a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039a6:	1d19      	adds	r1, r3, #4
 80039a8:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80039ac:	6812      	ldr	r2, [r2, #0]
 80039ae:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80039b0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80039b4:	1d13      	adds	r3, r2, #4
 80039b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80039ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039be:	1d19      	adds	r1, r3, #4
 80039c0:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e000      	b.n	80039cc <mbedtls_aes_setkey_dec+0x200>
        goto exit;
 80039ca:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fceb 	bl	80033ac <mbedtls_aes_free>

    return( ret );
 80039d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 80039da:	4618      	mov	r0, r3
 80039dc:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	2000011c 	.word	0x2000011c
 80039e8:	2000131c 	.word	0x2000131c
 80039ec:	2000171c 	.word	0x2000171c
 80039f0:	20001b1c 	.word	0x20001b1c
 80039f4:	20001f1c 	.word	0x20001f1c

080039f8 <mbedtls_aes_xts_decode_keys>:
                                        unsigned int keybits,
                                        const unsigned char **key1,
                                        unsigned int *key1bits,
                                        const unsigned char **key2,
                                        unsigned int *key2bits )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
    const unsigned int half_keybits = keybits / 2;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
    const unsigned int half_keybytes = half_keybits / 8;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	08db      	lsrs	r3, r3, #3
 8003a10:	613b      	str	r3, [r7, #16]

    switch( keybits )
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a18:	d005      	beq.n	8003a26 <mbedtls_aes_xts_decode_keys+0x2e>
 8003a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1e:	d004      	beq.n	8003a2a <mbedtls_aes_xts_decode_keys+0x32>
    {
        case 256: break;
        case 512: break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8003a20:	f06f 031f 	mvn.w	r3, #31
 8003a24:	e011      	b.n	8003a4a <mbedtls_aes_xts_decode_keys+0x52>
        case 256: break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <mbedtls_aes_xts_decode_keys+0x34>
        case 512: break;
 8003a2a:	bf00      	nop
    }

    *key1bits = half_keybits;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	601a      	str	r2, [r3, #0]
    *key2bits = half_keybits;
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	601a      	str	r2, [r3, #0]
    *key1 = &key[0];
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	601a      	str	r2, [r3, #0]
    *key2 = &key[half_keybytes];
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	441a      	add	r2, r3
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	601a      	str	r2, [r3, #0]

    return 0;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <mbedtls_aes_xts_setkey_enc>:

int mbedtls_aes_xts_setkey_enc( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b08c      	sub	sp, #48	; 0x30
 8003a5a:	af02      	add	r7, sp, #8
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8003a62:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 8003a68:	f107 0118 	add.w	r1, r7, #24
 8003a6c:	f107 0220 	add.w	r2, r7, #32
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	f107 031c 	add.w	r3, r7, #28
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	68b8      	ldr	r0, [r7, #8]
 8003a82:	f7ff ffb9 	bl	80039f8 <mbedtls_aes_xts_decode_keys>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <mbedtls_aes_xts_setkey_enc+0x3c>
        return( ret );
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	e014      	b.n	8003abc <mbedtls_aes_xts_setkey_enc+0x66>

    /* Set the tweak key. Always set tweak key for the encryption mode. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003a98:	69f9      	ldr	r1, [r7, #28]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fcbf 	bl	8003420 <mbedtls_aes_setkey_enc>
 8003aa2:	6278      	str	r0, [r7, #36]	; 0x24
    if( ret != 0 )
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <mbedtls_aes_xts_setkey_enc+0x58>
        return( ret );
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	e006      	b.n	8003abc <mbedtls_aes_xts_setkey_enc+0x66>

    /* Set crypt key for encryption. */
    return mbedtls_aes_setkey_enc( &ctx->crypt, key1, key1bits );
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a39      	ldr	r1, [r7, #32]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fcb3 	bl	8003420 <mbedtls_aes_setkey_enc>
 8003aba:	4603      	mov	r3, r0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3728      	adds	r7, #40	; 0x28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <mbedtls_aes_xts_setkey_dec>:

int mbedtls_aes_xts_setkey_dec( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	; 0x30
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8003ad0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 8003ad6:	f107 0118 	add.w	r1, r7, #24
 8003ada:	f107 0220 	add.w	r2, r7, #32
 8003ade:	f107 0314 	add.w	r3, r7, #20
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	f107 031c 	add.w	r3, r7, #28
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	460b      	mov	r3, r1
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	68b8      	ldr	r0, [r7, #8]
 8003af0:	f7ff ff82 	bl	80039f8 <mbedtls_aes_xts_decode_keys>
 8003af4:	6278      	str	r0, [r7, #36]	; 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <mbedtls_aes_xts_setkey_dec+0x3c>
        return( ret );
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	e014      	b.n	8003b2a <mbedtls_aes_xts_setkey_dec+0x66>

    /* Set the tweak key. Always set tweak key for encryption. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003b06:	69f9      	ldr	r1, [r7, #28]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fc88 	bl	8003420 <mbedtls_aes_setkey_enc>
 8003b10:	6278      	str	r0, [r7, #36]	; 0x24
    if( ret != 0 )
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <mbedtls_aes_xts_setkey_dec+0x58>
        return( ret );
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	e006      	b.n	8003b2a <mbedtls_aes_xts_setkey_dec+0x66>

    /* Set crypt key for decryption. */
    return mbedtls_aes_setkey_dec( &ctx->crypt, key1, key1bits );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a39      	ldr	r1, [r7, #32]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fe52 	bl	80037cc <mbedtls_aes_setkey_dec>
 8003b28:	4603      	mov	r3, r0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3728      	adds	r7, #40	; 0x28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08e      	sub	sp, #56	; 0x38
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3302      	adds	r3, #2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3303      	adds	r3, #3
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	633a      	str	r2, [r7, #48]	; 0x30
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4053      	eors	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	3305      	adds	r3, #5
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3306      	adds	r3, #6
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	3307      	adds	r3, #7
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	1d1a      	adds	r2, r3, #4
 8003ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4053      	eors	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	3309      	adds	r3, #9
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	330a      	adds	r3, #10
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	041b      	lsls	r3, r3, #16
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	330b      	adds	r3, #11
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	061b      	lsls	r3, r3, #24
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bda:	1d1a      	adds	r2, r3, #4
 8003bdc:	633a      	str	r2, [r7, #48]	; 0x30
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4053      	eors	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	330c      	adds	r3, #12
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	330d      	adds	r3, #13
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	330e      	adds	r3, #14
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	330f      	adds	r3, #15
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	1d1a      	adds	r2, r3, #4
 8003c12:	633a      	str	r2, [r7, #48]	; 0x30
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	4053      	eors	r3, r2
 8003c1a:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	105b      	asrs	r3, r3, #1
 8003c22:	3b01      	subs	r3, #1
 8003c24:	637b      	str	r3, [r7, #52]	; 0x34
 8003c26:	e0fa      	b.n	8003e1e <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	1d1a      	adds	r2, r3, #4
 8003c2c:	633a      	str	r2, [r7, #48]	; 0x30
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	49ac      	ldr	r1, [pc, #688]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003c36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c3a:	405a      	eors	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	49aa      	ldr	r1, [pc, #680]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003c44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c48:	405a      	eors	r2, r3
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	49a7      	ldr	r1, [pc, #668]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003c52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c56:	405a      	eors	r2, r3
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	0e1b      	lsrs	r3, r3, #24
 8003c5c:	49a5      	ldr	r1, [pc, #660]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003c5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c62:	4053      	eors	r3, r2
 8003c64:	623b      	str	r3, [r7, #32]
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	1d1a      	adds	r2, r3, #4
 8003c6a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	499d      	ldr	r1, [pc, #628]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003c74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c78:	405a      	eors	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	499a      	ldr	r1, [pc, #616]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003c82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c86:	405a      	eors	r2, r3
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	4998      	ldr	r1, [pc, #608]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003c90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c94:	405a      	eors	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	0e1b      	lsrs	r3, r3, #24
 8003c9a:	4996      	ldr	r1, [pc, #600]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003c9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ca0:	4053      	eors	r3, r2
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	1d1a      	adds	r2, r3, #4
 8003ca8:	633a      	str	r2, [r7, #48]	; 0x30
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	498d      	ldr	r1, [pc, #564]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003cb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cb6:	405a      	eors	r2, r3
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	498b      	ldr	r1, [pc, #556]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003cc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cc4:	405a      	eors	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	0c1b      	lsrs	r3, r3, #16
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	4988      	ldr	r1, [pc, #544]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003cce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cd2:	405a      	eors	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	0e1b      	lsrs	r3, r3, #24
 8003cd8:	4986      	ldr	r1, [pc, #536]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003cda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cde:	4053      	eors	r3, r2
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce4:	1d1a      	adds	r2, r3, #4
 8003ce6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	497e      	ldr	r1, [pc, #504]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003cf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cf4:	405a      	eors	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	0a1b      	lsrs	r3, r3, #8
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	497b      	ldr	r1, [pc, #492]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003cfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d02:	405a      	eors	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	0c1b      	lsrs	r3, r3, #16
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	4979      	ldr	r1, [pc, #484]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003d0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d10:	405a      	eors	r2, r3
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	0e1b      	lsrs	r3, r3, #24
 8003d16:	4977      	ldr	r1, [pc, #476]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003d18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d1c:	4053      	eors	r3, r2
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        AES_FROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	1d1a      	adds	r2, r3, #4
 8003d24:	633a      	str	r2, [r7, #48]	; 0x30
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	496e      	ldr	r1, [pc, #440]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d32:	405a      	eors	r2, r3
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	496c      	ldr	r1, [pc, #432]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003d3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d40:	405a      	eors	r2, r3
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	4969      	ldr	r1, [pc, #420]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003d4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d4e:	405a      	eors	r2, r3
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	0e1b      	lsrs	r3, r3, #24
 8003d54:	4967      	ldr	r1, [pc, #412]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003d56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d5a:	4053      	eors	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	1d1a      	adds	r2, r3, #4
 8003d62:	633a      	str	r2, [r7, #48]	; 0x30
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	495f      	ldr	r1, [pc, #380]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003d6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d70:	405a      	eors	r2, r3
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	495c      	ldr	r1, [pc, #368]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003d7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d7e:	405a      	eors	r2, r3
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	0c1b      	lsrs	r3, r3, #16
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	495a      	ldr	r1, [pc, #360]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003d88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d8c:	405a      	eors	r2, r3
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	0e1b      	lsrs	r3, r3, #24
 8003d92:	4958      	ldr	r1, [pc, #352]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003d94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d98:	4053      	eors	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	633a      	str	r2, [r7, #48]	; 0x30
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	494f      	ldr	r1, [pc, #316]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003daa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dae:	405a      	eors	r2, r3
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	494d      	ldr	r1, [pc, #308]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003db8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dbc:	405a      	eors	r2, r3
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	494a      	ldr	r1, [pc, #296]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003dc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dca:	405a      	eors	r2, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	0e1b      	lsrs	r3, r3, #24
 8003dd0:	4948      	ldr	r1, [pc, #288]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003dd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dd6:	4053      	eors	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	633a      	str	r2, [r7, #48]	; 0x30
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4940      	ldr	r1, [pc, #256]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003de8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dec:	405a      	eors	r2, r3
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	493d      	ldr	r1, [pc, #244]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003df6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dfa:	405a      	eors	r2, r3
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	493b      	ldr	r1, [pc, #236]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e08:	405a      	eors	r2, r3
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	0e1b      	lsrs	r3, r3, #24
 8003e0e:	4939      	ldr	r1, [pc, #228]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003e10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e14:	4053      	eors	r3, r2
 8003e16:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f73f af01 	bgt.w	8003c28 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	1d1a      	adds	r2, r3, #4
 8003e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	492d      	ldr	r1, [pc, #180]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003e34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e38:	405a      	eors	r2, r3
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	0a1b      	lsrs	r3, r3, #8
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	492a      	ldr	r1, [pc, #168]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003e42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e46:	405a      	eors	r2, r3
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	0c1b      	lsrs	r3, r3, #16
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	4928      	ldr	r1, [pc, #160]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003e50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e54:	405a      	eors	r2, r3
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	0e1b      	lsrs	r3, r3, #24
 8003e5a:	4926      	ldr	r1, [pc, #152]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003e5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e60:	4053      	eors	r3, r2
 8003e62:	623b      	str	r3, [r7, #32]
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	633a      	str	r2, [r7, #48]	; 0x30
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	491d      	ldr	r1, [pc, #116]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003e72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e76:	405a      	eors	r2, r3
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	491b      	ldr	r1, [pc, #108]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003e80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e84:	405a      	eors	r2, r3
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4918      	ldr	r1, [pc, #96]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003e8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e92:	405a      	eors	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	0e1b      	lsrs	r3, r3, #24
 8003e98:	4916      	ldr	r1, [pc, #88]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003e9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e9e:	4053      	eors	r3, r2
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	490e      	ldr	r1, [pc, #56]	; (8003ee8 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003eb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eb4:	405a      	eors	r2, r3
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	490b      	ldr	r1, [pc, #44]	; (8003eec <mbedtls_internal_aes_encrypt+0x3b8>)
 8003ebe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ec2:	405a      	eors	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	4909      	ldr	r1, [pc, #36]	; (8003ef0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003ecc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ed0:	405a      	eors	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	0e1b      	lsrs	r3, r3, #24
 8003ed6:	4907      	ldr	r1, [pc, #28]	; (8003ef4 <mbedtls_internal_aes_encrypt+0x3c0>)
 8003ed8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003edc:	4053      	eors	r3, r2
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	1d1a      	adds	r2, r3, #4
 8003ee4:	e008      	b.n	8003ef8 <mbedtls_internal_aes_encrypt+0x3c4>
 8003ee6:	bf00      	nop
 8003ee8:	2000021c 	.word	0x2000021c
 8003eec:	2000061c 	.word	0x2000061c
 8003ef0:	20000a1c 	.word	0x20000a1c
 8003ef4:	20000e1c 	.word	0x20000e1c
 8003ef8:	633a      	str	r2, [r7, #48]	; 0x30
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	497b      	ldr	r1, [pc, #492]	; (80040f0 <mbedtls_internal_aes_encrypt+0x5bc>)
 8003f02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f06:	405a      	eors	r2, r3
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	4979      	ldr	r1, [pc, #484]	; (80040f4 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003f10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f14:	405a      	eors	r2, r3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	4976      	ldr	r1, [pc, #472]	; (80040f8 <mbedtls_internal_aes_encrypt+0x5c4>)
 8003f1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f22:	405a      	eors	r2, r3
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	0e1b      	lsrs	r3, r3, #24
 8003f28:	4974      	ldr	r1, [pc, #464]	; (80040fc <mbedtls_internal_aes_encrypt+0x5c8>)
 8003f2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f2e:	4053      	eors	r3, r2
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c

    t.X[0] = *RK++ ^ \
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	1d1a      	adds	r2, r3, #4
 8003f36:	633a      	str	r2, [r7, #48]	; 0x30
 8003f38:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 8003f3a:	6a3a      	ldr	r2, [r7, #32]
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	4970      	ldr	r1, [pc, #448]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003f40:	5c8a      	ldrb	r2, [r1, r2]
    t.X[0] = *RK++ ^ \
 8003f42:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	496d      	ldr	r1, [pc, #436]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 8003f50:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	4969      	ldr	r1, [pc, #420]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 8003f5e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[3] >> 24 ) & 0xFF ] << 24 );
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	0e1b      	lsrs	r3, r3, #24
 8003f64:	4966      	ldr	r1, [pc, #408]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 8003f6a:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 8003f6c:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	1d1a      	adds	r2, r3, #4
 8003f72:	633a      	str	r2, [r7, #48]	; 0x30
 8003f74:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	4961      	ldr	r1, [pc, #388]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003f7c:	5c8a      	ldrb	r2, [r1, r2]
    t.X[1] = *RK++ ^ \
 8003f7e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	495e      	ldr	r1, [pc, #376]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003f88:	5ccb      	ldrb	r3, [r1, r3]
 8003f8a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 8003f8c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	495a      	ldr	r1, [pc, #360]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 8003f9a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[0] >> 24 ) & 0xFF ] << 24 );
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	0e1b      	lsrs	r3, r3, #24
 8003fa0:	4957      	ldr	r1, [pc, #348]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 8003fa6:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8003fa8:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	1d1a      	adds	r2, r3, #4
 8003fae:	633a      	str	r2, [r7, #48]	; 0x30
 8003fb0:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8003fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	4952      	ldr	r1, [pc, #328]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003fb8:	5c8a      	ldrb	r2, [r1, r2]
    t.X[2] = *RK++ ^ \
 8003fba:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	0a1b      	lsrs	r3, r3, #8
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	494f      	ldr	r1, [pc, #316]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003fc4:	5ccb      	ldrb	r3, [r1, r3]
 8003fc6:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8003fc8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	494b      	ldr	r1, [pc, #300]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 8003fd6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[1] >> 24 ) & 0xFF ] << 24 );
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	0e1b      	lsrs	r3, r3, #24
 8003fdc:	4948      	ldr	r1, [pc, #288]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 8003fe2:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 8003fe4:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	1d1a      	adds	r2, r3, #4
 8003fea:	633a      	str	r2, [r7, #48]	; 0x30
 8003fec:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 8003fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	4943      	ldr	r1, [pc, #268]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8003ff4:	5c8a      	ldrb	r2, [r1, r2]
    t.X[3] = *RK++ ^ \
 8003ff6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	4940      	ldr	r1, [pc, #256]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 8004004:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	b2db      	uxtb	r3, r3
 800400c:	493c      	ldr	r1, [pc, #240]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 8004012:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( t.Y[2] >> 24 ) & 0xFF ] << 24 );
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	0e1b      	lsrs	r3, r3, #24
 8004018:	4939      	ldr	r1, [pc, #228]	; (8004100 <mbedtls_internal_aes_encrypt+0x5cc>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	061b      	lsls	r3, r3, #24
            ( (uint32_t) FSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 800401e:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 8004020:	61fb      	str	r3, [r7, #28]

    PUT_UINT32_LE( t.X[0], output,  0 );
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	0a1a      	lsrs	r2, r3, #8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3301      	adds	r3, #1
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	0c1a      	lsrs	r2, r3, #16
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3302      	adds	r3, #2
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	0e1a      	lsrs	r2, r3, #24
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3303      	adds	r3, #3
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[1], output,  4 );
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	0a1a      	lsrs	r2, r3, #8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3305      	adds	r3, #5
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	0c1a      	lsrs	r2, r3, #16
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3306      	adds	r3, #6
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	0e1a      	lsrs	r2, r3, #24
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3307      	adds	r3, #7
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[2], output,  8 );
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3308      	adds	r3, #8
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	0a1a      	lsrs	r2, r3, #8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3309      	adds	r3, #9
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	0c1a      	lsrs	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	330a      	adds	r3, #10
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	0e1a      	lsrs	r2, r3, #24
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	330b      	adds	r3, #11
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[3], output, 12 );
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	330c      	adds	r3, #12
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	0a1a      	lsrs	r2, r3, #8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	330d      	adds	r3, #13
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	0c1a      	lsrs	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	330e      	adds	r3, #14
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	0e1a      	lsrs	r2, r3, #24
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	330f      	adds	r3, #15
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 80040d8:	f107 0310 	add.w	r3, r7, #16
 80040dc:	2120      	movs	r1, #32
 80040de:	4618      	mov	r0, r3
 80040e0:	f00a f906 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( 0 );
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3738      	adds	r7, #56	; 0x38
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	2000021c 	.word	0x2000021c
 80040f4:	2000061c 	.word	0x2000061c
 80040f8:	20000a1c 	.word	0x20000a1c
 80040fc:	20000e1c 	.word	0x20000e1c
 8004100:	2000011c 	.word	0x2000011c

08004104 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08e      	sub	sp, #56	; 0x38
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK = ctx->rk;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	633b      	str	r3, [r7, #48]	; 0x30
    {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    GET_UINT32_LE( t.X[0], input,  0 ); t.X[0] ^= *RK++;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3301      	adds	r3, #1
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	431a      	orrs	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3302      	adds	r3, #2
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	431a      	orrs	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	3303      	adds	r3, #3
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	1d1a      	adds	r2, r3, #4
 8004140:	633a      	str	r2, [r7, #48]	; 0x30
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4053      	eors	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( t.X[1], input,  4 ); t.X[1] ^= *RK++;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	3304      	adds	r3, #4
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	3305      	adds	r3, #5
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	431a      	orrs	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3306      	adds	r3, #6
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	431a      	orrs	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	3307      	adds	r3, #7
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	1d1a      	adds	r2, r3, #4
 8004176:	633a      	str	r2, [r7, #48]	; 0x30
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	4053      	eors	r3, r2
 800417e:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( t.X[2], input,  8 ); t.X[2] ^= *RK++;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3308      	adds	r3, #8
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	3309      	adds	r3, #9
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	431a      	orrs	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	330a      	adds	r3, #10
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	431a      	orrs	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	330b      	adds	r3, #11
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	633a      	str	r2, [r7, #48]	; 0x30
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	4053      	eors	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( t.X[3], input, 12 ); t.X[3] ^= *RK++;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	330c      	adds	r3, #12
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	330d      	adds	r3, #13
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	431a      	orrs	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	330e      	adds	r3, #14
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	330f      	adds	r3, #15
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	061b      	lsls	r3, r3, #24
 80041da:	4313      	orrs	r3, r2
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	1d1a      	adds	r2, r3, #4
 80041e2:	633a      	str	r2, [r7, #48]	; 0x30
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	4053      	eors	r3, r2
 80041ea:	61fb      	str	r3, [r7, #28]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	105b      	asrs	r3, r3, #1
 80041f2:	3b01      	subs	r3, #1
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
 80041f6:	e0fa      	b.n	80043ee <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	1d1a      	adds	r2, r3, #4
 80041fc:	633a      	str	r2, [r7, #48]	; 0x30
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	49ac      	ldr	r1, [pc, #688]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004206:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800420a:	405a      	eors	r2, r3
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	b2db      	uxtb	r3, r3
 8004212:	49aa      	ldr	r1, [pc, #680]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 8004214:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004218:	405a      	eors	r2, r3
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	b2db      	uxtb	r3, r3
 8004220:	49a7      	ldr	r1, [pc, #668]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004226:	405a      	eors	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	0e1b      	lsrs	r3, r3, #24
 800422c:	49a5      	ldr	r1, [pc, #660]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 800422e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004232:	4053      	eors	r3, r2
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	1d1a      	adds	r2, r3, #4
 800423a:	633a      	str	r2, [r7, #48]	; 0x30
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	499d      	ldr	r1, [pc, #628]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004248:	405a      	eors	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	b2db      	uxtb	r3, r3
 8004250:	499a      	ldr	r1, [pc, #616]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 8004252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004256:	405a      	eors	r2, r3
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	b2db      	uxtb	r3, r3
 800425e:	4998      	ldr	r1, [pc, #608]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004264:	405a      	eors	r2, r3
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	0e1b      	lsrs	r3, r3, #24
 800426a:	4996      	ldr	r1, [pc, #600]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 800426c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004270:	4053      	eors	r3, r2
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	1d1a      	adds	r2, r3, #4
 8004278:	633a      	str	r2, [r7, #48]	; 0x30
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	498d      	ldr	r1, [pc, #564]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004286:	405a      	eors	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	b2db      	uxtb	r3, r3
 800428e:	498b      	ldr	r1, [pc, #556]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 8004290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004294:	405a      	eors	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	b2db      	uxtb	r3, r3
 800429c:	4988      	ldr	r1, [pc, #544]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 800429e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042a2:	405a      	eors	r2, r3
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	0e1b      	lsrs	r3, r3, #24
 80042a8:	4986      	ldr	r1, [pc, #536]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 80042aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042ae:	4053      	eors	r3, r2
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	1d1a      	adds	r2, r3, #4
 80042b6:	633a      	str	r2, [r7, #48]	; 0x30
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	497e      	ldr	r1, [pc, #504]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 80042c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042c4:	405a      	eors	r2, r3
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	497b      	ldr	r1, [pc, #492]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 80042ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042d2:	405a      	eors	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	4979      	ldr	r1, [pc, #484]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 80042dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042e0:	405a      	eors	r2, r3
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	0e1b      	lsrs	r3, r3, #24
 80042e6:	4977      	ldr	r1, [pc, #476]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 80042e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042ec:	4053      	eors	r3, r2
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        AES_RROUND( t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3] );
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	1d1a      	adds	r2, r3, #4
 80042f4:	633a      	str	r2, [r7, #48]	; 0x30
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	496e      	ldr	r1, [pc, #440]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 80042fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004302:	405a      	eors	r2, r3
 8004304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b2db      	uxtb	r3, r3
 800430a:	496c      	ldr	r1, [pc, #432]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 800430c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004310:	405a      	eors	r2, r3
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	0c1b      	lsrs	r3, r3, #16
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4969      	ldr	r1, [pc, #420]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 800431a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800431e:	405a      	eors	r2, r3
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	0e1b      	lsrs	r3, r3, #24
 8004324:	4967      	ldr	r1, [pc, #412]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 8004326:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800432a:	4053      	eors	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	1d1a      	adds	r2, r3, #4
 8004332:	633a      	str	r2, [r7, #48]	; 0x30
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	b2db      	uxtb	r3, r3
 800433a:	495f      	ldr	r1, [pc, #380]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 800433c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004340:	405a      	eors	r2, r3
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	b2db      	uxtb	r3, r3
 8004348:	495c      	ldr	r1, [pc, #368]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 800434a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800434e:	405a      	eors	r2, r3
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	0c1b      	lsrs	r3, r3, #16
 8004354:	b2db      	uxtb	r3, r3
 8004356:	495a      	ldr	r1, [pc, #360]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004358:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800435c:	405a      	eors	r2, r3
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	0e1b      	lsrs	r3, r3, #24
 8004362:	4958      	ldr	r1, [pc, #352]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 8004364:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004368:	4053      	eors	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	1d1a      	adds	r2, r3, #4
 8004370:	633a      	str	r2, [r7, #48]	; 0x30
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004376:	b2db      	uxtb	r3, r3
 8004378:	494f      	ldr	r1, [pc, #316]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 800437a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800437e:	405a      	eors	r2, r3
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	0a1b      	lsrs	r3, r3, #8
 8004384:	b2db      	uxtb	r3, r3
 8004386:	494d      	ldr	r1, [pc, #308]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 8004388:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800438c:	405a      	eors	r2, r3
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	b2db      	uxtb	r3, r3
 8004394:	494a      	ldr	r1, [pc, #296]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004396:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800439a:	405a      	eors	r2, r3
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	0e1b      	lsrs	r3, r3, #24
 80043a0:	4948      	ldr	r1, [pc, #288]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 80043a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043a6:	4053      	eors	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	1d1a      	adds	r2, r3, #4
 80043ae:	633a      	str	r2, [r7, #48]	; 0x30
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	4940      	ldr	r1, [pc, #256]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 80043b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043bc:	405a      	eors	r2, r3
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	0a1b      	lsrs	r3, r3, #8
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	493d      	ldr	r1, [pc, #244]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 80043c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043ca:	405a      	eors	r2, r3
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	493b      	ldr	r1, [pc, #236]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 80043d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043d8:	405a      	eors	r2, r3
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	0e1b      	lsrs	r3, r3, #24
 80043de:	4939      	ldr	r1, [pc, #228]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 80043e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043e4:	4053      	eors	r3, r2
 80043e6:	61fb      	str	r3, [r7, #28]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	3b01      	subs	r3, #1
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f73f af01 	bgt.w	80041f8 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3] );
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	1d1a      	adds	r2, r3, #4
 80043fa:	633a      	str	r2, [r7, #48]	; 0x30
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	492d      	ldr	r1, [pc, #180]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004404:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004408:	405a      	eors	r2, r3
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	b2db      	uxtb	r3, r3
 8004410:	492a      	ldr	r1, [pc, #168]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 8004412:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004416:	405a      	eors	r2, r3
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	b2db      	uxtb	r3, r3
 800441e:	4928      	ldr	r1, [pc, #160]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004420:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004424:	405a      	eors	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	0e1b      	lsrs	r3, r3, #24
 800442a:	4926      	ldr	r1, [pc, #152]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 800442c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004430:	4053      	eors	r3, r2
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	1d1a      	adds	r2, r3, #4
 8004438:	633a      	str	r2, [r7, #48]	; 0x30
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	491d      	ldr	r1, [pc, #116]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004442:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004446:	405a      	eors	r2, r3
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	b2db      	uxtb	r3, r3
 800444e:	491b      	ldr	r1, [pc, #108]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 8004450:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004454:	405a      	eors	r2, r3
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	b2db      	uxtb	r3, r3
 800445c:	4918      	ldr	r1, [pc, #96]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 800445e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004462:	405a      	eors	r2, r3
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	0e1b      	lsrs	r3, r3, #24
 8004468:	4916      	ldr	r1, [pc, #88]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 800446a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800446e:	4053      	eors	r3, r2
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	633a      	str	r2, [r7, #48]	; 0x30
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	490e      	ldr	r1, [pc, #56]	; (80044b8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004480:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004484:	405a      	eors	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	b2db      	uxtb	r3, r3
 800448c:	490b      	ldr	r1, [pc, #44]	; (80044bc <mbedtls_internal_aes_decrypt+0x3b8>)
 800448e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004492:	405a      	eors	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	0c1b      	lsrs	r3, r3, #16
 8004498:	b2db      	uxtb	r3, r3
 800449a:	4909      	ldr	r1, [pc, #36]	; (80044c0 <mbedtls_internal_aes_decrypt+0x3bc>)
 800449c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044a0:	405a      	eors	r2, r3
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	0e1b      	lsrs	r3, r3, #24
 80044a6:	4907      	ldr	r1, [pc, #28]	; (80044c4 <mbedtls_internal_aes_decrypt+0x3c0>)
 80044a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044ac:	4053      	eors	r3, r2
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	1d1a      	adds	r2, r3, #4
 80044b4:	e008      	b.n	80044c8 <mbedtls_internal_aes_decrypt+0x3c4>
 80044b6:	bf00      	nop
 80044b8:	2000131c 	.word	0x2000131c
 80044bc:	2000171c 	.word	0x2000171c
 80044c0:	20001b1c 	.word	0x20001b1c
 80044c4:	20001f1c 	.word	0x20001f1c
 80044c8:	633a      	str	r2, [r7, #48]	; 0x30
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	497b      	ldr	r1, [pc, #492]	; (80046c0 <mbedtls_internal_aes_decrypt+0x5bc>)
 80044d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044d6:	405a      	eors	r2, r3
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	4979      	ldr	r1, [pc, #484]	; (80046c4 <mbedtls_internal_aes_decrypt+0x5c0>)
 80044e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044e4:	405a      	eors	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	4976      	ldr	r1, [pc, #472]	; (80046c8 <mbedtls_internal_aes_decrypt+0x5c4>)
 80044ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044f2:	405a      	eors	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	0e1b      	lsrs	r3, r3, #24
 80044f8:	4974      	ldr	r1, [pc, #464]	; (80046cc <mbedtls_internal_aes_decrypt+0x5c8>)
 80044fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044fe:	4053      	eors	r3, r2
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c

    t.X[0] = *RK++ ^ \
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	1d1a      	adds	r2, r3, #4
 8004506:	633a      	str	r2, [r7, #48]	; 0x30
 8004508:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 800450a:	6a3a      	ldr	r2, [r7, #32]
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	4970      	ldr	r1, [pc, #448]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 8004510:	5c8a      	ldrb	r2, [r1, r2]
    t.X[0] = *RK++ ^ \
 8004512:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	b2db      	uxtb	r3, r3
 800451a:	496d      	ldr	r1, [pc, #436]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 800451c:	5ccb      	ldrb	r3, [r1, r3]
 800451e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( t.Y[0]       ) & 0xFF ]       ) ^
 8004520:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	0c1b      	lsrs	r3, r3, #16
 8004526:	b2db      	uxtb	r3, r3
 8004528:	4969      	ldr	r1, [pc, #420]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( t.Y[3] >>  8 ) & 0xFF ] <<  8 ) ^
 800452e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[1] >> 24 ) & 0xFF ] << 24 );
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	0e1b      	lsrs	r3, r3, #24
 8004534:	4966      	ldr	r1, [pc, #408]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ ( t.Y[2] >> 16 ) & 0xFF ] << 16 ) ^
 800453a:	4053      	eors	r3, r2
    t.X[0] = *RK++ ^ \
 800453c:	613b      	str	r3, [r7, #16]

    t.X[1] = *RK++ ^ \
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	1d1a      	adds	r2, r3, #4
 8004542:	633a      	str	r2, [r7, #48]	; 0x30
 8004544:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 8004546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	4961      	ldr	r1, [pc, #388]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 800454c:	5c8a      	ldrb	r2, [r1, r2]
    t.X[1] = *RK++ ^ \
 800454e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	b2db      	uxtb	r3, r3
 8004556:	495e      	ldr	r1, [pc, #376]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 8004558:	5ccb      	ldrb	r3, [r1, r3]
 800455a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( t.Y[1]       ) & 0xFF ]       ) ^
 800455c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	b2db      	uxtb	r3, r3
 8004564:	495a      	ldr	r1, [pc, #360]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( t.Y[0] >>  8 ) & 0xFF ] <<  8 ) ^
 800456a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[2] >> 24 ) & 0xFF ] << 24 );
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	0e1b      	lsrs	r3, r3, #24
 8004570:	4957      	ldr	r1, [pc, #348]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ ( t.Y[3] >> 16 ) & 0xFF ] << 16 ) ^
 8004576:	4053      	eors	r3, r2
    t.X[1] = *RK++ ^ \
 8004578:	617b      	str	r3, [r7, #20]

    t.X[2] = *RK++ ^ \
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	1d1a      	adds	r2, r3, #4
 800457e:	633a      	str	r2, [r7, #48]	; 0x30
 8004580:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8004582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	4952      	ldr	r1, [pc, #328]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 8004588:	5c8a      	ldrb	r2, [r1, r2]
    t.X[2] = *RK++ ^ \
 800458a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	b2db      	uxtb	r3, r3
 8004592:	494f      	ldr	r1, [pc, #316]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 8004594:	5ccb      	ldrb	r3, [r1, r3]
 8004596:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( t.Y[2]       ) & 0xFF ]       ) ^
 8004598:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	494b      	ldr	r1, [pc, #300]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( t.Y[1] >>  8 ) & 0xFF ] <<  8 ) ^
 80045a6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[3] >> 24 ) & 0xFF ] << 24 );
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045aa:	0e1b      	lsrs	r3, r3, #24
 80045ac:	4948      	ldr	r1, [pc, #288]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ ( t.Y[0] >> 16 ) & 0xFF ] << 16 ) ^
 80045b2:	4053      	eors	r3, r2
    t.X[2] = *RK++ ^ \
 80045b4:	61bb      	str	r3, [r7, #24]

    t.X[3] = *RK++ ^ \
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	1d1a      	adds	r2, r3, #4
 80045ba:	633a      	str	r2, [r7, #48]	; 0x30
 80045bc:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 80045be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	4943      	ldr	r1, [pc, #268]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 80045c4:	5c8a      	ldrb	r2, [r1, r2]
    t.X[3] = *RK++ ^ \
 80045c6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	4940      	ldr	r1, [pc, #256]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 80045d0:	5ccb      	ldrb	r3, [r1, r3]
 80045d2:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( t.Y[3]       ) & 0xFF ]       ) ^
 80045d4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	493c      	ldr	r1, [pc, #240]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 80045de:	5ccb      	ldrb	r3, [r1, r3]
 80045e0:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( t.Y[2] >>  8 ) & 0xFF ] <<  8 ) ^
 80045e2:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( t.Y[0] >> 24 ) & 0xFF ] << 24 );
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	0e1b      	lsrs	r3, r3, #24
 80045e8:	4939      	ldr	r1, [pc, #228]	; (80046d0 <mbedtls_internal_aes_decrypt+0x5cc>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	061b      	lsls	r3, r3, #24
            ( (uint32_t) RSb[ ( t.Y[1] >> 16 ) & 0xFF ] << 16 ) ^
 80045ee:	4053      	eors	r3, r2
    t.X[3] = *RK++ ^ \
 80045f0:	61fb      	str	r3, [r7, #28]

    PUT_UINT32_LE( t.X[0], output,  0 );
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	0a1a      	lsrs	r2, r3, #8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3301      	adds	r3, #1
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	0c1a      	lsrs	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3302      	adds	r3, #2
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	0e1a      	lsrs	r2, r3, #24
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3303      	adds	r3, #3
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[1], output,  4 );
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	0a1a      	lsrs	r2, r3, #8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3305      	adds	r3, #5
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	0c1a      	lsrs	r2, r3, #16
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3306      	adds	r3, #6
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	0e1a      	lsrs	r2, r3, #24
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3307      	adds	r3, #7
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[2], output,  8 );
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3308      	adds	r3, #8
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	0a1a      	lsrs	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3309      	adds	r3, #9
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	0c1a      	lsrs	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	330a      	adds	r3, #10
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	0e1a      	lsrs	r2, r3, #24
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	330b      	adds	r3, #11
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( t.X[3], output, 12 );
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	330c      	adds	r3, #12
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	0a1a      	lsrs	r2, r3, #8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	330d      	adds	r3, #13
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	0c1a      	lsrs	r2, r3, #16
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	330e      	adds	r3, #14
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	0e1a      	lsrs	r2, r3, #24
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	330f      	adds	r3, #15
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]

    mbedtls_platform_zeroize( &t, sizeof( t ) );
 80046a8:	f107 0310 	add.w	r3, r7, #16
 80046ac:	2120      	movs	r1, #32
 80046ae:	4618      	mov	r0, r3
 80046b0:	f009 fe1e 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( 0 );
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3738      	adds	r7, #56	; 0x38
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	2000131c 	.word	0x2000131c
 80046c4:	2000171c 	.word	0x2000171c
 80046c8:	20001b1c 	.word	0x20001b1c
 80046cc:	20001f1c 	.word	0x20001f1c
 80046d0:	2000121c 	.word	0x2000121c

080046d4 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d106      	bne.n	80046f6 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff fa21 	bl	8003b34 <mbedtls_internal_aes_encrypt>
 80046f2:	4603      	mov	r3, r0
 80046f4:	e005      	b.n	8004702 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fd02 	bl	8004104 <mbedtls_internal_aes_decrypt>
 8004700:	4603      	mov	r3, r0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 800470a:	b5b0      	push	{r4, r5, r7, lr}
 800470c:	b08a      	sub	sp, #40	; 0x28
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 8004722:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8004726:	e06d      	b.n	8004804 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d166      	bne.n	80047fc <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 800472e:	e036      	b.n	800479e <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	f107 0414 	add.w	r4, r7, #20
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 8004740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ffc4 	bl	80046d4 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
 8004750:	e010      	b.n	8004774 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004756:	4413      	add	r3, r2
 8004758:	7819      	ldrb	r1, [r3, #0]
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	4413      	add	r3, r2
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004766:	4403      	add	r3, r0
 8004768:	404a      	eors	r2, r1
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	3301      	adds	r3, #1
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	2b0f      	cmp	r3, #15
 8004778:	ddeb      	ble.n	8004752 <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	461d      	mov	r5, r3
 800477e:	f107 0414 	add.w	r4, r7, #20
 8004782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004784:	6028      	str	r0, [r5, #0]
 8004786:	6069      	str	r1, [r5, #4]
 8004788:	60aa      	str	r2, [r5, #8]
 800478a:	60eb      	str	r3, [r5, #12]

            input  += 16;
 800478c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478e:	3310      	adds	r3, #16
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 8004792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004794:	3310      	adds	r3, #16
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3b10      	subs	r3, #16
 800479c:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1c5      	bne.n	8004730 <mbedtls_aes_crypt_cbc+0x26>
 80047a4:	e02d      	b.n	8004802 <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
 80047aa:	e010      	b.n	80047ce <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b0:	4413      	add	r3, r2
 80047b2:	7819      	ldrb	r1, [r3, #0]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	4413      	add	r3, r2
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80047c0:	4403      	add	r3, r0
 80047c2:	404a      	eors	r2, r1
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	3301      	adds	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	2b0f      	cmp	r3, #15
 80047d2:	ddeb      	ble.n	80047ac <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 80047d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff ff7a 	bl	80046d4 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 80047e0:	2210      	movs	r2, #16
 80047e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047e4:	6838      	ldr	r0, [r7, #0]
 80047e6:	f010 fc98 	bl	801511a <memcpy>

            input  += 16;
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	3310      	adds	r3, #16
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 80047f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f2:	3310      	adds	r3, #16
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3b10      	subs	r3, #16
 80047fa:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1d1      	bne.n	80047a6 <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3728      	adds	r7, #40	; 0x28
 8004808:	46bd      	mov	sp, r7
 800480a:	bdb0      	pop	{r4, r5, r7, pc}

0800480c <mbedtls_gf128mul_x_ble>:
 * for machine endianess and hence works correctly on both big and little
 * endian machines.
 */
static void mbedtls_gf128mul_x_ble( unsigned char r[16],
                                    const unsigned char x[16] )
{
 800480c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004810:	b08a      	sub	sp, #40	; 0x28
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
    uint64_t a, b, ra, rb;

    GET_UINT64_LE( a, x, 0 );
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	3307      	adds	r3, #7
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f04f 0400 	mov.w	r4, #0
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	461a      	mov	r2, r3
 8004830:	2300      	movs	r3, #0
 8004832:	4619      	mov	r1, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	3306      	adds	r3, #6
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	fa5f fa83 	uxtb.w	sl, r3
 800483e:	f04f 0b00 	mov.w	fp, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	f04f 0400 	mov.w	r4, #0
 800484a:	ea4f 440a 	mov.w	r4, sl, lsl #16
 800484e:	2300      	movs	r3, #0
 8004850:	ea41 0103 	orr.w	r1, r1, r3
 8004854:	ea42 0204 	orr.w	r2, r2, r4
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	3305      	adds	r3, #5
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	fa5f fa83 	uxtb.w	sl, r3
 8004862:	f04f 0b00 	mov.w	fp, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	f04f 0400 	mov.w	r4, #0
 800486e:	ea4f 240a 	mov.w	r4, sl, lsl #8
 8004872:	2300      	movs	r3, #0
 8004874:	ea41 0a03 	orr.w	sl, r1, r3
 8004878:	ea42 0b04 	orr.w	fp, r2, r4
 800487c:	4651      	mov	r1, sl
 800487e:	465a      	mov	r2, fp
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	3304      	adds	r3, #4
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	fa5f fa83 	uxtb.w	sl, r3
 800488a:	f04f 0b00 	mov.w	fp, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	f04f 0400 	mov.w	r4, #0
 8004896:	4654      	mov	r4, sl
 8004898:	2300      	movs	r3, #0
 800489a:	ea41 0103 	orr.w	r1, r1, r3
 800489e:	ea42 0204 	orr.w	r2, r2, r4
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	3303      	adds	r3, #3
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f04f 0400 	mov.w	r4, #0
 80048ae:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80048b2:	ea4f 6803 	mov.w	r8, r3, lsl #24
 80048b6:	ea48 0a01 	orr.w	sl, r8, r1
 80048ba:	ea49 0b02 	orr.w	fp, r9, r2
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	3302      	adds	r3, #2
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	b2d9      	uxtb	r1, r3
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	f04f 0400 	mov.w	r4, #0
 80048d2:	0414      	lsls	r4, r2, #16
 80048d4:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 80048d8:	040b      	lsls	r3, r1, #16
 80048da:	ea4a 0803 	orr.w	r8, sl, r3
 80048de:	ea4b 0904 	orr.w	r9, fp, r4
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b2d9      	uxtb	r1, r3
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	f04f 0400 	mov.w	r4, #0
 80048f6:	0214      	lsls	r4, r2, #8
 80048f8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80048fc:	020b      	lsls	r3, r1, #8
 80048fe:	ea48 0103 	orr.w	r1, r8, r3
 8004902:	ea49 0204 	orr.w	r2, r9, r4
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	fa5f f883 	uxtb.w	r8, r3
 800490e:	f04f 0900 	mov.w	r9, #0
 8004912:	ea48 0301 	orr.w	r3, r8, r1
 8004916:	ea49 0402 	orr.w	r4, r9, r2
 800491a:	e9c7 3408 	strd	r3, r4, [r7, #32]
    GET_UINT64_LE( b, x, 8 );
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	330f      	adds	r3, #15
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f04f 0400 	mov.w	r4, #0
 800492a:	f04f 0a00 	mov.w	sl, #0
 800492e:	f04f 0b00 	mov.w	fp, #0
 8004932:	ea4f 6b03 	mov.w	fp, r3, lsl #24
 8004936:	f04f 0a00 	mov.w	sl, #0
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	330e      	adds	r3, #14
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	fa5f f883 	uxtb.w	r8, r3
 8004944:	f04f 0900 	mov.w	r9, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	f04f 0400 	mov.w	r4, #0
 8004950:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8004954:	2300      	movs	r3, #0
 8004956:	ea4a 0103 	orr.w	r1, sl, r3
 800495a:	ea4b 0204 	orr.w	r2, fp, r4
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	330d      	adds	r3, #13
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	fa5f f883 	uxtb.w	r8, r3
 8004968:	f04f 0900 	mov.w	r9, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	f04f 0400 	mov.w	r4, #0
 8004974:	ea4f 2408 	mov.w	r4, r8, lsl #8
 8004978:	2300      	movs	r3, #0
 800497a:	ea41 0a03 	orr.w	sl, r1, r3
 800497e:	ea42 0b04 	orr.w	fp, r2, r4
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	fa5f f883 	uxtb.w	r8, r3
 800498c:	f04f 0900 	mov.w	r9, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	f04f 0400 	mov.w	r4, #0
 8004998:	4644      	mov	r4, r8
 800499a:	2300      	movs	r3, #0
 800499c:	ea4a 0103 	orr.w	r1, sl, r3
 80049a0:	ea4b 0204 	orr.w	r2, fp, r4
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	330b      	adds	r3, #11
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f04f 0400 	mov.w	r4, #0
 80049b0:	0a1e      	lsrs	r6, r3, #8
 80049b2:	061d      	lsls	r5, r3, #24
 80049b4:	ea45 0801 	orr.w	r8, r5, r1
 80049b8:	ea46 0902 	orr.w	r9, r6, r2
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	330a      	adds	r3, #10
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b2d9      	uxtb	r1, r3
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	f04f 0400 	mov.w	r4, #0
 80049d0:	0414      	lsls	r4, r2, #16
 80049d2:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 80049d6:	040b      	lsls	r3, r1, #16
 80049d8:	ea48 0503 	orr.w	r5, r8, r3
 80049dc:	ea49 0604 	orr.w	r6, r9, r4
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	3309      	adds	r3, #9
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	b2d9      	uxtb	r1, r3
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	f04f 0400 	mov.w	r4, #0
 80049f4:	0214      	lsls	r4, r2, #8
 80049f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80049fa:	020b      	lsls	r3, r1, #8
 80049fc:	ea45 0103 	orr.w	r1, r5, r3
 8004a00:	ea46 0204 	orr.w	r2, r6, r4
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b2dd      	uxtb	r5, r3
 8004a0c:	f04f 0600 	mov.w	r6, #0
 8004a10:	ea45 0301 	orr.w	r3, r5, r1
 8004a14:	ea46 0402 	orr.w	r4, r6, r2
 8004a18:	e9c7 3406 	strd	r3, r4, [r7, #24]

    ra = ( a << 1 )  ^ 0x0087 >> ( 8 - ( ( b >> 63 ) << 3 ) );
 8004a1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a20:	184b      	adds	r3, r1, r1
 8004a22:	eb42 0402 	adc.w	r4, r2, r2
 8004a26:	461d      	mov	r5, r3
 8004a28:	4626      	mov	r6, r4
 8004a2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	f04f 0400 	mov.w	r4, #0
 8004a36:	0fd3      	lsrs	r3, r2, #31
 8004a38:	2400      	movs	r4, #0
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	f1c3 0308 	rsb	r3, r3, #8
 8004a40:	2287      	movs	r2, #135	; 0x87
 8004a42:	fa42 f303 	asr.w	r3, r2, r3
 8004a46:	4619      	mov	r1, r3
 8004a48:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8004a4c:	ea81 0305 	eor.w	r3, r1, r5
 8004a50:	ea82 0406 	eor.w	r4, r2, r6
 8004a54:	e9c7 3404 	strd	r3, r4, [r7, #16]
    rb = ( a >> 63 ) | ( b << 1 );
 8004a58:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a5c:	f04f 0500 	mov.w	r5, #0
 8004a60:	f04f 0600 	mov.w	r6, #0
 8004a64:	0fd5      	lsrs	r5, r2, #31
 8004a66:	2600      	movs	r6, #0
 8004a68:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004a6c:	18d9      	adds	r1, r3, r3
 8004a6e:	eb44 0204 	adc.w	r2, r4, r4
 8004a72:	ea45 0301 	orr.w	r3, r5, r1
 8004a76:	ea46 0402 	orr.w	r4, r6, r2
 8004a7a:	e9c7 3402 	strd	r3, r4, [r7, #8]

    PUT_UINT64_LE( ra, r, 0 );
 8004a7e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	f04f 0400 	mov.w	r4, #0
 8004a8a:	0e13      	lsrs	r3, r2, #24
 8004a8c:	2400      	movs	r4, #0
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	3207      	adds	r2, #7
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	7013      	strb	r3, [r2, #0]
 8004a96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	f04f 0400 	mov.w	r4, #0
 8004aa2:	0c13      	lsrs	r3, r2, #16
 8004aa4:	2400      	movs	r4, #0
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	3206      	adds	r2, #6
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	7013      	strb	r3, [r2, #0]
 8004aae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	0a13      	lsrs	r3, r2, #8
 8004abc:	2400      	movs	r4, #0
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	3205      	adds	r2, #5
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	7013      	strb	r3, [r2, #0]
 8004ac6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	f04f 0400 	mov.w	r4, #0
 8004ad2:	0013      	movs	r3, r2
 8004ad4:	2400      	movs	r4, #0
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	3204      	adds	r2, #4
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	7013      	strb	r3, [r2, #0]
 8004ade:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	f04f 0400 	mov.w	r4, #0
 8004aea:	0e0b      	lsrs	r3, r1, #24
 8004aec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004af0:	0e14      	lsrs	r4, r2, #24
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	3203      	adds	r2, #3
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	7013      	strb	r3, [r2, #0]
 8004afa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	f04f 0400 	mov.w	r4, #0
 8004b06:	0c0b      	lsrs	r3, r1, #16
 8004b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b0c:	0c14      	lsrs	r4, r2, #16
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	3202      	adds	r2, #2
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	7013      	strb	r3, [r2, #0]
 8004b16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	f04f 0400 	mov.w	r4, #0
 8004b22:	0a0b      	lsrs	r3, r1, #8
 8004b24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b28:	0a14      	lsrs	r4, r2, #8
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	3201      	adds	r2, #1
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	7013      	strb	r3, [r2, #0]
 8004b32:	7c3a      	ldrb	r2, [r7, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	701a      	strb	r2, [r3, #0]
    PUT_UINT64_LE( rb, r, 8 );
 8004b38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	f04f 0400 	mov.w	r4, #0
 8004b44:	0e13      	lsrs	r3, r2, #24
 8004b46:	2400      	movs	r4, #0
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	320f      	adds	r2, #15
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	7013      	strb	r3, [r2, #0]
 8004b50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	f04f 0400 	mov.w	r4, #0
 8004b5c:	0c13      	lsrs	r3, r2, #16
 8004b5e:	2400      	movs	r4, #0
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	320e      	adds	r2, #14
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	7013      	strb	r3, [r2, #0]
 8004b68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	f04f 0400 	mov.w	r4, #0
 8004b74:	0a13      	lsrs	r3, r2, #8
 8004b76:	2400      	movs	r4, #0
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	320d      	adds	r2, #13
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	7013      	strb	r3, [r2, #0]
 8004b80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	f04f 0400 	mov.w	r4, #0
 8004b8c:	0013      	movs	r3, r2
 8004b8e:	2400      	movs	r4, #0
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	320c      	adds	r2, #12
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	7013      	strb	r3, [r2, #0]
 8004b98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	f04f 0400 	mov.w	r4, #0
 8004ba4:	0e0b      	lsrs	r3, r1, #24
 8004ba6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004baa:	0e14      	lsrs	r4, r2, #24
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	320b      	adds	r2, #11
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	7013      	strb	r3, [r2, #0]
 8004bb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	f04f 0400 	mov.w	r4, #0
 8004bc0:	0c0b      	lsrs	r3, r1, #16
 8004bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bc6:	0c14      	lsrs	r4, r2, #16
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	320a      	adds	r2, #10
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	7013      	strb	r3, [r2, #0]
 8004bd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	0a0b      	lsrs	r3, r1, #8
 8004bde:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004be2:	0a14      	lsrs	r4, r2, #8
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	3209      	adds	r2, #9
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	7013      	strb	r3, [r2, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	7a3a      	ldrb	r2, [r7, #8]
 8004bf2:	701a      	strb	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	3728      	adds	r7, #40	; 0x28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bfe:	4770      	bx	lr

08004c00 <mbedtls_aes_crypt_xts>:
                           int mode,
                           size_t length,
                           const unsigned char data_unit[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b099      	sub	sp, #100	; 0x64
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8004c0e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8004c12:	653b      	str	r3, [r7, #80]	; 0x50
    size_t blocks = length / 16;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	65fb      	str	r3, [r7, #92]	; 0x5c
    size_t leftover = length % 16;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	64fb      	str	r3, [r7, #76]	; 0x4c
    AES_VALIDATE_RET( data_unit != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    /* Data units must be at least 16 bytes long. */
    if( length < 16 )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b0f      	cmp	r3, #15
 8004c26:	d802      	bhi.n	8004c2e <mbedtls_aes_crypt_xts+0x2e>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8004c28:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8004c2c:	e0f0      	b.n	8004e10 <mbedtls_aes_crypt_xts+0x210>

    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if( length > ( 1 << 20 ) * 16 )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c34:	d902      	bls.n	8004c3c <mbedtls_aes_crypt_xts+0x3c>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8004c36:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8004c3a:	e0e9      	b.n	8004e10 <mbedtls_aes_crypt_xts+0x210>

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb( &ctx->tweak, MBEDTLS_AES_ENCRYPT,
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 708c 	add.w	r0, r3, #280	; 0x118
 8004c42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	2101      	movs	r1, #1
 8004c4a:	f7ff fd43 	bl	80046d4 <mbedtls_aes_crypt_ecb>
 8004c4e:	6538      	str	r0, [r7, #80]	; 0x50
                                 data_unit, tweak );
    if( ret != 0 )
 8004c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d068      	beq.n	8004d28 <mbedtls_aes_crypt_xts+0x128>
        return( ret );
 8004c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c58:	e0da      	b.n	8004e10 <mbedtls_aes_crypt_xts+0x210>

    while( blocks-- )
    {
        size_t i;

        if( leftover && ( mode == MBEDTLS_AES_DECRYPT ) && blocks == 0 )
 8004c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d014      	beq.n	8004c8a <mbedtls_aes_crypt_xts+0x8a>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d111      	bne.n	8004c8a <mbedtls_aes_crypt_xts+0x8a>
 8004c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10e      	bne.n	8004c8a <mbedtls_aes_crypt_xts+0x8a>
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the lefover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy( prev_tweak, tweak, sizeof( tweak ) );
 8004c6c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble( tweak, tweak );
 8004c7a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004c7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c82:	4611      	mov	r1, r2
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fdc1 	bl	800480c <mbedtls_gf128mul_x_ble>
        }

        for( i = 0; i < 16; i++ )
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c8e:	e013      	b.n	8004cb8 <mbedtls_aes_crypt_xts+0xb8>
            tmp[i] = input[i] ^ tweak[i];
 8004c90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c94:	4413      	add	r3, r2
 8004c96:	781a      	ldrb	r2, [r3, #0]
 8004c98:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004c9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c9e:	440b      	add	r3, r1
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	4053      	eors	r3, r2
 8004ca4:	b2d9      	uxtb	r1, r3
 8004ca6:	f107 0214 	add.w	r2, r7, #20
 8004caa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cac:	4413      	add	r3, r2
 8004cae:	460a      	mov	r2, r1
 8004cb0:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cba:	2b0f      	cmp	r3, #15
 8004cbc:	d9e8      	bls.n	8004c90 <mbedtls_aes_crypt_xts+0x90>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f107 0314 	add.w	r3, r7, #20
 8004cc4:	f107 0214 	add.w	r2, r7, #20
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	f7ff fd03 	bl	80046d4 <mbedtls_aes_crypt_ecb>
 8004cce:	6538      	str	r0, [r7, #80]	; 0x50
        if( ret != 0 )
 8004cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <mbedtls_aes_crypt_xts+0xda>
            return( ret );
 8004cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd8:	e09a      	b.n	8004e10 <mbedtls_aes_crypt_xts+0x210>

        for( i = 0; i < 16; i++ )
 8004cda:	2300      	movs	r3, #0
 8004cdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cde:	e012      	b.n	8004d06 <mbedtls_aes_crypt_xts+0x106>
            output[i] = tmp[i] ^ tweak[i];
 8004ce0:	f107 0214 	add.w	r2, r7, #20
 8004ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ce6:	4413      	add	r3, r2
 8004ce8:	7819      	ldrb	r1, [r3, #0]
 8004cea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf0:	4413      	add	r3, r2
 8004cf2:	781a      	ldrb	r2, [r3, #0]
 8004cf4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf8:	4403      	add	r3, r0
 8004cfa:	404a      	eors	r2, r1
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d02:	3301      	adds	r3, #1
 8004d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d08:	2b0f      	cmp	r3, #15
 8004d0a:	d9e9      	bls.n	8004ce0 <mbedtls_aes_crypt_xts+0xe0>

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble( tweak, tweak );
 8004d0c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004d10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff fd78 	bl	800480c <mbedtls_gf128mul_x_ble>

        output += 16;
 8004d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1e:	3310      	adds	r3, #16
 8004d20:	677b      	str	r3, [r7, #116]	; 0x74
        input += 16;
 8004d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d24:	3310      	adds	r3, #16
 8004d26:	673b      	str	r3, [r7, #112]	; 0x70
    while( blocks-- )
 8004d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2a:	1e5a      	subs	r2, r3, #1
 8004d2c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d193      	bne.n	8004c5a <mbedtls_aes_crypt_xts+0x5a>
    }

    if( leftover )
 8004d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d06a      	beq.n	8004e0e <mbedtls_aes_crypt_xts+0x20e>
    {
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <mbedtls_aes_crypt_xts+0x144>
 8004d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d42:	e001      	b.n	8004d48 <mbedtls_aes_crypt_xts+0x148>
 8004d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d48:	64bb      	str	r3, [r7, #72]	; 0x48

        /* We are now on the final part of the data unit, which doesn't divide
         * evenly by 16. It's time for ciphertext stealing. */
        size_t i;
        unsigned char *prev_output = output - 16;
 8004d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d4c:	3b10      	subs	r3, #16
 8004d4e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of cyphertext we won't steal. At the same time, copy the
         * remainder of the input for this final round (since the loop bounds
         * are the same). */
        for( i = 0; i < leftover; i++ )
 8004d50:	2300      	movs	r3, #0
 8004d52:	657b      	str	r3, [r7, #84]	; 0x54
 8004d54:	e01a      	b.n	8004d8c <mbedtls_aes_crypt_xts+0x18c>
        {
            output[i] = prev_output[i];
 8004d56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5a:	441a      	add	r2, r3
 8004d5c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d60:	440b      	add	r3, r1
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	701a      	strb	r2, [r3, #0]
            tmp[i] = input[i] ^ t[i];
 8004d66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6a:	4413      	add	r3, r2
 8004d6c:	781a      	ldrb	r2, [r3, #0]
 8004d6e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d72:	440b      	add	r3, r1
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	4053      	eors	r3, r2
 8004d78:	b2d9      	uxtb	r1, r3
 8004d7a:	f107 0214 	add.w	r2, r7, #20
 8004d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d80:	4413      	add	r3, r2
 8004d82:	460a      	mov	r2, r1
 8004d84:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < leftover; i++ )
 8004d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d88:	3301      	adds	r3, #1
 8004d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3e0      	bcc.n	8004d56 <mbedtls_aes_crypt_xts+0x156>
        }

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        for( ; i < 16; i++ )
 8004d94:	e012      	b.n	8004dbc <mbedtls_aes_crypt_xts+0x1bc>
            tmp[i] = prev_output[i] ^ t[i];
 8004d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d9a:	4413      	add	r3, r2
 8004d9c:	781a      	ldrb	r2, [r3, #0]
 8004d9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da2:	440b      	add	r3, r1
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	4053      	eors	r3, r2
 8004da8:	b2d9      	uxtb	r1, r3
 8004daa:	f107 0214 	add.w	r2, r7, #20
 8004dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db0:	4413      	add	r3, r2
 8004db2:	460a      	mov	r2, r1
 8004db4:	701a      	strb	r2, [r3, #0]
        for( ; i < 16; i++ )
 8004db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db8:	3301      	adds	r3, #1
 8004dba:	657b      	str	r3, [r7, #84]	; 0x54
 8004dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dbe:	2b0f      	cmp	r3, #15
 8004dc0:	d9e9      	bls.n	8004d96 <mbedtls_aes_crypt_xts+0x196>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f107 0314 	add.w	r3, r7, #20
 8004dc8:	f107 0214 	add.w	r2, r7, #20
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	f7ff fc81 	bl	80046d4 <mbedtls_aes_crypt_ecb>
 8004dd2:	6538      	str	r0, [r7, #80]	; 0x50
        if( ret != 0 )
 8004dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <mbedtls_aes_crypt_xts+0x1de>
            return ret;
 8004dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ddc:	e018      	b.n	8004e10 <mbedtls_aes_crypt_xts+0x210>

        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        for( i = 0; i < 16; i++ )
 8004dde:	2300      	movs	r3, #0
 8004de0:	657b      	str	r3, [r7, #84]	; 0x54
 8004de2:	e011      	b.n	8004e08 <mbedtls_aes_crypt_xts+0x208>
            prev_output[i] = tmp[i] ^ t[i];
 8004de4:	f107 0214 	add.w	r2, r7, #20
 8004de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dea:	4413      	add	r3, r2
 8004dec:	7819      	ldrb	r1, [r3, #0]
 8004dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df2:	4413      	add	r3, r2
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfa:	4403      	add	r3, r0
 8004dfc:	404a      	eors	r2, r1
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e04:	3301      	adds	r3, #1
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
 8004e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e0a:	2b0f      	cmp	r3, #15
 8004e0c:	d9ea      	bls.n	8004de4 <mbedtls_aes_crypt_xts+0x1e4>
    }

    return( 0 );
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3764      	adds	r7, #100	; 0x64
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd90      	pop	{r4, r7, pc}

08004e18 <mbedtls_aes_crypt_cfb128>:
                       size_t length,
                       size_t *iv_off,
                       unsigned char iv[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	617b      	str	r3, [r7, #20]

    if( n > 15 )
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	d902      	bls.n	8004e38 <mbedtls_aes_crypt_cfb128+0x20>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 8004e32:	f06f 0320 	mvn.w	r3, #32
 8004e36:	e05a      	b.n	8004eee <mbedtls_aes_crypt_cfb128+0xd6>

    if( mode == MBEDTLS_AES_DECRYPT )
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d14e      	bne.n	8004edc <mbedtls_aes_crypt_cfb128+0xc4>
    {
        while( length-- )
 8004e3e:	e026      	b.n	8004e8e <mbedtls_aes_crypt_cfb128+0x76>
        {
            if( n == 0 )
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d105      	bne.n	8004e52 <mbedtls_aes_crypt_cfb128+0x3a>
                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	6a3a      	ldr	r2, [r7, #32]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fc41 	bl	80046d4 <mbedtls_aes_crypt_ecb>

            c = *input++;
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	627a      	str	r2, [r7, #36]	; 0x24
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	613b      	str	r3, [r7, #16]
            *output++ = (unsigned char)( c ^ iv[n] );
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	b25a      	sxtb	r2, r3
 8004e60:	6a39      	ldr	r1, [r7, #32]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	440b      	add	r3, r1
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	4053      	eors	r3, r2
 8004e6c:	b259      	sxtb	r1, r3
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	62ba      	str	r2, [r7, #40]	; 0x28
 8004e74:	b2ca      	uxtb	r2, r1
 8004e76:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 8004e78:	6a3a      	ldr	r2, [r7, #32]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

            n = ( n + 1 ) & 0x0F;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3301      	adds	r3, #1
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	617b      	str	r3, [r7, #20]
        while( length-- )
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	1e5a      	subs	r2, r3, #1
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1d3      	bne.n	8004e40 <mbedtls_aes_crypt_cfb128+0x28>
 8004e98:	e025      	b.n	8004ee6 <mbedtls_aes_crypt_cfb128+0xce>
    }
    else
    {
        while( length-- )
        {
            if( n == 0 )
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <mbedtls_aes_crypt_cfb128+0x94>
                mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	6a3a      	ldr	r2, [r7, #32]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f7ff fc14 	bl	80046d4 <mbedtls_aes_crypt_ecb>

            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	7819      	ldrb	r1, [r3, #0]
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	627a      	str	r2, [r7, #36]	; 0x24
 8004eba:	781a      	ldrb	r2, [r3, #0]
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	1c58      	adds	r0, r3, #1
 8004ec0:	62b8      	str	r0, [r7, #40]	; 0x28
 8004ec2:	404a      	eors	r2, r1
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	6a39      	ldr	r1, [r7, #32]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	440a      	add	r2, r1
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	7013      	strb	r3, [r2, #0]

            n = ( n + 1 ) & 0x0F;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	617b      	str	r3, [r7, #20]
        while( length-- )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	1e5a      	subs	r2, r3, #1
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1d9      	bne.n	8004e9a <mbedtls_aes_crypt_cfb128+0x82>
        }
    }

    *iv_off = n;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	601a      	str	r2, [r3, #0]

    return( 0 );
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <mbedtls_aes_crypt_ofb>:
                           size_t length,
                           size_t *iv_off,
                           unsigned char iv[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	613b      	str	r3, [r7, #16]

    if( n > 15 )
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b0f      	cmp	r3, #15
 8004f12:	d922      	bls.n	8004f5a <mbedtls_aes_crypt_ofb+0x64>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 8004f14:	f06f 0320 	mvn.w	r3, #32
 8004f18:	e02a      	b.n	8004f70 <mbedtls_aes_crypt_ofb+0x7a>

    while( length-- )
    {
        if( n == 0 )
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <mbedtls_aes_crypt_ofb+0x3e>
        {
            ret = mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	2101      	movs	r1, #1
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff fbd4 	bl	80046d4 <mbedtls_aes_crypt_ecb>
 8004f2c:	6178      	str	r0, [r7, #20]
            if( ret != 0 )
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11b      	bne.n	8004f6c <mbedtls_aes_crypt_ofb+0x76>
                goto exit;
        }
        *output++ =  *input++ ^ iv[n];
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	623a      	str	r2, [r7, #32]
 8004f3a:	7819      	ldrb	r1, [r3, #0]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	781a      	ldrb	r2, [r3, #0]
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	1c58      	adds	r0, r3, #1
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24
 8004f4a:	404a      	eors	r2, r1
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3301      	adds	r3, #1
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	613b      	str	r3, [r7, #16]
    while( length-- )
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	60ba      	str	r2, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1da      	bne.n	8004f1a <mbedtls_aes_crypt_ofb+0x24>
    }

    *iv_off = n;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e000      	b.n	8004f6e <mbedtls_aes_crypt_ofb+0x78>
                goto exit;
 8004f6c:	bf00      	nop

exit:
    return( ret );
 8004f6e:	697b      	ldr	r3, [r7, #20]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <mbedtls_aes_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	603b      	str	r3, [r7, #0]
    AES_VALIDATE_RET( nonce_counter != NULL );
    AES_VALIDATE_RET( stream_block != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *nc_off;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	61bb      	str	r3, [r7, #24]

    if ( n > 0x0F )
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b0f      	cmp	r3, #15
 8004f90:	d939      	bls.n	8005006 <mbedtls_aes_crypt_ctr+0x8e>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 8004f92:	f06f 0320 	mvn.w	r3, #32
 8004f96:	e03f      	b.n	8005018 <mbedtls_aes_crypt_ctr+0xa0>

    while( length-- )
    {
        if( n == 0 ) {
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d11b      	bne.n	8004fd6 <mbedtls_aes_crypt_ctr+0x5e>
            mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7ff fb95 	bl	80046d4 <mbedtls_aes_crypt_ecb>

            for( i = 16; i > 0; i-- )
 8004faa:	2310      	movs	r3, #16
 8004fac:	61fb      	str	r3, [r7, #28]
 8004fae:	e00d      	b.n	8004fcc <mbedtls_aes_crypt_ctr+0x54>
                if( ++nonce_counter[i - 1] != 0 )
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	781a      	ldrb	r2, [r3, #0]
 8004fba:	3201      	adds	r2, #1
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <mbedtls_aes_crypt_ctr+0x5c>
            for( i = 16; i > 0; i-- )
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	dcee      	bgt.n	8004fb0 <mbedtls_aes_crypt_ctr+0x38>
 8004fd2:	e000      	b.n	8004fd6 <mbedtls_aes_crypt_ctr+0x5e>
                    break;
 8004fd4:	bf00      	nop
        }
        c = *input++;
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char)( c ^ stream_block[n] );
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	b25a      	sxtb	r2, r3
 8004fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	440b      	add	r3, r1
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	4053      	eors	r3, r2
 8004ff0:	b259      	sxtb	r1, r3
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ff8:	b2ca      	uxtb	r2, r1
 8004ffa:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	3301      	adds	r3, #1
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	61bb      	str	r3, [r7, #24]
    while( length-- )
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	60ba      	str	r2, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1c3      	bne.n	8004f98 <mbedtls_aes_crypt_ctr+0x20>
    }

    *nc_off = n;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	601a      	str	r2, [r3, #0]

    return( 0 );
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <mbedtls_arc4_init>:
#endif /* MBEDTLS_SELF_TEST */

#if !defined(MBEDTLS_ARC4_ALT)

void mbedtls_arc4_init( mbedtls_arc4_context *ctx )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_arc4_context ) );
 8005028:	f44f 7284 	mov.w	r2, #264	; 0x108
 800502c:	2100      	movs	r1, #0
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f010 f897 	bl	8015162 <memset>
}
 8005034:	bf00      	nop
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <mbedtls_arc4_free>:

void mbedtls_arc4_free( mbedtls_arc4_context *ctx )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <mbedtls_arc4_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_arc4_context ) );
 800504a:	f44f 7184 	mov.w	r1, #264	; 0x108
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f009 f94e 	bl	800e2f0 <mbedtls_platform_zeroize>
 8005054:	e000      	b.n	8005058 <mbedtls_arc4_free+0x1c>
        return;
 8005056:	bf00      	nop
}
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <mbedtls_arc4_setup>:
/*
 * ARC4 key schedule
 */
void mbedtls_arc4_setup( mbedtls_arc4_context *ctx, const unsigned char *key,
                 unsigned int keylen )
{
 800505e:	b480      	push	{r7}
 8005060:	b08b      	sub	sp, #44	; 0x2c
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
    int i, j, a;
    unsigned int k;
    unsigned char *m;

    ctx->x = 0;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
    ctx->y = 0;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	605a      	str	r2, [r3, #4]
    m = ctx->m;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3308      	adds	r3, #8
 800507a:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < 256; i++ )
 800507c:	2300      	movs	r3, #0
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
 8005080:	e008      	b.n	8005094 <mbedtls_arc4_setup+0x36>
        m[i] = (unsigned char) i;
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4413      	add	r3, r2
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < 256; i++ )
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	3301      	adds	r3, #1
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	2bff      	cmp	r3, #255	; 0xff
 8005098:	ddf3      	ble.n	8005082 <mbedtls_arc4_setup+0x24>

    j = k = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	2300      	movs	r3, #0
 80050a0:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 256; i++, k++ )
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	e028      	b.n	80050fa <mbedtls_arc4_setup+0x9c>
    {
        if( k >= keylen ) k = 0;
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d301      	bcc.n	80050b4 <mbedtls_arc4_setup+0x56>
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]

        a = m[i];
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4413      	add	r3, r2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	617b      	str	r3, [r7, #20]
        j = ( j + a + key[k] ) & 0xFF;
 80050be:	6a3a      	ldr	r2, [r7, #32]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	440a      	add	r2, r1
 80050ca:	7812      	ldrb	r2, [r2, #0]
 80050cc:	4413      	add	r3, r2
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	623b      	str	r3, [r7, #32]
        m[i] = m[j];
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	441a      	add	r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	69b9      	ldr	r1, [r7, #24]
 80050dc:	440b      	add	r3, r1
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	701a      	strb	r2, [r3, #0]
        m[j] = (unsigned char) a;
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4413      	add	r3, r2
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < 256; i++, k++ )
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	3301      	adds	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	2bff      	cmp	r3, #255	; 0xff
 80050fe:	ddd3      	ble.n	80050a8 <mbedtls_arc4_setup+0x4a>
    }
}
 8005100:	bf00      	nop
 8005102:	372c      	adds	r7, #44	; 0x2c
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <mbedtls_arc4_crypt>:
/*
 * ARC4 cipher function
 */
int mbedtls_arc4_crypt( mbedtls_arc4_context *ctx, size_t length, const unsigned char *input,
                unsigned char *output )
{
 800510c:	b480      	push	{r7}
 800510e:	b08b      	sub	sp, #44	; 0x2c
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
    int x, y, a, b;
    size_t i;
    unsigned char *m;

    x = ctx->x;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
    y = ctx->y;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	623b      	str	r3, [r7, #32]
    m = ctx->m;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3308      	adds	r3, #8
 800512a:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < length; i++ )
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	e035      	b.n	800519e <mbedtls_arc4_crypt+0x92>
    {
        x = ( x + 1 ) & 0xFF; a = m[x];
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	3301      	adds	r3, #1
 8005136:	b2db      	uxtb	r3, r3
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4413      	add	r3, r2
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	617b      	str	r3, [r7, #20]
        y = ( y + a ) & 0xFF; b = m[y];
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	b2db      	uxtb	r3, r3
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4413      	add	r3, r2
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	613b      	str	r3, [r7, #16]

        m[x] = (unsigned char) b;
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4413      	add	r3, r2
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
        m[y] = (unsigned char) a;
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4413      	add	r3, r2
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]

        output[i] = (unsigned char)
            ( input[i] ^ m[(unsigned char)( a + b )] );
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	7819      	ldrb	r1, [r3, #0]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	4413      	add	r3, r2
 8005182:	b2db      	uxtb	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	4413      	add	r3, r2
 800518a:	781a      	ldrb	r2, [r3, #0]
        output[i] = (unsigned char)
 800518c:	6838      	ldr	r0, [r7, #0]
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4403      	add	r3, r0
 8005192:	404a      	eors	r2, r1
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < length; i++ )
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	3301      	adds	r3, #1
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d3c5      	bcc.n	8005132 <mbedtls_arc4_crypt+0x26>
    }

    ctx->x = x;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051aa:	601a      	str	r2, [r3, #0]
    ctx->y = y;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a3a      	ldr	r2, [r7, #32]
 80051b0:	605a      	str	r2, [r3, #4]

    return( 0 );
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	372c      	adds	r7, #44	; 0x2c
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <aria_a>:
 * half of App. B.1 in [1] in terms of 4-byte operators P1, P2, P3 and P4.
 * The implementation below uses only P1 and P2 as they are sufficient.
 */
static inline void aria_a( uint32_t *a, uint32_t *b,
                           uint32_t *c, uint32_t *d )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
    uint32_t ta, tb, tc;
    ta  =  *b;                      // 4567
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	61fb      	str	r3, [r7, #28]
    *b  =  *a;                      // 0123
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	601a      	str	r2, [r3, #0]
    *a  =  ARIA_P2( ta );           // 6745
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	ea4f 4233 	mov.w	r2, r3, ror #16
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2( *d );           // efcd
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	ea4f 4333 	mov.w	r3, r3, ror #16
 80051ee:	61bb      	str	r3, [r7, #24]
    *d  =  ARIA_P1( *c );           // 98ba
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005204:	431a      	orrs	r2, r3
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	601a      	str	r2, [r3, #0]
    *c  =  ARIA_P1( tb );           // fedc
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	601a      	str	r2, [r3, #0]
    ta  ^= *d;                      // 4567+98ba
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	4053      	eors	r3, r2
 8005228:	61fb      	str	r3, [r7, #28]
    tc  =  ARIA_P2( *b );           // 2301
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8005232:	617b      	str	r3, [r7, #20]
    ta  =  ARIA_P1( ta ) ^ tc ^ *c; // 2301+5476+89ab+fedc
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005244:	431a      	orrs	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	405a      	eors	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4053      	eors	r3, r2
 8005250:	61fb      	str	r3, [r7, #28]
    tb  ^= ARIA_P2( *d );           // ba98+efcd
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	ea4f 4333 	mov.w	r3, r3, ror #16
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4053      	eors	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
    tc  ^= ARIA_P1( *a );           // 2301+7654
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	0a1b      	lsrs	r3, r3, #8
 8005266:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005274:	4313      	orrs	r3, r2
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4053      	eors	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
    *b  ^= ta ^ tb;                 // 0123+2301+5476+89ab+ba98+efcd+fedc OUT
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	69f9      	ldr	r1, [r7, #28]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	404b      	eors	r3, r1
 8005286:	405a      	eors	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	601a      	str	r2, [r3, #0]
    tb  =  ARIA_P2( tb ) ^ ta;      // 2301+5476+89ab+98ba+cdef+fedc
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	ea4f 4333 	mov.w	r3, r3, ror #16
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	4053      	eors	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
    *a  ^= ARIA_P1( tb );           // 3210+4567+6745+89ab+98ba+dcfe+efcd OUT
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80052ac:	430b      	orrs	r3, r1
 80052ae:	405a      	eors	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]
    ta  =  ARIA_P2( ta );           // 0123+7654+ab89+dcfe
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	ea4f 4333 	mov.w	r3, r3, ror #16
 80052ba:	61fb      	str	r3, [r7, #28]
    *d  ^= ARIA_P1( ta ) ^ tc;      // 1032+2301+6745+7654+98ba+ba98+cdef OUT
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	0a1b      	lsrs	r3, r3, #8
 80052c4:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80052d0:	4319      	orrs	r1, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	404b      	eors	r3, r1
 80052d6:	405a      	eors	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]
    tc  =  ARIA_P2( tc );           // 0123+5476
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	ea4f 4333 	mov.w	r3, r3, ror #16
 80052e2:	617b      	str	r3, [r7, #20]
    *c  ^= ARIA_P1( tc ) ^ ta;      // 0123+1032+4567+7654+ab89+dcfe+fedc OUT
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 11ff 	and.w	r1, r3, #16711935	; 0xff00ff
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80052f8:	4319      	orrs	r1, r3
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	404b      	eors	r3, r1
 80052fe:	405a      	eors	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	601a      	str	r2, [r3, #0]
}
 8005304:	bf00      	nop
 8005306:	3724      	adds	r7, #36	; 0x24
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <aria_sl>:
 */
static inline void aria_sl( uint32_t *a, uint32_t *b,
                            uint32_t *c, uint32_t *d,
                            const uint8_t sa[256], const uint8_t sb[256],
                            const uint8_t sc[256], const uint8_t sd[256] )
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
    *a = ( (uint32_t) sa[ *a        & 0xFF]       ) ^
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4413      	add	r3, r2
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	4619      	mov	r1, r3
         (((uint32_t) sb[(*a >>  8) & 0xFF]) <<  8) ^
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	b2db      	uxtb	r3, r3
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	021b      	lsls	r3, r3, #8
    *a = ( (uint32_t) sa[ *a        & 0xFF]       ) ^
 800533c:	ea81 0203 	eor.w	r2, r1, r3
         (((uint32_t) sc[(*a >> 16) & 0xFF]) << 16) ^
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	b2db      	uxtb	r3, r3
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	440b      	add	r3, r1
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[(*a >>  8) & 0xFF]) <<  8) ^
 8005350:	405a      	eors	r2, r3
         (((uint32_t) sd[ *a >> 24        ]) << 24);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	0e1b      	lsrs	r3, r3, #24
 8005358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800535a:	440b      	add	r3, r1
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[(*a >> 16) & 0xFF]) << 16) ^
 8005360:	405a      	eors	r2, r3
    *a = ( (uint32_t) sa[ *a        & 0xFF]       ) ^
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	601a      	str	r2, [r3, #0]
    *b = ( (uint32_t) sa[ *b        & 0xFF]       ) ^
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4413      	add	r3, r2
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	4619      	mov	r1, r3
         (((uint32_t) sb[(*b >>  8) & 0xFF]) <<  8) ^
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	b2db      	uxtb	r3, r3
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	021b      	lsls	r3, r3, #8
    *b = ( (uint32_t) sa[ *b        & 0xFF]       ) ^
 8005384:	ea81 0203 	eor.w	r2, r1, r3
         (((uint32_t) sc[(*b >> 16) & 0xFF]) << 16) ^
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	b2db      	uxtb	r3, r3
 8005390:	6a39      	ldr	r1, [r7, #32]
 8005392:	440b      	add	r3, r1
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[(*b >>  8) & 0xFF]) <<  8) ^
 8005398:	405a      	eors	r2, r3
         (((uint32_t) sd[ *b >> 24        ]) << 24);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	0e1b      	lsrs	r3, r3, #24
 80053a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053a2:	440b      	add	r3, r1
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[(*b >> 16) & 0xFF]) << 16) ^
 80053a8:	405a      	eors	r2, r3
    *b = ( (uint32_t) sa[ *b        & 0xFF]       ) ^
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	601a      	str	r2, [r3, #0]
    *c = ( (uint32_t) sa[ *c        & 0xFF]       ) ^
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	4413      	add	r3, r2
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	4619      	mov	r1, r3
         (((uint32_t) sb[(*c >>  8) & 0xFF]) <<  8) ^
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	021b      	lsls	r3, r3, #8
    *c = ( (uint32_t) sa[ *c        & 0xFF]       ) ^
 80053cc:	ea81 0203 	eor.w	r2, r1, r3
         (((uint32_t) sc[(*c >> 16) & 0xFF]) << 16) ^
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	0c1b      	lsrs	r3, r3, #16
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	6a39      	ldr	r1, [r7, #32]
 80053da:	440b      	add	r3, r1
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[(*c >>  8) & 0xFF]) <<  8) ^
 80053e0:	405a      	eors	r2, r3
         (((uint32_t) sd[ *c >> 24        ]) << 24);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	0e1b      	lsrs	r3, r3, #24
 80053e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ea:	440b      	add	r3, r1
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[(*c >> 16) & 0xFF]) << 16) ^
 80053f0:	405a      	eors	r2, r3
    *c = ( (uint32_t) sa[ *c        & 0xFF]       ) ^
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	601a      	str	r2, [r3, #0]
    *d = ( (uint32_t) sa[ *d        & 0xFF]       ) ^
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4413      	add	r3, r2
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	4619      	mov	r1, r3
         (((uint32_t) sb[(*d >>  8) & 0xFF]) <<  8) ^
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	b2db      	uxtb	r3, r3
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	021b      	lsls	r3, r3, #8
    *d = ( (uint32_t) sa[ *d        & 0xFF]       ) ^
 8005414:	ea81 0203 	eor.w	r2, r1, r3
         (((uint32_t) sc[(*d >> 16) & 0xFF]) << 16) ^
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	b2db      	uxtb	r3, r3
 8005420:	6a39      	ldr	r1, [r7, #32]
 8005422:	440b      	add	r3, r1
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	041b      	lsls	r3, r3, #16
         (((uint32_t) sb[(*d >>  8) & 0xFF]) <<  8) ^
 8005428:	405a      	eors	r2, r3
         (((uint32_t) sd[ *d >> 24        ]) << 24);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	0e1b      	lsrs	r3, r3, #24
 8005430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005432:	440b      	add	r3, r1
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	061b      	lsls	r3, r3, #24
         (((uint32_t) sc[(*d >> 16) & 0xFF]) << 16) ^
 8005438:	405a      	eors	r2, r3
    *d = ( (uint32_t) sa[ *d        & 0xFF]       ) ^
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	601a      	str	r2, [r3, #0]
}
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <aria_fo_xor>:
/*
 * Helper for key schedule: r = FO( p, k ) ^ x
 */
static void aria_fo_xor( uint32_t r[4], const uint32_t p[4],
                         const uint32_t k[4], const uint32_t x[4] )
{
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b08d      	sub	sp, #52	; 0x34
 8005450:	af04      	add	r7, sp, #16
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4053      	eors	r3, r2
 8005464:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	3304      	adds	r3, #4
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4053      	eors	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	3308      	adds	r3, #8
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3308      	adds	r3, #8
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4053      	eors	r3, r2
 8005484:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	330c      	adds	r3, #12
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	330c      	adds	r3, #12
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4053      	eors	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

    aria_sl( &a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2 );
 8005496:	f107 0410 	add.w	r4, r7, #16
 800549a:	f107 0214 	add.w	r2, r7, #20
 800549e:	f107 0118 	add.w	r1, r7, #24
 80054a2:	f107 001c 	add.w	r0, r7, #28
 80054a6:	4b1b      	ldr	r3, [pc, #108]	; (8005514 <aria_fo_xor+0xc8>)
 80054a8:	9303      	str	r3, [sp, #12]
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <aria_fo_xor+0xcc>)
 80054ac:	9302      	str	r3, [sp, #8]
 80054ae:	4b1b      	ldr	r3, [pc, #108]	; (800551c <aria_fo_xor+0xd0>)
 80054b0:	9301      	str	r3, [sp, #4]
 80054b2:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <aria_fo_xor+0xd4>)
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	4623      	mov	r3, r4
 80054b8:	f7ff ff2a 	bl	8005310 <aria_sl>
    aria_a( &a, &b, &c, &d );
 80054bc:	f107 0310 	add.w	r3, r7, #16
 80054c0:	f107 0214 	add.w	r2, r7, #20
 80054c4:	f107 0118 	add.w	r1, r7, #24
 80054c8:	f107 001c 	add.w	r0, r7, #28
 80054cc:	f7ff fe78 	bl	80051c0 <aria_a>

    r[0] = a ^ x[0];
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	405a      	eors	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	3304      	adds	r3, #4
 80054e0:	6819      	ldr	r1, [r3, #0]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3304      	adds	r3, #4
 80054e8:	404a      	eors	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3308      	adds	r3, #8
 80054f8:	404a      	eors	r2, r1
 80054fa:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	330c      	adds	r3, #12
 8005500:	6819      	ldr	r1, [r3, #0]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	330c      	adds	r3, #12
 8005508:	404a      	eors	r2, r1
 800550a:	601a      	str	r2, [r3, #0]
}
 800550c:	bf00      	nop
 800550e:	3724      	adds	r7, #36	; 0x24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd90      	pop	{r4, r7, pc}
 8005514:	08016ea0 	.word	0x08016ea0
 8005518:	08016da0 	.word	0x08016da0
 800551c:	08016ca0 	.word	0x08016ca0
 8005520:	08016ba0 	.word	0x08016ba0

08005524 <aria_fe_xor>:
/*
 * Helper for key schedule: r = FE( p, k ) ^ x
 */
static void aria_fe_xor( uint32_t r[4], const uint32_t p[4],
                         const uint32_t k[4], const uint32_t x[4] )
{
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b08d      	sub	sp, #52	; 0x34
 8005528:	af04      	add	r7, sp, #16
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
    uint32_t a, b, c, d;

    a = p[0] ^ k[0];
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4053      	eors	r3, r2
 800553c:	61fb      	str	r3, [r7, #28]
    b = p[1] ^ k[1];
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	3304      	adds	r3, #4
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4053      	eors	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
    c = p[2] ^ k[2];
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3308      	adds	r3, #8
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3308      	adds	r3, #8
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4053      	eors	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
    d = p[3] ^ k[3];
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	330c      	adds	r3, #12
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	330c      	adds	r3, #12
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4053      	eors	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

    aria_sl( &a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2 );
 800556e:	f107 0410 	add.w	r4, r7, #16
 8005572:	f107 0214 	add.w	r2, r7, #20
 8005576:	f107 0118 	add.w	r1, r7, #24
 800557a:	f107 001c 	add.w	r0, r7, #28
 800557e:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <aria_fe_xor+0xc8>)
 8005580:	9303      	str	r3, [sp, #12]
 8005582:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <aria_fe_xor+0xcc>)
 8005584:	9302      	str	r3, [sp, #8]
 8005586:	4b1b      	ldr	r3, [pc, #108]	; (80055f4 <aria_fe_xor+0xd0>)
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <aria_fe_xor+0xd4>)
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	4623      	mov	r3, r4
 8005590:	f7ff febe 	bl	8005310 <aria_sl>
    aria_a( &a, &b, &c, &d );
 8005594:	f107 0310 	add.w	r3, r7, #16
 8005598:	f107 0214 	add.w	r2, r7, #20
 800559c:	f107 0118 	add.w	r1, r7, #24
 80055a0:	f107 001c 	add.w	r0, r7, #28
 80055a4:	f7ff fe0c 	bl	80051c0 <aria_a>

    r[0] = a ^ x[0];
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	405a      	eors	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	601a      	str	r2, [r3, #0]
    r[1] = b ^ x[1];
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	3304      	adds	r3, #4
 80055b8:	6819      	ldr	r1, [r3, #0]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3304      	adds	r3, #4
 80055c0:	404a      	eors	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]
    r[2] = c ^ x[2];
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	3308      	adds	r3, #8
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	3308      	adds	r3, #8
 80055d0:	404a      	eors	r2, r1
 80055d2:	601a      	str	r2, [r3, #0]
    r[3] = d ^ x[3];
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	6819      	ldr	r1, [r3, #0]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	330c      	adds	r3, #12
 80055e0:	404a      	eors	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	3724      	adds	r7, #36	; 0x24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd90      	pop	{r4, r7, pc}
 80055ec:	08016ca0 	.word	0x08016ca0
 80055f0:	08016ba0 	.word	0x08016ba0
 80055f4:	08016ea0 	.word	0x08016ea0
 80055f8:	08016da0 	.word	0x08016da0

080055fc <aria_rot128>:
 * We chose to store bytes into 32-bit words in little-endian format (see
 * GET/PUT_UINT32_LE) so we need to reverse bytes here.
 */
static void aria_rot128( uint32_t r[4], const uint32_t a[4],
                         const uint32_t b[4], uint8_t n )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	70fb      	strb	r3, [r7, #3]
    uint8_t i, j;
    uint32_t t, u;

    const uint8_t n1 = n % 32;              // bit offset
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	75fb      	strb	r3, [r7, #23]
    const uint8_t n2 = n1 ? 32 - n1 : 0;    // reverse bit offset
 8005612:	7dfb      	ldrb	r3, [r7, #23]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <aria_rot128+0x26>
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	f1c3 0320 	rsb	r3, r3, #32
 800561e:	b2db      	uxtb	r3, r3
 8005620:	e000      	b.n	8005624 <aria_rot128+0x28>
 8005622:	2300      	movs	r3, #0
 8005624:	75bb      	strb	r3, [r7, #22]

    j = ( n / 32 ) % 4;                     // initial word offset
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	77bb      	strb	r3, [r7, #30]
    t = ARIA_P3( b[j] );                    // big endian
 8005632:	7fbb      	ldrb	r3, [r7, #30]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	4413      	add	r3, r2
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	0a1b      	lsrs	r3, r3, #8
 800563e:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8005642:	7fbb      	ldrb	r3, [r7, #30]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	440b      	add	r3, r1
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005652:	4313      	orrs	r3, r2
 8005654:	ea4f 4333 	mov.w	r3, r3, ror #16
 8005658:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < 4; i++ )
 800565a:	2300      	movs	r3, #0
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e046      	b.n	80056ee <aria_rot128+0xf2>
    {
        j = ( j + 1 ) % 4;                  // get next word, big endian
 8005660:	7fbb      	ldrb	r3, [r7, #30]
 8005662:	3301      	adds	r3, #1
 8005664:	425a      	negs	r2, r3
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	f002 0203 	and.w	r2, r2, #3
 800566e:	bf58      	it	pl
 8005670:	4253      	negpl	r3, r2
 8005672:	77bb      	strb	r3, [r7, #30]
        u = ARIA_P3( b[j] );
 8005674:	7fbb      	ldrb	r3, [r7, #30]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4413      	add	r3, r2
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	0a1b      	lsrs	r3, r3, #8
 8005680:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 8005684:	7fbb      	ldrb	r3, [r7, #30]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	440b      	add	r3, r1
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8005694:	4313      	orrs	r3, r2
 8005696:	ea4f 4333 	mov.w	r3, r3, ror #16
 800569a:	613b      	str	r3, [r7, #16]
        t <<= n1;                           // rotate
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	61bb      	str	r3, [r7, #24]
        t |= u >> n2;
 80056a6:	7dbb      	ldrb	r3, [r7, #22]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	fa22 f303 	lsr.w	r3, r2, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        t = ARIA_P3( t );                   // back to little endian
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	f003 12ff 	and.w	r2, r3, #16711935	; 0xff00ff
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80056c4:	4313      	orrs	r3, r2
 80056c6:	ea4f 4333 	mov.w	r3, r3, ror #16
 80056ca:	61bb      	str	r3, [r7, #24]
        r[i] = a[i] ^ t;                    // store
 80056cc:	7ffb      	ldrb	r3, [r7, #31]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	4413      	add	r3, r2
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	7ffb      	ldrb	r3, [r7, #31]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	404a      	eors	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
        t = u;                              // move to next word
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < 4; i++ )
 80056e8:	7ffb      	ldrb	r3, [r7, #31]
 80056ea:	3301      	adds	r3, #1
 80056ec:	77fb      	strb	r3, [r7, #31]
 80056ee:	7ffb      	ldrb	r3, [r7, #31]
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d9b5      	bls.n	8005660 <aria_rot128+0x64>
    }
}
 80056f4:	bf00      	nop
 80056f6:	3724      	adds	r7, #36	; 0x24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <mbedtls_aria_setkey_enc>:
/*
 * Set encryption key
 */
int mbedtls_aria_setkey_enc( mbedtls_aria_context *ctx,
                             const unsigned char *key, unsigned int keybits )
{
 8005700:	b5b0      	push	{r4, r5, r7, lr}
 8005702:	b0a2      	sub	sp, #136	; 0x88
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
    /* round constant masks */
    const uint32_t rc[3][4] =
 800570c:	4b94      	ldr	r3, [pc, #592]	; (8005960 <mbedtls_aria_setkey_enc+0x260>)
 800570e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005712:	461d      	mov	r5, r3
 8005714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800571a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800571c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int i;
    uint32_t w[4][4], *w2;
    ARIA_VALIDATE_RET( ctx != NULL );
    ARIA_VALIDATE_RET( key != NULL );

    if( keybits != 128 && keybits != 192 && keybits != 256 )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b80      	cmp	r3, #128	; 0x80
 8005728:	d009      	beq.n	800573e <mbedtls_aria_setkey_enc+0x3e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2bc0      	cmp	r3, #192	; 0xc0
 800572e:	d006      	beq.n	800573e <mbedtls_aria_setkey_enc+0x3e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005736:	d002      	beq.n	800573e <mbedtls_aria_setkey_enc+0x3e>
        return( MBEDTLS_ERR_ARIA_BAD_INPUT_DATA );
 8005738:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 800573c:	e180      	b.n	8005a40 <mbedtls_aria_setkey_enc+0x340>

    /* Copy key to W0 (and potential remainder to W1) */
    GET_UINT32_LE( w[0][0], key,  0 );
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	3301      	adds	r3, #1
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	431a      	orrs	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	3302      	adds	r3, #2
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	431a      	orrs	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	3303      	adds	r3, #3
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	061b      	lsls	r3, r3, #24
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( w[0][1], key,  4 );
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	3304      	adds	r3, #4
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	3305      	adds	r3, #5
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	431a      	orrs	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	3306      	adds	r3, #6
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	041b      	lsls	r3, r3, #16
 800577e:	431a      	orrs	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3307      	adds	r3, #7
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	061b      	lsls	r3, r3, #24
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( w[0][2], key,  8 );
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	3308      	adds	r3, #8
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3309      	adds	r3, #9
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	431a      	orrs	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	330a      	adds	r3, #10
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	041b      	lsls	r3, r3, #16
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	330b      	adds	r3, #11
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	061b      	lsls	r3, r3, #24
 80057b0:	4313      	orrs	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( w[0][3], key, 12 );
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	330c      	adds	r3, #12
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	330d      	adds	r3, #13
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	431a      	orrs	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	330e      	adds	r3, #14
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	431a      	orrs	r2, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	330f      	adds	r3, #15
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	061b      	lsls	r3, r3, #24
 80057d8:	4313      	orrs	r3, r2
 80057da:	61fb      	str	r3, [r7, #28]

    memset( w[1], 0, 16 );
 80057dc:	f107 0310 	add.w	r3, r7, #16
 80057e0:	3310      	adds	r3, #16
 80057e2:	2210      	movs	r2, #16
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f00f fcbb 	bl	8015162 <memset>
    if( keybits >= 192 )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2bbf      	cmp	r3, #191	; 0xbf
 80057f0:	d927      	bls.n	8005842 <mbedtls_aria_setkey_enc+0x142>
    {
        GET_UINT32_LE( w[1][0], key, 16 );  // 192 bit key
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	3310      	adds	r3, #16
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	3311      	adds	r3, #17
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	431a      	orrs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	3312      	adds	r3, #18
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	431a      	orrs	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	3313      	adds	r3, #19
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	061b      	lsls	r3, r3, #24
 8005816:	4313      	orrs	r3, r2
 8005818:	623b      	str	r3, [r7, #32]
        GET_UINT32_LE( w[1][1], key, 20 );
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	3314      	adds	r3, #20
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	3315      	adds	r3, #21
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	431a      	orrs	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3316      	adds	r3, #22
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	431a      	orrs	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	3317      	adds	r3, #23
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	4313      	orrs	r3, r2
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if( keybits == 256 )
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005848:	d127      	bne.n	800589a <mbedtls_aria_setkey_enc+0x19a>
    {
        GET_UINT32_LE( w[1][2], key, 24 );  // 256 bit key
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	3318      	adds	r3, #24
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	3319      	adds	r3, #25
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	021b      	lsls	r3, r3, #8
 800585a:	431a      	orrs	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	331a      	adds	r3, #26
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	431a      	orrs	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	331b      	adds	r3, #27
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	061b      	lsls	r3, r3, #24
 800586e:	4313      	orrs	r3, r2
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
        GET_UINT32_LE( w[1][3], key, 28 );
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	331c      	adds	r3, #28
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	331d      	adds	r3, #29
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	431a      	orrs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	331e      	adds	r3, #30
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	431a      	orrs	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	331f      	adds	r3, #31
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	4313      	orrs	r3, r2
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    i = ( keybits - 128 ) >> 6;             // index: 0, 1, 2
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3b80      	subs	r3, #128	; 0x80
 800589e:	099b      	lsrs	r3, r3, #6
 80058a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    ctx->nr = 12 + 2 * i;                   // no. rounds: 12, 14, 16
 80058a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058a8:	3306      	adds	r3, #6
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	701a      	strb	r2, [r3, #0]

    aria_fo_xor( w[1], w[0], rc[i], w[1] ); // W1 = FO(W0, CK1) ^ KR
 80058b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80058b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	441a      	add	r2, r3
 80058c0:	f107 0310 	add.w	r3, r7, #16
 80058c4:	f103 0410 	add.w	r4, r3, #16
 80058c8:	f107 0110 	add.w	r1, r7, #16
 80058cc:	f107 0310 	add.w	r3, r7, #16
 80058d0:	f103 0010 	add.w	r0, r3, #16
 80058d4:	4623      	mov	r3, r4
 80058d6:	f7ff fdb9 	bl	800544c <aria_fo_xor>
    i = i < 2 ? i + 1 : 0;
 80058da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058de:	2b01      	cmp	r3, #1
 80058e0:	dc03      	bgt.n	80058ea <mbedtls_aria_setkey_enc+0x1ea>
 80058e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058e6:	3301      	adds	r3, #1
 80058e8:	e000      	b.n	80058ec <mbedtls_aria_setkey_enc+0x1ec>
 80058ea:	2300      	movs	r3, #0
 80058ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    aria_fe_xor( w[2], w[1], rc[i], w[0] ); // W2 = FE(W1, CK2) ^ W0
 80058f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80058f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	441a      	add	r2, r3
 80058fc:	f107 0410 	add.w	r4, r7, #16
 8005900:	f107 0310 	add.w	r3, r7, #16
 8005904:	f103 0110 	add.w	r1, r3, #16
 8005908:	f107 0310 	add.w	r3, r7, #16
 800590c:	f103 0020 	add.w	r0, r3, #32
 8005910:	4623      	mov	r3, r4
 8005912:	f7ff fe07 	bl	8005524 <aria_fe_xor>
    i = i < 2 ? i + 1 : 0;
 8005916:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800591a:	2b01      	cmp	r3, #1
 800591c:	dc03      	bgt.n	8005926 <mbedtls_aria_setkey_enc+0x226>
 800591e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005922:	3301      	adds	r3, #1
 8005924:	e000      	b.n	8005928 <mbedtls_aria_setkey_enc+0x228>
 8005926:	2300      	movs	r3, #0
 8005928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    aria_fo_xor( w[3], w[2], rc[i], w[1] ); // W3 = FO(W2, CK3) ^ W1
 800592c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	441a      	add	r2, r3
 8005938:	f107 0310 	add.w	r3, r7, #16
 800593c:	f103 0410 	add.w	r4, r3, #16
 8005940:	f107 0310 	add.w	r3, r7, #16
 8005944:	f103 0120 	add.w	r1, r3, #32
 8005948:	f107 0310 	add.w	r3, r7, #16
 800594c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005950:	4623      	mov	r3, r4
 8005952:	f7ff fd7b 	bl	800544c <aria_fo_xor>

    for( i = 0; i < 4; i++ )                // create round keys
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800595c:	e059      	b.n	8005a12 <mbedtls_aria_setkey_enc+0x312>
 800595e:	bf00      	nop
 8005960:	08016508 	.word	0x08016508
    {
        w2 = w[(i + 1) & 3];
 8005964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005968:	3301      	adds	r3, #1
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	f107 0210 	add.w	r2, r7, #16
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	4413      	add	r3, r2
 8005976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        aria_rot128( ctx->rk[i     ], w[i], w2, 128 - 19 );
 800597a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	1d18      	adds	r0, r3, #4
 8005986:	f107 0210 	add.w	r2, r7, #16
 800598a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	18d1      	adds	r1, r2, r3
 8005992:	236d      	movs	r3, #109	; 0x6d
 8005994:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005998:	f7ff fe30 	bl	80055fc <aria_rot128>
        aria_rot128( ctx->rk[i +  4], w[i], w2, 128 - 31 );
 800599c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a0:	3304      	adds	r3, #4
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	1d18      	adds	r0, r3, #4
 80059aa:	f107 0210 	add.w	r2, r7, #16
 80059ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	18d1      	adds	r1, r2, r3
 80059b6:	2361      	movs	r3, #97	; 0x61
 80059b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059bc:	f7ff fe1e 	bl	80055fc <aria_rot128>
        aria_rot128( ctx->rk[i +  8], w[i], w2,       61 );
 80059c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059c4:	3308      	adds	r3, #8
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	1d18      	adds	r0, r3, #4
 80059ce:	f107 0210 	add.w	r2, r7, #16
 80059d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	18d1      	adds	r1, r2, r3
 80059da:	233d      	movs	r3, #61	; 0x3d
 80059dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059e0:	f7ff fe0c 	bl	80055fc <aria_rot128>
        aria_rot128( ctx->rk[i + 12], w[i], w2,       31 );
 80059e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059e8:	330c      	adds	r3, #12
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	1d18      	adds	r0, r3, #4
 80059f2:	f107 0210 	add.w	r2, r7, #16
 80059f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	18d1      	adds	r1, r2, r3
 80059fe:	231f      	movs	r3, #31
 8005a00:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a04:	f7ff fdfa 	bl	80055fc <aria_rot128>
    for( i = 0; i < 4; i++ )                // create round keys
 8005a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	dda4      	ble.n	8005964 <mbedtls_aria_setkey_enc+0x264>
    }
    aria_rot128( ctx->rk[16], w[0], w[1], 19 );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8005a20:	f107 0310 	add.w	r3, r7, #16
 8005a24:	f103 0210 	add.w	r2, r3, #16
 8005a28:	f107 0110 	add.w	r1, r7, #16
 8005a2c:	2313      	movs	r3, #19
 8005a2e:	f7ff fde5 	bl	80055fc <aria_rot128>

    /* w holds enough info to reconstruct the round keys */
    mbedtls_platform_zeroize( w, sizeof( w ) );
 8005a32:	f107 0310 	add.w	r3, r7, #16
 8005a36:	2140      	movs	r1, #64	; 0x40
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f008 fc59 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( 0 );
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3788      	adds	r7, #136	; 0x88
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bdb0      	pop	{r4, r5, r7, pc}

08005a48 <mbedtls_aria_setkey_dec>:
/*
 * Set decryption key
 */
int mbedtls_aria_setkey_dec( mbedtls_aria_context *ctx,
                             const unsigned char *key, unsigned int keybits )
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b08b      	sub	sp, #44	; 0x2c
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
    int i, j, k, ret;
    ARIA_VALIDATE_RET( ctx != NULL );
    ARIA_VALIDATE_RET( key != NULL );

    ret = mbedtls_aria_setkey_enc( ctx, key, keybits );
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff fe51 	bl	8005700 <mbedtls_aria_setkey_enc>
 8005a5e:	61b8      	str	r0, [r7, #24]
    if( ret != 0 )
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <mbedtls_aria_setkey_dec+0x22>
        return( ret );
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	e061      	b.n	8005b2e <mbedtls_aria_setkey_dec+0xe6>

    /* flip the order of round keys */
    for( i = 0, j = ctx->nr; i < j; i++, j-- )
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	623b      	str	r3, [r7, #32]
 8005a74:	e030      	b.n	8005ad8 <mbedtls_aria_setkey_dec+0x90>
    {
        for( k = 0; k < 4; k++ )
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	e024      	b.n	8005ac6 <mbedtls_aria_setkey_dec+0x7e>
        {
            uint32_t t = ctx->rk[i][k];
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	0099      	lsls	r1, r3, #2
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	440b      	add	r3, r1
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	617b      	str	r3, [r7, #20]
            ctx->rk[i][k] = ctx->rk[j][k];
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	0099      	lsls	r1, r3, #2
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	440b      	add	r3, r1
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	0098      	lsls	r0, r3, #2
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4403      	add	r3, r0
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	605a      	str	r2, [r3, #4]
            ctx->rk[j][k] = t;
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	0099      	lsls	r1, r3, #2
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	440b      	add	r3, r1
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	605a      	str	r2, [r3, #4]
        for( k = 0; k < 4; k++ )
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	ddd7      	ble.n	8005a7c <mbedtls_aria_setkey_dec+0x34>
    for( i = 0, j = ctx->nr; i < j; i++, j-- )
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	3301      	adds	r3, #1
 8005ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	623b      	str	r3, [r7, #32]
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	dbca      	blt.n	8005a76 <mbedtls_aria_setkey_dec+0x2e>
        }
    }

    /* apply affine transform to middle keys */
    for( i = 1; i < ctx->nr; i++ )
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	e01c      	b.n	8005b20 <mbedtls_aria_setkey_dec+0xd8>
    {
        aria_a( &ctx->rk[i][0], &ctx->rk[i][1],
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	1d18      	adds	r0, r3, #4
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	3304      	adds	r3, #4
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	1d19      	adds	r1, r3, #4
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	3308      	adds	r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	1d1c      	adds	r4, r3, #4
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	3304      	adds	r3, #4
 8005b14:	4622      	mov	r2, r4
 8005b16:	f7ff fb53 	bl	80051c0 <aria_a>
    for( i = 1; i < ctx->nr; i++ )
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	dbdc      	blt.n	8005ae6 <mbedtls_aria_setkey_dec+0x9e>
                &ctx->rk[i][2], &ctx->rk[i][3] );
    }

    return( 0 );
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	372c      	adds	r7, #44	; 0x2c
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd90      	pop	{r4, r7, pc}
	...

08005b38 <mbedtls_aria_crypt_ecb>:
 * Encrypt a block
 */
int mbedtls_aria_crypt_ecb( mbedtls_aria_context *ctx,
                            const unsigned char input[MBEDTLS_ARIA_BLOCKSIZE],
                            unsigned char output[MBEDTLS_ARIA_BLOCKSIZE] )
{
 8005b38:	b590      	push	{r4, r7, lr}
 8005b3a:	b08f      	sub	sp, #60	; 0x3c
 8005b3c:	af04      	add	r7, sp, #16
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
    uint32_t a, b, c, d;
    ARIA_VALIDATE_RET( ctx != NULL );
    ARIA_VALIDATE_RET( input != NULL );
    ARIA_VALIDATE_RET( output != NULL );

    GET_UINT32_LE( a, input,  0 );
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	431a      	orrs	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	3302      	adds	r3, #2
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	3303      	adds	r3, #3
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	061b      	lsls	r3, r3, #24
 8005b66:	4313      	orrs	r3, r2
 8005b68:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( b, input,  4 );
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3305      	adds	r3, #5
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	3306      	adds	r3, #6
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	041b      	lsls	r3, r3, #16
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	3307      	adds	r3, #7
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	061b      	lsls	r3, r3, #24
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( c, input,  8 );
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	3308      	adds	r3, #8
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3309      	adds	r3, #9
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	330a      	adds	r3, #10
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	330b      	adds	r3, #11
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	061b      	lsls	r3, r3, #24
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( d, input, 12 );
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	330d      	adds	r3, #13
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	330e      	adds	r3, #14
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	330f      	adds	r3, #15
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	061b      	lsls	r3, r3, #24
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

    i = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
    while( 1 )
    {
        a ^= ctx->rk[i][0];
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	4413      	add	r3, r2
 8005bee:	3304      	adds	r3, #4
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	6a3b      	ldr	r3, [r7, #32]
 8005bf4:	4053      	eors	r3, r2
 8005bf6:	623b      	str	r3, [r7, #32]
        b ^= ctx->rk[i][1];
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	4413      	add	r3, r2
 8005c00:	3308      	adds	r3, #8
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4053      	eors	r3, r2
 8005c08:	61fb      	str	r3, [r7, #28]
        c ^= ctx->rk[i][2];
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	4413      	add	r3, r2
 8005c12:	330c      	adds	r3, #12
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	4053      	eors	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        d ^= ctx->rk[i][3];
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	4413      	add	r3, r2
 8005c24:	3310      	adds	r3, #16
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4053      	eors	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
        i++;
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	3301      	adds	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24

        aria_sl( &a, &b, &c, &d, aria_sb1, aria_sb2, aria_is1, aria_is2 );
 8005c34:	f107 0414 	add.w	r4, r7, #20
 8005c38:	f107 0218 	add.w	r2, r7, #24
 8005c3c:	f107 011c 	add.w	r1, r7, #28
 8005c40:	f107 0020 	add.w	r0, r7, #32
 8005c44:	4b72      	ldr	r3, [pc, #456]	; (8005e10 <mbedtls_aria_crypt_ecb+0x2d8>)
 8005c46:	9303      	str	r3, [sp, #12]
 8005c48:	4b72      	ldr	r3, [pc, #456]	; (8005e14 <mbedtls_aria_crypt_ecb+0x2dc>)
 8005c4a:	9302      	str	r3, [sp, #8]
 8005c4c:	4b72      	ldr	r3, [pc, #456]	; (8005e18 <mbedtls_aria_crypt_ecb+0x2e0>)
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	4b72      	ldr	r3, [pc, #456]	; (8005e1c <mbedtls_aria_crypt_ecb+0x2e4>)
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	4623      	mov	r3, r4
 8005c56:	f7ff fb5b 	bl	8005310 <aria_sl>
        aria_a( &a, &b, &c, &d );
 8005c5a:	f107 0314 	add.w	r3, r7, #20
 8005c5e:	f107 0218 	add.w	r2, r7, #24
 8005c62:	f107 011c 	add.w	r1, r7, #28
 8005c66:	f107 0020 	add.w	r0, r7, #32
 8005c6a:	f7ff faa9 	bl	80051c0 <aria_a>

        a ^= ctx->rk[i][0];
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	4413      	add	r3, r2
 8005c76:	3304      	adds	r3, #4
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	4053      	eors	r3, r2
 8005c7e:	623b      	str	r3, [r7, #32]
        b ^= ctx->rk[i][1];
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	4413      	add	r3, r2
 8005c88:	3308      	adds	r3, #8
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4053      	eors	r3, r2
 8005c90:	61fb      	str	r3, [r7, #28]
        c ^= ctx->rk[i][2];
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	4413      	add	r3, r2
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	4053      	eors	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        d ^= ctx->rk[i][3];
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	4413      	add	r3, r2
 8005cac:	3310      	adds	r3, #16
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4053      	eors	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
        i++;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	3301      	adds	r3, #1
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24

        aria_sl( &a, &b, &c, &d, aria_is1, aria_is2, aria_sb1, aria_sb2 );
 8005cbc:	f107 0414 	add.w	r4, r7, #20
 8005cc0:	f107 0218 	add.w	r2, r7, #24
 8005cc4:	f107 011c 	add.w	r1, r7, #28
 8005cc8:	f107 0020 	add.w	r0, r7, #32
 8005ccc:	4b52      	ldr	r3, [pc, #328]	; (8005e18 <mbedtls_aria_crypt_ecb+0x2e0>)
 8005cce:	9303      	str	r3, [sp, #12]
 8005cd0:	4b52      	ldr	r3, [pc, #328]	; (8005e1c <mbedtls_aria_crypt_ecb+0x2e4>)
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	4b4e      	ldr	r3, [pc, #312]	; (8005e10 <mbedtls_aria_crypt_ecb+0x2d8>)
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	4b4e      	ldr	r3, [pc, #312]	; (8005e14 <mbedtls_aria_crypt_ecb+0x2dc>)
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	4623      	mov	r3, r4
 8005cde:	f7ff fb17 	bl	8005310 <aria_sl>
        if( i >= ctx->nr )
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	4293      	cmp	r3, r2
 8005cec:	da0a      	bge.n	8005d04 <mbedtls_aria_crypt_ecb+0x1cc>
            break;
        aria_a( &a, &b, &c, &d );
 8005cee:	f107 0314 	add.w	r3, r7, #20
 8005cf2:	f107 0218 	add.w	r2, r7, #24
 8005cf6:	f107 011c 	add.w	r1, r7, #28
 8005cfa:	f107 0020 	add.w	r0, r7, #32
 8005cfe:	f7ff fa5f 	bl	80051c0 <aria_a>
        a ^= ctx->rk[i][0];
 8005d02:	e770      	b.n	8005be6 <mbedtls_aria_crypt_ecb+0xae>
            break;
 8005d04:	bf00      	nop
    }

    /* final key mixing */
    a ^= ctx->rk[i][0];
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3304      	adds	r3, #4
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	4053      	eors	r3, r2
 8005d16:	623b      	str	r3, [r7, #32]
    b ^= ctx->rk[i][1];
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	4413      	add	r3, r2
 8005d20:	3308      	adds	r3, #8
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4053      	eors	r3, r2
 8005d28:	61fb      	str	r3, [r7, #28]
    c ^= ctx->rk[i][2];
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	4413      	add	r3, r2
 8005d32:	330c      	adds	r3, #12
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	4053      	eors	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
    d ^= ctx->rk[i][3];
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	4413      	add	r3, r2
 8005d44:	3310      	adds	r3, #16
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	4053      	eors	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

    PUT_UINT32_LE( a, output,  0 );
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	0a1a      	lsrs	r2, r3, #8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	0c1a      	lsrs	r2, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3302      	adds	r3, #2
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	0e1a      	lsrs	r2, r3, #24
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3303      	adds	r3, #3
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( b, output,  4 );
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	0a1a      	lsrs	r2, r3, #8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3305      	adds	r3, #5
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	0c1a      	lsrs	r2, r3, #16
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3306      	adds	r3, #6
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	0e1a      	lsrs	r2, r3, #24
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3307      	adds	r3, #7
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( c, output,  8 );
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3308      	adds	r3, #8
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	0a1a      	lsrs	r2, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3309      	adds	r3, #9
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	0c1a      	lsrs	r2, r3, #16
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	330a      	adds	r3, #10
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	0e1a      	lsrs	r2, r3, #24
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	330b      	adds	r3, #11
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( d, output, 12 );
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	0a1a      	lsrs	r2, r3, #8
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	330d      	adds	r3, #13
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	701a      	strb	r2, [r3, #0]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	0c1a      	lsrs	r2, r3, #16
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	330e      	adds	r3, #14
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	0e1a      	lsrs	r2, r3, #24
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	330f      	adds	r3, #15
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	372c      	adds	r7, #44	; 0x2c
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd90      	pop	{r4, r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	08016ea0 	.word	0x08016ea0
 8005e14:	08016da0 	.word	0x08016da0
 8005e18:	08016ca0 	.word	0x08016ca0
 8005e1c:	08016ba0 	.word	0x08016ba0

08005e20 <mbedtls_aria_init>:

/* Initialize context */
void mbedtls_aria_init( mbedtls_aria_context *ctx )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
    ARIA_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_aria_context ) );
 8005e28:	f44f 728a 	mov.w	r2, #276	; 0x114
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f00f f997 	bl	8015162 <memset>
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <mbedtls_aria_free>:

/* Clear context */
void mbedtls_aria_free( mbedtls_aria_context *ctx )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <mbedtls_aria_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aria_context ) );
 8005e4a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f008 fa4e 	bl	800e2f0 <mbedtls_platform_zeroize>
 8005e54:	e000      	b.n	8005e58 <mbedtls_aria_free+0x1c>
        return;
 8005e56:	bf00      	nop
}
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <mbedtls_aria_crypt_cbc>:
                            int mode,
                            size_t length,
                            unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                            const unsigned char *input,
                            unsigned char *output )
{
 8005e5e:	b5b0      	push	{r4, r5, r7, lr}
 8005e60:	b08a      	sub	sp, #40	; 0x28
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	603b      	str	r3, [r7, #0]
                       mode == MBEDTLS_ARIA_DECRYPT );
    ARIA_VALIDATE_RET( length == 0 || input  != NULL );
    ARIA_VALIDATE_RET( length == 0 || output != NULL );
    ARIA_VALIDATE_RET( iv != NULL );

    if( length % MBEDTLS_ARIA_BLOCKSIZE )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <mbedtls_aria_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_ARIA_INVALID_INPUT_LENGTH );
 8005e76:	f06f 035d 	mvn.w	r3, #93	; 0x5d
 8005e7a:	e06b      	b.n	8005f54 <mbedtls_aria_crypt_cbc+0xf6>

    if( mode == MBEDTLS_ARIA_DECRYPT )
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d164      	bne.n	8005f4c <mbedtls_aria_crypt_cbc+0xee>
    {
        while( length > 0 )
 8005e82:	e035      	b.n	8005ef0 <mbedtls_aria_crypt_cbc+0x92>
        {
            memcpy( temp, input, MBEDTLS_ARIA_BLOCKSIZE );
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	f107 0414 	add.w	r4, r7, #20
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aria_crypt_ecb( ctx, input, output );
 8005e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff fe4d 	bl	8005b38 <mbedtls_aria_crypt_ecb>

            for( i = 0; i < MBEDTLS_ARIA_BLOCKSIZE; i++ )
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea2:	e010      	b.n	8005ec6 <mbedtls_aria_crypt_cbc+0x68>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ea8:	4413      	add	r3, r2
 8005eaa:	7819      	ldrb	r1, [r3, #0]
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	781a      	ldrb	r2, [r3, #0]
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005eb8:	4403      	add	r3, r0
 8005eba:	404a      	eors	r2, r1
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_ARIA_BLOCKSIZE; i++ )
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	2b0f      	cmp	r3, #15
 8005eca:	ddeb      	ble.n	8005ea4 <mbedtls_aria_crypt_cbc+0x46>

            memcpy( iv, temp, MBEDTLS_ARIA_BLOCKSIZE );
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	461d      	mov	r5, r3
 8005ed0:	f107 0414 	add.w	r4, r7, #20
 8005ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ed6:	6028      	str	r0, [r5, #0]
 8005ed8:	6069      	str	r1, [r5, #4]
 8005eda:	60aa      	str	r2, [r5, #8]
 8005edc:	60eb      	str	r3, [r5, #12]

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	3310      	adds	r3, #16
 8005ee2:	63bb      	str	r3, [r7, #56]	; 0x38
            output += MBEDTLS_ARIA_BLOCKSIZE;
 8005ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee6:	3310      	adds	r3, #16
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3b10      	subs	r3, #16
 8005eee:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1c6      	bne.n	8005e84 <mbedtls_aria_crypt_cbc+0x26>
 8005ef6:	e02c      	b.n	8005f52 <mbedtls_aria_crypt_cbc+0xf4>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < MBEDTLS_ARIA_BLOCKSIZE; i++ )
 8005ef8:	2300      	movs	r3, #0
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
 8005efc:	e010      	b.n	8005f20 <mbedtls_aria_crypt_cbc+0xc2>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f02:	4413      	add	r3, r2
 8005f04:	7819      	ldrb	r1, [r3, #0]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	781a      	ldrb	r2, [r3, #0]
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005f12:	4403      	add	r3, r0
 8005f14:	404a      	eors	r2, r1
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_ARIA_BLOCKSIZE; i++ )
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	2b0f      	cmp	r3, #15
 8005f24:	ddeb      	ble.n	8005efe <mbedtls_aria_crypt_cbc+0xa0>

            mbedtls_aria_crypt_ecb( ctx, output, output );
 8005f26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff fe04 	bl	8005b38 <mbedtls_aria_crypt_ecb>
            memcpy( iv, output, MBEDTLS_ARIA_BLOCKSIZE );
 8005f30:	2210      	movs	r2, #16
 8005f32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f34:	6838      	ldr	r0, [r7, #0]
 8005f36:	f00f f8f0 	bl	801511a <memcpy>

            input  += MBEDTLS_ARIA_BLOCKSIZE;
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	3310      	adds	r3, #16
 8005f3e:	63bb      	str	r3, [r7, #56]	; 0x38
            output += MBEDTLS_ARIA_BLOCKSIZE;
 8005f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f42:	3310      	adds	r3, #16
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= MBEDTLS_ARIA_BLOCKSIZE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3b10      	subs	r3, #16
 8005f4a:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1d2      	bne.n	8005ef8 <mbedtls_aria_crypt_cbc+0x9a>
        }
    }

    return( 0 );
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3728      	adds	r7, #40	; 0x28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bdb0      	pop	{r4, r5, r7, pc}

08005f5c <mbedtls_aria_crypt_cfb128>:
                               size_t length,
                               size_t *iv_off,
                               unsigned char iv[MBEDTLS_ARIA_BLOCKSIZE],
                               const unsigned char *input,
                               unsigned char *output )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
    ARIA_VALIDATE_RET( length == 0 || input  != NULL );
    ARIA_VALIDATE_RET( length == 0 || output != NULL );
    ARIA_VALIDATE_RET( iv != NULL );
    ARIA_VALIDATE_RET( iv_off != NULL );

    n = *iv_off;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	617b      	str	r3, [r7, #20]

    /* An overly large value of n can lead to an unlimited
     * buffer overflow. Therefore, guard against this
     * outside of parameter validation. */
    if( n >= MBEDTLS_ARIA_BLOCKSIZE )
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d902      	bls.n	8005f7c <mbedtls_aria_crypt_cfb128+0x20>
        return( MBEDTLS_ERR_ARIA_BAD_INPUT_DATA );
 8005f76:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 8005f7a:	e054      	b.n	8006026 <mbedtls_aria_crypt_cfb128+0xca>

    if( mode == MBEDTLS_ARIA_DECRYPT )
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d148      	bne.n	8006014 <mbedtls_aria_crypt_cfb128+0xb8>
    {
        while( length-- )
 8005f82:	e021      	b.n	8005fc8 <mbedtls_aria_crypt_cfb128+0x6c>
        {
            if( n == 0 )
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d104      	bne.n	8005f94 <mbedtls_aria_crypt_cfb128+0x38>
                mbedtls_aria_crypt_ecb( ctx, iv, iv );
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	6a39      	ldr	r1, [r7, #32]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff fdd2 	bl	8005b38 <mbedtls_aria_crypt_ecb>

            c = *input++;
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	627a      	str	r2, [r7, #36]	; 0x24
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	74fb      	strb	r3, [r7, #19]
            *output++ = c ^ iv[n];
 8005f9e:	6a3a      	ldr	r2, [r7, #32]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	7819      	ldrb	r1, [r3, #0]
 8005fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	62ba      	str	r2, [r7, #40]	; 0x28
 8005fac:	7cfa      	ldrb	r2, [r7, #19]
 8005fae:	404a      	eors	r2, r1
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
            iv[n] = c;
 8005fb4:	6a3a      	ldr	r2, [r7, #32]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4413      	add	r3, r2
 8005fba:	7cfa      	ldrb	r2, [r7, #19]
 8005fbc:	701a      	strb	r2, [r3, #0]

            n = ( n + 1 ) & 0x0F;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	617b      	str	r3, [r7, #20]
        while( length-- )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	607a      	str	r2, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1d8      	bne.n	8005f84 <mbedtls_aria_crypt_cfb128+0x28>
 8005fd2:	e024      	b.n	800601e <mbedtls_aria_crypt_cfb128+0xc2>
    }
    else
    {
        while( length-- )
        {
            if( n == 0 )
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <mbedtls_aria_crypt_cfb128+0x88>
                mbedtls_aria_crypt_ecb( ctx, iv, iv );
 8005fda:	6a3a      	ldr	r2, [r7, #32]
 8005fdc:	6a39      	ldr	r1, [r7, #32]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7ff fdaa 	bl	8005b38 <mbedtls_aria_crypt_ecb>

            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
 8005fe4:	6a3a      	ldr	r2, [r7, #32]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	4413      	add	r3, r2
 8005fea:	7819      	ldrb	r1, [r3, #0]
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ff2:	781a      	ldrb	r2, [r3, #0]
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	1c58      	adds	r0, r3, #1
 8005ff8:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ffa:	404a      	eors	r2, r1
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	6a39      	ldr	r1, [r7, #32]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	440a      	add	r2, r1
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	7013      	strb	r3, [r2, #0]

            n = ( n + 1 ) & 0x0F;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3301      	adds	r3, #1
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	617b      	str	r3, [r7, #20]
        while( length-- )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	1e5a      	subs	r2, r3, #1
 8006018:	607a      	str	r2, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1da      	bne.n	8005fd4 <mbedtls_aria_crypt_cfb128+0x78>
        }
    }

    *iv_off = n;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	601a      	str	r2, [r3, #0]

    return( 0 );
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <mbedtls_aria_crypt_ctr>:
                            size_t *nc_off,
                            unsigned char nonce_counter[MBEDTLS_ARIA_BLOCKSIZE],
                            unsigned char stream_block[MBEDTLS_ARIA_BLOCKSIZE],
                            const unsigned char *input,
                            unsigned char *output )
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b088      	sub	sp, #32
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	607a      	str	r2, [r7, #4]
 800603a:	603b      	str	r3, [r7, #0]
    ARIA_VALIDATE_RET( length == 0 || output != NULL );
    ARIA_VALIDATE_RET( nonce_counter != NULL );
    ARIA_VALIDATE_RET( stream_block  != NULL );
    ARIA_VALIDATE_RET( nc_off != NULL );

    n = *nc_off;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	61bb      	str	r3, [r7, #24]
    /* An overly large value of n can lead to an unlimited
     * buffer overflow. Therefore, guard against this
     * outside of parameter validation. */
    if( n >= MBEDTLS_ARIA_BLOCKSIZE )
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b0f      	cmp	r3, #15
 8006046:	d938      	bls.n	80060ba <mbedtls_aria_crypt_ctr+0x8c>
        return( MBEDTLS_ERR_ARIA_BAD_INPUT_DATA );
 8006048:	f06f 035b 	mvn.w	r3, #91	; 0x5b
 800604c:	e03e      	b.n	80060cc <mbedtls_aria_crypt_ctr+0x9e>

    while( length-- )
    {
        if( n == 0 ) {
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d11a      	bne.n	800608a <mbedtls_aria_crypt_ctr+0x5c>
            mbedtls_aria_crypt_ecb( ctx, nonce_counter,
 8006054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fd6d 	bl	8005b38 <mbedtls_aria_crypt_ecb>
                                stream_block );

            for( i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i-- )
 800605e:	2310      	movs	r3, #16
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e00d      	b.n	8006080 <mbedtls_aria_crypt_ctr+0x52>
                if( ++nonce_counter[i - 1] != 0 )
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	3b01      	subs	r3, #1
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	4413      	add	r3, r2
 800606c:	781a      	ldrb	r2, [r3, #0]
 800606e:	3201      	adds	r2, #1
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <mbedtls_aria_crypt_ctr+0x5a>
            for( i = MBEDTLS_ARIA_BLOCKSIZE; i > 0; i-- )
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	3b01      	subs	r3, #1
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	2b00      	cmp	r3, #0
 8006084:	dcee      	bgt.n	8006064 <mbedtls_aria_crypt_ctr+0x36>
 8006086:	e000      	b.n	800608a <mbedtls_aria_crypt_ctr+0x5c>
                    break;
 8006088:	bf00      	nop
        }
        c = *input++;
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char)( c ^ stream_block[n] );
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	b25a      	sxtb	r2, r3
 8006098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	440b      	add	r3, r1
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	b25b      	sxtb	r3, r3
 80060a2:	4053      	eors	r3, r2
 80060a4:	b259      	sxtb	r1, r3
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	633a      	str	r2, [r7, #48]	; 0x30
 80060ac:	b2ca      	uxtb	r2, r1
 80060ae:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	3301      	adds	r3, #1
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	61bb      	str	r3, [r7, #24]
    while( length-- )
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	1e5a      	subs	r2, r3, #1
 80060be:	60ba      	str	r2, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1c4      	bne.n	800604e <mbedtls_aria_crypt_ctr+0x20>
    }

    *nc_off = n;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	601a      	str	r2, [r3, #0]

    return( 0 );
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <F>:

/* declarations of data at the end of this file */
static const uint32_t S[4][256];

static uint32_t F( mbedtls_blowfish_context *ctx, uint32_t x )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
   unsigned short a, b, c, d;
   uint32_t  y;

   d = (unsigned short)(x & 0xFF);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	82fb      	strh	r3, [r7, #22]
   x >>= 8;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	603b      	str	r3, [r7, #0]
   c = (unsigned short)(x & 0xFF);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	82bb      	strh	r3, [r7, #20]
   x >>= 8;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	0a1b      	lsrs	r3, r3, #8
 80060f8:	603b      	str	r3, [r7, #0]
   b = (unsigned short)(x & 0xFF);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	827b      	strh	r3, [r7, #18]
   x >>= 8;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	0a1b      	lsrs	r3, r3, #8
 8006106:	603b      	str	r3, [r7, #0]
   a = (unsigned short)(x & 0xFF);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	b2db      	uxtb	r3, r3
 800610e:	823b      	strh	r3, [r7, #16]
   y = ctx->S[0][a] + ctx->S[1][b];
 8006110:	8a3a      	ldrh	r2, [r7, #16]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3212      	adds	r2, #18
 8006116:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800611a:	8a79      	ldrh	r1, [r7, #18]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f501 7189 	add.w	r1, r1, #274	; 0x112
 8006122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006126:	4413      	add	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
   y = y ^ ctx->S[2][c];
 800612a:	8aba      	ldrh	r2, [r7, #20]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f202 2212 	addw	r2, r2, #530	; 0x212
 8006132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4053      	eors	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
   y = y + ctx->S[3][d];
 800613c:	8afa      	ldrh	r2, [r7, #22]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f202 3212 	addw	r2, r2, #786	; 0x312
 8006144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

   return( y );
 800614e:	68fb      	ldr	r3, [r7, #12]
}
 8006150:	4618      	mov	r0, r3
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <blowfish_enc>:

static void blowfish_enc( mbedtls_blowfish_context *ctx, uint32_t *xl, uint32_t *xr )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
    uint32_t  Xl, Xr, temp;
    short i;

    Xl = *xl;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	61fb      	str	r3, [r7, #28]
    Xr = *xr;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < MBEDTLS_BLOWFISH_ROUNDS; ++i )
 8006174:	2300      	movs	r3, #0
 8006176:	82fb      	strh	r3, [r7, #22]
 8006178:	e019      	b.n	80061ae <blowfish_enc+0x52>
    {
        Xl = Xl ^ ctx->P[i];
 800617a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	4053      	eors	r3, r2
 8006188:	61fb      	str	r3, [r7, #28]
        Xr = F( ctx, Xl ) ^ Xr;
 800618a:	69f9      	ldr	r1, [r7, #28]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff ffa1 	bl	80060d4 <F>
 8006192:	4602      	mov	r2, r0
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	4053      	eors	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]

        temp = Xl;
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	613b      	str	r3, [r7, #16]
        Xl = Xr;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	61fb      	str	r3, [r7, #28]
        Xr = temp;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < MBEDTLS_BLOWFISH_ROUNDS; ++i )
 80061a6:	8afb      	ldrh	r3, [r7, #22]
 80061a8:	3301      	adds	r3, #1
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	82fb      	strh	r3, [r7, #22]
 80061ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80061b2:	2b0f      	cmp	r3, #15
 80061b4:	dde1      	ble.n	800617a <blowfish_enc+0x1e>
    }

    temp = Xl;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	613b      	str	r3, [r7, #16]
    Xl = Xr;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	61fb      	str	r3, [r7, #28]
    Xr = temp;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	61bb      	str	r3, [r7, #24]

    Xr = Xr ^ ctx->P[MBEDTLS_BLOWFISH_ROUNDS];
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4053      	eors	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
    Xl = Xl ^ ctx->P[MBEDTLS_BLOWFISH_ROUNDS + 1];
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	4053      	eors	r3, r2
 80061d4:	61fb      	str	r3, [r7, #28]

    *xl = Xl;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	601a      	str	r2, [r3, #0]
    *xr = Xr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	601a      	str	r2, [r3, #0]
}
 80061e2:	bf00      	nop
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <blowfish_dec>:

static void blowfish_dec( mbedtls_blowfish_context *ctx, uint32_t *xl, uint32_t *xr )
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b088      	sub	sp, #32
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
    uint32_t  Xl, Xr, temp;
    short i;

    Xl = *xl;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	61fb      	str	r3, [r7, #28]
    Xr = *xr;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	61bb      	str	r3, [r7, #24]

    for( i = MBEDTLS_BLOWFISH_ROUNDS + 1; i > 1; --i )
 8006202:	2311      	movs	r3, #17
 8006204:	82fb      	strh	r3, [r7, #22]
 8006206:	e019      	b.n	800623c <blowfish_dec+0x52>
    {
        Xl = Xl ^ ctx->P[i];
 8006208:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	4053      	eors	r3, r2
 8006216:	61fb      	str	r3, [r7, #28]
        Xr = F( ctx, Xl ) ^ Xr;
 8006218:	69f9      	ldr	r1, [r7, #28]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f7ff ff5a 	bl	80060d4 <F>
 8006220:	4602      	mov	r2, r0
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	4053      	eors	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]

        temp = Xl;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	613b      	str	r3, [r7, #16]
        Xl = Xr;
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	61fb      	str	r3, [r7, #28]
        Xr = temp;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	61bb      	str	r3, [r7, #24]
    for( i = MBEDTLS_BLOWFISH_ROUNDS + 1; i > 1; --i )
 8006234:	8afb      	ldrh	r3, [r7, #22]
 8006236:	3b01      	subs	r3, #1
 8006238:	b29b      	uxth	r3, r3
 800623a:	82fb      	strh	r3, [r7, #22]
 800623c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006240:	2b01      	cmp	r3, #1
 8006242:	dce1      	bgt.n	8006208 <blowfish_dec+0x1e>
    }

    temp = Xl;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	613b      	str	r3, [r7, #16]
    Xl = Xr;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	61fb      	str	r3, [r7, #28]
    Xr = temp;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	61bb      	str	r3, [r7, #24]

    Xr = Xr ^ ctx->P[1];
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4053      	eors	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
    Xl = Xl ^ ctx->P[0];
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	4053      	eors	r3, r2
 8006262:	61fb      	str	r3, [r7, #28]

    *xl = Xl;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	601a      	str	r2, [r3, #0]
    *xr = Xr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	bf00      	nop
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <mbedtls_blowfish_init>:

void mbedtls_blowfish_init( mbedtls_blowfish_context *ctx )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
    BLOWFISH_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_blowfish_context ) );
 8006280:	f241 0248 	movw	r2, #4168	; 0x1048
 8006284:	2100      	movs	r1, #0
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f00e ff6b 	bl	8015162 <memset>
}
 800628c:	bf00      	nop
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <mbedtls_blowfish_free>:

void mbedtls_blowfish_free( mbedtls_blowfish_context *ctx )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <mbedtls_blowfish_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_blowfish_context ) );
 80062a2:	f241 0148 	movw	r1, #4168	; 0x1048
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f008 f822 	bl	800e2f0 <mbedtls_platform_zeroize>
 80062ac:	e000      	b.n	80062b0 <mbedtls_blowfish_free+0x1c>
        return;
 80062ae:	bf00      	nop
}
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <mbedtls_blowfish_setkey>:
 * Blowfish key schedule
 */
int mbedtls_blowfish_setkey( mbedtls_blowfish_context *ctx,
                             const unsigned char *key,
                             unsigned int keybits )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08a      	sub	sp, #40	; 0x28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
    unsigned int i, j, k;
    uint32_t data, datal, datar;
    BLOWFISH_VALIDATE_RET( ctx != NULL );
    BLOWFISH_VALIDATE_RET( key != NULL );

    if( keybits < MBEDTLS_BLOWFISH_MIN_KEY_BITS    ||
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b1f      	cmp	r3, #31
 80062c8:	d908      	bls.n	80062dc <mbedtls_blowfish_setkey+0x24>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80062d0:	d804      	bhi.n	80062dc <mbedtls_blowfish_setkey+0x24>
        keybits > MBEDTLS_BLOWFISH_MAX_KEY_BITS    ||
        keybits % 8 != 0 )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f003 0307 	and.w	r3, r3, #7
        keybits > MBEDTLS_BLOWFISH_MAX_KEY_BITS    ||
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <mbedtls_blowfish_setkey+0x2a>
    {
        return( MBEDTLS_ERR_BLOWFISH_BAD_INPUT_DATA );
 80062dc:	f06f 0315 	mvn.w	r3, #21
 80062e0:	e0a2      	b.n	8006428 <mbedtls_blowfish_setkey+0x170>
    }

    keybits >>= 3;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	08db      	lsrs	r3, r3, #3
 80062e6:	607b      	str	r3, [r7, #4]

    for( i = 0; i < 4; i++ )
 80062e8:	2300      	movs	r3, #0
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
 80062ec:	e01a      	b.n	8006324 <mbedtls_blowfish_setkey+0x6c>
    {
        for( j = 0; j < 256; j++ )
 80062ee:	2300      	movs	r3, #0
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	e011      	b.n	8006318 <mbedtls_blowfish_setkey+0x60>
            ctx->S[i][j] = S[i][j];
 80062f4:	494e      	ldr	r1, [pc, #312]	; (8006430 <mbedtls_blowfish_setkey+0x178>)
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	021a      	lsls	r2, r3, #8
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	4413      	add	r3, r2
 80062fe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006306:	0210      	lsls	r0, r2, #8
 8006308:	6a3a      	ldr	r2, [r7, #32]
 800630a:	4402      	add	r2, r0
 800630c:	3212      	adds	r2, #18
 800630e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for( j = 0; j < 256; j++ )
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	3301      	adds	r3, #1
 8006316:	623b      	str	r3, [r7, #32]
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2bff      	cmp	r3, #255	; 0xff
 800631c:	d9ea      	bls.n	80062f4 <mbedtls_blowfish_setkey+0x3c>
    for( i = 0; i < 4; i++ )
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	3301      	adds	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	2b03      	cmp	r3, #3
 8006328:	d9e1      	bls.n	80062ee <mbedtls_blowfish_setkey+0x36>
    }

    j = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	623b      	str	r3, [r7, #32]
    for( i = 0; i < MBEDTLS_BLOWFISH_ROUNDS + 2; ++i )
 800632e:	2300      	movs	r3, #0
 8006330:	627b      	str	r3, [r7, #36]	; 0x24
 8006332:	e028      	b.n	8006386 <mbedtls_blowfish_setkey+0xce>
    {
        data = 0x00000000;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
        for( k = 0; k < 4; ++k )
 8006338:	2300      	movs	r3, #0
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	e012      	b.n	8006364 <mbedtls_blowfish_setkey+0xac>
        {
            data = ( data << 8 ) | key[j++];
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	021a      	lsls	r2, r3, #8
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	1c59      	adds	r1, r3, #1
 8006346:	6239      	str	r1, [r7, #32]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	440b      	add	r3, r1
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	4313      	orrs	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
            if( j >= keybits )
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	429a      	cmp	r2, r3
 8006358:	d301      	bcc.n	800635e <mbedtls_blowfish_setkey+0xa6>
                j = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	623b      	str	r3, [r7, #32]
        for( k = 0; k < 4; ++k )
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	3301      	adds	r3, #1
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2b03      	cmp	r3, #3
 8006368:	d9e9      	bls.n	800633e <mbedtls_blowfish_setkey+0x86>
        }
        ctx->P[i] = P[i] ^ data;
 800636a:	4a32      	ldr	r2, [pc, #200]	; (8006434 <mbedtls_blowfish_setkey+0x17c>)
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	ea82 0103 	eor.w	r1, r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < MBEDTLS_BLOWFISH_ROUNDS + 2; ++i )
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	3301      	adds	r3, #1
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	2b11      	cmp	r3, #17
 800638a:	d9d3      	bls.n	8006334 <mbedtls_blowfish_setkey+0x7c>
    }

    datal = 0x00000000;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
    datar = 0x00000000;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]

    for( i = 0; i < MBEDTLS_BLOWFISH_ROUNDS + 2; i += 2 )
 8006394:	2300      	movs	r3, #0
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	e015      	b.n	80063c6 <mbedtls_blowfish_setkey+0x10e>
    {
        blowfish_enc( ctx, &datal, &datar );
 800639a:	f107 0210 	add.w	r2, r7, #16
 800639e:	f107 0314 	add.w	r3, r7, #20
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fed9 	bl	800615c <blowfish_enc>
        ctx->P[i] = datal;
 80063aa:	6979      	ldr	r1, [r7, #20]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        ctx->P[i + 1] = datar;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	6939      	ldr	r1, [r7, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < MBEDTLS_BLOWFISH_ROUNDS + 2; i += 2 )
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	3302      	adds	r3, #2
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	2b11      	cmp	r3, #17
 80063ca:	d9e6      	bls.n	800639a <mbedtls_blowfish_setkey+0xe2>
    }

    for( i = 0; i < 4; i++ )
 80063cc:	2300      	movs	r3, #0
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
 80063d0:	e026      	b.n	8006420 <mbedtls_blowfish_setkey+0x168>
    {
       for( j = 0; j < 256; j += 2 )
 80063d2:	2300      	movs	r3, #0
 80063d4:	623b      	str	r3, [r7, #32]
 80063d6:	e01d      	b.n	8006414 <mbedtls_blowfish_setkey+0x15c>
       {
            blowfish_enc( ctx, &datal, &datar );
 80063d8:	f107 0210 	add.w	r2, r7, #16
 80063dc:	f107 0314 	add.w	r3, r7, #20
 80063e0:	4619      	mov	r1, r3
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff feba 	bl	800615c <blowfish_enc>
            ctx->S[i][j] = datal;
 80063e8:	6979      	ldr	r1, [r7, #20]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ee:	0210      	lsls	r0, r2, #8
 80063f0:	6a3a      	ldr	r2, [r7, #32]
 80063f2:	4402      	add	r2, r0
 80063f4:	3212      	adds	r2, #18
 80063f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ctx->S[i][j + 1] = datar;
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	6939      	ldr	r1, [r7, #16]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006404:	0200      	lsls	r0, r0, #8
 8006406:	4402      	add	r2, r0
 8006408:	3212      	adds	r2, #18
 800640a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       for( j = 0; j < 256; j += 2 )
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	3302      	adds	r3, #2
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	2bff      	cmp	r3, #255	; 0xff
 8006418:	d9de      	bls.n	80063d8 <mbedtls_blowfish_setkey+0x120>
    for( i = 0; i < 4; i++ )
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	3301      	adds	r3, #1
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	2b03      	cmp	r3, #3
 8006424:	d9d5      	bls.n	80063d2 <mbedtls_blowfish_setkey+0x11a>
        }
    }
    return( 0 );
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3728      	adds	r7, #40	; 0x28
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	08016fe8 	.word	0x08016fe8
 8006434:	08016fa0 	.word	0x08016fa0

08006438 <mbedtls_blowfish_crypt_ecb>:
 */
int mbedtls_blowfish_crypt_ecb( mbedtls_blowfish_context *ctx,
                    int mode,
                    const unsigned char input[MBEDTLS_BLOWFISH_BLOCKSIZE],
                    unsigned char output[MBEDTLS_BLOWFISH_BLOCKSIZE] )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	603b      	str	r3, [r7, #0]
    BLOWFISH_VALIDATE_RET( mode == MBEDTLS_BLOWFISH_ENCRYPT ||
                           mode == MBEDTLS_BLOWFISH_DECRYPT );
    BLOWFISH_VALIDATE_RET( input  != NULL );
    BLOWFISH_VALIDATE_RET( output != NULL );

    GET_UINT32_BE( X0, input,  0 );
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	061a      	lsls	r2, r3, #24
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3301      	adds	r3, #1
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3302      	adds	r3, #2
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	4313      	orrs	r3, r2
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	3203      	adds	r2, #3
 8006464:	7812      	ldrb	r2, [r2, #0]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]
    GET_UINT32_BE( X1, input,  4 );
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3304      	adds	r3, #4
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	061a      	lsls	r2, r3, #24
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3305      	adds	r3, #5
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	041b      	lsls	r3, r3, #16
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3306      	adds	r3, #6
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	4313      	orrs	r3, r2
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	3207      	adds	r2, #7
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]

    if( mode == MBEDTLS_BLOWFISH_DECRYPT )
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d108      	bne.n	80064a8 <mbedtls_blowfish_crypt_ecb+0x70>
    {
        blowfish_dec( ctx, &X0, &X1 );
 8006496:	f107 0210 	add.w	r2, r7, #16
 800649a:	f107 0314 	add.w	r3, r7, #20
 800649e:	4619      	mov	r1, r3
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff fea2 	bl	80061ea <blowfish_dec>
 80064a6:	e007      	b.n	80064b8 <mbedtls_blowfish_crypt_ecb+0x80>
    }
    else /* MBEDTLS_BLOWFISH_ENCRYPT */
    {
        blowfish_enc( ctx, &X0, &X1 );
 80064a8:	f107 0210 	add.w	r2, r7, #16
 80064ac:	f107 0314 	add.w	r3, r7, #20
 80064b0:	4619      	mov	r1, r3
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f7ff fe52 	bl	800615c <blowfish_enc>
    }

    PUT_UINT32_BE( X0, output,  0 );
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	0e1b      	lsrs	r3, r3, #24
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	0c1a      	lsrs	r2, r3, #16
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	0a1a      	lsrs	r2, r3, #8
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	3302      	adds	r3, #2
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	3303      	adds	r3, #3
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X1, output,  4 );
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	0e1a      	lsrs	r2, r3, #24
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	3304      	adds	r3, #4
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	0c1a      	lsrs	r2, r3, #16
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	3305      	adds	r3, #5
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	0a1a      	lsrs	r2, r3, #8
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	3306      	adds	r3, #6
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	3307      	adds	r3, #7
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <mbedtls_blowfish_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[MBEDTLS_BLOWFISH_BLOCKSIZE],
                    const unsigned char *input,
                    unsigned char *output )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	603b      	str	r3, [r7, #0]
                           mode == MBEDTLS_BLOWFISH_DECRYPT );
    BLOWFISH_VALIDATE_RET( iv != NULL );
    BLOWFISH_VALIDATE_RET( length == 0 || input  != NULL );
    BLOWFISH_VALIDATE_RET( length == 0 || output != NULL );

    if( length % MBEDTLS_BLOWFISH_BLOCKSIZE )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <mbedtls_blowfish_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH );
 8006534:	f06f 0317 	mvn.w	r3, #23
 8006538:	e069      	b.n	800660e <mbedtls_blowfish_crypt_cbc+0xf2>

    if( mode == MBEDTLS_BLOWFISH_DECRYPT )
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d162      	bne.n	8006606 <mbedtls_blowfish_crypt_cbc+0xea>
    {
        while( length > 0 )
 8006540:	e032      	b.n	80065a8 <mbedtls_blowfish_crypt_cbc+0x8c>
        {
            memcpy( temp, input, MBEDTLS_BLOWFISH_BLOCKSIZE );
 8006542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006544:	f107 0314 	add.w	r3, r7, #20
 8006548:	6810      	ldr	r0, [r2, #0]
 800654a:	6851      	ldr	r1, [r2, #4]
 800654c:	c303      	stmia	r3!, {r0, r1}
            mbedtls_blowfish_crypt_ecb( ctx, mode, input, output );
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff ff6f 	bl	8006438 <mbedtls_blowfish_crypt_ecb>

            for( i = 0; i < MBEDTLS_BLOWFISH_BLOCKSIZE;i++ )
 800655a:	2300      	movs	r3, #0
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	e010      	b.n	8006582 <mbedtls_blowfish_crypt_cbc+0x66>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006564:	4413      	add	r3, r2
 8006566:	7819      	ldrb	r1, [r3, #0]
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4413      	add	r3, r2
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006574:	4403      	add	r3, r0
 8006576:	404a      	eors	r2, r1
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_BLOWFISH_BLOCKSIZE;i++ )
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	3301      	adds	r3, #1
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2b07      	cmp	r3, #7
 8006586:	ddeb      	ble.n	8006560 <mbedtls_blowfish_crypt_cbc+0x44>

            memcpy( iv, temp, MBEDTLS_BLOWFISH_BLOCKSIZE );
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	f107 0314 	add.w	r3, r7, #20
 8006590:	cb03      	ldmia	r3!, {r0, r1}
 8006592:	6010      	str	r0, [r2, #0]
 8006594:	6051      	str	r1, [r2, #4]

            input  += MBEDTLS_BLOWFISH_BLOCKSIZE;
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	3308      	adds	r3, #8
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
            output += MBEDTLS_BLOWFISH_BLOCKSIZE;
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	3308      	adds	r3, #8
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= MBEDTLS_BLOWFISH_BLOCKSIZE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3b08      	subs	r3, #8
 80065a6:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1c9      	bne.n	8006542 <mbedtls_blowfish_crypt_cbc+0x26>
 80065ae:	e02d      	b.n	800660c <mbedtls_blowfish_crypt_cbc+0xf0>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < MBEDTLS_BLOWFISH_BLOCKSIZE; i++ )
 80065b0:	2300      	movs	r3, #0
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e010      	b.n	80065d8 <mbedtls_blowfish_crypt_cbc+0xbc>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ba:	4413      	add	r3, r2
 80065bc:	7819      	ldrb	r1, [r3, #0]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	4413      	add	r3, r2
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065ca:	4403      	add	r3, r0
 80065cc:	404a      	eors	r2, r1
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_BLOWFISH_BLOCKSIZE; i++ )
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	3301      	adds	r3, #1
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	2b07      	cmp	r3, #7
 80065dc:	ddeb      	ble.n	80065b6 <mbedtls_blowfish_crypt_cbc+0x9a>

            mbedtls_blowfish_crypt_ecb( ctx, mode, output, output );
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff ff27 	bl	8006438 <mbedtls_blowfish_crypt_ecb>
            memcpy( iv, output, MBEDTLS_BLOWFISH_BLOCKSIZE );
 80065ea:	2208      	movs	r2, #8
 80065ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ee:	6838      	ldr	r0, [r7, #0]
 80065f0:	f00e fd93 	bl	801511a <memcpy>

            input  += MBEDTLS_BLOWFISH_BLOCKSIZE;
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	3308      	adds	r3, #8
 80065f8:	62bb      	str	r3, [r7, #40]	; 0x28
            output += MBEDTLS_BLOWFISH_BLOCKSIZE;
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	3308      	adds	r3, #8
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= MBEDTLS_BLOWFISH_BLOCKSIZE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3b08      	subs	r3, #8
 8006604:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1d1      	bne.n	80065b0 <mbedtls_blowfish_crypt_cbc+0x94>
        }
    }

    return( 0 );
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3720      	adds	r7, #32
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <mbedtls_blowfish_crypt_cfb64>:
                       size_t length,
                       size_t *iv_off,
                       unsigned char iv[MBEDTLS_BLOWFISH_BLOCKSIZE],
                       const unsigned char *input,
                       unsigned char *output )
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b086      	sub	sp, #24
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
    BLOWFISH_VALIDATE_RET( iv     != NULL );
    BLOWFISH_VALIDATE_RET( iv_off != NULL );
    BLOWFISH_VALIDATE_RET( length == 0 || input  != NULL );
    BLOWFISH_VALIDATE_RET( length == 0 || output != NULL );

    n = *iv_off;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	617b      	str	r3, [r7, #20]
    if( n >= 8 )
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b07      	cmp	r3, #7
 800662e:	d902      	bls.n	8006636 <mbedtls_blowfish_crypt_cfb64+0x20>
        return( MBEDTLS_ERR_BLOWFISH_BAD_INPUT_DATA );
 8006630:	f06f 0315 	mvn.w	r3, #21
 8006634:	e05a      	b.n	80066ec <mbedtls_blowfish_crypt_cfb64+0xd6>

    if( mode == MBEDTLS_BLOWFISH_DECRYPT )
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d14e      	bne.n	80066da <mbedtls_blowfish_crypt_cfb64+0xc4>
    {
        while( length-- )
 800663c:	e026      	b.n	800668c <mbedtls_blowfish_crypt_cfb64+0x76>
        {
            if( n == 0 )
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d105      	bne.n	8006650 <mbedtls_blowfish_crypt_cfb64+0x3a>
                mbedtls_blowfish_crypt_ecb( ctx, MBEDTLS_BLOWFISH_ENCRYPT, iv, iv );
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	6a3a      	ldr	r2, [r7, #32]
 8006648:	2101      	movs	r1, #1
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff fef4 	bl	8006438 <mbedtls_blowfish_crypt_ecb>

            c = *input++;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	627a      	str	r2, [r7, #36]	; 0x24
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	613b      	str	r3, [r7, #16]
            *output++ = (unsigned char)( c ^ iv[n] );
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	b25a      	sxtb	r2, r3
 800665e:	6a39      	ldr	r1, [r7, #32]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	440b      	add	r3, r1
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	b25b      	sxtb	r3, r3
 8006668:	4053      	eors	r3, r2
 800666a:	b259      	sxtb	r1, r3
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	62ba      	str	r2, [r7, #40]	; 0x28
 8006672:	b2ca      	uxtb	r2, r1
 8006674:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 8006676:	6a3a      	ldr	r2, [r7, #32]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	4413      	add	r3, r2
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]

            n = ( n + 1 ) % MBEDTLS_BLOWFISH_BLOCKSIZE;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	3301      	adds	r3, #1
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	617b      	str	r3, [r7, #20]
        while( length-- )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	1e5a      	subs	r2, r3, #1
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1d3      	bne.n	800663e <mbedtls_blowfish_crypt_cfb64+0x28>
 8006696:	e025      	b.n	80066e4 <mbedtls_blowfish_crypt_cfb64+0xce>
    }
    else
    {
        while( length-- )
        {
            if( n == 0 )
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d105      	bne.n	80066aa <mbedtls_blowfish_crypt_cfb64+0x94>
                mbedtls_blowfish_crypt_ecb( ctx, MBEDTLS_BLOWFISH_ENCRYPT, iv, iv );
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	6a3a      	ldr	r2, [r7, #32]
 80066a2:	2101      	movs	r1, #1
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff fec7 	bl	8006438 <mbedtls_blowfish_crypt_ecb>

            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
 80066aa:	6a3a      	ldr	r2, [r7, #32]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4413      	add	r3, r2
 80066b0:	7819      	ldrb	r1, [r3, #0]
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	627a      	str	r2, [r7, #36]	; 0x24
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	1c58      	adds	r0, r3, #1
 80066be:	62b8      	str	r0, [r7, #40]	; 0x28
 80066c0:	404a      	eors	r2, r1
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6a39      	ldr	r1, [r7, #32]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	440a      	add	r2, r1
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	7013      	strb	r3, [r2, #0]

            n = ( n + 1 ) % MBEDTLS_BLOWFISH_BLOCKSIZE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	3301      	adds	r3, #1
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	617b      	str	r3, [r7, #20]
        while( length-- )
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	1e5a      	subs	r2, r3, #1
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1d9      	bne.n	8006698 <mbedtls_blowfish_crypt_cfb64+0x82>
        }
    }

    *iv_off = n;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	601a      	str	r2, [r3, #0]

    return( 0 );
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <mbedtls_blowfish_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[MBEDTLS_BLOWFISH_BLOCKSIZE],
                       unsigned char stream_block[MBEDTLS_BLOWFISH_BLOCKSIZE],
                       const unsigned char *input,
                       unsigned char *output )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
    BLOWFISH_VALIDATE_RET( stream_block  != NULL );
    BLOWFISH_VALIDATE_RET( nc_off != NULL );
    BLOWFISH_VALIDATE_RET( length == 0 || input  != NULL );
    BLOWFISH_VALIDATE_RET( length == 0 || output != NULL );

    n = *nc_off;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	61bb      	str	r3, [r7, #24]
    if( n >= 8 )
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b07      	cmp	r3, #7
 800670c:	d939      	bls.n	8006782 <mbedtls_blowfish_crypt_ctr+0x8e>
        return( MBEDTLS_ERR_BLOWFISH_BAD_INPUT_DATA );
 800670e:	f06f 0315 	mvn.w	r3, #21
 8006712:	e03f      	b.n	8006794 <mbedtls_blowfish_crypt_ctr+0xa0>

    while( length-- )
    {
        if( n == 0 ) {
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d11b      	bne.n	8006752 <mbedtls_blowfish_crypt_ctr+0x5e>
            mbedtls_blowfish_crypt_ecb( ctx, MBEDTLS_BLOWFISH_ENCRYPT, nonce_counter,
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	2101      	movs	r1, #1
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff fe89 	bl	8006438 <mbedtls_blowfish_crypt_ecb>
                                stream_block );

            for( i = MBEDTLS_BLOWFISH_BLOCKSIZE; i > 0; i-- )
 8006726:	2308      	movs	r3, #8
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	e00d      	b.n	8006748 <mbedtls_blowfish_crypt_ctr+0x54>
                if( ++nonce_counter[i - 1] != 0 )
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	3b01      	subs	r3, #1
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	4413      	add	r3, r2
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	3201      	adds	r2, #1
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <mbedtls_blowfish_crypt_ctr+0x5c>
            for( i = MBEDTLS_BLOWFISH_BLOCKSIZE; i > 0; i-- )
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3b01      	subs	r3, #1
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	2b00      	cmp	r3, #0
 800674c:	dcee      	bgt.n	800672c <mbedtls_blowfish_crypt_ctr+0x38>
 800674e:	e000      	b.n	8006752 <mbedtls_blowfish_crypt_ctr+0x5e>
                    break;
 8006750:	bf00      	nop
        }
        c = *input++;
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char)( c ^ stream_block[n] );
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	b25a      	sxtb	r2, r3
 8006760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	440b      	add	r3, r1
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	b25b      	sxtb	r3, r3
 800676a:	4053      	eors	r3, r2
 800676c:	b259      	sxtb	r1, r3
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	633a      	str	r2, [r7, #48]	; 0x30
 8006774:	b2ca      	uxtb	r2, r1
 8006776:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) % MBEDTLS_BLOWFISH_BLOCKSIZE;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	3301      	adds	r3, #1
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	61bb      	str	r3, [r7, #24]
    while( length-- )
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	1e5a      	subs	r2, r3, #1
 8006786:	60ba      	str	r2, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1c3      	bne.n	8006714 <mbedtls_blowfish_crypt_ctr+0x20>
    }

    *nc_off = n;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	601a      	str	r2, [r3, #0]

    return( 0 );
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <camellia_feistel>:
        }                                                   \
}

static void camellia_feistel( const uint32_t x[2], const uint32_t k[2],
                              uint32_t z[2])
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4053      	eors	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
    I1 = x[1] ^ k[1];
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3304      	adds	r3, #4
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3304      	adds	r3, #4
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4053      	eors	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]

    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	0e1b      	lsrs	r3, r3, #24
 80067c8:	4a2d      	ldr	r2, [pc, #180]	; (8006880 <camellia_feistel+0xe4>)
 80067ca:	5cd3      	ldrb	r3, [r2, r3]
 80067cc:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	0c1b      	lsrs	r3, r3, #16
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	492b      	ldr	r1, [pc, #172]	; (8006884 <camellia_feistel+0xe8>)
 80067d6:	5ccb      	ldrb	r3, [r1, r3]
 80067d8:	041b      	lsls	r3, r3, #16
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 80067da:	431a      	orrs	r2, r3
         ((uint32_t) SBOX3((I0 >>  8) & 0xFF) <<  8) |
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	0a1b      	lsrs	r3, r3, #8
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	4929      	ldr	r1, [pc, #164]	; (8006888 <camellia_feistel+0xec>)
 80067e4:	5ccb      	ldrb	r3, [r1, r3]
 80067e6:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 80067e8:	4313      	orrs	r3, r2
         ((uint32_t) SBOX4((I0      ) & 0xFF)      );
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	4927      	ldr	r1, [pc, #156]	; (800688c <camellia_feistel+0xf0>)
 80067f0:	5c8a      	ldrb	r2, [r1, r2]
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	0e1b      	lsrs	r3, r3, #24
 80067fa:	4a22      	ldr	r2, [pc, #136]	; (8006884 <camellia_feistel+0xe8>)
 80067fc:	5cd3      	ldrb	r3, [r2, r3]
 80067fe:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	0c1b      	lsrs	r3, r3, #16
 8006804:	b2db      	uxtb	r3, r3
 8006806:	4920      	ldr	r1, [pc, #128]	; (8006888 <camellia_feistel+0xec>)
 8006808:	5ccb      	ldrb	r3, [r1, r3]
 800680a:	041b      	lsls	r3, r3, #16
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 800680c:	431a      	orrs	r2, r3
         ((uint32_t) SBOX4((I1 >>  8) & 0xFF) <<  8) |
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	0a1b      	lsrs	r3, r3, #8
 8006812:	b2db      	uxtb	r3, r3
 8006814:	491d      	ldr	r1, [pc, #116]	; (800688c <camellia_feistel+0xf0>)
 8006816:	5ccb      	ldrb	r3, [r1, r3]
 8006818:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 800681a:	4313      	orrs	r3, r2
         ((uint32_t) SBOX1((I1      ) & 0xFF)      );
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	4917      	ldr	r1, [pc, #92]	; (8006880 <camellia_feistel+0xe4>)
 8006822:	5c8a      	ldrb	r2, [r1, r2]
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]

    I0 ^= (I1 << 8) | (I1 >> 24);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	ea4f 6333 	mov.w	r3, r3, ror #24
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4053      	eors	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 << 16) | (I0 >> 16);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	ea4f 4333 	mov.w	r3, r3, ror #16
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4053      	eors	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
    I0 ^= (I1 >> 8) | (I1 << 24);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	ea4f 2333 	mov.w	r3, r3, ror #8
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4053      	eors	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 >> 8) | (I0 << 24);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4053      	eors	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

    z[0] ^= I1;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	405a      	eors	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	601a      	str	r2, [r3, #0]
    z[1] ^= I0;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3304      	adds	r3, #4
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	404a      	eors	r2, r1
 8006872:	601a      	str	r2, [r3, #0]
}
 8006874:	bf00      	nop
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	08018018 	.word	0x08018018
 8006884:	08018118 	.word	0x08018118
 8006888:	08018218 	.word	0x08018218
 800688c:	08018318 	.word	0x08018318

08006890 <mbedtls_camellia_init>:

void mbedtls_camellia_init( mbedtls_camellia_context *ctx )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
    CAMELLIA_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_camellia_context ) );
 8006898:	f44f 728a 	mov.w	r2, #276	; 0x114
 800689c:	2100      	movs	r1, #0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f00e fc5f 	bl	8015162 <memset>
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <mbedtls_camellia_free>:

void mbedtls_camellia_free( mbedtls_camellia_context *ctx )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <mbedtls_camellia_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_camellia_context ) );
 80068ba:	f44f 718a 	mov.w	r1, #276	; 0x114
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f007 fd16 	bl	800e2f0 <mbedtls_platform_zeroize>
 80068c4:	e000      	b.n	80068c8 <mbedtls_camellia_free+0x1c>
        return;
 80068c6:	bf00      	nop
}
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b0c8      	sub	sp, #288	; 0x120
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	6018      	str	r0, [r3, #0]
 80068dc:	f107 0308 	add.w	r3, r7, #8
 80068e0:	6019      	str	r1, [r3, #0]
 80068e2:	1d3b      	adds	r3, r7, #4
 80068e4:	601a      	str	r2, [r3, #0]
    uint32_t TK[20];

    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    RK = ctx->rk;
 80068e6:	f107 030c 	add.w	r3, r7, #12
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3304      	adds	r3, #4
 80068ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    memset( t, 0, 64 );
 80068f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80068f6:	2240      	movs	r2, #64	; 0x40
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f00e fc31 	bl	8015162 <memset>
    memset( RK, 0, sizeof(ctx->rk) );
 8006900:	f44f 7288 	mov.w	r2, #272	; 0x110
 8006904:	2100      	movs	r1, #0
 8006906:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800690a:	f00e fc2a 	bl	8015162 <memset>

    switch( keybits )
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2bc0      	cmp	r3, #192	; 0xc0
 8006914:	d00d      	beq.n	8006932 <mbedtls_camellia_setkey_enc+0x62>
 8006916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800691a:	d00a      	beq.n	8006932 <mbedtls_camellia_setkey_enc+0x62>
 800691c:	2b80      	cmp	r3, #128	; 0x80
 800691e:	d111      	bne.n	8006944 <mbedtls_camellia_setkey_enc+0x74>
    {
        case 128: ctx->nr = 3; idx = 0; break;
 8006920:	f107 030c 	add.w	r3, r7, #12
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2203      	movs	r2, #3
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006930:	e00c      	b.n	800694c <mbedtls_camellia_setkey_enc+0x7c>
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2204      	movs	r2, #4
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	2301      	movs	r3, #1
 800693e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006942:	e003      	b.n	800694c <mbedtls_camellia_setkey_enc+0x7c>
        default : return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 8006944:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8006948:	f000 bda4 	b.w	8007494 <mbedtls_camellia_setkey_enc+0xbc4>
    }

    for( i = 0; i < keybits / 8; ++i )
 800694c:	2300      	movs	r3, #0
 800694e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006952:	e012      	b.n	800697a <mbedtls_camellia_setkey_enc+0xaa>
        t[i] = key[i];
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800695e:	4413      	add	r3, r2
 8006960:	7819      	ldrb	r1, [r3, #0]
 8006962:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8006966:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800696a:	4413      	add	r3, r2
 800696c:	460a      	mov	r2, r1
 800696e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < keybits / 8; ++i )
 8006970:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006974:	3301      	adds	r3, #1
 8006976:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800697a:	1d3b      	adds	r3, r7, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	08db      	lsrs	r3, r3, #3
 8006980:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006984:	429a      	cmp	r2, r3
 8006986:	d3e5      	bcc.n	8006954 <mbedtls_camellia_setkey_enc+0x84>

    if( keybits == 192 ) {
 8006988:	1d3b      	adds	r3, r7, #4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2bc0      	cmp	r3, #192	; 0xc0
 800698e:	d11e      	bne.n	80069ce <mbedtls_camellia_setkey_enc+0xfe>
        for( i = 0; i < 8; i++ )
 8006990:	2300      	movs	r3, #0
 8006992:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006996:	e016      	b.n	80069c6 <mbedtls_camellia_setkey_enc+0xf6>
            t[24 + i] = ~t[16 + i];
 8006998:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800699c:	3310      	adds	r3, #16
 800699e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80069a2:	4413      	add	r3, r2
 80069a4:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 80069a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069ac:	3318      	adds	r3, #24
 80069ae:	43d2      	mvns	r2, r2
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80069b6:	440b      	add	r3, r1
 80069b8:	f803 2c4c 	strb.w	r2, [r3, #-76]
        for( i = 0; i < 8; i++ )
 80069bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069c0:	3301      	adds	r3, #1
 80069c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80069c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069ca:	2b07      	cmp	r3, #7
 80069cc:	d9e4      	bls.n	8006998 <mbedtls_camellia_setkey_enc+0xc8>
    }

    /*
     * Prepare SIGMA values
     */
    for( i = 0; i < 6; i++ ) {
 80069ce:	2300      	movs	r3, #0
 80069d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80069d4:	e04f      	b.n	8006a76 <mbedtls_camellia_setkey_enc+0x1a6>
        GET_UINT32_BE( SIGMA[i][0], SIGMA_CHARS[i], 0 );
 80069d6:	4ab8      	ldr	r2, [pc, #736]	; (8006cb8 <mbedtls_camellia_setkey_enc+0x3e8>)
 80069d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069dc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80069e0:	061a      	lsls	r2, r3, #24
 80069e2:	49b5      	ldr	r1, [pc, #724]	; (8006cb8 <mbedtls_camellia_setkey_enc+0x3e8>)
 80069e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	440b      	add	r3, r1
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	041b      	lsls	r3, r3, #16
 80069f0:	431a      	orrs	r2, r3
 80069f2:	49b1      	ldr	r1, [pc, #708]	; (8006cb8 <mbedtls_camellia_setkey_enc+0x3e8>)
 80069f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	440b      	add	r3, r1
 80069fc:	789b      	ldrb	r3, [r3, #2]
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	431a      	orrs	r2, r3
 8006a02:	49ad      	ldr	r1, [pc, #692]	; (8006cb8 <mbedtls_camellia_setkey_enc+0x3e8>)
 8006a04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	440b      	add	r3, r1
 8006a0c:	78db      	ldrb	r3, [r3, #3]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006a1a:	440b      	add	r3, r1
 8006a1c:	f843 2c7c 	str.w	r2, [r3, #-124]
        GET_UINT32_BE( SIGMA[i][1], SIGMA_CHARS[i], 4 );
 8006a20:	4aa5      	ldr	r2, [pc, #660]	; (8006cb8 <mbedtls_camellia_setkey_enc+0x3e8>)
 8006a22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	4413      	add	r3, r2
 8006a2a:	791b      	ldrb	r3, [r3, #4]
 8006a2c:	061a      	lsls	r2, r3, #24
 8006a2e:	49a2      	ldr	r1, [pc, #648]	; (8006cb8 <mbedtls_camellia_setkey_enc+0x3e8>)
 8006a30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	440b      	add	r3, r1
 8006a38:	795b      	ldrb	r3, [r3, #5]
 8006a3a:	041b      	lsls	r3, r3, #16
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	499e      	ldr	r1, [pc, #632]	; (8006cb8 <mbedtls_camellia_setkey_enc+0x3e8>)
 8006a40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	440b      	add	r3, r1
 8006a48:	799b      	ldrb	r3, [r3, #6]
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	499a      	ldr	r1, [pc, #616]	; (8006cb8 <mbedtls_camellia_setkey_enc+0x3e8>)
 8006a50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	440b      	add	r3, r1
 8006a58:	79db      	ldrb	r3, [r3, #7]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006a66:	440b      	add	r3, r1
 8006a68:	f843 2c78 	str.w	r2, [r3, #-120]
    for( i = 0; i < 6; i++ ) {
 8006a6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a70:	3301      	adds	r3, #1
 8006a72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	d9ab      	bls.n	80069d6 <mbedtls_camellia_setkey_enc+0x106>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset( KC, 0, sizeof(KC) );
 8006a7e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006a82:	2240      	movs	r2, #64	; 0x40
 8006a84:	2100      	movs	r1, #0
 8006a86:	4618      	mov	r0, r3
 8006a88:	f00e fb6b 	bl	8015162 <memset>

    /* Store KL, KR */
    for( i = 0; i < 8; i++ )
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a92:	e035      	b.n	8006b00 <mbedtls_camellia_setkey_enc+0x230>
        GET_UINT32_BE( KC[i], t, i * 4 );
 8006a94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8006aa4:	061a      	lsls	r2, r3, #24
 8006aa6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	3301      	adds	r3, #1
 8006aae:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006ab2:	440b      	add	r3, r1
 8006ab4:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8006ab8:	041b      	lsls	r3, r3, #16
 8006aba:	431a      	orrs	r2, r3
 8006abc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	3302      	adds	r3, #2
 8006ac4:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006ac8:	440b      	add	r3, r1
 8006aca:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006ad6:	0092      	lsls	r2, r2, #2
 8006ad8:	3203      	adds	r2, #3
 8006ada:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006ade:	440a      	add	r2, r1
 8006ae0:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006af0:	440b      	add	r3, r1
 8006af2:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 8; i++ )
 8006af6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006afa:	3301      	adds	r3, #1
 8006afc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b04:	2b07      	cmp	r3, #7
 8006b06:	d9c5      	bls.n	8006a94 <mbedtls_camellia_setkey_enc+0x1c4>

    /* Generate KA */
    for( i = 0; i < 4; ++i )
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b0e:	e01f      	b.n	8006b50 <mbedtls_camellia_setkey_enc+0x280>
        KC[8 + i] = KC[i] ^ KC[4 + i];
 8006b10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8006b20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b24:	3304      	adds	r3, #4
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8006b32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b36:	3308      	adds	r3, #8
 8006b38:	404a      	eors	r2, r1
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006b40:	440b      	add	r3, r1
 8006b42:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 8006b46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d9db      	bls.n	8006b10 <mbedtls_camellia_setkey_enc+0x240>

    camellia_feistel( KC + 8, SIGMA[0], KC + 10 );
 8006b58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006b5c:	3320      	adds	r3, #32
 8006b5e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006b62:	3228      	adds	r2, #40	; 0x28
 8006b64:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff fe17 	bl	800679c <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[1], KC + 8 );
 8006b6e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006b72:	3328      	adds	r3, #40	; 0x28
 8006b74:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006b78:	3220      	adds	r2, #32
 8006b7a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8006b7e:	3108      	adds	r1, #8
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff fe0b 	bl	800679c <camellia_feistel>

    for( i = 0; i < 4; ++i )
 8006b86:	2300      	movs	r3, #0
 8006b88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b8c:	e01f      	b.n	8006bce <mbedtls_camellia_setkey_enc+0x2fe>
        KC[8 + i] ^= KC[i];
 8006b8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006b92:	3308      	adds	r3, #8
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8006ba0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006baa:	4413      	add	r3, r2
 8006bac:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8006bb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	404a      	eors	r2, r1
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006bbe:	440b      	add	r3, r1
 8006bc0:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 8006bc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bc8:	3301      	adds	r3, #1
 8006bca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006bce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d9db      	bls.n	8006b8e <mbedtls_camellia_setkey_enc+0x2be>

    camellia_feistel( KC + 8, SIGMA[2], KC + 10 );
 8006bd6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006bda:	3320      	adds	r3, #32
 8006bdc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006be0:	3228      	adds	r2, #40	; 0x28
 8006be2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8006be6:	3110      	adds	r1, #16
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff fdd7 	bl	800679c <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[3], KC + 8 );
 8006bee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006bf2:	3328      	adds	r3, #40	; 0x28
 8006bf4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006bf8:	3220      	adds	r2, #32
 8006bfa:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8006bfe:	3118      	adds	r1, #24
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff fdcb 	bl	800679c <camellia_feistel>

    if( keybits > 128 ) {
 8006c06:	1d3b      	adds	r3, r7, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b80      	cmp	r3, #128	; 0x80
 8006c0c:	d940      	bls.n	8006c90 <mbedtls_camellia_setkey_enc+0x3c0>
        /* Generate KB */
        for( i = 0; i < 4; ++i )
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006c14:	e020      	b.n	8006c58 <mbedtls_camellia_setkey_enc+0x388>
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 8006c16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006c22:	4413      	add	r3, r2
 8006c24:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8006c28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8006c34:	4413      	add	r3, r2
 8006c36:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8006c3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c3e:	330c      	adds	r3, #12
 8006c40:	404a      	eors	r2, r1
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8006c48:	440b      	add	r3, r1
 8006c4a:	f843 2cbc 	str.w	r2, [r3, #-188]
        for( i = 0; i < 4; ++i )
 8006c4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c52:	3301      	adds	r3, #1
 8006c54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006c58:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d9da      	bls.n	8006c16 <mbedtls_camellia_setkey_enc+0x346>

        camellia_feistel( KC + 12, SIGMA[4], KC + 14 );
 8006c60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006c64:	3330      	adds	r3, #48	; 0x30
 8006c66:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006c6a:	3238      	adds	r2, #56	; 0x38
 8006c6c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8006c70:	3120      	adds	r1, #32
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7ff fd92 	bl	800679c <camellia_feistel>
        camellia_feistel( KC + 14, SIGMA[5], KC + 12 );
 8006c78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006c7c:	3338      	adds	r3, #56	; 0x38
 8006c7e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006c82:	3230      	adds	r2, #48	; 0x30
 8006c84:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8006c88:	3128      	adds	r1, #40	; 0x28
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff fd86 	bl	800679c <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE( idx, 0 );
 8006c90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c92:	f107 0314 	add.w	r3, r7, #20
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c9a:	f107 0314 	add.w	r3, r7, #20
 8006c9e:	605a      	str	r2, [r3, #4]
 8006ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ca2:	f107 0314 	add.w	r3, r7, #20
 8006ca6:	609a      	str	r2, [r3, #8]
 8006ca8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006caa:	f107 0314 	add.w	r3, r7, #20
 8006cae:	60da      	str	r2, [r3, #12]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006cb6:	e09a      	b.n	8006dee <mbedtls_camellia_setkey_enc+0x51e>
 8006cb8:	08017fe8 	.word	0x08017fe8
 8006cbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	49c6      	ldr	r1, [pc, #792]	; (8006fdc <mbedtls_camellia_setkey_enc+0x70c>)
 8006cc4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006cc8:	0112      	lsls	r2, r2, #4
 8006cca:	440a      	add	r2, r1
 8006ccc:	4413      	add	r3, r2
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8087 	beq.w	8006de4 <mbedtls_camellia_setkey_enc+0x514>
 8006cd6:	f107 0314 	add.w	r3, r7, #20
 8006cda:	6819      	ldr	r1, [r3, #0]
 8006cdc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	f003 031f 	and.w	r3, r3, #31
 8006cea:	4099      	lsls	r1, r3
 8006cec:	f107 0314 	add.w	r3, r7, #20
 8006cf0:	6858      	ldr	r0, [r3, #4]
 8006cf2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	f1c3 0320 	rsb	r3, r3, #32
 8006d04:	fa20 f203 	lsr.w	r2, r0, r3
 8006d08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	f107 0014 	add.w	r0, r7, #20
 8006d12:	4403      	add	r3, r0
 8006d14:	404a      	eors	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f107 0314 	add.w	r3, r7, #20
 8006d1c:	6859      	ldr	r1, [r3, #4]
 8006d1e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006d22:	4613      	mov	r3, r2
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	4099      	lsls	r1, r3
 8006d2e:	f107 0314 	add.w	r3, r7, #20
 8006d32:	6898      	ldr	r0, [r3, #8]
 8006d34:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006d38:	4613      	mov	r3, r2
 8006d3a:	011b      	lsls	r3, r3, #4
 8006d3c:	1a9b      	subs	r3, r3, r2
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	f1c3 0320 	rsb	r3, r3, #32
 8006d46:	fa20 f203 	lsr.w	r2, r0, r3
 8006d4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	3304      	adds	r3, #4
 8006d52:	f107 0014 	add.w	r0, r7, #20
 8006d56:	4403      	add	r3, r0
 8006d58:	404a      	eors	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	f107 0314 	add.w	r3, r7, #20
 8006d60:	6899      	ldr	r1, [r3, #8]
 8006d62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006d66:	4613      	mov	r3, r2
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	f003 031f 	and.w	r3, r3, #31
 8006d70:	4099      	lsls	r1, r3
 8006d72:	f107 0314 	add.w	r3, r7, #20
 8006d76:	68d8      	ldr	r0, [r3, #12]
 8006d78:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	f1c3 0320 	rsb	r3, r3, #32
 8006d8a:	fa20 f203 	lsr.w	r2, r0, r3
 8006d8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006d92:	011b      	lsls	r3, r3, #4
 8006d94:	3308      	adds	r3, #8
 8006d96:	f107 0014 	add.w	r0, r7, #20
 8006d9a:	4403      	add	r3, r0
 8006d9c:	404a      	eors	r2, r1
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f107 0314 	add.w	r3, r7, #20
 8006da4:	68d9      	ldr	r1, [r3, #12]
 8006da6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006daa:	4613      	mov	r3, r2
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	1a9b      	subs	r3, r3, r2
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	4099      	lsls	r1, r3
 8006db6:	f107 0314 	add.w	r3, r7, #20
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	f1c3 0320 	rsb	r3, r3, #32
 8006dce:	fa20 f203 	lsr.w	r2, r0, r3
 8006dd2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	330c      	adds	r3, #12
 8006dda:	f107 0014 	add.w	r0, r7, #20
 8006dde:	4403      	add	r3, r0
 8006de0:	404a      	eors	r2, r1
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006de8:	3301      	adds	r3, #1
 8006dea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006dee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	f67f af62 	bls.w	8006cbc <mbedtls_camellia_setkey_enc+0x3ec>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006dfe:	e02c      	b.n	8006e5a <mbedtls_camellia_setkey_enc+0x58a>
 8006e00:	4977      	ldr	r1, [pc, #476]	; (8006fe0 <mbedtls_camellia_setkey_enc+0x710>)
 8006e02:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	18ca      	adds	r2, r1, r3
 8006e10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e14:	4413      	add	r3, r2
 8006e16:	f993 3000 	ldrsb.w	r3, [r3]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e1e:	d017      	beq.n	8006e50 <mbedtls_camellia_setkey_enc+0x580>
 8006e20:	496f      	ldr	r1, [pc, #444]	; (8006fe0 <mbedtls_camellia_setkey_enc+0x710>)
 8006e22:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	18ca      	adds	r2, r1, r3
 8006e30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e34:	4413      	add	r3, r2
 8006e36:	f993 3000 	ldrsb.w	r3, [r3]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006e40:	4413      	add	r3, r2
 8006e42:	f107 0214 	add.w	r2, r7, #20
 8006e46:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8006e4a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e54:	3301      	adds	r3, #1
 8006e56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e5e:	2b13      	cmp	r3, #19
 8006e60:	d9ce      	bls.n	8006e00 <mbedtls_camellia_setkey_enc+0x530>

    /* Manipulating KR */
    if( keybits > 128 ) {
 8006e62:	1d3b      	adds	r3, r7, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b80      	cmp	r3, #128	; 0x80
 8006e68:	f240 80ef 	bls.w	800704a <mbedtls_camellia_setkey_enc+0x77a>
        SHIFT_AND_PLACE( idx, 1 );
 8006e6c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006e6e:	f107 0314 	add.w	r3, r7, #20
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e76:	f107 0314 	add.w	r3, r7, #20
 8006e7a:	605a      	str	r2, [r3, #4]
 8006e7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e7e:	f107 0314 	add.w	r3, r7, #20
 8006e82:	609a      	str	r2, [r3, #8]
 8006e84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e88:	f107 0314 	add.w	r3, r7, #20
 8006e8c:	60da      	str	r2, [r3, #12]
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e94:	e099      	b.n	8006fca <mbedtls_camellia_setkey_enc+0x6fa>
 8006e96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	494f      	ldr	r1, [pc, #316]	; (8006fdc <mbedtls_camellia_setkey_enc+0x70c>)
 8006e9e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006ea2:	0112      	lsls	r2, r2, #4
 8006ea4:	440a      	add	r2, r1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 8087 	beq.w	8006fc0 <mbedtls_camellia_setkey_enc+0x6f0>
 8006eb2:	f107 0314 	add.w	r3, r7, #20
 8006eb6:	6819      	ldr	r1, [r3, #0]
 8006eb8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	4099      	lsls	r1, r3
 8006ec8:	f107 0314 	add.w	r3, r7, #20
 8006ecc:	6858      	ldr	r0, [r3, #4]
 8006ece:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	f1c3 0320 	rsb	r3, r3, #32
 8006ee0:	fa20 f203 	lsr.w	r2, r0, r3
 8006ee4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	f107 0014 	add.w	r0, r7, #20
 8006eee:	4403      	add	r3, r0
 8006ef0:	404a      	eors	r2, r1
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	f107 0314 	add.w	r3, r7, #20
 8006ef8:	6859      	ldr	r1, [r3, #4]
 8006efa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006efe:	4613      	mov	r3, r2
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	1a9b      	subs	r3, r3, r2
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	4099      	lsls	r1, r3
 8006f0a:	f107 0314 	add.w	r3, r7, #20
 8006f0e:	6898      	ldr	r0, [r3, #8]
 8006f10:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006f14:	4613      	mov	r3, r2
 8006f16:	011b      	lsls	r3, r3, #4
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	f1c3 0320 	rsb	r3, r3, #32
 8006f22:	fa20 f203 	lsr.w	r2, r0, r3
 8006f26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	f107 0014 	add.w	r0, r7, #20
 8006f32:	4403      	add	r3, r0
 8006f34:	404a      	eors	r2, r1
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	6899      	ldr	r1, [r3, #8]
 8006f3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006f42:	4613      	mov	r3, r2
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	4099      	lsls	r1, r3
 8006f4e:	f107 0314 	add.w	r3, r7, #20
 8006f52:	68d8      	ldr	r0, [r3, #12]
 8006f54:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006f58:	4613      	mov	r3, r2
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	f1c3 0320 	rsb	r3, r3, #32
 8006f66:	fa20 f203 	lsr.w	r2, r0, r3
 8006f6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	3308      	adds	r3, #8
 8006f72:	f107 0014 	add.w	r0, r7, #20
 8006f76:	4403      	add	r3, r0
 8006f78:	404a      	eors	r2, r1
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f107 0314 	add.w	r3, r7, #20
 8006f80:	68d9      	ldr	r1, [r3, #12]
 8006f82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006f86:	4613      	mov	r3, r2
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	4099      	lsls	r1, r3
 8006f92:	f107 0314 	add.w	r3, r7, #20
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	f1c3 0320 	rsb	r3, r3, #32
 8006faa:	fa20 f203 	lsr.w	r2, r0, r3
 8006fae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	f107 0014 	add.w	r0, r7, #20
 8006fba:	4403      	add	r3, r0
 8006fbc:	404a      	eors	r2, r1
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006fca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	f67f af61 	bls.w	8006e96 <mbedtls_camellia_setkey_enc+0x5c6>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006fda:	e032      	b.n	8007042 <mbedtls_camellia_setkey_enc+0x772>
 8006fdc:	08018418 	.word	0x08018418
 8006fe0:	08018438 	.word	0x08018438
 8006fe4:	499e      	ldr	r1, [pc, #632]	; (8007260 <mbedtls_camellia_setkey_enc+0x990>)
 8006fe6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	18ca      	adds	r2, r1, r3
 8006ff4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ff8:	4413      	add	r3, r2
 8006ffa:	3314      	adds	r3, #20
 8006ffc:	f993 3000 	ldrsb.w	r3, [r3]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007004:	d018      	beq.n	8007038 <mbedtls_camellia_setkey_enc+0x768>
 8007006:	4996      	ldr	r1, [pc, #600]	; (8007260 <mbedtls_camellia_setkey_enc+0x990>)
 8007008:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	18ca      	adds	r2, r1, r3
 8007016:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800701a:	4413      	add	r3, r2
 800701c:	3314      	adds	r3, #20
 800701e:	f993 3000 	ldrsb.w	r3, [r3]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007028:	4413      	add	r3, r2
 800702a:	f107 0214 	add.w	r2, r7, #20
 800702e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8007032:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800703c:	3301      	adds	r3, #1
 800703e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007042:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007046:	2b13      	cmp	r3, #19
 8007048:	d9cc      	bls.n	8006fe4 <mbedtls_camellia_setkey_enc+0x714>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE( idx, 2 );
 800704a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800704e:	f107 0314 	add.w	r3, r7, #20
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007058:	f107 0314 	add.w	r3, r7, #20
 800705c:	605a      	str	r2, [r3, #4]
 800705e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007062:	f107 0314 	add.w	r3, r7, #20
 8007066:	609a      	str	r2, [r3, #8]
 8007068:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800706c:	f107 0314 	add.w	r3, r7, #20
 8007070:	60da      	str	r2, [r3, #12]
 8007072:	2301      	movs	r3, #1
 8007074:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007078:	e099      	b.n	80071ae <mbedtls_camellia_setkey_enc+0x8de>
 800707a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800707e:	3b01      	subs	r3, #1
 8007080:	4978      	ldr	r1, [pc, #480]	; (8007264 <mbedtls_camellia_setkey_enc+0x994>)
 8007082:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007086:	0112      	lsls	r2, r2, #4
 8007088:	440a      	add	r2, r1
 800708a:	4413      	add	r3, r2
 800708c:	3308      	adds	r3, #8
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 8087 	beq.w	80071a4 <mbedtls_camellia_setkey_enc+0x8d4>
 8007096:	f107 0314 	add.w	r3, r7, #20
 800709a:	6819      	ldr	r1, [r3, #0]
 800709c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80070a0:	4613      	mov	r3, r2
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	f003 031f 	and.w	r3, r3, #31
 80070aa:	4099      	lsls	r1, r3
 80070ac:	f107 0314 	add.w	r3, r7, #20
 80070b0:	6858      	ldr	r0, [r3, #4]
 80070b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80070b6:	4613      	mov	r3, r2
 80070b8:	011b      	lsls	r3, r3, #4
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	f1c3 0320 	rsb	r3, r3, #32
 80070c4:	fa20 f203 	lsr.w	r2, r0, r3
 80070c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	f107 0014 	add.w	r0, r7, #20
 80070d2:	4403      	add	r3, r0
 80070d4:	404a      	eors	r2, r1
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	f107 0314 	add.w	r3, r7, #20
 80070dc:	6859      	ldr	r1, [r3, #4]
 80070de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80070e2:	4613      	mov	r3, r2
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	4099      	lsls	r1, r3
 80070ee:	f107 0314 	add.w	r3, r7, #20
 80070f2:	6898      	ldr	r0, [r3, #8]
 80070f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80070f8:	4613      	mov	r3, r2
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	1a9b      	subs	r3, r3, r2
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	f1c3 0320 	rsb	r3, r3, #32
 8007106:	fa20 f203 	lsr.w	r2, r0, r3
 800710a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	3304      	adds	r3, #4
 8007112:	f107 0014 	add.w	r0, r7, #20
 8007116:	4403      	add	r3, r0
 8007118:	404a      	eors	r2, r1
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	f107 0314 	add.w	r3, r7, #20
 8007120:	6899      	ldr	r1, [r3, #8]
 8007122:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007126:	4613      	mov	r3, r2
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	4099      	lsls	r1, r3
 8007132:	f107 0314 	add.w	r3, r7, #20
 8007136:	68d8      	ldr	r0, [r3, #12]
 8007138:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800713c:	4613      	mov	r3, r2
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	f003 031f 	and.w	r3, r3, #31
 8007146:	f1c3 0320 	rsb	r3, r3, #32
 800714a:	fa20 f203 	lsr.w	r2, r0, r3
 800714e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	3308      	adds	r3, #8
 8007156:	f107 0014 	add.w	r0, r7, #20
 800715a:	4403      	add	r3, r0
 800715c:	404a      	eors	r2, r1
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	f107 0314 	add.w	r3, r7, #20
 8007164:	68d9      	ldr	r1, [r3, #12]
 8007166:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800716a:	4613      	mov	r3, r2
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	1a9b      	subs	r3, r3, r2
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	4099      	lsls	r1, r3
 8007176:	f107 0314 	add.w	r3, r7, #20
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007180:	4613      	mov	r3, r2
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	f1c3 0320 	rsb	r3, r3, #32
 800718e:	fa20 f203 	lsr.w	r2, r0, r3
 8007192:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	330c      	adds	r3, #12
 800719a:	f107 0014 	add.w	r0, r7, #20
 800719e:	4403      	add	r3, r0
 80071a0:	404a      	eors	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071a8:	3301      	adds	r3, #1
 80071aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	f67f af61 	bls.w	800707a <mbedtls_camellia_setkey_enc+0x7aa>
 80071b8:	2300      	movs	r3, #0
 80071ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071be:	e02e      	b.n	800721e <mbedtls_camellia_setkey_enc+0x94e>
 80071c0:	4927      	ldr	r1, [pc, #156]	; (8007260 <mbedtls_camellia_setkey_enc+0x990>)
 80071c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	18ca      	adds	r2, r1, r3
 80071d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071d4:	4413      	add	r3, r2
 80071d6:	3328      	adds	r3, #40	; 0x28
 80071d8:	f993 3000 	ldrsb.w	r3, [r3]
 80071dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e0:	d018      	beq.n	8007214 <mbedtls_camellia_setkey_enc+0x944>
 80071e2:	491f      	ldr	r1, [pc, #124]	; (8007260 <mbedtls_camellia_setkey_enc+0x990>)
 80071e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	18ca      	adds	r2, r1, r3
 80071f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071f6:	4413      	add	r3, r2
 80071f8:	3328      	adds	r3, #40	; 0x28
 80071fa:	f993 3000 	ldrsb.w	r3, [r3]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007204:	4413      	add	r3, r2
 8007206:	f107 0214 	add.w	r2, r7, #20
 800720a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800720e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007218:	3301      	adds	r3, #1
 800721a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800721e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007222:	2b13      	cmp	r3, #19
 8007224:	d9cc      	bls.n	80071c0 <mbedtls_camellia_setkey_enc+0x8f0>

    /* Manipulating KB */
    if( keybits > 128 ) {
 8007226:	1d3b      	adds	r3, r7, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	f240 80f2 	bls.w	8007414 <mbedtls_camellia_setkey_enc+0xb44>
        SHIFT_AND_PLACE( idx, 3 );
 8007230:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007234:	f107 0314 	add.w	r3, r7, #20
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800723e:	f107 0314 	add.w	r3, r7, #20
 8007242:	605a      	str	r2, [r3, #4]
 8007244:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8007248:	f107 0314 	add.w	r3, r7, #20
 800724c:	609a      	str	r2, [r3, #8]
 800724e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007252:	f107 0314 	add.w	r3, r7, #20
 8007256:	60da      	str	r2, [r3, #12]
 8007258:	2301      	movs	r3, #1
 800725a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800725e:	e09d      	b.n	800739c <mbedtls_camellia_setkey_enc+0xacc>
 8007260:	08018438 	.word	0x08018438
 8007264:	08018418 	.word	0x08018418
 8007268:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800726c:	3b01      	subs	r3, #1
 800726e:	498c      	ldr	r1, [pc, #560]	; (80074a0 <mbedtls_camellia_setkey_enc+0xbd0>)
 8007270:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007274:	0112      	lsls	r2, r2, #4
 8007276:	440a      	add	r2, r1
 8007278:	4413      	add	r3, r2
 800727a:	330c      	adds	r3, #12
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8087 	beq.w	8007392 <mbedtls_camellia_setkey_enc+0xac2>
 8007284:	f107 0314 	add.w	r3, r7, #20
 8007288:	6819      	ldr	r1, [r3, #0]
 800728a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800728e:	4613      	mov	r3, r2
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	4099      	lsls	r1, r3
 800729a:	f107 0314 	add.w	r3, r7, #20
 800729e:	6858      	ldr	r0, [r3, #4]
 80072a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80072a4:	4613      	mov	r3, r2
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	1a9b      	subs	r3, r3, r2
 80072aa:	f003 031f 	and.w	r3, r3, #31
 80072ae:	f1c3 0320 	rsb	r3, r3, #32
 80072b2:	fa20 f203 	lsr.w	r2, r0, r3
 80072b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	f107 0014 	add.w	r0, r7, #20
 80072c0:	4403      	add	r3, r0
 80072c2:	404a      	eors	r2, r1
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	f107 0314 	add.w	r3, r7, #20
 80072ca:	6859      	ldr	r1, [r3, #4]
 80072cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80072d0:	4613      	mov	r3, r2
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	4099      	lsls	r1, r3
 80072dc:	f107 0314 	add.w	r3, r7, #20
 80072e0:	6898      	ldr	r0, [r3, #8]
 80072e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80072e6:	4613      	mov	r3, r2
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	f003 031f 	and.w	r3, r3, #31
 80072f0:	f1c3 0320 	rsb	r3, r3, #32
 80072f4:	fa20 f203 	lsr.w	r2, r0, r3
 80072f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	3304      	adds	r3, #4
 8007300:	f107 0014 	add.w	r0, r7, #20
 8007304:	4403      	add	r3, r0
 8007306:	404a      	eors	r2, r1
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	f107 0314 	add.w	r3, r7, #20
 800730e:	6899      	ldr	r1, [r3, #8]
 8007310:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007314:	4613      	mov	r3, r2
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	f003 031f 	and.w	r3, r3, #31
 800731e:	4099      	lsls	r1, r3
 8007320:	f107 0314 	add.w	r3, r7, #20
 8007324:	68d8      	ldr	r0, [r3, #12]
 8007326:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800732a:	4613      	mov	r3, r2
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	f1c3 0320 	rsb	r3, r3, #32
 8007338:	fa20 f203 	lsr.w	r2, r0, r3
 800733c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	3308      	adds	r3, #8
 8007344:	f107 0014 	add.w	r0, r7, #20
 8007348:	4403      	add	r3, r0
 800734a:	404a      	eors	r2, r1
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	f107 0314 	add.w	r3, r7, #20
 8007352:	68d9      	ldr	r1, [r3, #12]
 8007354:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007358:	4613      	mov	r3, r2
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	f003 031f 	and.w	r3, r3, #31
 8007362:	4099      	lsls	r1, r3
 8007364:	f107 0314 	add.w	r3, r7, #20
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800736e:	4613      	mov	r3, r2
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	1a9b      	subs	r3, r3, r2
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	f1c3 0320 	rsb	r3, r3, #32
 800737c:	fa20 f203 	lsr.w	r2, r0, r3
 8007380:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	330c      	adds	r3, #12
 8007388:	f107 0014 	add.w	r0, r7, #20
 800738c:	4403      	add	r3, r0
 800738e:	404a      	eors	r2, r1
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007396:	3301      	adds	r3, #1
 8007398:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800739c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	f67f af61 	bls.w	8007268 <mbedtls_camellia_setkey_enc+0x998>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80073ac:	e02e      	b.n	800740c <mbedtls_camellia_setkey_enc+0xb3c>
 80073ae:	493d      	ldr	r1, [pc, #244]	; (80074a4 <mbedtls_camellia_setkey_enc+0xbd4>)
 80073b0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	18ca      	adds	r2, r1, r3
 80073be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073c2:	4413      	add	r3, r2
 80073c4:	333c      	adds	r3, #60	; 0x3c
 80073c6:	f993 3000 	ldrsb.w	r3, [r3]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ce:	d018      	beq.n	8007402 <mbedtls_camellia_setkey_enc+0xb32>
 80073d0:	4934      	ldr	r1, [pc, #208]	; (80074a4 <mbedtls_camellia_setkey_enc+0xbd4>)
 80073d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	18ca      	adds	r2, r1, r3
 80073e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80073e4:	4413      	add	r3, r2
 80073e6:	333c      	adds	r3, #60	; 0x3c
 80073e8:	f993 3000 	ldrsb.w	r3, [r3]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80073f2:	4413      	add	r3, r2
 80073f4:	f107 0214 	add.w	r2, r7, #20
 80073f8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80073fc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007406:	3301      	adds	r3, #1
 8007408:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800740c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007410:	2b13      	cmp	r3, #19
 8007412:	d9cc      	bls.n	80073ae <mbedtls_camellia_setkey_enc+0xade>
    }

    /* Do transpositions */
    for( i = 0; i < 20; i++ ) {
 8007414:	2300      	movs	r3, #0
 8007416:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800741a:	e036      	b.n	800748a <mbedtls_camellia_setkey_enc+0xbba>
        if( transposes[idx][i] != -1 ) {
 800741c:	4922      	ldr	r1, [pc, #136]	; (80074a8 <mbedtls_camellia_setkey_enc+0xbd8>)
 800741e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	18ca      	adds	r2, r1, r3
 800742c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007430:	4413      	add	r3, r2
 8007432:	f993 3000 	ldrsb.w	r3, [r3]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800743a:	d021      	beq.n	8007480 <mbedtls_camellia_setkey_enc+0xbb0>
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 800743c:	491a      	ldr	r1, [pc, #104]	; (80074a8 <mbedtls_camellia_setkey_enc+0xbd8>)
 800743e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	18ca      	adds	r2, r1, r3
 800744c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007450:	4413      	add	r3, r2
 8007452:	f993 3000 	ldrsb.w	r3, [r3]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800745c:	18d1      	adds	r1, r2, r3
 800745e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007462:	4613      	mov	r3, r2
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	461a      	mov	r2, r3
 800746c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007470:	4413      	add	r3, r2
 8007472:	3320      	adds	r3, #32
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800747a:	4413      	add	r3, r2
 800747c:	680a      	ldr	r2, [r1, #0]
 800747e:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 20; i++ ) {
 8007480:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007484:	3301      	adds	r3, #1
 8007486:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800748a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800748e:	2b13      	cmp	r3, #19
 8007490:	d9c4      	bls.n	800741c <mbedtls_camellia_setkey_enc+0xb4c>
        }
    }

    return( 0 );
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	08018418 	.word	0x08018418
 80074a4:	08018438 	.word	0x08018438
 80074a8:	080184d8 	.word	0x080184d8

080074ac <mbedtls_camellia_setkey_dec>:
 * Camellia key schedule (decryption)
 */
int mbedtls_camellia_setkey_dec( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b0ce      	sub	sp, #312	; 0x138
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	f107 030c 	add.w	r3, r7, #12
 80074b6:	6018      	str	r0, [r3, #0]
 80074b8:	f107 0308 	add.w	r3, r7, #8
 80074bc:	6019      	str	r1, [r3, #0]
 80074be:	1d3b      	adds	r3, r7, #4
 80074c0:	601a      	str	r2, [r3, #0]
    uint32_t *RK;
    uint32_t *SK;
    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    mbedtls_camellia_init( &cty );
 80074c2:	f107 0310 	add.w	r3, r7, #16
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff f9e2 	bl	8006890 <mbedtls_camellia_init>

    /* Also checks keybits */
    if( ( ret = mbedtls_camellia_setkey_enc( &cty, key, keybits ) ) != 0 )
 80074cc:	1d3a      	adds	r2, r7, #4
 80074ce:	f107 0308 	add.w	r3, r7, #8
 80074d2:	f107 0010 	add.w	r0, r7, #16
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	f7ff f9f9 	bl	80068d0 <mbedtls_camellia_setkey_enc>
 80074de:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 80074e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 80ba 	bne.w	8007660 <mbedtls_camellia_setkey_dec+0x1b4>
        goto exit;

    ctx->nr = cty.nr;
 80074ec:	f107 0310 	add.w	r3, r7, #16
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	f107 030c 	add.w	r3, r7, #12
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	601a      	str	r2, [r3, #0]
    idx = ( ctx->nr == 4 );
 80074fa:	f107 030c 	add.w	r3, r7, #12
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b04      	cmp	r3, #4
 8007504:	bf0c      	ite	eq
 8007506:	2301      	moveq	r3, #1
 8007508:	2300      	movne	r3, #0
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

    RK = ctx->rk;
 8007510:	f107 030c 	add.w	r3, r7, #12
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3304      	adds	r3, #4
 8007518:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 800751c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007520:	019b      	lsls	r3, r3, #6
 8007522:	33c0      	adds	r3, #192	; 0xc0
 8007524:	f107 0210 	add.w	r2, r7, #16
 8007528:	3204      	adds	r2, #4
 800752a:	4413      	add	r3, r2
 800752c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 8007530:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007534:	1d13      	adds	r3, r2, #4
 8007536:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800753a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800753e:	1d19      	adds	r1, r3, #4
 8007540:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8007548:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800754c:	1d13      	adds	r3, r2, #4
 800754e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007552:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007556:	1d19      	adds	r1, r3, #4
 8007558:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8007560:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007564:	1d13      	adds	r3, r2, #4
 8007566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800756a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800756e:	1d19      	adds	r1, r3, #4
 8007570:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8007578:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800757c:	1d13      	adds	r3, r2, #4
 800757e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007582:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007586:	1d19      	adds	r1, r3, #4
 8007588:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800758c:	6812      	ldr	r2, [r2, #0]
 800758e:	601a      	str	r2, [r3, #0]

    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 8007590:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	3316      	adds	r3, #22
 8007598:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800759c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a0:	3b18      	subs	r3, #24
 80075a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80075a6:	e021      	b.n	80075ec <mbedtls_camellia_setkey_dec+0x140>
    {
        *RK++ = *SK++;
 80075a8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80075ac:	1d13      	adds	r3, r2, #4
 80075ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80075b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075b6:	1d19      	adds	r1, r3, #4
 80075b8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	601a      	str	r2, [r3, #0]
        *RK++ = *SK++;
 80075c0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80075c4:	1d13      	adds	r3, r2, #4
 80075c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80075ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075ce:	1d19      	adds	r1, r3, #4
 80075d0:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80075d4:	6812      	ldr	r2, [r2, #0]
 80075d6:	601a      	str	r2, [r3, #0]
    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 80075d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075dc:	3b01      	subs	r3, #1
 80075de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80075e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e6:	3b10      	subs	r3, #16
 80075e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80075ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1d9      	bne.n	80075a8 <mbedtls_camellia_setkey_dec+0xfc>
    }

    SK -= 2;
 80075f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f8:	3b08      	subs	r3, #8
 80075fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    *RK++ = *SK++;
 80075fe:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007602:	1d13      	adds	r3, r2, #4
 8007604:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007608:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800760c:	1d19      	adds	r1, r3, #4
 800760e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8007612:	6812      	ldr	r2, [r2, #0]
 8007614:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8007616:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800761a:	1d13      	adds	r3, r2, #4
 800761c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007620:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007624:	1d19      	adds	r1, r3, #4
 8007626:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800762e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007632:	1d13      	adds	r3, r2, #4
 8007634:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007638:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800763c:	1d19      	adds	r1, r3, #4
 800763e:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8007646:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800764a:	1d13      	adds	r3, r2, #4
 800764c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007650:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007654:	1d19      	adds	r1, r3, #4
 8007656:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800765a:	6812      	ldr	r2, [r2, #0]
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e000      	b.n	8007662 <mbedtls_camellia_setkey_dec+0x1b6>
        goto exit;
 8007660:	bf00      	nop

exit:
    mbedtls_camellia_free( &cty );
 8007662:	f107 0310 	add.w	r3, r7, #16
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff f920 	bl	80068ac <mbedtls_camellia_free>

    return( ret );
 800766c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
}
 8007670:	4618      	mov	r0, r3
 8007672:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb( mbedtls_camellia_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b08a      	sub	sp, #40	; 0x28
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	603b      	str	r3, [r7, #0]
    CAMELLIA_VALIDATE_RET( input  != NULL );
    CAMELLIA_VALIDATE_RET( output != NULL );

    ( (void) mode );

    NR = ctx->nr;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
    RK = ctx->rk;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3304      	adds	r3, #4
 8007692:	623b      	str	r3, [r7, #32]

    GET_UINT32_BE( X[0], input,  0 );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	061a      	lsls	r2, r3, #24
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3301      	adds	r3, #1
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	431a      	orrs	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3302      	adds	r3, #2
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	4313      	orrs	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	3203      	adds	r2, #3
 80076b2:	7812      	ldrb	r2, [r2, #0]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
    GET_UINT32_BE( X[1], input,  4 );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	061a      	lsls	r2, r3, #24
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3305      	adds	r3, #5
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3306      	adds	r3, #6
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	4313      	orrs	r3, r2
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	3207      	adds	r2, #7
 80076d8:	7812      	ldrb	r2, [r2, #0]
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]
    GET_UINT32_BE( X[2], input,  8 );
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3308      	adds	r3, #8
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	061a      	lsls	r2, r3, #24
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	3309      	adds	r3, #9
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	330a      	adds	r3, #10
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	4313      	orrs	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	320b      	adds	r2, #11
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	4313      	orrs	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
    GET_UINT32_BE( X[3], input, 12 );
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	330c      	adds	r3, #12
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	061a      	lsls	r2, r3, #24
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	330d      	adds	r3, #13
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	041b      	lsls	r3, r3, #16
 8007714:	431a      	orrs	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	330e      	adds	r3, #14
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	4313      	orrs	r3, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	320f      	adds	r2, #15
 8007724:	7812      	ldrb	r2, [r2, #0]
 8007726:	4313      	orrs	r3, r2
 8007728:	61fb      	str	r3, [r7, #28]

    X[0] ^= *RK++;
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	1d1a      	adds	r2, r3, #4
 800772e:	623a      	str	r2, [r7, #32]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	4053      	eors	r3, r2
 8007736:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	623a      	str	r2, [r7, #32]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	4053      	eors	r3, r2
 8007744:	617b      	str	r3, [r7, #20]
    X[2] ^= *RK++;
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	623a      	str	r2, [r7, #32]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	4053      	eors	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	1d1a      	adds	r2, r3, #4
 8007758:	623a      	str	r2, [r7, #32]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	4053      	eors	r3, r2
 8007760:	61fb      	str	r3, [r7, #28]

    while( NR ) {
 8007762:	e075      	b.n	8007850 <mbedtls_camellia_crypt_ecb+0x1d6>
        --NR;
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	3b01      	subs	r3, #1
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
        camellia_feistel( X, RK, X + 2 );
 800776a:	f107 0310 	add.w	r3, r7, #16
 800776e:	3308      	adds	r3, #8
 8007770:	f107 0010 	add.w	r0, r7, #16
 8007774:	461a      	mov	r2, r3
 8007776:	6a39      	ldr	r1, [r7, #32]
 8007778:	f7ff f810 	bl	800679c <camellia_feistel>
        RK += 2;
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	3308      	adds	r3, #8
 8007780:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 8007782:	f107 0310 	add.w	r3, r7, #16
 8007786:	3308      	adds	r3, #8
 8007788:	f107 0210 	add.w	r2, r7, #16
 800778c:	6a39      	ldr	r1, [r7, #32]
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff f804 	bl	800679c <camellia_feistel>
        RK += 2;
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	3308      	adds	r3, #8
 8007798:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 800779a:	f107 0310 	add.w	r3, r7, #16
 800779e:	3308      	adds	r3, #8
 80077a0:	f107 0010 	add.w	r0, r7, #16
 80077a4:	461a      	mov	r2, r3
 80077a6:	6a39      	ldr	r1, [r7, #32]
 80077a8:	f7fe fff8 	bl	800679c <camellia_feistel>
        RK += 2;
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	3308      	adds	r3, #8
 80077b0:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 80077b2:	f107 0310 	add.w	r3, r7, #16
 80077b6:	3308      	adds	r3, #8
 80077b8:	f107 0210 	add.w	r2, r7, #16
 80077bc:	6a39      	ldr	r1, [r7, #32]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe ffec 	bl	800679c <camellia_feistel>
        RK += 2;
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	3308      	adds	r3, #8
 80077c8:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 80077ca:	f107 0310 	add.w	r3, r7, #16
 80077ce:	3308      	adds	r3, #8
 80077d0:	f107 0010 	add.w	r0, r7, #16
 80077d4:	461a      	mov	r2, r3
 80077d6:	6a39      	ldr	r1, [r7, #32]
 80077d8:	f7fe ffe0 	bl	800679c <camellia_feistel>
        RK += 2;
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	3308      	adds	r3, #8
 80077e0:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 80077e2:	f107 0310 	add.w	r3, r7, #16
 80077e6:	3308      	adds	r3, #8
 80077e8:	f107 0210 	add.w	r2, r7, #16
 80077ec:	6a39      	ldr	r1, [r7, #32]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe ffd4 	bl	800679c <camellia_feistel>
        RK += 2;
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	3308      	adds	r3, #8
 80077f8:	623b      	str	r3, [r7, #32]

        if( NR ) {
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d027      	beq.n	8007850 <mbedtls_camellia_crypt_ecb+0x1d6>
            FL(X[0], X[1], RK[0], RK[1]);
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4013      	ands	r3, r2
 8007808:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	4053      	eors	r3, r2
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	3304      	adds	r3, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	431a      	orrs	r2, r3
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	4053      	eors	r3, r2
 8007820:	613b      	str	r3, [r7, #16]
            RK += 2;
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	3308      	adds	r3, #8
 8007826:	623b      	str	r3, [r7, #32]
            FLInv(X[2], X[3], RK[0], RK[1]);
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	3304      	adds	r3, #4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	431a      	orrs	r2, r3
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	4053      	eors	r3, r2
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4013      	ands	r3, r2
 8007840:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4053      	eors	r3, r2
 8007848:	61fb      	str	r3, [r7, #28]
            RK += 2;
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	3308      	adds	r3, #8
 800784e:	623b      	str	r3, [r7, #32]
    while( NR ) {
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d186      	bne.n	8007764 <mbedtls_camellia_crypt_ecb+0xea>
        }
    }

    X[2] ^= *RK++;
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	1d1a      	adds	r2, r3, #4
 800785a:	623a      	str	r2, [r7, #32]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	4053      	eors	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	1d1a      	adds	r2, r3, #4
 8007868:	623a      	str	r2, [r7, #32]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	4053      	eors	r3, r2
 8007870:	61fb      	str	r3, [r7, #28]
    X[0] ^= *RK++;
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	1d1a      	adds	r2, r3, #4
 8007876:	623a      	str	r2, [r7, #32]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4053      	eors	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	1d1a      	adds	r2, r3, #4
 8007884:	623a      	str	r2, [r7, #32]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	4053      	eors	r3, r2
 800788c:	617b      	str	r3, [r7, #20]

    PUT_UINT32_BE( X[2], output,  0 );
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	0e1b      	lsrs	r3, r3, #24
 8007892:	b2da      	uxtb	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	0c1a      	lsrs	r2, r3, #16
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	3301      	adds	r3, #1
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	701a      	strb	r2, [r3, #0]
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	0a1a      	lsrs	r2, r3, #8
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3302      	adds	r3, #2
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	701a      	strb	r2, [r3, #0]
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	3303      	adds	r3, #3
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[3], output,  4 );
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	0e1a      	lsrs	r2, r3, #24
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	3304      	adds	r3, #4
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	0c1a      	lsrs	r2, r3, #16
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	3305      	adds	r3, #5
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	0a1a      	lsrs	r2, r3, #8
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	3306      	adds	r3, #6
 80078da:	b2d2      	uxtb	r2, r2
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	3307      	adds	r3, #7
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[0], output,  8 );
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	0e1a      	lsrs	r2, r3, #24
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	0c1a      	lsrs	r2, r3, #16
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	3309      	adds	r3, #9
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	0a1a      	lsrs	r2, r3, #8
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	330a      	adds	r3, #10
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	330b      	adds	r3, #11
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[1], output, 12 );
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	0e1a      	lsrs	r2, r3, #24
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	330c      	adds	r3, #12
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	0c1a      	lsrs	r2, r3, #16
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	330d      	adds	r3, #13
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	0a1a      	lsrs	r2, r3, #8
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	330e      	adds	r3, #14
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	330f      	adds	r3, #15
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3728      	adds	r7, #40	; 0x28
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <mbedtls_camellia_crypt_cbc>:
                                int mode,
                                size_t length,
                                unsigned char iv[16],
                                const unsigned char *input,
                                unsigned char *output )
{
 800794e:	b5b0      	push	{r4, r5, r7, lr}
 8007950:	b08a      	sub	sp, #40	; 0x28
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	603b      	str	r3, [r7, #0]
                           mode == MBEDTLS_CAMELLIA_DECRYPT );
    CAMELLIA_VALIDATE_RET( iv != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    if( length % 16 )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	2b00      	cmp	r3, #0
 8007964:	d002      	beq.n	800796c <mbedtls_camellia_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH );
 8007966:	f06f 0325 	mvn.w	r3, #37	; 0x25
 800796a:	e06d      	b.n	8007a48 <mbedtls_camellia_crypt_cbc+0xfa>

    if( mode == MBEDTLS_CAMELLIA_DECRYPT )
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d166      	bne.n	8007a40 <mbedtls_camellia_crypt_cbc+0xf2>
    {
        while( length > 0 )
 8007972:	e036      	b.n	80079e2 <mbedtls_camellia_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8007974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007976:	f107 0414 	add.w	r4, r7, #20
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	6859      	ldr	r1, [r3, #4]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_camellia_crypt_ecb( ctx, mode, input, output );
 8007984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f7ff fe75 	bl	800767a <mbedtls_camellia_crypt_ecb>

            for( i = 0; i < 16; i++ )
 8007990:	2300      	movs	r3, #0
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
 8007994:	e010      	b.n	80079b8 <mbedtls_camellia_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800799a:	4413      	add	r3, r2
 800799c:	7819      	ldrb	r1, [r3, #0]
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	4413      	add	r3, r2
 80079a4:	781a      	ldrb	r2, [r3, #0]
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80079aa:	4403      	add	r3, r0
 80079ac:	404a      	eors	r2, r1
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	3301      	adds	r3, #1
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	2b0f      	cmp	r3, #15
 80079bc:	ddeb      	ble.n	8007996 <mbedtls_camellia_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	461d      	mov	r5, r3
 80079c2:	f107 0414 	add.w	r4, r7, #20
 80079c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079c8:	6028      	str	r0, [r5, #0]
 80079ca:	6069      	str	r1, [r5, #4]
 80079cc:	60aa      	str	r2, [r5, #8]
 80079ce:	60eb      	str	r3, [r5, #12]

            input  += 16;
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	3310      	adds	r3, #16
 80079d4:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 80079d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d8:	3310      	adds	r3, #16
 80079da:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3b10      	subs	r3, #16
 80079e0:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1c5      	bne.n	8007974 <mbedtls_camellia_crypt_cbc+0x26>
 80079e8:	e02d      	b.n	8007a46 <mbedtls_camellia_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 80079ea:	2300      	movs	r3, #0
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
 80079ee:	e010      	b.n	8007a12 <mbedtls_camellia_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079f4:	4413      	add	r3, r2
 80079f6:	7819      	ldrb	r1, [r3, #0]
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	4413      	add	r3, r2
 80079fe:	781a      	ldrb	r2, [r3, #0]
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a04:	4403      	add	r3, r0
 8007a06:	404a      	eors	r2, r1
 8007a08:	b2d2      	uxtb	r2, r2
 8007a0a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	3301      	adds	r3, #1
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	2b0f      	cmp	r3, #15
 8007a16:	ddeb      	ble.n	80079f0 <mbedtls_camellia_crypt_cbc+0xa2>

            mbedtls_camellia_crypt_ecb( ctx, mode, output, output );
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff fe2b 	bl	800767a <mbedtls_camellia_crypt_ecb>
            memcpy( iv, output, 16 );
 8007a24:	2210      	movs	r2, #16
 8007a26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a28:	6838      	ldr	r0, [r7, #0]
 8007a2a:	f00d fb76 	bl	801511a <memcpy>

            input  += 16;
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	3310      	adds	r3, #16
 8007a32:	63bb      	str	r3, [r7, #56]	; 0x38
            output += 16;
 8007a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a36:	3310      	adds	r3, #16
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
            length -= 16;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3b10      	subs	r3, #16
 8007a3e:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1d1      	bne.n	80079ea <mbedtls_camellia_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3728      	adds	r7, #40	; 0x28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bdb0      	pop	{r4, r5, r7, pc}

08007a50 <mbedtls_camellia_crypt_cfb128>:
                       size_t length,
                       size_t *iv_off,
                       unsigned char iv[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
    CAMELLIA_VALIDATE_RET( iv     != NULL );
    CAMELLIA_VALIDATE_RET( iv_off != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    n = *iv_off;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	617b      	str	r3, [r7, #20]
    if( n >= 16 )
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	d902      	bls.n	8007a70 <mbedtls_camellia_crypt_cfb128+0x20>
        return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 8007a6a:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8007a6e:	e05a      	b.n	8007b26 <mbedtls_camellia_crypt_cfb128+0xd6>

    if( mode == MBEDTLS_CAMELLIA_DECRYPT )
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d14e      	bne.n	8007b14 <mbedtls_camellia_crypt_cfb128+0xc4>
    {
        while( length-- )
 8007a76:	e026      	b.n	8007ac6 <mbedtls_camellia_crypt_cfb128+0x76>
        {
            if( n == 0 )
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d105      	bne.n	8007a8a <mbedtls_camellia_crypt_cfb128+0x3a>
                mbedtls_camellia_crypt_ecb( ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv );
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	6a3a      	ldr	r2, [r7, #32]
 8007a82:	2101      	movs	r1, #1
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f7ff fdf8 	bl	800767a <mbedtls_camellia_crypt_ecb>

            c = *input++;
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	613b      	str	r3, [r7, #16]
            *output++ = (unsigned char)( c ^ iv[n] );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	b25a      	sxtb	r2, r3
 8007a98:	6a39      	ldr	r1, [r7, #32]
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	440b      	add	r3, r1
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	4053      	eors	r3, r2
 8007aa4:	b259      	sxtb	r1, r3
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	62ba      	str	r2, [r7, #40]	; 0x28
 8007aac:	b2ca      	uxtb	r2, r1
 8007aae:	701a      	strb	r2, [r3, #0]
            iv[n] = (unsigned char) c;
 8007ab0:	6a3a      	ldr	r2, [r7, #32]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]

            n = ( n + 1 ) & 0x0F;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	f003 030f 	and.w	r3, r3, #15
 8007ac4:	617b      	str	r3, [r7, #20]
        while( length-- )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	1e5a      	subs	r2, r3, #1
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1d3      	bne.n	8007a78 <mbedtls_camellia_crypt_cfb128+0x28>
 8007ad0:	e025      	b.n	8007b1e <mbedtls_camellia_crypt_cfb128+0xce>
    }
    else
    {
        while( length-- )
        {
            if( n == 0 )
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d105      	bne.n	8007ae4 <mbedtls_camellia_crypt_cfb128+0x94>
                mbedtls_camellia_crypt_ecb( ctx, MBEDTLS_CAMELLIA_ENCRYPT, iv, iv );
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	6a3a      	ldr	r2, [r7, #32]
 8007adc:	2101      	movs	r1, #1
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7ff fdcb 	bl	800767a <mbedtls_camellia_crypt_ecb>

            iv[n] = *output++ = (unsigned char)( iv[n] ^ *input++ );
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	4413      	add	r3, r2
 8007aea:	7819      	ldrb	r1, [r3, #0]
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	627a      	str	r2, [r7, #36]	; 0x24
 8007af2:	781a      	ldrb	r2, [r3, #0]
 8007af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af6:	1c58      	adds	r0, r3, #1
 8007af8:	62b8      	str	r0, [r7, #40]	; 0x28
 8007afa:	404a      	eors	r2, r1
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	6a39      	ldr	r1, [r7, #32]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	440a      	add	r2, r1
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	7013      	strb	r3, [r2, #0]

            n = ( n + 1 ) & 0x0F;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	617b      	str	r3, [r7, #20]
        while( length-- )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	1e5a      	subs	r2, r3, #1
 8007b18:	607a      	str	r2, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1d9      	bne.n	8007ad2 <mbedtls_camellia_crypt_cfb128+0x82>
        }
    }

    *iv_off = n;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	601a      	str	r2, [r3, #0]

    return( 0 );
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <mbedtls_camellia_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b088      	sub	sp, #32
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
 8007b3a:	603b      	str	r3, [r7, #0]
    CAMELLIA_VALIDATE_RET( stream_block  != NULL );
    CAMELLIA_VALIDATE_RET( nc_off != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    n = *nc_off;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	61bb      	str	r3, [r7, #24]
    if( n >= 16 )
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	2b0f      	cmp	r3, #15
 8007b46:	d939      	bls.n	8007bbc <mbedtls_camellia_crypt_ctr+0x8e>
        return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 8007b48:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8007b4c:	e03f      	b.n	8007bce <mbedtls_camellia_crypt_ctr+0xa0>

    while( length-- )
    {
        if( n == 0 ) {
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d11b      	bne.n	8007b8c <mbedtls_camellia_crypt_ctr+0x5e>
            mbedtls_camellia_crypt_ecb( ctx, MBEDTLS_CAMELLIA_ENCRYPT, nonce_counter,
 8007b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	2101      	movs	r1, #1
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7ff fd8d 	bl	800767a <mbedtls_camellia_crypt_ecb>
                                stream_block );

            for( i = 16; i > 0; i-- )
 8007b60:	2310      	movs	r3, #16
 8007b62:	61fb      	str	r3, [r7, #28]
 8007b64:	e00d      	b.n	8007b82 <mbedtls_camellia_crypt_ctr+0x54>
                if( ++nonce_counter[i - 1] != 0 )
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	781a      	ldrb	r2, [r3, #0]
 8007b70:	3201      	adds	r2, #1
 8007b72:	b2d2      	uxtb	r2, r2
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d106      	bne.n	8007b8a <mbedtls_camellia_crypt_ctr+0x5c>
            for( i = 16; i > 0; i-- )
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	61fb      	str	r3, [r7, #28]
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	dcee      	bgt.n	8007b66 <mbedtls_camellia_crypt_ctr+0x38>
 8007b88:	e000      	b.n	8007b8c <mbedtls_camellia_crypt_ctr+0x5e>
                    break;
 8007b8a:	bf00      	nop
        }
        c = *input++;
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	617b      	str	r3, [r7, #20]
        *output++ = (unsigned char)( c ^ stream_block[n] );
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	b25a      	sxtb	r2, r3
 8007b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	440b      	add	r3, r1
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	b25b      	sxtb	r3, r3
 8007ba4:	4053      	eors	r3, r2
 8007ba6:	b259      	sxtb	r1, r3
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	633a      	str	r2, [r7, #48]	; 0x30
 8007bae:	b2ca      	uxtb	r2, r1
 8007bb0:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	61bb      	str	r3, [r7, #24]
    while( length-- )
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	1e5a      	subs	r2, r3, #1
 8007bc0:	60ba      	str	r2, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1c3      	bne.n	8007b4e <mbedtls_camellia_crypt_ctr+0x20>
    }

    *nc_off = n;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	601a      	str	r2, [r3, #0]

    return( 0 );
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <mbedtls_ccm_init>:

/*
 * Initialize context
 */
void mbedtls_ccm_init( mbedtls_ccm_context *ctx )
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
    CCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_ccm_context ) );
 8007bde:	2248      	movs	r2, #72	; 0x48
 8007be0:	2100      	movs	r1, #0
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f00d fabd 	bl	8015162 <memset>
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <mbedtls_ccm_setkey>:

int mbedtls_ccm_setkey( mbedtls_ccm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	607a      	str	r2, [r7, #4]
 8007bfa:	603b      	str	r3, [r7, #0]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007c00:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007c04:	617b      	str	r3, [r7, #20]
    const mbedtls_cipher_info_t *cipher_info;

    CCM_VALIDATE_RET( ctx != NULL );
    CCM_VALIDATE_RET( key != NULL );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	7afb      	ldrb	r3, [r7, #11]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 fc4f 	bl	80094b0 <mbedtls_cipher_info_from_values>
 8007c12:	6138      	str	r0, [r7, #16]
                                                   MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d102      	bne.n	8007c20 <mbedtls_ccm_setkey+0x30>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 8007c1a:	f06f 030c 	mvn.w	r3, #12
 8007c1e:	e022      	b.n	8007c66 <mbedtls_ccm_setkey+0x76>

    if( cipher_info->block_size != 16 )
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	2b10      	cmp	r3, #16
 8007c26:	d002      	beq.n	8007c2e <mbedtls_ccm_setkey+0x3e>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 8007c28:	f06f 030c 	mvn.w	r3, #12
 8007c2c:	e01b      	b.n	8007c66 <mbedtls_ccm_setkey+0x76>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 fc7c 	bl	800952e <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6939      	ldr	r1, [r7, #16]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fcc4 	bl	80095c8 <mbedtls_cipher_setup>
 8007c40:	6178      	str	r0, [r7, #20]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <mbedtls_ccm_setkey+0x5c>
        return( ret );
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	e00c      	b.n	8007c66 <mbedtls_ccm_setkey+0x76>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	2301      	movs	r3, #1
 8007c52:	6879      	ldr	r1, [r7, #4]
 8007c54:	f001 fce4 	bl	8009620 <mbedtls_cipher_setkey>
 8007c58:	6178      	str	r0, [r7, #20]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <mbedtls_ccm_setkey+0x74>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	e000      	b.n	8007c66 <mbedtls_ccm_setkey+0x76>
    }

    return( 0 );
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <mbedtls_ccm_free>:

/*
 * Free context
 */
void mbedtls_ccm_free( mbedtls_ccm_context *ctx )
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d008      	beq.n	8007c8e <mbedtls_ccm_free+0x20>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f001 fc55 	bl	800952e <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ccm_context ) );
 8007c84:	2148      	movs	r1, #72	; 0x48
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f006 fb32 	bl	800e2f0 <mbedtls_platform_zeroize>
 8007c8c:	e000      	b.n	8007c90 <mbedtls_ccm_free+0x22>
        return;
 8007c8e:	bf00      	nop
}
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <ccm_auth_crypt>:
static int ccm_auth_crypt( mbedtls_ccm_context *ctx, int mode, size_t length,
                           const unsigned char *iv, size_t iv_len,
                           const unsigned char *add, size_t add_len,
                           const unsigned char *input, unsigned char *output,
                           unsigned char *tag, size_t tag_len )
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b09c      	sub	sp, #112	; 0x70
 8007c9a:	af02      	add	r7, sp, #8
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	607a      	str	r2, [r7, #4]
 8007ca2:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8007ca4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8007ca8:	657b      	str	r3, [r7, #84]	; 0x54
     * Additional requirement: a < 2^16 - 2^8 to simplify the code.
     * 'length' checked later (when writing it to the first block)
     *
     * Also, loosen the requirements to enable support for CCM* (IEEE 802.15.4).
     */
    if( tag_len == 2 || tag_len > 16 || tag_len % 2 != 0 )
 8007caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d009      	beq.n	8007cc6 <ccm_auth_crypt+0x30>
 8007cb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cb6:	2b10      	cmp	r3, #16
 8007cb8:	d805      	bhi.n	8007cc6 <ccm_auth_crypt+0x30>
 8007cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <ccm_auth_crypt+0x36>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 8007cc6:	f06f 030c 	mvn.w	r3, #12
 8007cca:	e2da      	b.n	8008282 <ccm_auth_crypt+0x5ec>

    /* Also implies q is within bounds */
    if( iv_len < 7 || iv_len > 13 )
 8007ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cce:	2b06      	cmp	r3, #6
 8007cd0:	d902      	bls.n	8007cd8 <ccm_auth_crypt+0x42>
 8007cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd4:	2b0d      	cmp	r3, #13
 8007cd6:	d902      	bls.n	8007cde <ccm_auth_crypt+0x48>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 8007cd8:	f06f 030c 	mvn.w	r3, #12
 8007cdc:	e2d1      	b.n	8008282 <ccm_auth_crypt+0x5ec>

    if( add_len >= 0xFF00 )
 8007cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ce0:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8007ce4:	d302      	bcc.n	8007cec <ccm_auth_crypt+0x56>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 8007ce6:	f06f 030c 	mvn.w	r3, #12
 8007cea:	e2ca      	b.n	8008282 <ccm_auth_crypt+0x5ec>

    q = 16 - 1 - (unsigned char) iv_len;
 8007cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f1c3 030f 	rsb	r3, r3, #15
 8007cf4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
     * 7        0
     * 6        add present?
     * 5 .. 3   (t - 2) / 2
     * 2 .. 0   q - 1
     */
    b[0] = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    b[0] |= ( add_len > 0 ) << 6;
 8007cfe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007d02:	b25b      	sxtb	r3, r3
 8007d04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	d001      	beq.n	8007d0e <ccm_auth_crypt+0x78>
 8007d0a:	2240      	movs	r2, #64	; 0x40
 8007d0c:	e000      	b.n	8007d10 <ccm_auth_crypt+0x7a>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	4313      	orrs	r3, r2
 8007d12:	b25b      	sxtb	r3, r3
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    b[0] |= ( ( tag_len - 2 ) / 2 ) << 3;
 8007d1a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8007d1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d22:	3b02      	subs	r3, #2
 8007d24:	085b      	lsrs	r3, r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    b[0] |= q - 1;
 8007d34:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007d38:	b25a      	sxtb	r2, r3
 8007d3a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	b25b      	sxtb	r3, r3
 8007d44:	4313      	orrs	r3, r2
 8007d46:	b25b      	sxtb	r3, r3
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    memcpy( b + 1, iv, iv_len );
 8007d4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d52:	3301      	adds	r3, #1
 8007d54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f00d f9de 	bl	801511a <memcpy>

    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	663b      	str	r3, [r7, #96]	; 0x60
 8007d68:	e012      	b.n	8007d90 <ccm_auth_crypt+0xfa>
        b[15-i] = (unsigned char)( len_left & 0xFF );
 8007d6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d6e:	f1c3 030f 	rsb	r3, r3, #15
 8007d72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d74:	b2d2      	uxtb	r2, r2
 8007d76:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007d7a:	440b      	add	r3, r1
 8007d7c:	f803 2c34 	strb.w	r2, [r3, #-52]
    for( i = 0, len_left = length; i < q; i++, len_left >>= 8 )
 8007d80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d84:	3301      	adds	r3, #1
 8007d86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d8c:	0a1b      	lsrs	r3, r3, #8
 8007d8e:	663b      	str	r3, [r7, #96]	; 0x60
 8007d90:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8007d94:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d3e6      	bcc.n	8007d6a <ccm_auth_crypt+0xd4>

    if( len_left > 0 )
 8007d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <ccm_auth_crypt+0x112>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 8007da2:	f06f 030c 	mvn.w	r3, #12
 8007da6:	e26c      	b.n	8008282 <ccm_auth_crypt+0x5ec>


    /* Start CBC-MAC with first block */
    memset( y, 0, 16 );
 8007da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dac:	2210      	movs	r2, #16
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f00d f9d6 	bl	8015162 <memset>
    UPDATE_CBC_MAC;
 8007db6:	2300      	movs	r3, #0
 8007db8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007dbc:	e01b      	b.n	8007df6 <ccm_auth_crypt+0x160>
 8007dbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dc2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f813 1c44 	ldrb.w	r1, [r3, #-68]
 8007dcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dd0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 8007dda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dde:	404a      	eors	r2, r1
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007de6:	440b      	add	r3, r1
 8007de8:	f803 2c44 	strb.w	r2, [r3, #-68]
 8007dec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007df0:	3301      	adds	r3, #1
 8007df2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007df6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007dfa:	2b0f      	cmp	r3, #15
 8007dfc:	d9df      	bls.n	8007dbe <ccm_auth_crypt+0x128>
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007e04:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007e08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	2210      	movs	r2, #16
 8007e12:	f001 fccd 	bl	80097b0 <mbedtls_cipher_update>
 8007e16:	6578      	str	r0, [r7, #84]	; 0x54
 8007e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <ccm_auth_crypt+0x18c>
 8007e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e20:	e22f      	b.n	8008282 <ccm_auth_crypt+0x5ec>

    /*
     * If there is additional data, update CBC-MAC with
     * add_len, add, 0 (padding to a block boundary)
     */
    if( add_len > 0 )
 8007e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 80b3 	beq.w	8007f90 <ccm_auth_crypt+0x2fa>
    {
        size_t use_len;
        len_left = add_len;
 8007e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e2c:	663b      	str	r3, [r7, #96]	; 0x60
        src = add;
 8007e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e30:	65fb      	str	r3, [r7, #92]	; 0x5c

        memset( b, 0, 16 );
 8007e32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e36:	2210      	movs	r2, #16
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f00d f991 	bl	8015162 <memset>
        b[0] = (unsigned char)( ( add_len >> 8 ) & 0xFF );
 8007e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e42:	0a1b      	lsrs	r3, r3, #8
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        b[1] = (unsigned char)( ( add_len      ) & 0xFF );
 8007e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        use_len = len_left < 16 - 2 ? len_left : 16 - 2;
 8007e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e54:	2b0e      	cmp	r3, #14
 8007e56:	bf28      	it	cs
 8007e58:	230e      	movcs	r3, #14
 8007e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
        memcpy( b + 2, src, use_len );
 8007e5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007e60:	3302      	adds	r3, #2
 8007e62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e64:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007e66:	4618      	mov	r0, r3
 8007e68:	f00d f957 	bl	801511a <memcpy>
        len_left -= use_len;
 8007e6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	663b      	str	r3, [r7, #96]	; 0x60
        src += use_len;
 8007e74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e78:	4413      	add	r3, r2
 8007e7a:	65fb      	str	r3, [r7, #92]	; 0x5c

        UPDATE_CBC_MAC;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007e82:	e01b      	b.n	8007ebc <ccm_auth_crypt+0x226>
 8007e84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e88:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f813 1c44 	ldrb.w	r1, [r3, #-68]
 8007e92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e96:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 8007ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ea4:	404a      	eors	r2, r1
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007eac:	440b      	add	r3, r1
 8007eae:	f803 2c44 	strb.w	r2, [r3, #-68]
 8007eb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007ebc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ec0:	2b0f      	cmp	r3, #15
 8007ec2:	d9df      	bls.n	8007e84 <ccm_auth_crypt+0x1ee>
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007eca:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007ece:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	f001 fc6a 	bl	80097b0 <mbedtls_cipher_update>
 8007edc:	6578      	str	r0, [r7, #84]	; 0x54
 8007ede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d052      	beq.n	8007f8a <ccm_auth_crypt+0x2f4>
 8007ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee6:	e1cc      	b.n	8008282 <ccm_auth_crypt+0x5ec>

        while( len_left > 0 )
        {
            use_len = len_left > 16 ? 16 : len_left;
 8007ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007eea:	2b10      	cmp	r3, #16
 8007eec:	bf28      	it	cs
 8007eee:	2310      	movcs	r3, #16
 8007ef0:	64fb      	str	r3, [r7, #76]	; 0x4c

            memset( b, 0, 16 );
 8007ef2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ef6:	2210      	movs	r2, #16
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f00d f931 	bl	8015162 <memset>
            memcpy( b, src, use_len );
 8007f00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f06:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f00d f906 	bl	801511a <memcpy>
            UPDATE_CBC_MAC;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f14:	e01b      	b.n	8007f4e <ccm_auth_crypt+0x2b8>
 8007f16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f1a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007f1e:	4413      	add	r3, r2
 8007f20:	f813 1c44 	ldrb.w	r1, [r3, #-68]
 8007f24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f28:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 8007f32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f36:	404a      	eors	r2, r1
 8007f38:	b2d2      	uxtb	r2, r2
 8007f3a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8007f3e:	440b      	add	r3, r1
 8007f40:	f803 2c44 	strb.w	r2, [r3, #-68]
 8007f44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f48:	3301      	adds	r3, #1
 8007f4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f52:	2b0f      	cmp	r3, #15
 8007f54:	d9df      	bls.n	8007f16 <ccm_auth_crypt+0x280>
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007f5c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007f60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	4613      	mov	r3, r2
 8007f68:	2210      	movs	r2, #16
 8007f6a:	f001 fc21 	bl	80097b0 <mbedtls_cipher_update>
 8007f6e:	6578      	str	r0, [r7, #84]	; 0x54
 8007f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <ccm_auth_crypt+0x2e4>
 8007f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f78:	e183      	b.n	8008282 <ccm_auth_crypt+0x5ec>

            len_left -= use_len;
 8007f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	663b      	str	r3, [r7, #96]	; 0x60
            src += use_len;
 8007f82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f86:	4413      	add	r3, r2
 8007f88:	65fb      	str	r3, [r7, #92]	; 0x5c
        while( len_left > 0 )
 8007f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1ab      	bne.n	8007ee8 <ccm_auth_crypt+0x252>
     *
     * With flags as (bits):
     * 7 .. 3   0
     * 2 .. 0   q - 1
     */
    ctr[0] = q - 1;
 8007f90:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	753b      	strb	r3, [r7, #20]
    memcpy( ctr + 1, iv, iv_len );
 8007f9a:	f107 0314 	add.w	r3, r7, #20
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f00d f8b8 	bl	801511a <memcpy>
    memset( ctr + 1 + iv_len, 0, q );
 8007faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fac:	3301      	adds	r3, #1
 8007fae:	f107 0214 	add.w	r2, r7, #20
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8007fb8:	2100      	movs	r1, #0
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f00d f8d1 	bl	8015162 <memset>
    ctr[15] = 1;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
     * Authenticate and {en,de}crypt the message.
     *
     * The only difference between encryption and decryption is
     * the respective order of authentication and {en,de}cryption.
     */
    len_left = length;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	663b      	str	r3, [r7, #96]	; 0x60
    src = input;
 8007fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
    dst = output;
 8007fce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fd2:	65bb      	str	r3, [r7, #88]	; 0x58

    while( len_left > 0 )
 8007fd4:	e0f8      	b.n	80081c8 <ccm_auth_crypt+0x532>
    {
        size_t use_len = len_left > 16 ? 16 : len_left;
 8007fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fd8:	2b10      	cmp	r3, #16
 8007fda:	bf28      	it	cs
 8007fdc:	2310      	movcs	r3, #16
 8007fde:	64bb      	str	r3, [r7, #72]	; 0x48

        if( mode == CCM_ENCRYPT )
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d143      	bne.n	800806e <ccm_auth_crypt+0x3d8>
        {
            memset( b, 0, 16 );
 8007fe6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fea:	2210      	movs	r2, #16
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f00d f8b7 	bl	8015162 <memset>
            memcpy( b, src, use_len );
 8007ff4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ffa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f00d f88c 	bl	801511a <memcpy>
            UPDATE_CBC_MAC;
 8008002:	2300      	movs	r3, #0
 8008004:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008008:	e01b      	b.n	8008042 <ccm_auth_crypt+0x3ac>
 800800a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800800e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008012:	4413      	add	r3, r2
 8008014:	f813 1c44 	ldrb.w	r1, [r3, #-68]
 8008018:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800801c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008020:	4413      	add	r3, r2
 8008022:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 8008026:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800802a:	404a      	eors	r2, r1
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008032:	440b      	add	r3, r1
 8008034:	f803 2c44 	strb.w	r2, [r3, #-68]
 8008038:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800803c:	3301      	adds	r3, #1
 800803e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008042:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008046:	2b0f      	cmp	r3, #15
 8008048:	d9df      	bls.n	800800a <ccm_auth_crypt+0x374>
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008050:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008054:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	4613      	mov	r3, r2
 800805c:	2210      	movs	r2, #16
 800805e:	f001 fba7 	bl	80097b0 <mbedtls_cipher_update>
 8008062:	6578      	str	r0, [r7, #84]	; 0x54
 8008064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <ccm_auth_crypt+0x3d8>
 800806a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800806c:	e109      	b.n	8008282 <ccm_auth_crypt+0x5ec>
        }

        CTR_CRYPT( dst, src, use_len );
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008074:	f107 0114 	add.w	r1, r7, #20
 8008078:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	4613      	mov	r3, r2
 8008080:	2210      	movs	r2, #16
 8008082:	f001 fb95 	bl	80097b0 <mbedtls_cipher_update>
 8008086:	6578      	str	r0, [r7, #84]	; 0x54
 8008088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <ccm_auth_crypt+0x3fc>
 800808e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008090:	e0f7      	b.n	8008282 <ccm_auth_crypt+0x5ec>
 8008092:	2300      	movs	r3, #0
 8008094:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008098:	e017      	b.n	80080ca <ccm_auth_crypt+0x434>
 800809a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800809e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80080a0:	4413      	add	r3, r2
 80080a2:	7819      	ldrb	r1, [r3, #0]
 80080a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080a8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80080ac:	4413      	add	r3, r2
 80080ae:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 80080b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80080b8:	4403      	add	r3, r0
 80080ba:	404a      	eors	r2, r1
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]
 80080c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080c4:	3301      	adds	r3, #1
 80080c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80080ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d8e2      	bhi.n	800809a <ccm_auth_crypt+0x404>

        if( mode == CCM_DECRYPT )
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d143      	bne.n	8008162 <ccm_auth_crypt+0x4cc>
        {
            memset( b, 0, 16 );
 80080da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80080de:	2210      	movs	r2, #16
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f00d f83d 	bl	8015162 <memset>
            memcpy( b, dst, use_len );
 80080e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80080ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080f0:	4618      	mov	r0, r3
 80080f2:	f00d f812 	bl	801511a <memcpy>
            UPDATE_CBC_MAC;
 80080f6:	2300      	movs	r3, #0
 80080f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80080fc:	e01b      	b.n	8008136 <ccm_auth_crypt+0x4a0>
 80080fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008102:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008106:	4413      	add	r3, r2
 8008108:	f813 1c44 	ldrb.w	r1, [r3, #-68]
 800810c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008110:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008114:	4413      	add	r3, r2
 8008116:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 800811a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800811e:	404a      	eors	r2, r1
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008126:	440b      	add	r3, r1
 8008128:	f803 2c44 	strb.w	r2, [r3, #-68]
 800812c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008130:	3301      	adds	r3, #1
 8008132:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008136:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800813a:	2b0f      	cmp	r3, #15
 800813c:	d9df      	bls.n	80080fe <ccm_auth_crypt+0x468>
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008144:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008148:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	4613      	mov	r3, r2
 8008150:	2210      	movs	r2, #16
 8008152:	f001 fb2d 	bl	80097b0 <mbedtls_cipher_update>
 8008156:	6578      	str	r0, [r7, #84]	; 0x54
 8008158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <ccm_auth_crypt+0x4cc>
 800815e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008160:	e08f      	b.n	8008282 <ccm_auth_crypt+0x5ec>
        }

        dst += use_len;
 8008162:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008166:	4413      	add	r3, r2
 8008168:	65bb      	str	r3, [r7, #88]	; 0x58
        src += use_len;
 800816a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800816c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800816e:	4413      	add	r3, r2
 8008170:	65fb      	str	r3, [r7, #92]	; 0x5c
        len_left -= use_len;
 8008172:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	663b      	str	r3, [r7, #96]	; 0x60

        /*
         * Increment counter.
         * No need to check for overflow thanks to the length check above.
         */
        for( i = 0; i < q; i++ )
 800817a:	2300      	movs	r3, #0
 800817c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008180:	e01c      	b.n	80081bc <ccm_auth_crypt+0x526>
            if( ++ctr[15-i] != 0 )
 8008182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008186:	f1c3 030f 	rsb	r3, r3, #15
 800818a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800818e:	441a      	add	r2, r3
 8008190:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8008194:	3201      	adds	r2, #1
 8008196:	b2d1      	uxtb	r1, r2
 8008198:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800819c:	441a      	add	r2, r3
 800819e:	f802 1c54 	strb.w	r1, [r2, #-84]
 80081a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80081a6:	4413      	add	r3, r2
 80081a8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d000      	beq.n	80081b2 <ccm_auth_crypt+0x51c>
                break;
 80081b0:	e00a      	b.n	80081c8 <ccm_auth_crypt+0x532>
        for( i = 0; i < q; i++ )
 80081b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081b6:	3301      	adds	r3, #1
 80081b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80081bc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80081c0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d3dc      	bcc.n	8008182 <ccm_auth_crypt+0x4ec>
    while( len_left > 0 )
 80081c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f47f af03 	bne.w	8007fd6 <ccm_auth_crypt+0x340>
    }

    /*
     * Authentication: reset counter and crypt/mask internal tag
     */
    for( i = 0; i < q; i++ )
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80081d6:	e00e      	b.n	80081f6 <ccm_auth_crypt+0x560>
        ctr[15-i] = 0;
 80081d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081dc:	f1c3 030f 	rsb	r3, r3, #15
 80081e0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80081e4:	4413      	add	r3, r2
 80081e6:	2200      	movs	r2, #0
 80081e8:	f803 2c54 	strb.w	r2, [r3, #-84]
    for( i = 0; i < q; i++ )
 80081ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081f0:	3301      	adds	r3, #1
 80081f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80081f6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80081fa:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80081fe:	429a      	cmp	r2, r3
 8008200:	d3ea      	bcc.n	80081d8 <ccm_auth_crypt+0x542>

    CTR_CRYPT( y, y, 16 );
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008208:	f107 0114 	add.w	r1, r7, #20
 800820c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	4613      	mov	r3, r2
 8008214:	2210      	movs	r2, #16
 8008216:	f001 facb 	bl	80097b0 <mbedtls_cipher_update>
 800821a:	6578      	str	r0, [r7, #84]	; 0x54
 800821c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <ccm_auth_crypt+0x590>
 8008222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008224:	e02d      	b.n	8008282 <ccm_auth_crypt+0x5ec>
 8008226:	2300      	movs	r3, #0
 8008228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800822c:	e01b      	b.n	8008266 <ccm_auth_crypt+0x5d0>
 800822e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008232:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008236:	4413      	add	r3, r2
 8008238:	f813 1c44 	ldrb.w	r1, [r3, #-68]
 800823c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008240:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8008244:	4413      	add	r3, r2
 8008246:	f813 2c34 	ldrb.w	r2, [r3, #-52]
 800824a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800824e:	404a      	eors	r2, r1
 8008250:	b2d2      	uxtb	r2, r2
 8008252:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8008256:	440b      	add	r3, r1
 8008258:	f803 2c44 	strb.w	r2, [r3, #-68]
 800825c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008260:	3301      	adds	r3, #1
 8008262:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008266:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800826a:	2b0f      	cmp	r3, #15
 800826c:	d9df      	bls.n	800822e <ccm_auth_crypt+0x598>
    memcpy( tag, y, tag_len );
 800826e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008272:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008276:	4619      	mov	r1, r3
 8008278:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800827c:	f00c ff4d 	bl	801511a <memcpy>

    return( 0 );
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3768      	adds	r7, #104	; 0x68
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <mbedtls_ccm_star_encrypt_and_tag>:
int mbedtls_ccm_star_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b08c      	sub	sp, #48	; 0x30
 800828e:	af08      	add	r7, sp, #32
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	603b      	str	r3, [r7, #0]
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    return( ccm_auth_crypt( ctx, CCM_ENCRYPT, length, iv, iv_len,
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	9306      	str	r3, [sp, #24]
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	9305      	str	r3, [sp, #20]
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	9304      	str	r3, [sp, #16]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	9303      	str	r3, [sp, #12]
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	9302      	str	r3, [sp, #8]
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	2100      	movs	r1, #0
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff fceb 	bl	8007c96 <ccm_auth_crypt>
 80082c0:	4603      	mov	r3, r0
                            add, add_len, input, output, tag, tag_len ) );
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <mbedtls_ccm_encrypt_and_tag>:
int mbedtls_ccm_encrypt_and_tag( mbedtls_ccm_context *ctx, size_t length,
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *add, size_t add_len,
                         const unsigned char *input, unsigned char *output,
                         unsigned char *tag, size_t tag_len )
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b08a      	sub	sp, #40	; 0x28
 80082ce:	af06      	add	r7, sp, #24
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
 80082d6:	603b      	str	r3, [r7, #0]
    CCM_VALIDATE_RET( iv != NULL );
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );
    if( tag_len == 0 )
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <mbedtls_ccm_encrypt_and_tag+0x1a>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 80082de:	f06f 030c 	mvn.w	r3, #12
 80082e2:	e012      	b.n	800830a <mbedtls_ccm_encrypt_and_tag+0x40>

    return( mbedtls_ccm_star_encrypt_and_tag( ctx, length, iv, iv_len, add,
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	9305      	str	r3, [sp, #20]
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	9303      	str	r3, [sp, #12]
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	9302      	str	r3, [sp, #8]
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	68b9      	ldr	r1, [r7, #8]
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff ffc1 	bl	800828a <mbedtls_ccm_star_encrypt_and_tag>
 8008308:	4603      	mov	r3, r0
                add_len, input, output, tag, tag_len ) );
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <mbedtls_ccm_star_auth_decrypt>:
int mbedtls_ccm_star_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b094      	sub	sp, #80	; 0x50
 8008316:	af08      	add	r7, sp, #32
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	607a      	str	r2, [r7, #4]
 800831e:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008320:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008324:	627b      	str	r3, [r7, #36]	; 0x24
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( ( ret = ccm_auth_crypt( ctx, CCM_DECRYPT, length,
 8008326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008328:	9306      	str	r3, [sp, #24]
 800832a:	f107 0314 	add.w	r3, r7, #20
 800832e:	9305      	str	r3, [sp, #20]
 8008330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008336:	9303      	str	r3, [sp, #12]
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833a:	9302      	str	r3, [sp, #8]
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	2101      	movs	r1, #1
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff fca3 	bl	8007c96 <ccm_auth_crypt>
 8008350:	6278      	str	r0, [r7, #36]	; 0x24
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <mbedtls_ccm_star_auth_decrypt+0x4a>
                                iv, iv_len, add, add_len,
                                input, output, check_tag, tag_len ) ) != 0 )
    {
        return( ret );
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	e02c      	b.n	80083b6 <mbedtls_ccm_star_auth_decrypt+0xa4>
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800835c:	2300      	movs	r3, #0
 800835e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008360:	2300      	movs	r3, #0
 8008362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008366:	e016      	b.n	8008396 <mbedtls_ccm_star_auth_decrypt+0x84>
        diff |= tag[i] ^ check_tag[i];
 8008368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800836c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836e:	4413      	add	r3, r2
 8008370:	781a      	ldrb	r2, [r3, #0]
 8008372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008376:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800837a:	440b      	add	r3, r1
 800837c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008380:	4053      	eors	r3, r2
 8008382:	b2db      	uxtb	r3, r3
 8008384:	461a      	mov	r2, r3
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	4313      	orrs	r3, r2
 800838a:	62bb      	str	r3, [r7, #40]	; 0x28
    for( diff = 0, i = 0; i < tag_len; i++ )
 800838c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008390:	3301      	adds	r3, #1
 8008392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800839a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800839c:	429a      	cmp	r2, r3
 800839e:	d8e3      	bhi.n	8008368 <mbedtls_ccm_star_auth_decrypt+0x56>

    if( diff != 0 )
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d006      	beq.n	80083b4 <mbedtls_ccm_star_auth_decrypt+0xa2>
    {
        mbedtls_platform_zeroize( output, length );
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80083aa:	f005 ffa1 	bl	800e2f0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CCM_AUTH_FAILED );
 80083ae:	f06f 030e 	mvn.w	r3, #14
 80083b2:	e000      	b.n	80083b6 <mbedtls_ccm_star_auth_decrypt+0xa4>
    }

    return( 0 );
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3730      	adds	r7, #48	; 0x30
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <mbedtls_ccm_auth_decrypt>:
int mbedtls_ccm_auth_decrypt( mbedtls_ccm_context *ctx, size_t length,
                      const unsigned char *iv, size_t iv_len,
                      const unsigned char *add, size_t add_len,
                      const unsigned char *input, unsigned char *output,
                      const unsigned char *tag, size_t tag_len )
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b08a      	sub	sp, #40	; 0x28
 80083c2:	af06      	add	r7, sp, #24
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
 80083ca:	603b      	str	r3, [r7, #0]
    CCM_VALIDATE_RET( add_len == 0 || add != NULL );
    CCM_VALIDATE_RET( length == 0 || input != NULL );
    CCM_VALIDATE_RET( length == 0 || output != NULL );
    CCM_VALIDATE_RET( tag_len == 0 || tag != NULL );

    if( tag_len == 0 )
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d102      	bne.n	80083d8 <mbedtls_ccm_auth_decrypt+0x1a>
        return( MBEDTLS_ERR_CCM_BAD_INPUT );
 80083d2:	f06f 030c 	mvn.w	r3, #12
 80083d6:	e012      	b.n	80083fe <mbedtls_ccm_auth_decrypt+0x40>

    return( mbedtls_ccm_star_auth_decrypt( ctx, length, iv, iv_len, add,
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	9305      	str	r3, [sp, #20]
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	9303      	str	r3, [sp, #12]
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	9302      	str	r3, [sp, #8]
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff ff8b 	bl	8008312 <mbedtls_ccm_star_auth_decrypt>
 80083fc:	4603      	mov	r3, r0
                add_len, input, output, tag, tag_len ) );
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <chacha20_quarter_round>:
static inline void chacha20_quarter_round( uint32_t state[16],
                                           size_t a,
                                           size_t b,
                                           size_t c,
                                           size_t d )
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
 8008412:	603b      	str	r3, [r7, #0]
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4413      	add	r3, r2
 800841c:	6819      	ldr	r1, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4413      	add	r3, r2
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	4403      	add	r3, r0
 8008430:	440a      	add	r2, r1
 8008432:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	6819      	ldr	r1, [r3, #0]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	4413      	add	r3, r2
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	4403      	add	r3, r0
 8008450:	404a      	eors	r2, r1
 8008452:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 16 );
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4413      	add	r3, r2
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	440b      	add	r3, r1
 8008466:	ea4f 4232 	mov.w	r2, r2, ror #16
 800846a:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	6819      	ldr	r1, [r3, #0]
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4413      	add	r3, r2
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	4403      	add	r3, r0
 8008488:	440a      	add	r2, r1
 800848a:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	6819      	ldr	r1, [r3, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	4403      	add	r3, r0
 80084a8:	404a      	eors	r2, r1
 80084aa:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 12 );
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	68f9      	ldr	r1, [r7, #12]
 80084bc:	440b      	add	r3, r1
 80084be:	ea4f 5232 	mov.w	r2, r2, ror #20
 80084c2:	601a      	str	r2, [r3, #0]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	6819      	ldr	r1, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4413      	add	r3, r2
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	4403      	add	r3, r0
 80084e0:	440a      	add	r2, r1
 80084e2:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	6819      	ldr	r1, [r3, #0]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	4403      	add	r3, r0
 8008500:	404a      	eors	r2, r1
 8008502:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 8 );
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	440b      	add	r3, r1
 8008516:	ea4f 6232 	mov.w	r2, r2, ror #24
 800851a:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4413      	add	r3, r2
 8008524:	6819      	ldr	r1, [r3, #0]
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4413      	add	r3, r2
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	4403      	add	r3, r0
 8008538:	440a      	add	r2, r1
 800853a:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4413      	add	r3, r2
 8008544:	6819      	ldr	r1, [r3, #0]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4413      	add	r3, r2
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	4403      	add	r3, r0
 8008558:	404a      	eors	r2, r1
 800855a:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 7 );
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	440b      	add	r3, r1
 800856e:	ea4f 6272 	mov.w	r2, r2, ror #25
 8008572:	601a      	str	r2, [r3, #0]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <chacha20_inner_block>:
 *                  diagonal round.
 *
 * \param state     The ChaCha20 state to update.
 */
static void chacha20_inner_block( uint32_t state[16] )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af02      	add	r7, sp, #8
 8008586:	6078      	str	r0, [r7, #4]
    chacha20_quarter_round( state, 0, 4, 8,  12 );
 8008588:	230c      	movs	r3, #12
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	2308      	movs	r3, #8
 800858e:	2204      	movs	r2, #4
 8008590:	2100      	movs	r1, #0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff ff37 	bl	8008406 <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 5, 9,  13 );
 8008598:	230d      	movs	r3, #13
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	2309      	movs	r3, #9
 800859e:	2205      	movs	r2, #5
 80085a0:	2101      	movs	r1, #1
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff ff2f 	bl	8008406 <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 6, 10, 14 );
 80085a8:	230e      	movs	r3, #14
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	230a      	movs	r3, #10
 80085ae:	2206      	movs	r2, #6
 80085b0:	2102      	movs	r1, #2
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff ff27 	bl	8008406 <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 7, 11, 15 );
 80085b8:	230f      	movs	r3, #15
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	230b      	movs	r3, #11
 80085be:	2207      	movs	r2, #7
 80085c0:	2103      	movs	r1, #3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff ff1f 	bl	8008406 <chacha20_quarter_round>

    chacha20_quarter_round( state, 0, 5, 10, 15 );
 80085c8:	230f      	movs	r3, #15
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	230a      	movs	r3, #10
 80085ce:	2205      	movs	r2, #5
 80085d0:	2100      	movs	r1, #0
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff ff17 	bl	8008406 <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 6, 11, 12 );
 80085d8:	230c      	movs	r3, #12
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	230b      	movs	r3, #11
 80085de:	2206      	movs	r2, #6
 80085e0:	2101      	movs	r1, #1
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff ff0f 	bl	8008406 <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 7, 8,  13 );
 80085e8:	230d      	movs	r3, #13
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2308      	movs	r3, #8
 80085ee:	2207      	movs	r2, #7
 80085f0:	2102      	movs	r1, #2
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7ff ff07 	bl	8008406 <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 4, 9,  14 );
 80085f8:	230e      	movs	r3, #14
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	2309      	movs	r3, #9
 80085fe:	2204      	movs	r2, #4
 8008600:	2103      	movs	r1, #3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff feff 	bl	8008406 <chacha20_quarter_round>
}
 8008608:	bf00      	nop
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block( const uint32_t initial_state[16],
                            unsigned char keystream[64] )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b094      	sub	sp, #80	; 0x50
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
    uint32_t working_state[16];
    size_t i;

    memcpy( working_state,
 800861a:	f107 0308 	add.w	r3, r7, #8
 800861e:	2240      	movs	r2, #64	; 0x40
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4618      	mov	r0, r3
 8008624:	f00c fd79 	bl	801511a <memcpy>
            initial_state,
            CHACHA20_BLOCK_SIZE_BYTES );

    for( i = 0U; i < 10U; i++ )
 8008628:	2300      	movs	r3, #0
 800862a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800862c:	e007      	b.n	800863e <chacha20_block+0x2e>
        chacha20_inner_block( working_state );
 800862e:	f107 0308 	add.w	r3, r7, #8
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff ffa4 	bl	8008580 <chacha20_inner_block>
    for( i = 0U; i < 10U; i++ )
 8008638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800863a:	3301      	adds	r3, #1
 800863c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800863e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008640:	2b09      	cmp	r3, #9
 8008642:	d9f4      	bls.n	800862e <chacha20_block+0x1e>

    working_state[ 0] += initial_state[ 0];
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4413      	add	r3, r2
 800864c:	60bb      	str	r3, [r7, #8]
    working_state[ 1] += initial_state[ 1];
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3304      	adds	r3, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4413      	add	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]
    working_state[ 2] += initial_state[ 2];
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3308      	adds	r3, #8
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4413      	add	r3, r2
 8008664:	613b      	str	r3, [r7, #16]
    working_state[ 3] += initial_state[ 3];
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	330c      	adds	r3, #12
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4413      	add	r3, r2
 8008670:	617b      	str	r3, [r7, #20]
    working_state[ 4] += initial_state[ 4];
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3310      	adds	r3, #16
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4413      	add	r3, r2
 800867c:	61bb      	str	r3, [r7, #24]
    working_state[ 5] += initial_state[ 5];
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3314      	adds	r3, #20
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4413      	add	r3, r2
 8008688:	61fb      	str	r3, [r7, #28]
    working_state[ 6] += initial_state[ 6];
 800868a:	6a3a      	ldr	r2, [r7, #32]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3318      	adds	r3, #24
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4413      	add	r3, r2
 8008694:	623b      	str	r3, [r7, #32]
    working_state[ 7] += initial_state[ 7];
 8008696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	331c      	adds	r3, #28
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4413      	add	r3, r2
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
    working_state[ 8] += initial_state[ 8];
 80086a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3320      	adds	r3, #32
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4413      	add	r3, r2
 80086ac:	62bb      	str	r3, [r7, #40]	; 0x28
    working_state[ 9] += initial_state[ 9];
 80086ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3324      	adds	r3, #36	; 0x24
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4413      	add	r3, r2
 80086b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    working_state[10] += initial_state[10];
 80086ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3328      	adds	r3, #40	; 0x28
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4413      	add	r3, r2
 80086c4:	633b      	str	r3, [r7, #48]	; 0x30
    working_state[11] += initial_state[11];
 80086c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	332c      	adds	r3, #44	; 0x2c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4413      	add	r3, r2
 80086d0:	637b      	str	r3, [r7, #52]	; 0x34
    working_state[12] += initial_state[12];
 80086d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3330      	adds	r3, #48	; 0x30
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4413      	add	r3, r2
 80086dc:	63bb      	str	r3, [r7, #56]	; 0x38
    working_state[13] += initial_state[13];
 80086de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3334      	adds	r3, #52	; 0x34
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4413      	add	r3, r2
 80086e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    working_state[14] += initial_state[14];
 80086ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3338      	adds	r3, #56	; 0x38
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4413      	add	r3, r2
 80086f4:	643b      	str	r3, [r7, #64]	; 0x40
    working_state[15] += initial_state[15];
 80086f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	333c      	adds	r3, #60	; 0x3c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4413      	add	r3, r2
 8008700:	647b      	str	r3, [r7, #68]	; 0x44

    for( i = 0U; i < 16; i++ )
 8008702:	2300      	movs	r3, #0
 8008704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008706:	e03b      	b.n	8008780 <chacha20_block+0x170>
    {
        size_t offset = i * 4U;
 8008708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	64bb      	str	r3, [r7, #72]	; 0x48

        keystream[offset     ] = (unsigned char)( working_state[i]       );
 800870e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008716:	4413      	add	r3, r2
 8008718:	f853 1c48 	ldr.w	r1, [r3, #-72]
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008720:	4413      	add	r3, r2
 8008722:	b2ca      	uxtb	r2, r1
 8008724:	701a      	strb	r2, [r3, #0]
        keystream[offset + 1U] = (unsigned char)( working_state[i] >>  8 );
 8008726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800872e:	4413      	add	r3, r2
 8008730:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8008734:	0a19      	lsrs	r1, r3, #8
 8008736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008738:	3301      	adds	r3, #1
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4413      	add	r3, r2
 800873e:	b2ca      	uxtb	r2, r1
 8008740:	701a      	strb	r2, [r3, #0]
        keystream[offset + 2U] = (unsigned char)( working_state[i] >> 16 );
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800874a:	4413      	add	r3, r2
 800874c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8008750:	0c19      	lsrs	r1, r3, #16
 8008752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008754:	3302      	adds	r3, #2
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	4413      	add	r3, r2
 800875a:	b2ca      	uxtb	r2, r1
 800875c:	701a      	strb	r2, [r3, #0]
        keystream[offset + 3U] = (unsigned char)( working_state[i] >> 24 );
 800875e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008766:	4413      	add	r3, r2
 8008768:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800876c:	0e19      	lsrs	r1, r3, #24
 800876e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008770:	3303      	adds	r3, #3
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	4413      	add	r3, r2
 8008776:	b2ca      	uxtb	r2, r1
 8008778:	701a      	strb	r2, [r3, #0]
    for( i = 0U; i < 16; i++ )
 800877a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800877c:	3301      	adds	r3, #1
 800877e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008782:	2b0f      	cmp	r3, #15
 8008784:	d9c0      	bls.n	8008708 <chacha20_block+0xf8>
    }

    mbedtls_platform_zeroize( working_state, sizeof( working_state ) );
 8008786:	f107 0308 	add.w	r3, r7, #8
 800878a:	2140      	movs	r1, #64	; 0x40
 800878c:	4618      	mov	r0, r3
 800878e:	f005 fdaf 	bl	800e2f0 <mbedtls_platform_zeroize>
}
 8008792:	bf00      	nop
 8008794:	3750      	adds	r7, #80	; 0x50
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <mbedtls_chacha20_init>:

void mbedtls_chacha20_init( mbedtls_chacha20_context *ctx )
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
    CHACHA20_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx->state, sizeof( ctx->state ) );
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2140      	movs	r1, #64	; 0x40
 80087a6:	4618      	mov	r0, r3
 80087a8:	f005 fda2 	bl	800e2f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( ctx->keystream8, sizeof( ctx->keystream8 ) );
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3340      	adds	r3, #64	; 0x40
 80087b0:	2140      	movs	r1, #64	; 0x40
 80087b2:	4618      	mov	r0, r3
 80087b4:	f005 fd9c 	bl	800e2f0 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2240      	movs	r2, #64	; 0x40
 80087bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free( mbedtls_chacha20_context *ctx )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
    if( ctx != NULL )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <mbedtls_chacha20_free+0x16>
    {
        mbedtls_platform_zeroize( ctx, sizeof( mbedtls_chacha20_context ) );
 80087d6:	2184      	movs	r1, #132	; 0x84
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f005 fd89 	bl	800e2f0 <mbedtls_platform_zeroize>
    }
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <mbedtls_chacha20_setkey>:

int mbedtls_chacha20_setkey( mbedtls_chacha20_context *ctx,
                            const unsigned char key[32] )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( key != NULL );

    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a5c      	ldr	r2, [pc, #368]	; (8008968 <mbedtls_chacha20_setkey+0x180>)
 80087f6:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0x3320646e;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a5c      	ldr	r2, [pc, #368]	; (800896c <mbedtls_chacha20_setkey+0x184>)
 80087fc:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x79622d32;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a5b      	ldr	r2, [pc, #364]	; (8008970 <mbedtls_chacha20_setkey+0x188>)
 8008802:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x6b206574;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a5b      	ldr	r2, [pc, #364]	; (8008974 <mbedtls_chacha20_setkey+0x18c>)
 8008808:	60da      	str	r2, [r3, #12]

    /* Set key */
    ctx->state[4]  = BYTES_TO_U32_LE( key, 0 );
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	3301      	adds	r3, #1
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	021b      	lsls	r3, r3, #8
 8008818:	431a      	orrs	r2, r3
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	3302      	adds	r3, #2
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	041b      	lsls	r3, r3, #16
 8008822:	431a      	orrs	r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	3303      	adds	r3, #3
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	061b      	lsls	r3, r3, #24
 800882c:	431a      	orrs	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	611a      	str	r2, [r3, #16]
    ctx->state[5]  = BYTES_TO_U32_LE( key, 4 );
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	3304      	adds	r3, #4
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	3305      	adds	r3, #5
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	431a      	orrs	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	3306      	adds	r3, #6
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	041b      	lsls	r3, r3, #16
 800884c:	431a      	orrs	r2, r3
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	3307      	adds	r3, #7
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	061b      	lsls	r3, r3, #24
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	615a      	str	r2, [r3, #20]
    ctx->state[6]  = BYTES_TO_U32_LE( key, 8 );
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	3308      	adds	r3, #8
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	3309      	adds	r3, #9
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	431a      	orrs	r2, r3
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	330a      	adds	r3, #10
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	041b      	lsls	r3, r3, #16
 8008876:	431a      	orrs	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	330b      	adds	r3, #11
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	061b      	lsls	r3, r3, #24
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	619a      	str	r2, [r3, #24]
    ctx->state[7]  = BYTES_TO_U32_LE( key, 12 );
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	330c      	adds	r3, #12
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	330d      	adds	r3, #13
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	021b      	lsls	r3, r3, #8
 8008896:	431a      	orrs	r2, r3
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	330e      	adds	r3, #14
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	041b      	lsls	r3, r3, #16
 80088a0:	431a      	orrs	r2, r3
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	330f      	adds	r3, #15
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	061b      	lsls	r3, r3, #24
 80088aa:	431a      	orrs	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	61da      	str	r2, [r3, #28]
    ctx->state[8]  = BYTES_TO_U32_LE( key, 16 );
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	3310      	adds	r3, #16
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	3311      	adds	r3, #17
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	021b      	lsls	r3, r3, #8
 80088c0:	431a      	orrs	r2, r3
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	3312      	adds	r3, #18
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	431a      	orrs	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	3313      	adds	r3, #19
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	061b      	lsls	r3, r3, #24
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	621a      	str	r2, [r3, #32]
    ctx->state[9]  = BYTES_TO_U32_LE( key, 20 );
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	3314      	adds	r3, #20
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	3315      	adds	r3, #21
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	021b      	lsls	r3, r3, #8
 80088ea:	431a      	orrs	r2, r3
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	3316      	adds	r3, #22
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	041b      	lsls	r3, r3, #16
 80088f4:	431a      	orrs	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	3317      	adds	r3, #23
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	061b      	lsls	r3, r3, #24
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->state[10] = BYTES_TO_U32_LE( key, 24 );
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	3318      	adds	r3, #24
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	3319      	adds	r3, #25
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	431a      	orrs	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	331a      	adds	r3, #26
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	041b      	lsls	r3, r3, #16
 800891e:	431a      	orrs	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	331b      	adds	r3, #27
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	061b      	lsls	r3, r3, #24
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->state[11] = BYTES_TO_U32_LE( key, 28 );
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	331c      	adds	r3, #28
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	331d      	adds	r3, #29
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	021b      	lsls	r3, r3, #8
 800893e:	431a      	orrs	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	331e      	adds	r3, #30
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	041b      	lsls	r3, r3, #16
 8008948:	431a      	orrs	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	331f      	adds	r3, #31
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	061b      	lsls	r3, r3, #24
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	62da      	str	r2, [r3, #44]	; 0x2c

    return( 0 );
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	61707865 	.word	0x61707865
 800896c:	3320646e 	.word	0x3320646e
 8008970:	79622d32 	.word	0x79622d32
 8008974:	6b206574 	.word	0x6b206574

08008978 <mbedtls_chacha20_starts>:

int mbedtls_chacha20_starts( mbedtls_chacha20_context* ctx,
                             const unsigned char nonce[12],
                             uint32_t counter )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( nonce != NULL );

    /* Counter */
    ctx->state[12] = counter;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	631a      	str	r2, [r3, #48]	; 0x30

    /* Nonce */
    ctx->state[13] = BYTES_TO_U32_LE( nonce, 0 );
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	3301      	adds	r3, #1
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	431a      	orrs	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	3302      	adds	r3, #2
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	041b      	lsls	r3, r3, #16
 80089a2:	431a      	orrs	r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	3303      	adds	r3, #3
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	061b      	lsls	r3, r3, #24
 80089ac:	431a      	orrs	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	635a      	str	r2, [r3, #52]	; 0x34
    ctx->state[14] = BYTES_TO_U32_LE( nonce, 4 );
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	3304      	adds	r3, #4
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	3305      	adds	r3, #5
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	021b      	lsls	r3, r3, #8
 80089c2:	431a      	orrs	r2, r3
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	3306      	adds	r3, #6
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	041b      	lsls	r3, r3, #16
 80089cc:	431a      	orrs	r2, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	3307      	adds	r3, #7
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	061b      	lsls	r3, r3, #24
 80089d6:	431a      	orrs	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	639a      	str	r2, [r3, #56]	; 0x38
    ctx->state[15] = BYTES_TO_U32_LE( nonce, 8 );
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3308      	adds	r3, #8
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	3309      	adds	r3, #9
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	431a      	orrs	r2, r3
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	330a      	adds	r3, #10
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	041b      	lsls	r3, r3, #16
 80089f6:	431a      	orrs	r2, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	330b      	adds	r3, #11
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	061b      	lsls	r3, r3, #24
 8008a00:	431a      	orrs	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	63da      	str	r2, [r3, #60]	; 0x3c

    mbedtls_platform_zeroize( ctx->keystream8, sizeof( ctx->keystream8 ) );
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3340      	adds	r3, #64	; 0x40
 8008a0a:	2140      	movs	r1, #64	; 0x40
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f005 fc6f 	bl	800e2f0 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2240      	movs	r2, #64	; 0x40
 8008a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return( 0 );
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <mbedtls_chacha20_update>:

int mbedtls_chacha20_update( mbedtls_chacha20_context *ctx,
                              size_t size,
                              const unsigned char *input,
                              unsigned char *output )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
    size_t offset = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	617b      	str	r3, [r7, #20]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || input  != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || output != NULL );

    /* Use leftover keystream bytes, if available */
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8008a36:	e01d      	b.n	8008a74 <mbedtls_chacha20_update+0x50>
    {
        output[offset] = input[offset]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	7819      	ldrb	r1, [r3, #0]
                       ^ ctx->keystream8[ctx->keystream_bytes_used];
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a46:	68fa      	ldr	r2, [r7, #12]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
        output[offset] = input[offset]
 8008a4e:	6838      	ldr	r0, [r7, #0]
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	4403      	add	r3, r0
 8008a54:	404a      	eors	r2, r1
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	701a      	strb	r2, [r3, #0]

        ctx->keystream_bytes_used++;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        offset++;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	617b      	str	r3, [r7, #20]
        size--;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	60bb      	str	r3, [r7, #8]
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 80cf 	beq.w	8008c1a <mbedtls_chacha20_update+0x1f6>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a82:	2b3f      	cmp	r3, #63	; 0x3f
 8008a84:	d9d8      	bls.n	8008a38 <mbedtls_chacha20_update+0x14>
    }

    /* Process full blocks */
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 8008a86:	e0c8      	b.n	8008c1a <mbedtls_chacha20_update+0x1f6>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3340      	adds	r3, #64	; 0x40
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f7ff fdbd 	bl	8008610 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	631a      	str	r2, [r3, #48]	; 0x30

        for( i = 0U; i < 64U; i += 8U )
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	613b      	str	r3, [r7, #16]
 8008aa4:	e0af      	b.n	8008c06 <mbedtls_chacha20_update+0x1e2>
        {
            output[offset + i  ] = input[offset + i  ] ^ ctx->keystream8[i  ];
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4413      	add	r3, r2
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	4413      	add	r3, r2
 8008ab0:	7819      	ldrb	r1, [r3, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3340      	adds	r3, #64	; 0x40
 8008aba:	781a      	ldrb	r2, [r3, #0]
 8008abc:	6978      	ldr	r0, [r7, #20]
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	4403      	add	r3, r0
 8008ac2:	6838      	ldr	r0, [r7, #0]
 8008ac4:	4403      	add	r3, r0
 8008ac6:	404a      	eors	r2, r1
 8008ac8:	b2d2      	uxtb	r2, r2
 8008aca:	701a      	strb	r2, [r3, #0]
            output[offset + i+1] = input[offset + i+1] ^ ctx->keystream8[i+1];
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	7819      	ldrb	r1, [r3, #0]
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	3301      	adds	r3, #1
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008ae6:	6978      	ldr	r0, [r7, #20]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	4403      	add	r3, r0
 8008aec:	3301      	adds	r3, #1
 8008aee:	6838      	ldr	r0, [r7, #0]
 8008af0:	4403      	add	r3, r0
 8008af2:	404a      	eors	r2, r1
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	701a      	strb	r2, [r3, #0]
            output[offset + i+2] = input[offset + i+2] ^ ctx->keystream8[i+2];
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	4413      	add	r3, r2
 8008afe:	3302      	adds	r3, #2
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	4413      	add	r3, r2
 8008b04:	7819      	ldrb	r1, [r3, #0]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	3302      	adds	r3, #2
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008b12:	6978      	ldr	r0, [r7, #20]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	4403      	add	r3, r0
 8008b18:	3302      	adds	r3, #2
 8008b1a:	6838      	ldr	r0, [r7, #0]
 8008b1c:	4403      	add	r3, r0
 8008b1e:	404a      	eors	r2, r1
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	701a      	strb	r2, [r3, #0]
            output[offset + i+3] = input[offset + i+3] ^ ctx->keystream8[i+3];
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	4413      	add	r3, r2
 8008b2a:	3303      	adds	r3, #3
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	4413      	add	r3, r2
 8008b30:	7819      	ldrb	r1, [r3, #0]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	3303      	adds	r3, #3
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008b3e:	6978      	ldr	r0, [r7, #20]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	4403      	add	r3, r0
 8008b44:	3303      	adds	r3, #3
 8008b46:	6838      	ldr	r0, [r7, #0]
 8008b48:	4403      	add	r3, r0
 8008b4a:	404a      	eors	r2, r1
 8008b4c:	b2d2      	uxtb	r2, r2
 8008b4e:	701a      	strb	r2, [r3, #0]
            output[offset + i+4] = input[offset + i+4] ^ ctx->keystream8[i+4];
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	4413      	add	r3, r2
 8008b56:	3304      	adds	r3, #4
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	7819      	ldrb	r1, [r3, #0]
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	3304      	adds	r3, #4
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008b6a:	6978      	ldr	r0, [r7, #20]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	4403      	add	r3, r0
 8008b70:	3304      	adds	r3, #4
 8008b72:	6838      	ldr	r0, [r7, #0]
 8008b74:	4403      	add	r3, r0
 8008b76:	404a      	eors	r2, r1
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	701a      	strb	r2, [r3, #0]
            output[offset + i+5] = input[offset + i+5] ^ ctx->keystream8[i+5];
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	4413      	add	r3, r2
 8008b82:	3305      	adds	r3, #5
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	4413      	add	r3, r2
 8008b88:	7819      	ldrb	r1, [r3, #0]
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	3305      	adds	r3, #5
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008b96:	6978      	ldr	r0, [r7, #20]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	4403      	add	r3, r0
 8008b9c:	3305      	adds	r3, #5
 8008b9e:	6838      	ldr	r0, [r7, #0]
 8008ba0:	4403      	add	r3, r0
 8008ba2:	404a      	eors	r2, r1
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	701a      	strb	r2, [r3, #0]
            output[offset + i+6] = input[offset + i+6] ^ ctx->keystream8[i+6];
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	4413      	add	r3, r2
 8008bae:	3306      	adds	r3, #6
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	7819      	ldrb	r1, [r3, #0]
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	3306      	adds	r3, #6
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008bc2:	6978      	ldr	r0, [r7, #20]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	4403      	add	r3, r0
 8008bc8:	3306      	adds	r3, #6
 8008bca:	6838      	ldr	r0, [r7, #0]
 8008bcc:	4403      	add	r3, r0
 8008bce:	404a      	eors	r2, r1
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	701a      	strb	r2, [r3, #0]
            output[offset + i+7] = input[offset + i+7] ^ ctx->keystream8[i+7];
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	4413      	add	r3, r2
 8008bda:	3307      	adds	r3, #7
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	4413      	add	r3, r2
 8008be0:	7819      	ldrb	r1, [r3, #0]
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	3307      	adds	r3, #7
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4413      	add	r3, r2
 8008bea:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008bee:	6978      	ldr	r0, [r7, #20]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	4403      	add	r3, r0
 8008bf4:	3307      	adds	r3, #7
 8008bf6:	6838      	ldr	r0, [r7, #0]
 8008bf8:	4403      	add	r3, r0
 8008bfa:	404a      	eors	r2, r1
 8008bfc:	b2d2      	uxtb	r2, r2
 8008bfe:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < 64U; i += 8U )
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	3308      	adds	r3, #8
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2b3f      	cmp	r3, #63	; 0x3f
 8008c0a:	f67f af4c 	bls.w	8008aa6 <mbedtls_chacha20_update+0x82>
        }

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	3340      	adds	r3, #64	; 0x40
 8008c12:	617b      	str	r3, [r7, #20]
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	3b40      	subs	r3, #64	; 0x40
 8008c18:	60bb      	str	r3, [r7, #8]
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b3f      	cmp	r3, #63	; 0x3f
 8008c1e:	f63f af33 	bhi.w	8008a88 <mbedtls_chacha20_update+0x64>
    }

    /* Last (partial) block */
    if( size > 0U )
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d02c      	beq.n	8008c82 <mbedtls_chacha20_update+0x25e>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3340      	adds	r3, #64	; 0x40
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4610      	mov	r0, r2
 8008c32:	f7ff fced 	bl	8008610 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	631a      	str	r2, [r3, #48]	; 0x30

        for( i = 0U; i < size; i++)
 8008c40:	2300      	movs	r3, #0
 8008c42:	613b      	str	r3, [r7, #16]
 8008c44:	e015      	b.n	8008c72 <mbedtls_chacha20_update+0x24e>
        {
            output[offset + i] = input[offset + i] ^ ctx->keystream8[i];
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	4413      	add	r3, r2
 8008c50:	7819      	ldrb	r1, [r3, #0]
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	4413      	add	r3, r2
 8008c58:	3340      	adds	r3, #64	; 0x40
 8008c5a:	781a      	ldrb	r2, [r3, #0]
 8008c5c:	6978      	ldr	r0, [r7, #20]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	4403      	add	r3, r0
 8008c62:	6838      	ldr	r0, [r7, #0]
 8008c64:	4403      	add	r3, r0
 8008c66:	404a      	eors	r2, r1
 8008c68:	b2d2      	uxtb	r2, r2
 8008c6a:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < size; i++)
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	613b      	str	r3, [r7, #16]
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d3e5      	bcc.n	8008c46 <mbedtls_chacha20_update+0x222>
        }

        ctx->keystream_bytes_used = size;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    }

    return( 0 );
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <chachapoly_pad_aad>:
 * \brief           Adds nul bytes to pad the AAD for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad( mbedtls_chachapoly_context *ctx )
{
 8008c8c:	b590      	push	{r4, r7, lr}
 8008c8e:	b089      	sub	sp, #36	; 0x24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) ( ctx->aad_len % 16U );
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if( partial_block_len == 0U )
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <chachapoly_pad_aad+0x1e>
        return( 0 );
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e012      	b.n	8008cd0 <chachapoly_pad_aad+0x44>

    memset( zeroes, 0, sizeof( zeroes ) );
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	220f      	movs	r2, #15
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f00c fa55 	bl	8015162 <memset>

    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f103 0084 	add.w	r0, r3, #132	; 0x84
                                     zeroes,
                                     16U - partial_block_len ) );
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	f1c3 0210 	rsb	r2, r3, #16
    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 8008cc4:	f107 030c 	add.w	r3, r7, #12
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f006 f82e 	bl	800ed2a <mbedtls_poly1305_update>
 8008cce:	4603      	mov	r3, r0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3724      	adds	r7, #36	; 0x24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd90      	pop	{r4, r7, pc}

08008cd8 <chachapoly_pad_ciphertext>:
 * \brief           Adds nul bytes to pad the ciphertext for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_ciphertext( mbedtls_chachapoly_context *ctx )
{
 8008cd8:	b590      	push	{r4, r7, lr}
 8008cda:	b089      	sub	sp, #36	; 0x24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) ( ctx->ciphertext_len % 16U );
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if( partial_block_len == 0U )
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <chachapoly_pad_ciphertext+0x1e>
        return( 0 );
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e012      	b.n	8008d1c <chachapoly_pad_ciphertext+0x44>

    memset( zeroes, 0, sizeof( zeroes ) );
 8008cf6:	f107 030c 	add.w	r3, r7, #12
 8008cfa:	220f      	movs	r2, #15
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f00c fa2f 	bl	8015162 <memset>
    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f103 0084 	add.w	r0, r3, #132	; 0x84
                                     zeroes,
                                     16U - partial_block_len ) );
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	f1c3 0210 	rsb	r2, r3, #16
    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 8008d10:	f107 030c 	add.w	r3, r7, #12
 8008d14:	4619      	mov	r1, r3
 8008d16:	f006 f808 	bl	800ed2a <mbedtls_poly1305_update>
 8008d1a:	4603      	mov	r3, r0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3724      	adds	r7, #36	; 0x24
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd90      	pop	{r4, r7, pc}

08008d24 <mbedtls_chachapoly_init>:

void mbedtls_chachapoly_init( mbedtls_chachapoly_context *ctx )
{
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
    CHACHAPOLY_VALIDATE( ctx != NULL );

    mbedtls_chacha20_init( &ctx->chacha20_ctx );
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7ff fd33 	bl	800879a <mbedtls_chacha20_init>
    mbedtls_poly1305_init( &ctx->poly1305_ctx );
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3384      	adds	r3, #132	; 0x84
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f005 ff03 	bl	800eb44 <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	f04f 0300 	mov.w	r3, #0
 8008d44:	f04f 0400 	mov.w	r4, #0
 8008d48:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	f04f 0300 	mov.w	r3, #0
 8008d52:	f04f 0400 	mov.w	r4, #0
 8008d56:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
}
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd90      	pop	{r4, r7, pc}

08008d72 <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free( mbedtls_chachapoly_context *ctx )
{
 8008d72:	b590      	push	{r4, r7, lr}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01f      	beq.n	8008dc0 <mbedtls_chachapoly_free+0x4e>
        return;

    mbedtls_chacha20_free( &ctx->chacha20_ctx );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fd20 	bl	80087c8 <mbedtls_chacha20_free>
    mbedtls_poly1305_free( &ctx->poly1305_ctx );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3384      	adds	r3, #132	; 0x84
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f005 fee5 	bl	800eb5c <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	f04f 0300 	mov.w	r3, #0
 8008d98:	f04f 0400 	mov.w	r4, #0
 8008d9c:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
    ctx->ciphertext_len = 0U;
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	f04f 0300 	mov.w	r3, #0
 8008da6:	f04f 0400 	mov.w	r4, #0
 8008daa:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8008dbe:	e000      	b.n	8008dc2 <mbedtls_chachapoly_free+0x50>
        return;
 8008dc0:	bf00      	nop
}
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd90      	pop	{r4, r7, pc}

08008dc8 <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey( mbedtls_chachapoly_context *ctx,
                               const unsigned char key[32] )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008dd2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008dd6:	60fb      	str	r3, [r7, #12]
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( key != NULL );

    ret = mbedtls_chacha20_setkey( &ctx->chacha20_ctx, key );
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff fd03 	bl	80087e8 <mbedtls_chacha20_setkey>
 8008de2:	60f8      	str	r0, [r7, #12]

    return( ret );
 8008de4:	68fb      	ldr	r3, [r7, #12]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <mbedtls_chachapoly_starts>:

int mbedtls_chachapoly_starts( mbedtls_chachapoly_context *ctx,
                               const unsigned char nonce[12],
                               mbedtls_chachapoly_mode_t mode  )
{
 8008dee:	b590      	push	{r4, r7, lr}
 8008df0:	b097      	sub	sp, #92	; 0x5c
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	71fb      	strb	r3, [r7, #7]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008dfc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008e00:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char poly1305_key[64];
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( nonce != NULL );

    /* Set counter = 0, will be update to 1 when generating Poly1305 key */
    ret = mbedtls_chacha20_starts( &ctx->chacha20_ctx, nonce, 0U );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff fdb5 	bl	8008978 <mbedtls_chacha20_starts>
 8008e0e:	6578      	str	r0, [r7, #84]	; 0x54
    if( ret != 0 )
 8008e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d135      	bne.n	8008e82 <mbedtls_chachapoly_starts+0x94>
    /* Generate the Poly1305 key by getting the ChaCha20 keystream output with
     * counter = 0.  This is the same as encrypting a buffer of zeroes.
     * Only the first 256-bits (32 bytes) of the key is used for Poly1305.
     * The other 256 bits are discarded.
     */
    memset( poly1305_key, 0, sizeof( poly1305_key ) );
 8008e16:	f107 0314 	add.w	r3, r7, #20
 8008e1a:	2240      	movs	r2, #64	; 0x40
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f00c f99f 	bl	8015162 <memset>
    ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, sizeof( poly1305_key ),
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f107 0314 	add.w	r3, r7, #20
 8008e2a:	f107 0214 	add.w	r2, r7, #20
 8008e2e:	2140      	movs	r1, #64	; 0x40
 8008e30:	f7ff fdf8 	bl	8008a24 <mbedtls_chacha20_update>
 8008e34:	6578      	str	r0, [r7, #84]	; 0x54
                                      poly1305_key, poly1305_key );
    if( ret != 0 )
 8008e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d124      	bne.n	8008e86 <mbedtls_chachapoly_starts+0x98>
        goto cleanup;

    ret = mbedtls_poly1305_starts( &ctx->poly1305_ctx, poly1305_key );
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3384      	adds	r3, #132	; 0x84
 8008e40:	f107 0214 	add.w	r2, r7, #20
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f005 fe98 	bl	800eb7c <mbedtls_poly1305_starts>
 8008e4c:	6578      	str	r0, [r7, #84]	; 0x54

    if( ret == 0 )
 8008e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d11a      	bne.n	8008e8a <mbedtls_chachapoly_starts+0x9c>
    {
        ctx->aad_len        = 0U;
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	f04f 0400 	mov.w	r4, #0
 8008e5e:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
        ctx->ciphertext_len = 0U;
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	f04f 0300 	mov.w	r3, #0
 8008e68:	f04f 0400 	mov.w	r4, #0
 8008e6c:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8
        ctx->state          = CHACHAPOLY_STATE_AAD;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        ctx->mode           = mode;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	79fa      	ldrb	r2, [r7, #7]
 8008e7c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8008e80:	e004      	b.n	8008e8c <mbedtls_chachapoly_starts+0x9e>
        goto cleanup;
 8008e82:	bf00      	nop
 8008e84:	e002      	b.n	8008e8c <mbedtls_chachapoly_starts+0x9e>
        goto cleanup;
 8008e86:	bf00      	nop
 8008e88:	e000      	b.n	8008e8c <mbedtls_chachapoly_starts+0x9e>
    }

cleanup:
 8008e8a:	bf00      	nop
    mbedtls_platform_zeroize( poly1305_key, 64U );
 8008e8c:	f107 0314 	add.w	r3, r7, #20
 8008e90:	2140      	movs	r1, #64	; 0x40
 8008e92:	4618      	mov	r0, r3
 8008e94:	f005 fa2c 	bl	800e2f0 <mbedtls_platform_zeroize>
    return( ret );
 8008e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	375c      	adds	r7, #92	; 0x5c
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd90      	pop	{r4, r7, pc}

08008ea2 <mbedtls_chachapoly_update_aad>:

int mbedtls_chachapoly_update_aad( mbedtls_chachapoly_context *ctx,
                                   const unsigned char *aad,
                                   size_t aad_len )
{
 8008ea2:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( aad_len == 0 || aad != NULL );

    if( ctx->state != CHACHAPOLY_STATE_AAD )
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d002      	beq.n	8008ec0 <mbedtls_chachapoly_update_aad+0x1e>
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 8008eba:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008ebe:	e015      	b.n	8008eec <mbedtls_chachapoly_update_aad+0x4a>

    ctx->aad_len += aad_len;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	e9d3 1234 	ldrd	r1, r2, [r3, #208]	; 0xd0
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	469b      	mov	fp, r3
 8008eca:	f04f 0c00 	mov.w	ip, #0
 8008ece:	eb1b 0301 	adds.w	r3, fp, r1
 8008ed2:	eb4c 0402 	adc.w	r4, ip, r2
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0

    return( mbedtls_poly1305_update( &ctx->poly1305_ctx, aad, aad_len ) );
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3384      	adds	r3, #132	; 0x84
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f005 ff20 	bl	800ed2a <mbedtls_poly1305_update>
 8008eea:	4603      	mov	r3, r0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008ef6 <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update( mbedtls_chachapoly_context *ctx,
                               size_t len,
                               const unsigned char *input,
                               unsigned char *output )
{
 8008ef6:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
 8008f04:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008f06:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008f0a:	617b      	str	r3, [r7, #20]
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || input != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || output != NULL );

    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d007      	beq.n	8008f26 <mbedtls_chachapoly_update+0x30>
        ( ctx->state != CHACHAPOLY_STATE_CIPHERTEXT ) )
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d002      	beq.n	8008f26 <mbedtls_chachapoly_update+0x30>
    {
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 8008f20:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008f24:	e057      	b.n	8008fd6 <mbedtls_chachapoly_update+0xe0>
    }

    if( ctx->state == CHACHAPOLY_STATE_AAD )
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d10c      	bne.n	8008f4a <mbedtls_chachapoly_update+0x54>
    {
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

        ret = chachapoly_pad_aad( ctx );
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7ff fea7 	bl	8008c8c <chachapoly_pad_aad>
 8008f3e:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <mbedtls_chachapoly_update+0x54>
            return( ret );
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	e045      	b.n	8008fd6 <mbedtls_chachapoly_update+0xe0>
    }

    ctx->ciphertext_len += len;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	469b      	mov	fp, r3
 8008f54:	f04f 0c00 	mov.w	ip, #0
 8008f58:	eb1b 0301 	adds.w	r3, fp, r1
 8008f5c:	eb4c 0402 	adc.w	r4, ip, r2
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8

    if( ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT )
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d118      	bne.n	8008fa2 <mbedtls_chachapoly_update+0xac>
    {
        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	f7ff fd54 	bl	8008a24 <mbedtls_chacha20_update>
 8008f7c:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <mbedtls_chachapoly_update+0x92>
            return( ret );
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	e026      	b.n	8008fd6 <mbedtls_chachapoly_update+0xe0>

        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, output, len );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	3384      	adds	r3, #132	; 0x84
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f005 feca 	bl	800ed2a <mbedtls_poly1305_update>
 8008f96:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d01a      	beq.n	8008fd4 <mbedtls_chachapoly_update+0xde>
            return( ret );
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	e019      	b.n	8008fd6 <mbedtls_chachapoly_update+0xe0>
    }
    else /* DECRYPT */
    {
        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, input, len );
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3384      	adds	r3, #132	; 0x84
 8008fa6:	68ba      	ldr	r2, [r7, #8]
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f005 febd 	bl	800ed2a <mbedtls_poly1305_update>
 8008fb0:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <mbedtls_chachapoly_update+0xc6>
            return( ret );
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	e00c      	b.n	8008fd6 <mbedtls_chachapoly_update+0xe0>

        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	f7ff fd2e 	bl	8008a24 <mbedtls_chacha20_update>
 8008fc8:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <mbedtls_chachapoly_update+0xde>
            return( ret );
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	e000      	b.n	8008fd6 <mbedtls_chachapoly_update+0xe0>
    }

    return( 0 );
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008fe0 <mbedtls_chachapoly_finish>:

int mbedtls_chachapoly_finish( mbedtls_chachapoly_context *ctx,
                               unsigned char mac[16] )
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b089      	sub	sp, #36	; 0x24
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8008fea:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8008fee:	61fb      	str	r3, [r7, #28]
    unsigned char len_block[16];
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( mac != NULL );

    if( ctx->state == CHACHAPOLY_STATE_INIT )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d102      	bne.n	8009000 <mbedtls_chachapoly_finish+0x20>
    {
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 8008ffa:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8008ffe:	e0e5      	b.n	80091cc <mbedtls_chachapoly_finish+0x1ec>
    }

    if( ctx->state == CHACHAPOLY_STATE_AAD )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009006:	2b01      	cmp	r3, #1
 8009008:	d108      	bne.n	800901c <mbedtls_chachapoly_finish+0x3c>
    {
        ret = chachapoly_pad_aad( ctx );
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff fe3e 	bl	8008c8c <chachapoly_pad_aad>
 8009010:	61f8      	str	r0, [r7, #28]
        if( ret != 0 )
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00f      	beq.n	8009038 <mbedtls_chachapoly_finish+0x58>
            return( ret );
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	e0d7      	b.n	80091cc <mbedtls_chachapoly_finish+0x1ec>
    }
    else if( ctx->state == CHACHAPOLY_STATE_CIPHERTEXT )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009022:	2b02      	cmp	r3, #2
 8009024:	d108      	bne.n	8009038 <mbedtls_chachapoly_finish+0x58>
    {
        ret = chachapoly_pad_ciphertext( ctx );
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff fe56 	bl	8008cd8 <chachapoly_pad_ciphertext>
 800902c:	61f8      	str	r0, [r7, #28]
        if( ret != 0 )
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <mbedtls_chachapoly_finish+0x58>
            return( ret );
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	e0c9      	b.n	80091cc <mbedtls_chachapoly_finish+0x1ec>
    }

    ctx->state = CHACHAPOLY_STATE_FINISHED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2203      	movs	r2, #3
 800903c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* The lengths of the AAD and ciphertext are processed by
     * Poly1305 as the final 128-bit block, encoded as little-endian integers.
     */
    len_block[ 0] = (unsigned char)( ctx->aad_len       );
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	e9d3 3434 	ldrd	r3, r4, [r3, #208]	; 0xd0
 8009046:	b2db      	uxtb	r3, r3
 8009048:	733b      	strb	r3, [r7, #12]
    len_block[ 1] = (unsigned char)( ctx->aad_len >>  8 );
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	e9d3 1234 	ldrd	r1, r2, [r3, #208]	; 0xd0
 8009050:	f04f 0300 	mov.w	r3, #0
 8009054:	f04f 0400 	mov.w	r4, #0
 8009058:	0a0b      	lsrs	r3, r1, #8
 800905a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800905e:	0a14      	lsrs	r4, r2, #8
 8009060:	b2db      	uxtb	r3, r3
 8009062:	737b      	strb	r3, [r7, #13]
    len_block[ 2] = (unsigned char)( ctx->aad_len >> 16 );
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	e9d3 1234 	ldrd	r1, r2, [r3, #208]	; 0xd0
 800906a:	f04f 0300 	mov.w	r3, #0
 800906e:	f04f 0400 	mov.w	r4, #0
 8009072:	0c0b      	lsrs	r3, r1, #16
 8009074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009078:	0c14      	lsrs	r4, r2, #16
 800907a:	b2db      	uxtb	r3, r3
 800907c:	73bb      	strb	r3, [r7, #14]
    len_block[ 3] = (unsigned char)( ctx->aad_len >> 24 );
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	e9d3 1234 	ldrd	r1, r2, [r3, #208]	; 0xd0
 8009084:	f04f 0300 	mov.w	r3, #0
 8009088:	f04f 0400 	mov.w	r4, #0
 800908c:	0e0b      	lsrs	r3, r1, #24
 800908e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009092:	0e14      	lsrs	r4, r2, #24
 8009094:	b2db      	uxtb	r3, r3
 8009096:	73fb      	strb	r3, [r7, #15]
    len_block[ 4] = (unsigned char)( ctx->aad_len >> 32 );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	e9d3 1234 	ldrd	r1, r2, [r3, #208]	; 0xd0
 800909e:	f04f 0300 	mov.w	r3, #0
 80090a2:	f04f 0400 	mov.w	r4, #0
 80090a6:	0013      	movs	r3, r2
 80090a8:	2400      	movs	r4, #0
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	743b      	strb	r3, [r7, #16]
    len_block[ 5] = (unsigned char)( ctx->aad_len >> 40 );
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	e9d3 1234 	ldrd	r1, r2, [r3, #208]	; 0xd0
 80090b4:	f04f 0300 	mov.w	r3, #0
 80090b8:	f04f 0400 	mov.w	r4, #0
 80090bc:	0a13      	lsrs	r3, r2, #8
 80090be:	2400      	movs	r4, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	747b      	strb	r3, [r7, #17]
    len_block[ 6] = (unsigned char)( ctx->aad_len >> 48 );
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	e9d3 1234 	ldrd	r1, r2, [r3, #208]	; 0xd0
 80090ca:	f04f 0300 	mov.w	r3, #0
 80090ce:	f04f 0400 	mov.w	r4, #0
 80090d2:	0c13      	lsrs	r3, r2, #16
 80090d4:	2400      	movs	r4, #0
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	74bb      	strb	r3, [r7, #18]
    len_block[ 7] = (unsigned char)( ctx->aad_len >> 56 );
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	e9d3 1234 	ldrd	r1, r2, [r3, #208]	; 0xd0
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	f04f 0400 	mov.w	r4, #0
 80090e8:	0e13      	lsrs	r3, r2, #24
 80090ea:	2400      	movs	r4, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	74fb      	strb	r3, [r7, #19]
    len_block[ 8] = (unsigned char)( ctx->ciphertext_len       );
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	753b      	strb	r3, [r7, #20]
    len_block[ 9] = (unsigned char)( ctx->ciphertext_len >>  8 );
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	f04f 0400 	mov.w	r4, #0
 8009108:	0a0b      	lsrs	r3, r1, #8
 800910a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800910e:	0a14      	lsrs	r4, r2, #8
 8009110:	b2db      	uxtb	r3, r3
 8009112:	757b      	strb	r3, [r7, #21]
    len_block[10] = (unsigned char)( ctx->ciphertext_len >> 16 );
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 800911a:	f04f 0300 	mov.w	r3, #0
 800911e:	f04f 0400 	mov.w	r4, #0
 8009122:	0c0b      	lsrs	r3, r1, #16
 8009124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009128:	0c14      	lsrs	r4, r2, #16
 800912a:	b2db      	uxtb	r3, r3
 800912c:	75bb      	strb	r3, [r7, #22]
    len_block[11] = (unsigned char)( ctx->ciphertext_len >> 24 );
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 8009134:	f04f 0300 	mov.w	r3, #0
 8009138:	f04f 0400 	mov.w	r4, #0
 800913c:	0e0b      	lsrs	r3, r1, #24
 800913e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009142:	0e14      	lsrs	r4, r2, #24
 8009144:	b2db      	uxtb	r3, r3
 8009146:	75fb      	strb	r3, [r7, #23]
    len_block[12] = (unsigned char)( ctx->ciphertext_len >> 32 );
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	f04f 0400 	mov.w	r4, #0
 8009156:	0013      	movs	r3, r2
 8009158:	2400      	movs	r4, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	763b      	strb	r3, [r7, #24]
    len_block[13] = (unsigned char)( ctx->ciphertext_len >> 40 );
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 8009164:	f04f 0300 	mov.w	r3, #0
 8009168:	f04f 0400 	mov.w	r4, #0
 800916c:	0a13      	lsrs	r3, r2, #8
 800916e:	2400      	movs	r4, #0
 8009170:	b2db      	uxtb	r3, r3
 8009172:	767b      	strb	r3, [r7, #25]
    len_block[14] = (unsigned char)( ctx->ciphertext_len >> 48 );
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 800917a:	f04f 0300 	mov.w	r3, #0
 800917e:	f04f 0400 	mov.w	r4, #0
 8009182:	0c13      	lsrs	r3, r2, #16
 8009184:	2400      	movs	r4, #0
 8009186:	b2db      	uxtb	r3, r3
 8009188:	76bb      	strb	r3, [r7, #26]
    len_block[15] = (unsigned char)( ctx->ciphertext_len >> 56 );
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	e9d3 1236 	ldrd	r1, r2, [r3, #216]	; 0xd8
 8009190:	f04f 0300 	mov.w	r3, #0
 8009194:	f04f 0400 	mov.w	r4, #0
 8009198:	0e13      	lsrs	r3, r2, #24
 800919a:	2400      	movs	r4, #0
 800919c:	b2db      	uxtb	r3, r3
 800919e:	76fb      	strb	r3, [r7, #27]

    ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, len_block, 16U );
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3384      	adds	r3, #132	; 0x84
 80091a4:	f107 010c 	add.w	r1, r7, #12
 80091a8:	2210      	movs	r2, #16
 80091aa:	4618      	mov	r0, r3
 80091ac:	f005 fdbd 	bl	800ed2a <mbedtls_poly1305_update>
 80091b0:	61f8      	str	r0, [r7, #28]
    if( ret != 0 )
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <mbedtls_chachapoly_finish+0x1dc>
        return( ret );
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	e007      	b.n	80091cc <mbedtls_chachapoly_finish+0x1ec>

    ret = mbedtls_poly1305_finish( &ctx->poly1305_ctx, mac );
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3384      	adds	r3, #132	; 0x84
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f005 fe29 	bl	800ee1a <mbedtls_poly1305_finish>
 80091c8:	61f8      	str	r0, [r7, #28]

    return( ret );
 80091ca:	69fb      	ldr	r3, [r7, #28]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3724      	adds	r7, #36	; 0x24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd90      	pop	{r4, r7, pc}

080091d4 <chachapoly_crypt_and_tag>:
                                     const unsigned char *aad,
                                     size_t aad_len,
                                     const unsigned char *input,
                                     unsigned char *output,
                                     unsigned char tag[16] )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b086      	sub	sp, #24
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	607a      	str	r2, [r7, #4]
 80091de:	603b      	str	r3, [r7, #0]
 80091e0:	460b      	mov	r3, r1
 80091e2:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80091e4:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80091e8:	617b      	str	r3, [r7, #20]

    ret = mbedtls_chachapoly_starts( ctx, nonce, mode );
 80091ea:	7afb      	ldrb	r3, [r7, #11]
 80091ec:	461a      	mov	r2, r3
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f7ff fdfc 	bl	8008dee <mbedtls_chachapoly_starts>
 80091f6:	6178      	str	r0, [r7, #20]
    if( ret != 0 )
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d118      	bne.n	8009230 <chachapoly_crypt_and_tag+0x5c>
        goto cleanup;

    ret = mbedtls_chachapoly_update_aad( ctx, aad, aad_len );
 80091fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009200:	6a39      	ldr	r1, [r7, #32]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff fe4d 	bl	8008ea2 <mbedtls_chachapoly_update_aad>
 8009208:	6178      	str	r0, [r7, #20]
    if( ret != 0 )
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d111      	bne.n	8009234 <chachapoly_crypt_and_tag+0x60>
        goto cleanup;

    ret = mbedtls_chachapoly_update( ctx, length, input, output );
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7ff fe6d 	bl	8008ef6 <mbedtls_chachapoly_update>
 800921c:	6178      	str	r0, [r7, #20]
    if( ret != 0 )
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d109      	bne.n	8009238 <chachapoly_crypt_and_tag+0x64>
        goto cleanup;

    ret = mbedtls_chachapoly_finish( ctx, tag );
 8009224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff feda 	bl	8008fe0 <mbedtls_chachapoly_finish>
 800922c:	6178      	str	r0, [r7, #20]
 800922e:	e004      	b.n	800923a <chachapoly_crypt_and_tag+0x66>
        goto cleanup;
 8009230:	bf00      	nop
 8009232:	e002      	b.n	800923a <chachapoly_crypt_and_tag+0x66>
        goto cleanup;
 8009234:	bf00      	nop
 8009236:	e000      	b.n	800923a <chachapoly_crypt_and_tag+0x66>
        goto cleanup;
 8009238:	bf00      	nop

cleanup:
    return( ret );
 800923a:	697b      	ldr	r3, [r7, #20]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <mbedtls_chachapoly_encrypt_and_tag>:
                                        const unsigned char *aad,
                                        size_t aad_len,
                                        const unsigned char *input,
                                        unsigned char *output,
                                        unsigned char tag[16] )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08a      	sub	sp, #40	; 0x28
 8009248:	af06      	add	r7, sp, #24
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	603b      	str	r3, [r7, #0]
    CHACHAPOLY_VALIDATE_RET( tag   != NULL );
    CHACHAPOLY_VALIDATE_RET( aad_len == 0 || aad    != NULL );
    CHACHAPOLY_VALIDATE_RET( length  == 0 || input  != NULL );
    CHACHAPOLY_VALIDATE_RET( length  == 0 || output != NULL );

    return( chachapoly_crypt_and_tag( ctx, MBEDTLS_CHACHAPOLY_ENCRYPT,
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	9304      	str	r3, [sp, #16]
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	9303      	str	r3, [sp, #12]
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	9302      	str	r3, [sp, #8]
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	2100      	movs	r1, #0
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f7ff ffb1 	bl	80091d4 <chachapoly_crypt_and_tag>
 8009272:	4603      	mov	r3, r0
                                      length, nonce, aad, aad_len,
                                      input, output, tag ) );
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <mbedtls_chachapoly_auth_decrypt>:
                                     const unsigned char *aad,
                                     size_t aad_len,
                                     const unsigned char tag[16],
                                     const unsigned char *input,
                                     unsigned char *output )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b092      	sub	sp, #72	; 0x48
 8009280:	af06      	add	r7, sp, #24
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800928a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
    CHACHAPOLY_VALIDATE_RET( tag   != NULL );
    CHACHAPOLY_VALIDATE_RET( aad_len == 0 || aad    != NULL );
    CHACHAPOLY_VALIDATE_RET( length  == 0 || input  != NULL );
    CHACHAPOLY_VALIDATE_RET( length  == 0 || output != NULL );

    if( ( ret = chachapoly_crypt_and_tag( ctx,
 8009290:	f107 0314 	add.w	r3, r7, #20
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009298:	9303      	str	r3, [sp, #12]
 800929a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800929c:	9302      	str	r3, [sp, #8]
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	9301      	str	r3, [sp, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68ba      	ldr	r2, [r7, #8]
 80092aa:	2101      	movs	r1, #1
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7ff ff91 	bl	80091d4 <chachapoly_crypt_and_tag>
 80092b2:	6278      	str	r0, [r7, #36]	; 0x24
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <mbedtls_chachapoly_auth_decrypt+0x42>
                        MBEDTLS_CHACHAPOLY_DECRYPT, length, nonce,
                        aad, aad_len, input, output, check_tag ) ) != 0 )
    {
        return( ret );
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	e024      	b.n	8009308 <mbedtls_chachapoly_auth_decrypt+0x8c>
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < sizeof( check_tag ); i++ )
 80092be:	2300      	movs	r3, #0
 80092c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80092c2:	2300      	movs	r3, #0
 80092c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092c6:	e011      	b.n	80092ec <mbedtls_chachapoly_auth_decrypt+0x70>
        diff |= tag[i] ^ check_tag[i];
 80092c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092cc:	4413      	add	r3, r2
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	f107 0114 	add.w	r1, r7, #20
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	440b      	add	r3, r1
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	4053      	eors	r3, r2
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	461a      	mov	r2, r3
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	4313      	orrs	r3, r2
 80092e4:	62bb      	str	r3, [r7, #40]	; 0x28
    for( diff = 0, i = 0; i < sizeof( check_tag ); i++ )
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	3301      	adds	r3, #1
 80092ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	2b0f      	cmp	r3, #15
 80092f0:	d9ea      	bls.n	80092c8 <mbedtls_chachapoly_auth_decrypt+0x4c>

    if( diff != 0 )
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d006      	beq.n	8009306 <mbedtls_chachapoly_auth_decrypt+0x8a>
    {
        mbedtls_platform_zeroize( output, length );
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80092fc:	f004 fff8 	bl	800e2f0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED );
 8009300:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8009304:	e000      	b.n	8009308 <mbedtls_chachapoly_auth_decrypt+0x8c>
    }

    return( 0 );
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3730      	adds	r7, #48	; 0x30
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <mbedtls_cipher_get_block_size>:
 * \return       The block size of the underlying cipher.
 * \return       \c 0 if \p ctx has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <mbedtls_cipher_get_block_size+0x14>
        return 0;
 8009320:	2300      	movs	r3, #0
 8009322:	e002      	b.n	800932a <mbedtls_cipher_get_block_size+0x1a>

    return ctx->cipher_info->block_size;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
}
 800932a:	4618      	mov	r0, r3
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <psa_set_key_usage_flags>:
    return( attributes->core.lifetime );
}

static inline void psa_set_key_usage_flags(psa_key_attributes_t *attributes,
                                           psa_key_usage_t usage_flags)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
    attributes->core.policy.usage = usage_flags;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	60da      	str	r2, [r3, #12]
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <psa_set_key_algorithm>:
    return( attributes->core.policy.usage );
}

static inline void psa_set_key_algorithm(psa_key_attributes_t *attributes,
                                         psa_algorithm_t alg)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	6039      	str	r1, [r7, #0]
    attributes->core.policy.alg = alg;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	611a      	str	r2, [r3, #16]
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <psa_set_key_type>:
                                           const uint8_t *data,
                                           size_t data_length);

static inline void psa_set_key_type(psa_key_attributes_t *attributes,
                                    psa_key_type_t type)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	807b      	strh	r3, [r7, #2]
    if( attributes->domain_parameters == NULL )
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937e:	2b00      	cmp	r3, #0
 8009380:	d103      	bne.n	800938a <psa_set_key_type+0x1c>
    {
        /* Common case: quick path */
        attributes->core.type = type;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	887a      	ldrh	r2, [r7, #2]
 8009386:	801a      	strh	r2, [r3, #0]
         * Ignore any errors which may arise due to type requiring
         * non-default domain parameters, since this function can't
         * report errors. */
        (void) psa_set_key_domain_parameters( attributes, type, NULL, 0 );
    }
}
 8009388:	e005      	b.n	8009396 <psa_set_key_type+0x28>
        (void) psa_set_key_domain_parameters( attributes, type, NULL, 0 );
 800938a:	8879      	ldrh	r1, [r7, #2]
 800938c:	2300      	movs	r3, #0
 800938e:	2200      	movs	r2, #0
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f007 febb 	bl	801110c <psa_set_key_domain_parameters>
}
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <mbedtls_psa_translate_cipher_type>:

/* Translations for symmetric crypto. */

static inline psa_key_type_t mbedtls_psa_translate_cipher_type(
    mbedtls_cipher_type_t cipher )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	71fb      	strb	r3, [r7, #7]
    switch( cipher )
 80093aa:	79fb      	ldrb	r3, [r7, #7]
 80093ac:	3b05      	subs	r3, #5
 80093ae:	2b28      	cmp	r3, #40	; 0x28
 80093b0:	d857      	bhi.n	8009462 <mbedtls_psa_translate_cipher_type+0xc2>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <mbedtls_psa_translate_cipher_type+0x18>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	0800945d 	.word	0x0800945d
 80093bc:	0800945d 	.word	0x0800945d
 80093c0:	0800945d 	.word	0x0800945d
 80093c4:	08009463 	.word	0x08009463
 80093c8:	08009463 	.word	0x08009463
 80093cc:	08009463 	.word	0x08009463
 80093d0:	08009463 	.word	0x08009463
 80093d4:	08009463 	.word	0x08009463
 80093d8:	08009463 	.word	0x08009463
 80093dc:	0800945d 	.word	0x0800945d
 80093e0:	0800945d 	.word	0x0800945d
 80093e4:	0800945d 	.word	0x0800945d
 80093e8:	08009463 	.word	0x08009463
 80093ec:	08009463 	.word	0x08009463
 80093f0:	08009463 	.word	0x08009463
 80093f4:	08009463 	.word	0x08009463
 80093f8:	08009463 	.word	0x08009463
 80093fc:	08009463 	.word	0x08009463
 8009400:	08009463 	.word	0x08009463
 8009404:	08009463 	.word	0x08009463
 8009408:	08009463 	.word	0x08009463
 800940c:	08009463 	.word	0x08009463
 8009410:	08009463 	.word	0x08009463
 8009414:	08009463 	.word	0x08009463
 8009418:	08009463 	.word	0x08009463
 800941c:	08009463 	.word	0x08009463
 8009420:	08009463 	.word	0x08009463
 8009424:	08009463 	.word	0x08009463
 8009428:	08009463 	.word	0x08009463
 800942c:	08009463 	.word	0x08009463
 8009430:	08009463 	.word	0x08009463
 8009434:	08009463 	.word	0x08009463
 8009438:	08009463 	.word	0x08009463
 800943c:	08009463 	.word	0x08009463
 8009440:	08009463 	.word	0x08009463
 8009444:	08009463 	.word	0x08009463
 8009448:	08009463 	.word	0x08009463
 800944c:	08009463 	.word	0x08009463
 8009450:	0800945d 	.word	0x0800945d
 8009454:	0800945d 	.word	0x0800945d
 8009458:	0800945d 	.word	0x0800945d
        case MBEDTLS_CIPHER_AES_192_GCM:
        case MBEDTLS_CIPHER_AES_256_GCM:
        case MBEDTLS_CIPHER_AES_128_CBC:
        case MBEDTLS_CIPHER_AES_192_CBC:
        case MBEDTLS_CIPHER_AES_256_CBC:
            return( PSA_KEY_TYPE_AES );
 800945c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009460:	e000      	b.n	8009464 <mbedtls_psa_translate_cipher_type+0xc4>
           case MBEDTLS_CIPHER_ARIA_192_CBC:
           case MBEDTLS_CIPHER_ARIA_256_CBC:
               return( PSA_KEY_TYPE_ARIA ); */

        default:
            return( 0 );
 8009462:	2300      	movs	r3, #0
    }
}
 8009464:	4618      	mov	r0, r3
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <mbedtls_cipher_info_from_type>:
    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type(
    const mbedtls_cipher_type_t cipher_type )
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	71fb      	strb	r3, [r7, #7]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800947a:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <mbedtls_cipher_info_from_type+0x3c>)
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	e00a      	b.n	8009496 <mbedtls_cipher_info_from_type+0x26>
        if( def->type == cipher_type )
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	79fa      	ldrb	r2, [r7, #7]
 8009486:	429a      	cmp	r2, r3
 8009488:	d102      	bne.n	8009490 <mbedtls_cipher_info_from_type+0x20>
            return( def->info );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	e007      	b.n	80094a0 <mbedtls_cipher_info_from_type+0x30>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3308      	adds	r3, #8
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1f0      	bne.n	8009480 <mbedtls_cipher_info_from_type+0x10>

    return( NULL );
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	080190e8 	.word	0x080190e8

080094b0 <mbedtls_cipher_info_from_values>:

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values(
    const mbedtls_cipher_id_t cipher_id,
    int key_bitlen,
    const mbedtls_cipher_mode_t mode )
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	6039      	str	r1, [r7, #0]
 80094ba:	71fb      	strb	r3, [r7, #7]
 80094bc:	4613      	mov	r3, r2
 80094be:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80094c0:	4b13      	ldr	r3, [pc, #76]	; (8009510 <mbedtls_cipher_info_from_values+0x60>)
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	e018      	b.n	80094f8 <mbedtls_cipher_info_from_values+0x48>
        if( def->info->base->cipher == cipher_id &&
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	79fa      	ldrb	r2, [r7, #7]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d10e      	bne.n	80094f2 <mbedtls_cipher_info_from_values+0x42>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
        if( def->info->base->cipher == cipher_id &&
 80094dc:	429a      	cmp	r2, r3
 80094de:	d108      	bne.n	80094f2 <mbedtls_cipher_info_from_values+0x42>
            def->info->mode == mode )
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	785b      	ldrb	r3, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80094e6:	79ba      	ldrb	r2, [r7, #6]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d102      	bne.n	80094f2 <mbedtls_cipher_info_from_values+0x42>
            return( def->info );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	e007      	b.n	8009502 <mbedtls_cipher_info_from_values+0x52>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3308      	adds	r3, #8
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e2      	bne.n	80094c6 <mbedtls_cipher_info_from_values+0x16>

    return( NULL );
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	080190e8 	.word	0x080190e8

08009514 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800951c:	2248      	movs	r2, #72	; 0x48
 800951e:	2100      	movs	r1, #0
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f00b fe1e 	bl	8015162 <memset>
}
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <mbedtls_cipher_free>:

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d040      	beq.n	80095be <mbedtls_cipher_free+0x90>
        return;

#if defined(MBEDTLS_USE_PSA_CRYPTO)
    if( ctx->psa_enabled == 1 )
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009542:	2b01      	cmp	r3, #1
 8009544:	d11b      	bne.n	800957e <mbedtls_cipher_free+0x50>
    {
        if( ctx->cipher_ctx != NULL )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d012      	beq.n	8009574 <mbedtls_cipher_free+0x46>
        {
            mbedtls_cipher_context_psa * const cipher_psa =
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009552:	60fb      	str	r3, [r7, #12]
                (mbedtls_cipher_context_psa *) ctx->cipher_ctx;

            if( cipher_psa->slot_state == MBEDTLS_CIPHER_PSA_KEY_OWNED )
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	7a1b      	ldrb	r3, [r3, #8]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d104      	bne.n	8009566 <mbedtls_cipher_free+0x38>
            {
                /* xxx_free() doesn't allow to return failures. */
                (void) psa_destroy_key( cipher_psa->slot );
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	4618      	mov	r0, r3
 8009562:	f006 fcaf 	bl	800fec4 <psa_destroy_key>
            }

            mbedtls_platform_zeroize( cipher_psa, sizeof( *cipher_psa ) );
 8009566:	210c      	movs	r1, #12
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f004 fec1 	bl	800e2f0 <mbedtls_platform_zeroize>
            mbedtls_free( cipher_psa );
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f00b fdbc 	bl	80150ec <free>
        }

        mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8009574:	2148      	movs	r1, #72	; 0x48
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f004 feba 	bl	800e2f0 <mbedtls_platform_zeroize>
        return;
 800957c:	e020      	b.n	80095c0 <mbedtls_cipher_free+0x92>
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

#if defined(MBEDTLS_CMAC_C)
    if( ctx->cmac_ctx )
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00a      	beq.n	800959c <mbedtls_cipher_free+0x6e>
    {
       mbedtls_platform_zeroize( ctx->cmac_ctx,
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958a:	2124      	movs	r1, #36	; 0x24
 800958c:	4618      	mov	r0, r3
 800958e:	f004 feaf 	bl	800e2f0 <mbedtls_platform_zeroize>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	4618      	mov	r0, r3
 8009598:	f00b fda8 	bl	80150ec <free>
    }
#endif

    if( ctx->cipher_ctx )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d007      	beq.n	80095b4 <mbedtls_cipher_free+0x86>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 80095b4:	2148      	movs	r1, #72	; 0x48
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f004 fe9a 	bl	800e2f0 <mbedtls_platform_zeroize>
 80095bc:	e000      	b.n	80095c0 <mbedtls_cipher_free+0x92>
        return;
 80095be:	bf00      	nop
}
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx,
                          const mbedtls_cipher_info_t *cipher_info )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <mbedtls_cipher_setup+0x14>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80095d8:	4b0f      	ldr	r3, [pc, #60]	; (8009618 <mbedtls_cipher_setup+0x50>)
 80095da:	e019      	b.n	8009610 <mbedtls_cipher_setup+0x48>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80095dc:	2248      	movs	r2, #72	; 0x48
 80095de:	2100      	movs	r1, #0
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f00b fdbe 	bl	8015162 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ec:	4798      	blx	r3
 80095ee:	4602      	mov	r2, r0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d101      	bne.n	8009600 <mbedtls_cipher_setup+0x38>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 80095fc:	4b07      	ldr	r3, [pc, #28]	; (800961c <mbedtls_cipher_setup+0x54>)
 80095fe:	e007      	b.n	8009610 <mbedtls_cipher_setup+0x48>

    ctx->cipher_info = cipher_info;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 8009606:	2100      	movs	r1, #0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fd19 	bl	800a040 <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	ffff9f00 	.word	0xffff9f00
 800961c:	ffff9e80 	.word	0xffff9e80

08009620 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b094      	sub	sp, #80	; 0x50
 8009624:	af00      	add	r7, sp, #0
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <mbedtls_cipher_setkey+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8009636:	4b5b      	ldr	r3, [pc, #364]	; (80097a4 <mbedtls_cipher_setkey+0x184>)
 8009638:	e0b0      	b.n	800979c <mbedtls_cipher_setkey+0x17c>

#if defined(MBEDTLS_USE_PSA_CRYPTO)
    if( ctx->psa_enabled == 1 )
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009640:	2b01      	cmp	r3, #1
 8009642:	d165      	bne.n	8009710 <mbedtls_cipher_setkey+0xf0>
    {
        mbedtls_cipher_context_psa * const cipher_psa =
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009648:	64fb      	str	r3, [r7, #76]	; 0x4c
            (mbedtls_cipher_context_psa *) ctx->cipher_ctx;

        size_t const key_bytelen = ( (size_t) key_bitlen + 7 ) / 8;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3307      	adds	r3, #7
 800964e:	08db      	lsrs	r3, r3, #3
 8009650:	64bb      	str	r3, [r7, #72]	; 0x48

        psa_status_t status;
        psa_key_type_t key_type;
        psa_key_attributes_t attributes = PSA_KEY_ATTRIBUTES_INIT;
 8009652:	f107 0310 	add.w	r3, r7, #16
 8009656:	2230      	movs	r2, #48	; 0x30
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f00b fd81 	bl	8015162 <memset>

        /* PSA Crypto API only accepts byte-aligned keys. */
        if( key_bitlen % 8 != 0 )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <mbedtls_cipher_setkey+0x4e>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800966a:	4b4e      	ldr	r3, [pc, #312]	; (80097a4 <mbedtls_cipher_setkey+0x184>)
 800966c:	e096      	b.n	800979c <mbedtls_cipher_setkey+0x17c>

        /* Don't allow keys to be set multiple times. */
        if( cipher_psa->slot_state != MBEDTLS_CIPHER_PSA_KEY_UNSET )
 800966e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009670:	7a1b      	ldrb	r3, [r3, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d001      	beq.n	800967a <mbedtls_cipher_setkey+0x5a>
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8009676:	4b4b      	ldr	r3, [pc, #300]	; (80097a4 <mbedtls_cipher_setkey+0x184>)
 8009678:	e090      	b.n	800979c <mbedtls_cipher_setkey+0x17c>

        key_type = mbedtls_psa_translate_cipher_type(
            ctx->cipher_info->type );
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
        key_type = mbedtls_psa_translate_cipher_type(
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f7ff fe8d 	bl	80093a0 <mbedtls_psa_translate_cipher_type>
 8009686:	4603      	mov	r3, r0
 8009688:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        if( key_type == 0 )
 800968c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <mbedtls_cipher_setkey+0x78>
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8009694:	4b44      	ldr	r3, [pc, #272]	; (80097a8 <mbedtls_cipher_setkey+0x188>)
 8009696:	e081      	b.n	800979c <mbedtls_cipher_setkey+0x17c>
        psa_set_key_type( &attributes, key_type );
 8009698:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800969c:	f107 0310 	add.w	r3, r7, #16
 80096a0:	4611      	mov	r1, r2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7ff fe63 	bl	800936e <psa_set_key_type>

        /* Mbed TLS' cipher layer doesn't enforce the mode of operation
         * (encrypt vs. decrypt): it is possible to setup a key for encryption
         * and use it for AEAD decryption. Until tests relying on this
         * are changed, allow any usage in PSA. */
        psa_set_key_usage_flags( &attributes,
 80096a8:	f107 0310 	add.w	r3, r7, #16
 80096ac:	f44f 7140 	mov.w	r1, #768	; 0x300
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff fe40 	bl	8009336 <psa_set_key_usage_flags>
                                 /* mbedtls_psa_translate_cipher_operation( operation ); */
                                 PSA_KEY_USAGE_ENCRYPT | PSA_KEY_USAGE_DECRYPT );
        psa_set_key_algorithm( &attributes, cipher_psa->alg );
 80096b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	f107 0310 	add.w	r3, r7, #16
 80096be:	4611      	mov	r1, r2
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff fe46 	bl	8009352 <psa_set_key_algorithm>

        status = psa_import_key( &attributes, key, key_bytelen,
                                 &cipher_psa->slot );
 80096c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c8:	3304      	adds	r3, #4
        status = psa_import_key( &attributes, key, key_bytelen,
 80096ca:	f107 0010 	add.w	r0, r7, #16
 80096ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	f006 fe46 	bl	8010362 <psa_import_key>
 80096d6:	6438      	str	r0, [r7, #64]	; 0x40
        switch( status )
 80096d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096da:	f113 0f86 	cmn.w	r3, #134	; 0x86
 80096de:	d006      	beq.n	80096ee <mbedtls_cipher_setkey+0xce>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d009      	beq.n	80096f8 <mbedtls_cipher_setkey+0xd8>
 80096e4:	f113 0f8d 	cmn.w	r3, #141	; 0x8d
 80096e8:	d103      	bne.n	80096f2 <mbedtls_cipher_setkey+0xd2>
        {
            case PSA_SUCCESS:
                break;
            case PSA_ERROR_INSUFFICIENT_MEMORY:
                return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 80096ea:	4b30      	ldr	r3, [pc, #192]	; (80097ac <mbedtls_cipher_setkey+0x18c>)
 80096ec:	e056      	b.n	800979c <mbedtls_cipher_setkey+0x17c>
            case PSA_ERROR_NOT_SUPPORTED:
                return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80096ee:	4b2e      	ldr	r3, [pc, #184]	; (80097a8 <mbedtls_cipher_setkey+0x188>)
 80096f0:	e054      	b.n	800979c <mbedtls_cipher_setkey+0x17c>
            default:
                return( MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED );
 80096f2:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 80096f6:	e051      	b.n	800979c <mbedtls_cipher_setkey+0x17c>
                break;
 80096f8:	bf00      	nop
        }
        /* Indicate that we own the key slot and need to
         * destroy it in mbedtls_cipher_free(). */
        cipher_psa->slot_state = MBEDTLS_CIPHER_PSA_KEY_OWNED;
 80096fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096fc:	2201      	movs	r2, #1
 80096fe:	721a      	strb	r2, [r3, #8]

        ctx->key_bitlen = key_bitlen;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	605a      	str	r2, [r3, #4]
        ctx->operation = operation;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	78fa      	ldrb	r2, [r7, #3]
 800970a:	721a      	strb	r2, [r3, #8]
        return( 0 );
 800970c:	2300      	movs	r3, #0
 800970e:	e045      	b.n	800979c <mbedtls_cipher_setkey+0x17c>
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f003 0302 	and.w	r3, r3, #2
 800971a:	2b00      	cmp	r3, #0
 800971c:	d108      	bne.n	8009730 <mbedtls_cipher_setkey+0x110>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	461a      	mov	r2, r3
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4293      	cmp	r3, r2
 800972a:	d001      	beq.n	8009730 <mbedtls_cipher_setkey+0x110>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800972c:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <mbedtls_cipher_setkey+0x184>)
 800972e:	e035      	b.n	800979c <mbedtls_cipher_setkey+0x17c>
    }

    ctx->key_bitlen = key_bitlen;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	78fa      	ldrb	r2, [r7, #3]
 800973a:	721a      	strb	r2, [r3, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 800973c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d00e      	beq.n	8009762 <mbedtls_cipher_setkey+0x142>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 800974a:	2b03      	cmp	r3, #3
 800974c:	d009      	beq.n	8009762 <mbedtls_cipher_setkey+0x142>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8009754:	2b04      	cmp	r3, #4
 8009756:	d004      	beq.n	8009762 <mbedtls_cipher_setkey+0x142>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 800975e:	2b05      	cmp	r3, #5
 8009760:	d10b      	bne.n	800977a <mbedtls_cipher_setkey+0x15a>
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                         ctx->key_bitlen ) );
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8009772:	68b9      	ldr	r1, [r7, #8]
 8009774:	4798      	blx	r3
 8009776:	4603      	mov	r3, r0
 8009778:	e010      	b.n	800979c <mbedtls_cipher_setkey+0x17c>
    }

    if( MBEDTLS_DECRYPT == operation )
 800977a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10b      	bne.n	800979a <mbedtls_cipher_setkey+0x17a>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
                                                         ctx->key_bitlen ) );
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8009792:	68b9      	ldr	r1, [r7, #8]
 8009794:	4798      	blx	r3
 8009796:	4603      	mov	r3, r0
 8009798:	e000      	b.n	800979c <mbedtls_cipher_setkey+0x17c>

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800979a:	4b02      	ldr	r3, [pc, #8]	; (80097a4 <mbedtls_cipher_setkey+0x184>)
}
 800979c:	4618      	mov	r0, r3
 800979e:	3750      	adds	r7, #80	; 0x50
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	ffff9f00 	.word	0xffff9f00
 80097a8:	ffff9f80 	.word	0xffff9f80
 80097ac:	ffff9e80 	.word	0xffff9e80

080097b0 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 80097b0:	b5b0      	push	{r4, r5, r7, lr}
 80097b2:	b08c      	sub	sp, #48	; 0x30
 80097b4:	af04      	add	r7, sp, #16
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80097be:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80097c2:	61bb      	str	r3, [r7, #24]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <mbedtls_cipher_update+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80097cc:	4b70      	ldr	r3, [pc, #448]	; (8009990 <mbedtls_cipher_update+0x1e0>)
 80097ce:	e204      	b.n	8009bda <mbedtls_cipher_update+0x42a>

#if defined(MBEDTLS_USE_PSA_CRYPTO)
    if( ctx->psa_enabled == 1 )
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d101      	bne.n	80097de <mbedtls_cipher_update+0x2e>
    {
        /* While PSA Crypto has an API for multipart
         * operations, we currently don't make it
         * accessible through the cipher layer. */
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80097da:	4b6e      	ldr	r3, [pc, #440]	; (8009994 <mbedtls_cipher_update+0x1e4>)
 80097dc:	e1fd      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    *olen = 0;
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	2200      	movs	r2, #0
 80097e2:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f7ff fd93 	bl	8009310 <mbedtls_cipher_get_block_size>
 80097ea:	6178      	str	r0, [r7, #20]
    if ( 0 == block_size )
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <mbedtls_cipher_update+0x46>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 80097f2:	4b69      	ldr	r3, [pc, #420]	; (8009998 <mbedtls_cipher_update+0x1e8>)
 80097f4:	e1f1      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	785b      	ldrb	r3, [r3, #1]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d11c      	bne.n	800983a <mbedtls_cipher_update+0x8a>
    {
        if( ilen != block_size )
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	429a      	cmp	r2, r3
 8009806:	d001      	beq.n	800980c <mbedtls_cipher_update+0x5c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8009808:	4b64      	ldr	r3, [pc, #400]	; (800999c <mbedtls_cipher_update+0x1ec>)
 800980a:	e1e6      	b.n	8009bda <mbedtls_cipher_update+0x42a>

        *olen = ilen;
 800980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	601a      	str	r2, [r3, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	685c      	ldr	r4, [r3, #4]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	47a0      	blx	r4
 800982a:	61b8      	str	r0, [r7, #24]
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <mbedtls_cipher_update+0x86>
                    ctx->operation, input, output ) ) )
        {
            return( ret );
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	e1d1      	b.n	8009bda <mbedtls_cipher_update+0x42a>
        }

        return( 0 );
 8009836:	2300      	movs	r3, #0
 8009838:	e1cf      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	2b06      	cmp	r3, #6
 8009842:	d10b      	bne.n	800985c <mbedtls_cipher_update+0xac>
    {
        *olen = ilen;
 8009844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	601a      	str	r2, [r3, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	f004 f9ad 	bl	800dbb2 <mbedtls_gcm_update>
 8009858:	4603      	mov	r3, r0
 800985a:	e1be      	b.n	8009bda <mbedtls_cipher_update+0x42a>
                                    output ) );
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( ctx->cipher_info->type == MBEDTLS_CIPHER_CHACHA20_POLY1305 )
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	2b49      	cmp	r3, #73	; 0x49
 8009864:	d10b      	bne.n	800987e <mbedtls_cipher_update+0xce>
    {
        *olen = ilen;
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	601a      	str	r2, [r3, #0]
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	f7ff fb3e 	bl	8008ef6 <mbedtls_chachapoly_update>
 800987a:	4603      	mov	r3, r0
 800987c:	e1ad      	b.n	8009bda <mbedtls_cipher_update+0x42a>
                                           ilen, input, output ) );
    }
#endif

    if( input == output &&
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d10f      	bne.n	80098a6 <mbedtls_cipher_update+0xf6>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if( input == output &&
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <mbedtls_cipher_update+0xf2>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	fbb3 f2f2 	udiv	r2, r3, r2
 8009896:	6979      	ldr	r1, [r7, #20]
 8009898:	fb01 f202 	mul.w	r2, r1, r2
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <mbedtls_cipher_update+0xf6>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80098a2:	4b3b      	ldr	r3, [pc, #236]	; (8009990 <mbedtls_cipher_update+0x1e0>)
 80098a4:	e199      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	f040 80e0 	bne.w	8009a72 <mbedtls_cipher_update+0x2c2>
    {
        size_t copy_len = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d10a      	bne.n	80098d6 <mbedtls_cipher_update+0x126>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d006      	beq.n	80098d6 <mbedtls_cipher_update+0x126>
                ilen <= block_size - ctx->unprocessed_len ) ||
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	1ad3      	subs	r3, r2, r3
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d91b      	bls.n	800990e <mbedtls_cipher_update+0x15e>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen <= block_size - ctx->unprocessed_len ) ||
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <mbedtls_cipher_update+0x146>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d106      	bne.n	80098f6 <mbedtls_cipher_update+0x146>
                ilen < block_size - ctx->unprocessed_len ) ||
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	1ad3      	subs	r3, r2, r3
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d30b      	bcc.n	800990e <mbedtls_cipher_update+0x15e>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen < block_size - ctx->unprocessed_len ) ||
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d119      	bne.n	8009934 <mbedtls_cipher_update+0x184>
                ilen < block_size - ctx->unprocessed_len ) )
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	1ad3      	subs	r3, r2, r3
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	429a      	cmp	r2, r3
 800990c:	d212      	bcs.n	8009934 <mbedtls_cipher_update+0x184>
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009912:	3310      	adds	r3, #16
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	3304      	adds	r3, #4
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	68b9      	ldr	r1, [r7, #8]
 800991e:	4618      	mov	r0, r3
 8009920:	f00b fbfb 	bl	801511a <memcpy>
                    ilen );

            ctx->unprocessed_len += ilen;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	441a      	add	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	625a      	str	r2, [r3, #36]	; 0x24
            return( 0 );
 8009930:	2300      	movs	r3, #0
 8009932:	e152      	b.n	8009bda <mbedtls_cipher_update+0x42a>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	d046      	beq.n	80099ca <mbedtls_cipher_update+0x21a>
        {
            copy_len = block_size - ctx->unprocessed_len;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	61fb      	str	r3, [r7, #28]

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	3310      	adds	r3, #16
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4413      	add	r3, r2
 8009950:	3304      	adds	r3, #4
 8009952:	69fa      	ldr	r2, [r7, #28]
 8009954:	68b9      	ldr	r1, [r7, #8]
 8009956:	4618      	mov	r0, r3
 8009958:	f00b fbdf 	bl	801511a <memcpy>
                    copy_len );

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	689c      	ldr	r4, [r3, #8]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, block_size, ctx->iv,
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f103 0528 	add.w	r5, r3, #40	; 0x28
                    ctx->unprocessed_data, output ) ) )
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3314      	adds	r3, #20
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	9201      	str	r2, [sp, #4]
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	462b      	mov	r3, r5
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	47a0      	blx	r4
 8009984:	61b8      	str	r0, [r7, #24]
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d009      	beq.n	80099a0 <mbedtls_cipher_update+0x1f0>
            {
                return( ret );
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	e124      	b.n	8009bda <mbedtls_cipher_update+0x42a>
 8009990:	ffff9f00 	.word	0xffff9f00
 8009994:	ffff9f80 	.word	0xffff9f80
 8009998:	ffff9c80 	.word	0xffff9c80
 800999c:	ffff9d80 	.word	0xffff9d80
            }

            *olen += block_size;
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	441a      	add	r2, r3
 80099a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099aa:	601a      	str	r2, [r3, #0]
            output += block_size;
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	4413      	add	r3, r2
 80099b2:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	625a      	str	r2, [r3, #36]	; 0x24

            input += copy_len;
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	4413      	add	r3, r2
 80099c0:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d02c      	beq.n	8009a2a <mbedtls_cipher_update+0x27a>
        {
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80099d8:	6979      	ldr	r1, [r7, #20]
 80099da:	fb01 f202 	mul.w	r2, r1, r2
 80099de:	1a9b      	subs	r3, r3, r2
 80099e0:	61fb      	str	r3, [r7, #28]
            if( copy_len == 0 &&
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10a      	bne.n	80099fe <mbedtls_cipher_update+0x24e>
                ctx->operation == MBEDTLS_DECRYPT &&
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
            if( copy_len == 0 &&
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <mbedtls_cipher_update+0x24e>
                NULL != ctx->add_padding)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	68db      	ldr	r3, [r3, #12]
                ctx->operation == MBEDTLS_DECRYPT &&
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <mbedtls_cipher_update+0x24e>
            {
                copy_len = block_size;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	61fb      	str	r3, [r7, #28]
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f103 0014 	add.w	r0, r3, #20
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	4619      	mov	r1, r3
 8009a12:	f00b fb82 	bl	801511a <memcpy>
                    copy_len );

            ctx->unprocessed_len += copy_len;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	441a      	add	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	625a      	str	r2, [r3, #36]	; 0x24
            ilen -= copy_len;
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d01e      	beq.n	8009a6e <mbedtls_cipher_update+0x2be>
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699b      	ldr	r3, [r3, #24]
 8009a36:	689c      	ldr	r4, [r3, #8]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f103 0228 	add.w	r2, r3, #40	; 0x28
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	9301      	str	r3, [sp, #4]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	4613      	mov	r3, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	47a0      	blx	r4
 8009a56:	61b8      	str	r0, [r7, #24]
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <mbedtls_cipher_update+0x2b2>
            {
                return( ret );
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	e0bb      	b.n	8009bda <mbedtls_cipher_update+0x42a>
            }

            *olen += ilen;
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	441a      	add	r2, r3
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	601a      	str	r2, [r3, #0]
        }

        return( 0 );
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e0b3      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CFB)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CFB )
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	785b      	ldrb	r3, [r3, #1]
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d120      	bne.n	8009abe <mbedtls_cipher_update+0x30e>
    {
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	68dc      	ldr	r4, [r3, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f103 0524 	add.w	r5, r3, #36	; 0x24
                ctx->operation, ilen, &ctx->unprocessed_len, ctx->iv,
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3328      	adds	r3, #40	; 0x28
        if( 0 != ( ret = ctx->cipher_info->base->cfb_func( ctx->cipher_ctx,
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	9202      	str	r2, [sp, #8]
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	9201      	str	r2, [sp, #4]
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	462b      	mov	r3, r5
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	47a0      	blx	r4
 8009aa8:	61b8      	str	r0, [r7, #24]
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <mbedtls_cipher_update+0x304>
                input, output ) ) )
        {
            return( ret );
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	e092      	b.n	8009bda <mbedtls_cipher_update+0x42a>
        }

        *olen = ilen;
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	601a      	str	r2, [r3, #0]

        return( 0 );
 8009aba:	2300      	movs	r3, #0
 8009abc:	e08d      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_OFB )
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	785b      	ldrb	r3, [r3, #1]
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	d11d      	bne.n	8009b04 <mbedtls_cipher_update+0x354>
    {
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	691c      	ldr	r4, [r3, #16]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f103 0224 	add.w	r2, r3, #36	; 0x24
                ilen, &ctx->unprocessed_len, ctx->iv, input, output ) ) )
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f103 0128 	add.w	r1, r3, #40	; 0x28
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	6879      	ldr	r1, [r7, #4]
 8009aec:	47a0      	blx	r4
 8009aee:	61b8      	str	r0, [r7, #24]
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <mbedtls_cipher_update+0x34a>
        {
            return( ret );
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	e06f      	b.n	8009bda <mbedtls_cipher_update+0x42a>
        }

        *olen = ilen;
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	601a      	str	r2, [r3, #0]

        return( 0 );
 8009b00:	2300      	movs	r3, #0
 8009b02:	e06a      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }
#endif /* MBEDTLS_CIPHER_MODE_OFB */

#if defined(MBEDTLS_CIPHER_MODE_CTR)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CTR )
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	785b      	ldrb	r3, [r3, #1]
 8009b0a:	2b05      	cmp	r3, #5
 8009b0c:	d121      	bne.n	8009b52 <mbedtls_cipher_update+0x3a2>
    {
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	695c      	ldr	r4, [r3, #20]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f103 0124 	add.w	r1, r3, #36	; 0x24
                ilen, &ctx->unprocessed_len, ctx->iv,
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f103 0528 	add.w	r5, r3, #40	; 0x28
                ctx->unprocessed_data, input, output ) ) )
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3314      	adds	r3, #20
        if( 0 != ( ret = ctx->cipher_info->base->ctr_func( ctx->cipher_ctx,
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	9202      	str	r2, [sp, #8]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	9201      	str	r2, [sp, #4]
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	462b      	mov	r3, r5
 8009b36:	460a      	mov	r2, r1
 8009b38:	6879      	ldr	r1, [r7, #4]
 8009b3a:	47a0      	blx	r4
 8009b3c:	61b8      	str	r0, [r7, #24]
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <mbedtls_cipher_update+0x398>
        {
            return( ret );
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	e048      	b.n	8009bda <mbedtls_cipher_update+0x42a>
        }

        *olen = ilen;
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	601a      	str	r2, [r3, #0]

        return( 0 );
 8009b4e:	2300      	movs	r3, #0
 8009b50:	e043      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_XTS )
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	785b      	ldrb	r3, [r3, #1]
 8009b58:	2b09      	cmp	r3, #9
 8009b5a:	d123      	bne.n	8009ba4 <mbedtls_cipher_update+0x3f4>
    {
        if( ctx->unprocessed_len > 0 ) {
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d001      	beq.n	8009b68 <mbedtls_cipher_update+0x3b8>
            /* We can only process an entire data unit at a time. */
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8009b64:	4b1f      	ldr	r3, [pc, #124]	; (8009be4 <mbedtls_cipher_update+0x434>)
 8009b66:	e038      	b.n	8009bda <mbedtls_cipher_update+0x42a>
        }

        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	699c      	ldr	r4, [r3, #24]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f993 1008 	ldrsb.w	r1, [r3, #8]
                ctx->operation, ilen, ctx->iv, input, output );
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f103 0228 	add.w	r2, r3, #40	; 0x28
        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	9301      	str	r3, [sp, #4]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	47a0      	blx	r4
 8009b8e:	61b8      	str	r0, [r7, #24]
        if( ret != 0 )
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <mbedtls_cipher_update+0x3ea>
        {
            return( ret );
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	e01f      	b.n	8009bda <mbedtls_cipher_update+0x42a>
        }

        *olen = ilen;
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	601a      	str	r2, [r3, #0]

        return( 0 );
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	e01a      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_STREAM )
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	785b      	ldrb	r3, [r3, #1]
 8009baa:	2b07      	cmp	r3, #7
 8009bac:	d114      	bne.n	8009bd8 <mbedtls_cipher_update+0x428>
    {
        if( 0 != ( ret = ctx->cipher_info->base->stream_func( ctx->cipher_ctx,
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	69dc      	ldr	r4, [r3, #28]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	47a0      	blx	r4
 8009bc2:	61b8      	str	r0, [r7, #24]
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <mbedtls_cipher_update+0x41e>
                                                    ilen, input, output ) ) )
        {
            return( ret );
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	e005      	b.n	8009bda <mbedtls_cipher_update+0x42a>
        }

        *olen = ilen;
 8009bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	601a      	str	r2, [r3, #0]

        return( 0 );
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	e000      	b.n	8009bda <mbedtls_cipher_update+0x42a>
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8009bd8:	4b02      	ldr	r3, [pc, #8]	; (8009be4 <mbedtls_cipher_update+0x434>)
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3720      	adds	r7, #32
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bdb0      	pop	{r4, r5, r7, pc}
 8009be2:	bf00      	nop
 8009be4:	ffff9f80 	.word	0xffff9f80

08009be8 <add_pkcs_padding>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
    size_t padding_len = output_len - data_len;
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	613b      	str	r3, [r7, #16]
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	75fb      	strb	r3, [r7, #23]
 8009c00:	e00a      	b.n	8009c18 <add_pkcs_padding+0x30>
        output[data_len + i] = (unsigned char) padding_len;
 8009c02:	7dfa      	ldrb	r2, [r7, #23]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4413      	add	r3, r2
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	693a      	ldr	r2, [r7, #16]
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < padding_len; i++ )
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
 8009c14:	3301      	adds	r3, #1
 8009c16:	75fb      	strb	r3, [r7, #23]
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	693a      	ldr	r2, [r7, #16]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d8f0      	bhi.n	8009c02 <add_pkcs_padding+0x1a>
}
 8009c20:	bf00      	nop
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <get_pkcs_padding>:

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b089      	sub	sp, #36	; 0x24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	76fb      	strb	r3, [r7, #27]

    if( NULL == input || NULL == data_len )
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <get_pkcs_padding+0x1c>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <get_pkcs_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8009c48:	4b2b      	ldr	r3, [pc, #172]	; (8009cf8 <get_pkcs_padding+0xcc>)
 8009c4a:	e04f      	b.n	8009cec <get_pkcs_padding+0xc0>

    padding_len = input[input_len - 1];
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	4413      	add	r3, r2
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	76bb      	strb	r3, [r7, #26]
    *data_len = input_len - padding_len;
 8009c58:	7ebb      	ldrb	r3, [r7, #26]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	1ad2      	subs	r2, r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	601a      	str	r2, [r3, #0]

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
 8009c62:	7ebb      	ldrb	r3, [r7, #26]
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	bf34      	ite	cc
 8009c6a:	2301      	movcc	r3, #1
 8009c6c:	2300      	movcs	r3, #0
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	b25a      	sxtb	r2, r3
 8009c72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	b25b      	sxtb	r3, r3
 8009c7a:	76fb      	strb	r3, [r7, #27]
    bad |= padding_len == 0;
 8009c7c:	7ebb      	ldrb	r3, [r7, #26]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bf0c      	ite	eq
 8009c82:	2301      	moveq	r3, #1
 8009c84:	2300      	movne	r3, #0
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	b25a      	sxtb	r2, r3
 8009c8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	b25b      	sxtb	r3, r3
 8009c92:	76fb      	strb	r3, [r7, #27]

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
 8009c94:	7ebb      	ldrb	r3, [r7, #26]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	617b      	str	r3, [r7, #20]
    for( i = 0; i < input_len; i++ )
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61fb      	str	r3, [r7, #28]
 8009ca0:	e01a      	b.n	8009cd8 <get_pkcs_padding+0xac>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	781a      	ldrb	r2, [r3, #0]
 8009caa:	7ebb      	ldrb	r3, [r7, #26]
 8009cac:	4053      	eors	r3, r2
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	69f9      	ldr	r1, [r7, #28]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	4299      	cmp	r1, r3
 8009cb6:	bf2c      	ite	cs
 8009cb8:	2301      	movcs	r3, #1
 8009cba:	2300      	movcc	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	fb12 f303 	smulbb	r3, r2, r3
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	b25a      	sxtb	r2, r3
 8009cc8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	b25b      	sxtb	r3, r3
 8009cd0:	76fb      	strb	r3, [r7, #27]
    for( i = 0; i < input_len; i++ )
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	61fb      	str	r3, [r7, #28]
 8009cd8:	69fa      	ldr	r2, [r7, #28]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d3e0      	bcc.n	8009ca2 <get_pkcs_padding+0x76>

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8009ce0:	7efb      	ldrb	r3, [r7, #27]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <get_pkcs_padding+0xbe>
 8009ce6:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <get_pkcs_padding+0xd0>)
 8009ce8:	e000      	b.n	8009cec <get_pkcs_padding+0xc0>
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3724      	adds	r7, #36	; 0x24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	ffff9f00 	.word	0xffff9f00
 8009cfc:	ffff9e00 	.word	0xffff9e00

08009d00 <add_one_and_zeros_padding>:
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
    size_t padding_len = output_len - data_len;
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	613b      	str	r3, [r7, #16]
    unsigned char i = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	75fb      	strb	r3, [r7, #23]

    output[data_len] = 0x80;
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	2280      	movs	r2, #128	; 0x80
 8009d20:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < padding_len; i++ )
 8009d22:	2301      	movs	r3, #1
 8009d24:	75fb      	strb	r3, [r7, #23]
 8009d26:	e009      	b.n	8009d3c <add_one_and_zeros_padding+0x3c>
        output[data_len + i] = 0x00;
 8009d28:	7dfa      	ldrb	r2, [r7, #23]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	4413      	add	r3, r2
 8009d32:	2200      	movs	r2, #0
 8009d34:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < padding_len; i++ )
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	75fb      	strb	r3, [r7, #23]
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d8f1      	bhi.n	8009d28 <add_one_and_zeros_padding+0x28>
}
 8009d44:	bf00      	nop
 8009d46:	371c      	adds	r7, #28
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <get_one_and_zeros_padding>:

static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8009d50:	b480      	push	{r7}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char done = 0, prev_done, bad;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	74fb      	strb	r3, [r7, #19]

    if( NULL == input || NULL == data_len )
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <get_one_and_zeros_padding+0x1c>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <get_one_and_zeros_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8009d6c:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <get_one_and_zeros_padding+0xc4>)
 8009d6e:	e04b      	b.n	8009e08 <get_one_and_zeros_padding+0xb8>

    bad = 0x80;
 8009d70:	2380      	movs	r3, #128	; 0x80
 8009d72:	74bb      	strb	r3, [r7, #18]
    *data_len = 0;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
    for( i = input_len; i > 0; i-- )
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	e03a      	b.n	8009df6 <get_one_and_zeros_padding+0xa6>
    {
        prev_done = done;
 8009d80:	7cfb      	ldrb	r3, [r7, #19]
 8009d82:	747b      	strb	r3, [r7, #17]
        done |= ( input[i - 1] != 0 );
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	bf14      	ite	ne
 8009d92:	2301      	movne	r3, #1
 8009d94:	2300      	moveq	r3, #0
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	b25a      	sxtb	r2, r3
 8009d9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	b25b      	sxtb	r3, r3
 8009da2:	74fb      	strb	r3, [r7, #19]
        *data_len |= ( i - 1 ) * ( done != prev_done );
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	7cf8      	ldrb	r0, [r7, #19]
 8009dae:	7c79      	ldrb	r1, [r7, #17]
 8009db0:	4288      	cmp	r0, r1
 8009db2:	bf14      	ite	ne
 8009db4:	2101      	movne	r1, #1
 8009db6:	2100      	moveq	r1, #0
 8009db8:	b2c9      	uxtb	r1, r1
 8009dba:	fb01 f303 	mul.w	r3, r1, r3
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	601a      	str	r2, [r3, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4413      	add	r3, r2
 8009dcc:	781a      	ldrb	r2, [r3, #0]
 8009dce:	7cf9      	ldrb	r1, [r7, #19]
 8009dd0:	7c7b      	ldrb	r3, [r7, #17]
 8009dd2:	4299      	cmp	r1, r3
 8009dd4:	bf14      	ite	ne
 8009dd6:	2301      	movne	r3, #1
 8009dd8:	2300      	moveq	r3, #0
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	fb12 f303 	smulbb	r3, r2, r3
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	b25a      	sxtb	r2, r3
 8009de6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8009dea:	4053      	eors	r3, r2
 8009dec:	b25b      	sxtb	r3, r3
 8009dee:	74bb      	strb	r3, [r7, #18]
    for( i = input_len; i > 0; i-- )
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	617b      	str	r3, [r7, #20]
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1c1      	bne.n	8009d80 <get_one_and_zeros_padding+0x30>
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8009dfc:	7cbb      	ldrb	r3, [r7, #18]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <get_one_and_zeros_padding+0xb6>
 8009e02:	4b05      	ldr	r3, [pc, #20]	; (8009e18 <get_one_and_zeros_padding+0xc8>)
 8009e04:	e000      	b.n	8009e08 <get_one_and_zeros_padding+0xb8>
 8009e06:	2300      	movs	r3, #0

}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	371c      	adds	r7, #28
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	ffff9f00 	.word	0xffff9f00
 8009e18:	ffff9e00 	.word	0xffff9e00

08009e1c <add_zeros_and_len_padding>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b087      	sub	sp, #28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
    size_t padding_len = output_len - data_len;
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	613b      	str	r3, [r7, #16]
    unsigned char i = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	75fb      	strb	r3, [r7, #23]

    for( i = 1; i < padding_len; i++ )
 8009e34:	2301      	movs	r3, #1
 8009e36:	75fb      	strb	r3, [r7, #23]
 8009e38:	e00a      	b.n	8009e50 <add_zeros_and_len_padding+0x34>
        output[data_len + i - 1] = 0x00;
 8009e3a:	7dfa      	ldrb	r2, [r7, #23]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4413      	add	r3, r2
 8009e40:	3b01      	subs	r3, #1
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4413      	add	r3, r2
 8009e46:	2200      	movs	r2, #0
 8009e48:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < padding_len; i++ )
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	75fb      	strb	r3, [r7, #23]
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d8f0      	bhi.n	8009e3a <add_zeros_and_len_padding+0x1e>
    output[output_len - 1] = (unsigned char) padding_len;
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	b2d2      	uxtb	r2, r2
 8009e64:	701a      	strb	r2, [r3, #0]
}
 8009e66:	bf00      	nop
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
	...

08009e74 <get_zeros_and_len_padding>:

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b089      	sub	sp, #36	; 0x24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;
 8009e80:	2300      	movs	r3, #0
 8009e82:	76fb      	strb	r3, [r7, #27]

    if( NULL == input || NULL == data_len )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d002      	beq.n	8009e90 <get_zeros_and_len_padding+0x1c>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <get_zeros_and_len_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8009e90:	4b2a      	ldr	r3, [pc, #168]	; (8009f3c <get_zeros_and_len_padding+0xc8>)
 8009e92:	e04d      	b.n	8009f30 <get_zeros_and_len_padding+0xbc>

    padding_len = input[input_len - 1];
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	3b01      	subs	r3, #1
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	76bb      	strb	r3, [r7, #26]
    *data_len = input_len - padding_len;
 8009ea0:	7ebb      	ldrb	r3, [r7, #26]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	1ad2      	subs	r2, r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	601a      	str	r2, [r3, #0]

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
 8009eaa:	7ebb      	ldrb	r3, [r7, #26]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	bf34      	ite	cc
 8009eb2:	2301      	movcc	r3, #1
 8009eb4:	2300      	movcs	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	b25a      	sxtb	r2, r3
 8009eba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	b25b      	sxtb	r3, r3
 8009ec2:	76fb      	strb	r3, [r7, #27]
    bad |= padding_len == 0;
 8009ec4:	7ebb      	ldrb	r3, [r7, #26]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bf0c      	ite	eq
 8009eca:	2301      	moveq	r3, #1
 8009ecc:	2300      	movne	r3, #0
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	b25a      	sxtb	r2, r3
 8009ed2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	b25b      	sxtb	r3, r3
 8009eda:	76fb      	strb	r3, [r7, #27]

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
 8009edc:	7ebb      	ldrb	r3, [r7, #26]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	617b      	str	r3, [r7, #20]
    for( i = 0; i < input_len - 1; i++ )
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	61fb      	str	r3, [r7, #28]
 8009ee8:	e017      	b.n	8009f1a <get_zeros_and_len_padding+0xa6>
        bad |= input[i] * ( i >= pad_idx );
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	4413      	add	r3, r2
 8009ef0:	781a      	ldrb	r2, [r3, #0]
 8009ef2:	69f9      	ldr	r1, [r7, #28]
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	4299      	cmp	r1, r3
 8009ef8:	bf2c      	ite	cs
 8009efa:	2301      	movcs	r3, #1
 8009efc:	2300      	movcc	r3, #0
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	fb12 f303 	smulbb	r3, r2, r3
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	b25a      	sxtb	r2, r3
 8009f0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	b25b      	sxtb	r3, r3
 8009f12:	76fb      	strb	r3, [r7, #27]
    for( i = 0; i < input_len - 1; i++ )
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	3301      	adds	r3, #1
 8009f18:	61fb      	str	r3, [r7, #28]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d3e2      	bcc.n	8009eea <get_zeros_and_len_padding+0x76>

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8009f24:	7efb      	ldrb	r3, [r7, #27]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <get_zeros_and_len_padding+0xba>
 8009f2a:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <get_zeros_and_len_padding+0xcc>)
 8009f2c:	e000      	b.n	8009f30 <get_zeros_and_len_padding+0xbc>
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3724      	adds	r7, #36	; 0x24
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	ffff9f00 	.word	0xffff9f00
 8009f40:	ffff9e00 	.word	0xffff9e00

08009f44 <add_zeros_padding>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	e007      	b.n	8009f66 <add_zeros_padding+0x22>
        output[i] = 0x00;
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	701a      	strb	r2, [r3, #0]
    for( i = data_len; i < output_len; i++ )
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	3301      	adds	r3, #1
 8009f64:	617b      	str	r3, [r7, #20]
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d3f3      	bcc.n	8009f56 <add_zeros_padding+0x12>
}
 8009f6e:	bf00      	nop
 8009f70:	371c      	adds	r7, #28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
	...

08009f7c <get_zeros_padding>:

static int get_zeros_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
    size_t i;
    unsigned char done = 0, prev_done;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	74fb      	strb	r3, [r7, #19]

    if( NULL == input || NULL == data_len )
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d002      	beq.n	8009f98 <get_zeros_padding+0x1c>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <get_zeros_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8009f98:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <get_zeros_padding+0x8c>)
 8009f9a:	e02e      	b.n	8009ffa <get_zeros_padding+0x7e>

    *data_len = 0;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
    for( i = input_len; i > 0; i-- )
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	617b      	str	r3, [r7, #20]
 8009fa6:	e024      	b.n	8009ff2 <get_zeros_padding+0x76>
    {
        prev_done = done;
 8009fa8:	7cfb      	ldrb	r3, [r7, #19]
 8009faa:	74bb      	strb	r3, [r7, #18]
        done |= ( input[i-1] != 0 );
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	bf14      	ite	ne
 8009fba:	2301      	movne	r3, #1
 8009fbc:	2300      	moveq	r3, #0
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	b25a      	sxtb	r2, r3
 8009fc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	b25b      	sxtb	r3, r3
 8009fca:	74fb      	strb	r3, [r7, #19]
        *data_len |= i * ( done != prev_done );
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	7cf9      	ldrb	r1, [r7, #19]
 8009fd2:	7cbb      	ldrb	r3, [r7, #18]
 8009fd4:	4299      	cmp	r1, r3
 8009fd6:	bf14      	ite	ne
 8009fd8:	2301      	movne	r3, #1
 8009fda:	2300      	moveq	r3, #0
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	4619      	mov	r1, r3
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	fb03 f301 	mul.w	r3, r3, r1
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	601a      	str	r2, [r3, #0]
    for( i = input_len; i > 0; i-- )
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	617b      	str	r3, [r7, #20]
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1d7      	bne.n	8009fa8 <get_zeros_padding+0x2c>
    }

    return( 0 );
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	371c      	adds	r7, #28
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	ffff9f00 	.word	0xffff9f00

0800a00c <get_no_padding>:
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
    if( NULL == input || NULL == data_len )
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <get_no_padding+0x18>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <get_no_padding+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800a024:	4b05      	ldr	r3, [pc, #20]	; (800a03c <get_no_padding+0x30>)
 800a026:	e003      	b.n	800a030 <get_no_padding+0x24>

    *data_len = input_len;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	601a      	str	r2, [r3, #0]

    return( 0 );
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	ffff9f00 	.word	0xffff9f00

0800a040 <mbedtls_cipher_set_padding_mode>:
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <mbedtls_cipher_set_padding_mode+0x1e>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	785b      	ldrb	r3, [r3, #1]
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	d001      	beq.n	800a062 <mbedtls_cipher_set_padding_mode+0x22>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800a05e:	4b25      	ldr	r3, [pc, #148]	; (800a0f4 <mbedtls_cipher_set_padding_mode+0xb4>)
 800a060:	e042      	b.n	800a0e8 <mbedtls_cipher_set_padding_mode+0xa8>
    }

#if defined(MBEDTLS_USE_PSA_CRYPTO)
    if( ctx->psa_enabled == 1 )
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d106      	bne.n	800a07a <mbedtls_cipher_set_padding_mode+0x3a>
    {
        /* While PSA Crypto knows about CBC padding
         * schemes, we currently don't make them
         * accessible through the cipher layer. */
        if( mode != MBEDTLS_PADDING_NONE )
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d001      	beq.n	800a076 <mbedtls_cipher_set_padding_mode+0x36>
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800a072:	4b21      	ldr	r3, [pc, #132]	; (800a0f8 <mbedtls_cipher_set_padding_mode+0xb8>)
 800a074:	e038      	b.n	800a0e8 <mbedtls_cipher_set_padding_mode+0xa8>

        return( 0 );
 800a076:	2300      	movs	r3, #0
 800a078:	e036      	b.n	800a0e8 <mbedtls_cipher_set_padding_mode+0xa8>
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

    switch( mode )
 800a07a:	78fb      	ldrb	r3, [r7, #3]
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d830      	bhi.n	800a0e2 <mbedtls_cipher_set_padding_mode+0xa2>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <mbedtls_cipher_set_padding_mode+0x48>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800a09d 	.word	0x0800a09d
 800a08c:	0800a0ab 	.word	0x0800a0ab
 800a090:	0800a0b9 	.word	0x0800a0b9
 800a094:	0800a0c7 	.word	0x0800a0c7
 800a098:	0800a0d5 	.word	0x0800a0d5
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a17      	ldr	r2, [pc, #92]	; (800a0fc <mbedtls_cipher_set_padding_mode+0xbc>)
 800a0a0:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_pkcs_padding;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a16      	ldr	r2, [pc, #88]	; (800a100 <mbedtls_cipher_set_padding_mode+0xc0>)
 800a0a6:	611a      	str	r2, [r3, #16]
        break;
 800a0a8:	e01d      	b.n	800a0e6 <mbedtls_cipher_set_padding_mode+0xa6>
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a15      	ldr	r2, [pc, #84]	; (800a104 <mbedtls_cipher_set_padding_mode+0xc4>)
 800a0ae:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a15      	ldr	r2, [pc, #84]	; (800a108 <mbedtls_cipher_set_padding_mode+0xc8>)
 800a0b4:	611a      	str	r2, [r3, #16]
        break;
 800a0b6:	e016      	b.n	800a0e6 <mbedtls_cipher_set_padding_mode+0xa6>
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    case MBEDTLS_PADDING_ZEROS_AND_LEN:
        ctx->add_padding = add_zeros_and_len_padding;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a14      	ldr	r2, [pc, #80]	; (800a10c <mbedtls_cipher_set_padding_mode+0xcc>)
 800a0bc:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a13      	ldr	r2, [pc, #76]	; (800a110 <mbedtls_cipher_set_padding_mode+0xd0>)
 800a0c2:	611a      	str	r2, [r3, #16]
        break;
 800a0c4:	e00f      	b.n	800a0e6 <mbedtls_cipher_set_padding_mode+0xa6>
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    case MBEDTLS_PADDING_ZEROS:
        ctx->add_padding = add_zeros_padding;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a12      	ldr	r2, [pc, #72]	; (800a114 <mbedtls_cipher_set_padding_mode+0xd4>)
 800a0ca:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_zeros_padding;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a12      	ldr	r2, [pc, #72]	; (800a118 <mbedtls_cipher_set_padding_mode+0xd8>)
 800a0d0:	611a      	str	r2, [r3, #16]
        break;
 800a0d2:	e008      	b.n	800a0e6 <mbedtls_cipher_set_padding_mode+0xa6>
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_no_padding;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a0f      	ldr	r2, [pc, #60]	; (800a11c <mbedtls_cipher_set_padding_mode+0xdc>)
 800a0de:	611a      	str	r2, [r3, #16]
        break;
 800a0e0:	e001      	b.n	800a0e6 <mbedtls_cipher_set_padding_mode+0xa6>

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800a0e2:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <mbedtls_cipher_set_padding_mode+0xb8>)
 800a0e4:	e000      	b.n	800a0e8 <mbedtls_cipher_set_padding_mode+0xa8>
    }

    return( 0 );
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	ffff9f00 	.word	0xffff9f00
 800a0f8:	ffff9f80 	.word	0xffff9f80
 800a0fc:	08009be9 	.word	0x08009be9
 800a100:	08009c2d 	.word	0x08009c2d
 800a104:	08009d01 	.word	0x08009d01
 800a108:	08009d51 	.word	0x08009d51
 800a10c:	08009e1d 	.word	0x08009e1d
 800a110:	08009e75 	.word	0x08009e75
 800a114:	08009f45 	.word	0x08009f45
 800a118:	08009f7d 	.word	0x08009f7d
 800a11c:	0800a00d 	.word	0x0800a00d

0800a120 <mbedtls_cipher_aead_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08e      	sub	sp, #56	; 0x38
 800a124:	af08      	add	r7, sp, #32
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_USE_PSA_CRYPTO)
    if( ctx->psa_enabled == 1 )
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a134:	2b01      	cmp	r3, #1
 800a136:	d134      	bne.n	800a1a2 <mbedtls_cipher_aead_encrypt+0x82>
        /* As in the non-PSA case, we don't check that
         * a key has been set. If not, the key slot will
         * still be in its default state of 0, which is
         * guaranteed to be invalid, hence the PSA-call
         * below will gracefully fail. */
        mbedtls_cipher_context_psa * const cipher_psa =
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13c:	617b      	str	r3, [r7, #20]

        psa_status_t status;

        /* PSA Crypto API always writes the authentication tag
         * at the end of the encrypted message. */
        if( output == NULL || tag != output + ilen )
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <mbedtls_cipher_aead_encrypt+0x30>
 800a144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	4413      	add	r3, r2
 800a14a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d001      	beq.n	800a154 <mbedtls_cipher_aead_encrypt+0x34>
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800a150:	4b46      	ldr	r3, [pc, #280]	; (800a26c <mbedtls_cipher_aead_encrypt+0x14c>)
 800a152:	e087      	b.n	800a264 <mbedtls_cipher_aead_encrypt+0x144>

        status = psa_aead_encrypt( cipher_psa->slot,
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	6858      	ldr	r0, [r3, #4]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6819      	ldr	r1, [r3, #0]
 800a15c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	4413      	add	r3, r2
 800a162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a164:	9206      	str	r2, [sp, #24]
 800a166:	9305      	str	r3, [sp, #20]
 800a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16a:	9304      	str	r3, [sp, #16]
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	9303      	str	r3, [sp, #12]
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	9302      	str	r3, [sp, #8]
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	f006 f96e 	bl	8010460 <psa_aead_encrypt>
 800a184:	6138      	str	r0, [r7, #16]
                                   cipher_psa->alg,
                                   iv, iv_len,
                                   ad, ad_len,
                                   input, ilen,
                                   output, ilen + tag_len, olen );
        if( status != PSA_SUCCESS )
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <mbedtls_cipher_aead_encrypt+0x72>
            return( MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED );
 800a18c:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800a190:	e068      	b.n	800a264 <mbedtls_cipher_aead_encrypt+0x144>

        *olen -= tag_len;
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a198:	1ad2      	subs	r2, r2, r3
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	601a      	str	r2, [r3, #0]
        return( 0 );
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e060      	b.n	800a264 <mbedtls_cipher_aead_encrypt+0x144>
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	2b06      	cmp	r3, #6
 800a1aa:	d119      	bne.n	800a1e0 <mbedtls_cipher_aead_encrypt+0xc0>
    {
        *olen = ilen;
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b0:	601a      	str	r2, [r3, #0]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT,
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b8:	9306      	str	r3, [sp, #24]
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1bc:	9305      	str	r3, [sp, #20]
 800a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c0:	9304      	str	r3, [sp, #16]
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	9303      	str	r3, [sp, #12]
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	9302      	str	r3, [sp, #8]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	f003 ff11 	bl	800dffe <mbedtls_gcm_crypt_and_tag>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	e041      	b.n	800a264 <mbedtls_cipher_aead_encrypt+0x144>
                                           ilen, iv, iv_len, ad, ad_len,
                                           input, output, tag_len, tag ) );
    }
#endif /* MBEDTLS_GCM_C */
#if defined(MBEDTLS_CCM_C)
    if( MBEDTLS_MODE_CCM == ctx->cipher_info->mode )
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	2b08      	cmp	r3, #8
 800a1e8:	d117      	bne.n	800a21a <mbedtls_cipher_aead_encrypt+0xfa>
    {
        *olen = ilen;
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ee:	601a      	str	r2, [r3, #0]
        return( mbedtls_ccm_encrypt_and_tag( ctx->cipher_ctx, ilen,
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	9305      	str	r3, [sp, #20]
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a212:	f7fe f85a 	bl	80082ca <mbedtls_ccm_encrypt_and_tag>
 800a216:	4603      	mov	r3, r0
 800a218:	e024      	b.n	800a264 <mbedtls_cipher_aead_encrypt+0x144>
                                     iv, iv_len, ad, ad_len, input, output,
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */
#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b49      	cmp	r3, #73	; 0x49
 800a222:	d11e      	bne.n	800a262 <mbedtls_cipher_aead_encrypt+0x142>
    {
        /* ChachaPoly has fixed length nonce and MAC (tag) */
        if ( ( iv_len != ctx->cipher_info->iv_size ) ||
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d102      	bne.n	800a236 <mbedtls_cipher_aead_encrypt+0x116>
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	2b10      	cmp	r3, #16
 800a234:	d001      	beq.n	800a23a <mbedtls_cipher_aead_encrypt+0x11a>
             ( tag_len != 16U ) )
        {
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800a236:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <mbedtls_cipher_aead_encrypt+0x150>)
 800a238:	e014      	b.n	800a264 <mbedtls_cipher_aead_encrypt+0x144>
        }

        *olen = ilen;
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a23e:	601a      	str	r2, [r3, #0]
        return( mbedtls_chachapoly_encrypt_and_tag( ctx->cipher_ctx,
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a246:	9303      	str	r3, [sp, #12]
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	9302      	str	r3, [sp, #8]
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a25a:	f7fe fff3 	bl	8009244 <mbedtls_chachapoly_encrypt_and_tag>
 800a25e:	4603      	mov	r3, r0
 800a260:	e000      	b.n	800a264 <mbedtls_cipher_aead_encrypt+0x144>
                                ilen, iv, ad, ad_len, input, output, tag ) );
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800a262:	4b02      	ldr	r3, [pc, #8]	; (800a26c <mbedtls_cipher_aead_encrypt+0x14c>)
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	ffff9f80 	.word	0xffff9f80
 800a270:	ffff9f00 	.word	0xffff9f00

0800a274 <mbedtls_cipher_aead_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b092      	sub	sp, #72	; 0x48
 800a278:	af08      	add	r7, sp, #32
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_USE_PSA_CRYPTO)
    if( ctx->psa_enabled == 1 )
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d134      	bne.n	800a2f6 <mbedtls_cipher_aead_decrypt+0x82>
        /* As in the non-PSA case, we don't check that
         * a key has been set. If not, the key slot will
         * still be in its default state of 0, which is
         * guaranteed to be invalid, hence the PSA-call
         * below will gracefully fail. */
        mbedtls_cipher_context_psa * const cipher_psa =
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a290:	61bb      	str	r3, [r7, #24]

        psa_status_t status;

        /* PSA Crypto API always writes the authentication tag
         * at the end of the encrypted message. */
        if( input == NULL || tag != input + ilen )
 800a292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a294:	2b00      	cmp	r3, #0
 800a296:	d005      	beq.n	800a2a4 <mbedtls_cipher_aead_decrypt+0x30>
 800a298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29c:	4413      	add	r3, r2
 800a29e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d001      	beq.n	800a2a8 <mbedtls_cipher_aead_decrypt+0x34>
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800a2a4:	4b54      	ldr	r3, [pc, #336]	; (800a3f8 <mbedtls_cipher_aead_decrypt+0x184>)
 800a2a6:	e0a3      	b.n	800a3f0 <mbedtls_cipher_aead_decrypt+0x17c>

        status = psa_aead_decrypt( cipher_psa->slot,
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	6858      	ldr	r0, [r3, #4]
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b4:	4413      	add	r3, r2
 800a2b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2b8:	9206      	str	r2, [sp, #24]
 800a2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2bc:	9205      	str	r2, [sp, #20]
 800a2be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2c0:	9204      	str	r2, [sp, #16]
 800a2c2:	9303      	str	r3, [sp, #12]
 800a2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c6:	9302      	str	r3, [sp, #8]
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	f006 f9a8 	bl	8010628 <psa_aead_decrypt>
 800a2d8:	6178      	str	r0, [r7, #20]
                                   cipher_psa->alg,
                                   iv, iv_len,
                                   ad, ad_len,
                                   input, ilen + tag_len,
                                   output, ilen, olen );
        if( status == PSA_ERROR_INVALID_SIGNATURE )
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f113 0f95 	cmn.w	r3, #149	; 0x95
 800a2e0:	d101      	bne.n	800a2e6 <mbedtls_cipher_aead_decrypt+0x72>
            return( MBEDTLS_ERR_CIPHER_AUTH_FAILED );
 800a2e2:	4b46      	ldr	r3, [pc, #280]	; (800a3fc <mbedtls_cipher_aead_decrypt+0x188>)
 800a2e4:	e084      	b.n	800a3f0 <mbedtls_cipher_aead_decrypt+0x17c>
        else if( status != PSA_SUCCESS )
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <mbedtls_cipher_aead_decrypt+0x7e>
            return( MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED );
 800a2ec:	f06f 036f 	mvn.w	r3, #111	; 0x6f
 800a2f0:	e07e      	b.n	800a3f0 <mbedtls_cipher_aead_decrypt+0x17c>

        return( 0 );
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	e07c      	b.n	800a3f0 <mbedtls_cipher_aead_decrypt+0x17c>
    }
#endif /* MBEDTLS_USE_PSA_CRYPTO */

#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	785b      	ldrb	r3, [r3, #1]
 800a2fc:	2b06      	cmp	r3, #6
 800a2fe:	d121      	bne.n	800a344 <mbedtls_cipher_aead_decrypt+0xd0>
    {
        int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a300:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a304:	627b      	str	r3, [r7, #36]	; 0x24

        *olen = ilen;
 800a306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a30a:	601a      	str	r2, [r3, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a312:	9305      	str	r3, [sp, #20]
 800a314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a316:	9304      	str	r3, [sp, #16]
 800a318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a31a:	9303      	str	r3, [sp, #12]
 800a31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a31e:	9302      	str	r3, [sp, #8]
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a32e:	f003 fe9c 	bl	800e06a <mbedtls_gcm_auth_decrypt>
 800a332:	6278      	str	r0, [r7, #36]	; 0x24
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	f113 0f12 	cmn.w	r3, #18
 800a33a:	d101      	bne.n	800a340 <mbedtls_cipher_aead_decrypt+0xcc>
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 800a33c:	4b2f      	ldr	r3, [pc, #188]	; (800a3fc <mbedtls_cipher_aead_decrypt+0x188>)
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24

        return( ret );
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	e055      	b.n	800a3f0 <mbedtls_cipher_aead_decrypt+0x17c>
    }
#endif /* MBEDTLS_GCM_C */
#if defined(MBEDTLS_CCM_C)
    if( MBEDTLS_MODE_CCM == ctx->cipher_info->mode )
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	785b      	ldrb	r3, [r3, #1]
 800a34a:	2b08      	cmp	r3, #8
 800a34c:	d121      	bne.n	800a392 <mbedtls_cipher_aead_decrypt+0x11e>
    {
        int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a34e:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a352:	623b      	str	r3, [r7, #32]

        *olen = ilen;
 800a354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a358:	601a      	str	r2, [r3, #0]
        ret = mbedtls_ccm_auth_decrypt( ctx->cipher_ctx, ilen,
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a35e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a360:	9305      	str	r3, [sp, #20]
 800a362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36c:	9302      	str	r3, [sp, #8]
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	9301      	str	r3, [sp, #4]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a37c:	f7fe f81f 	bl	80083be <mbedtls_ccm_auth_decrypt>
 800a380:	6238      	str	r0, [r7, #32]
                                iv, iv_len, ad, ad_len,
                                input, output, tag, tag_len );

        if( ret == MBEDTLS_ERR_CCM_AUTH_FAILED )
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	f113 0f0f 	cmn.w	r3, #15
 800a388:	d101      	bne.n	800a38e <mbedtls_cipher_aead_decrypt+0x11a>
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 800a38a:	4b1c      	ldr	r3, [pc, #112]	; (800a3fc <mbedtls_cipher_aead_decrypt+0x188>)
 800a38c:	623b      	str	r3, [r7, #32]

        return( ret );
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	e02e      	b.n	800a3f0 <mbedtls_cipher_aead_decrypt+0x17c>
    }
#endif /* MBEDTLS_CCM_C */
#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( MBEDTLS_CIPHER_CHACHA20_POLY1305 == ctx->cipher_info->type )
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b49      	cmp	r3, #73	; 0x49
 800a39a:	d128      	bne.n	800a3ee <mbedtls_cipher_aead_decrypt+0x17a>
    {
        int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800a39c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800a3a0:	61fb      	str	r3, [r7, #28]

        /* ChachaPoly has fixed length nonce and MAC (tag) */
        if ( ( iv_len != ctx->cipher_info->iv_size ) ||
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d102      	bne.n	800a3b4 <mbedtls_cipher_aead_decrypt+0x140>
 800a3ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3b0:	2b10      	cmp	r3, #16
 800a3b2:	d001      	beq.n	800a3b8 <mbedtls_cipher_aead_decrypt+0x144>
             ( tag_len != 16U ) )
        {
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800a3b4:	4b12      	ldr	r3, [pc, #72]	; (800a400 <mbedtls_cipher_aead_decrypt+0x18c>)
 800a3b6:	e01b      	b.n	800a3f0 <mbedtls_cipher_aead_decrypt+0x17c>
        }

        *olen = ilen;
 800a3b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3bc:	601a      	str	r2, [r3, #0]
        ret = mbedtls_chachapoly_auth_decrypt( ctx->cipher_ctx, ilen,
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a3c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c8:	9302      	str	r3, [sp, #8]
 800a3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3d8:	f7fe ff50 	bl	800927c <mbedtls_chachapoly_auth_decrypt>
 800a3dc:	61f8      	str	r0, [r7, #28]
                                iv, ad, ad_len, tag, input, output );

        if( ret == MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED )
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	f113 0f56 	cmn.w	r3, #86	; 0x56
 800a3e4:	d101      	bne.n	800a3ea <mbedtls_cipher_aead_decrypt+0x176>
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 800a3e6:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <mbedtls_cipher_aead_decrypt+0x188>)
 800a3e8:	61fb      	str	r3, [r7, #28]

        return( ret );
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	e000      	b.n	800a3f0 <mbedtls_cipher_aead_decrypt+0x17c>
    }
#endif /* MBEDTLS_CHACHAPOLY_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800a3ee:	4b02      	ldr	r3, [pc, #8]	; (800a3f8 <mbedtls_cipher_aead_decrypt+0x184>)
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3728      	adds	r7, #40	; 0x28
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	ffff9f80 	.word	0xffff9f80
 800a3fc:	ffff9d00 	.word	0xffff9d00
 800a400:	ffff9f00 	.word	0xffff9f00

0800a404 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08c      	sub	sp, #48	; 0x30
 800a408:	af08      	add	r7, sp, #32
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

    return( mbedtls_cipher_aead_encrypt( ctx, iv, iv_len, ad, ad_len,
 800a412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a414:	9306      	str	r3, [sp, #24]
 800a416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a418:	9305      	str	r3, [sp, #20]
 800a41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41c:	9304      	str	r3, [sp, #16]
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	9303      	str	r3, [sp, #12]
 800a422:	6a3b      	ldr	r3, [r7, #32]
 800a424:	9302      	str	r3, [sp, #8]
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	68b9      	ldr	r1, [r7, #8]
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f7ff fe73 	bl	800a120 <mbedtls_cipher_aead_encrypt>
 800a43a:	4603      	mov	r3, r0
                                         input, ilen, output, olen,
                                         tag, tag_len ) );
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08c      	sub	sp, #48	; 0x30
 800a448:	af08      	add	r7, sp, #32
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	603b      	str	r3, [r7, #0]
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    CIPHER_VALIDATE_RET( tag_len == 0 || tag != NULL );

    return( mbedtls_cipher_aead_decrypt( ctx, iv, iv_len, ad, ad_len,
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	9306      	str	r3, [sp, #24]
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	9305      	str	r3, [sp, #20]
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	68b9      	ldr	r1, [r7, #8]
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f7ff fefd 	bl	800a274 <mbedtls_cipher_aead_decrypt>
 800a47a:	4603      	mov	r3, r0
                                         input, ilen, output, olen,
                                         tag, tag_len ) );
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <gcm_ctx_alloc>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 800a48a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800a48e:	2001      	movs	r0, #1
 800a490:	f00a f9ec 	bl	801486c <calloc>
 800a494:	4603      	mov	r3, r0
 800a496:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d002      	beq.n	800a4a4 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f002 ff09 	bl	800d2b6 <mbedtls_gcm_init>

    return( ctx );
 800a4a4:	687b      	ldr	r3, [r7, #4]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <gcm_ctx_free>:

static void gcm_ctx_free( void *ctx )
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b082      	sub	sp, #8
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free( ctx );
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f003 fe26 	bl	800e108 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f00a fe15 	bl	80150ec <free>
}
 800a4c2:	bf00      	nop
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <ccm_ctx_alloc>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
/* shared by all CCM ciphers */
static void *ccm_ctx_alloc( void )
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ccm_context ) );
 800a4d0:	2148      	movs	r1, #72	; 0x48
 800a4d2:	2001      	movs	r0, #1
 800a4d4:	f00a f9ca 	bl	801486c <calloc>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <ccm_ctx_alloc+0x1e>
        mbedtls_ccm_init( (mbedtls_ccm_context *) ctx );
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7fd fb77 	bl	8007bd6 <mbedtls_ccm_init>

    return( ctx );
 800a4e8:	687b      	ldr	r3, [r7, #4]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <ccm_ctx_free>:

static void ccm_ctx_free( void *ctx )
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
    mbedtls_ccm_free( ctx );
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7fd fbb7 	bl	8007c6e <mbedtls_ccm_free>
    mbedtls_free( ctx );
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f00a fdf3 	bl	80150ec <free>
}
 800a506:	bf00      	nop
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
 800a51a:	460b      	mov	r3, r1
 800a51c:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800a51e:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7fa f8d4 	bl	80046d4 <mbedtls_aes_crypt_ecb>
 800a52c:	4603      	mov	r3, r0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af02      	add	r7, sp, #8
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
 800a542:	460b      	mov	r3, r1
 800a544:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 800a546:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7fa f8d7 	bl	800470a <mbedtls_aes_crypt_cbc>
 800a55c:	4603      	mov	r3, r0
                          output );
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <aes_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aes_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, size_t *iv_off, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b088      	sub	sp, #32
 800a56a:	af04      	add	r7, sp, #16
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	603b      	str	r3, [r7, #0]
 800a572:	460b      	mov	r3, r1
 800a574:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cfb128( (mbedtls_aes_context *) ctx, operation, length, iv_off, iv,
 800a576:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	9302      	str	r3, [sp, #8]
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f7fa fc44 	bl	8004e18 <mbedtls_aes_crypt_cfb128>
 800a590:	4603      	mov	r3, r0
                             input, output );
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <aes_crypt_ofb_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
static int aes_crypt_ofb_wrap( void *ctx, size_t length, size_t *iv_off,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b086      	sub	sp, #24
 800a59e:	af02      	add	r7, sp, #8
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	60b9      	str	r1, [r7, #8]
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ofb( (mbedtls_aes_context *) ctx, length, iv_off,
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	9301      	str	r3, [sp, #4]
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	68b9      	ldr	r1, [r7, #8]
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f7fa fc9d 	bl	8004ef6 <mbedtls_aes_crypt_ofb>
 800a5bc:	4603      	mov	r3, r0
                                    iv, input, output );
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <aes_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aes_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        unsigned char *nonce_counter, unsigned char *stream_block,
        const unsigned char *input, unsigned char *output )
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b088      	sub	sp, #32
 800a5ca:	af04      	add	r7, sp, #16
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	60b9      	str	r1, [r7, #8]
 800a5d0:	607a      	str	r2, [r7, #4]
 800a5d2:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ctr( (mbedtls_aes_context *) ctx, length, nc_off, nonce_counter,
 800a5d4:	6a3b      	ldr	r3, [r7, #32]
 800a5d6:	9302      	str	r3, [sp, #8]
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	68b9      	ldr	r1, [r7, #8]
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f7fa fcc6 	bl	8004f78 <mbedtls_aes_crypt_ctr>
 800a5ec:	4603      	mov	r3, r0
                          stream_block, input, output );
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
	...

0800a5f8 <aes_crypt_xts_wrap>:
static int aes_crypt_xts_wrap( void *ctx, mbedtls_operation_t operation,
                               size_t length,
                               const unsigned char data_unit[16],
                               const unsigned char *input,
                               unsigned char *output )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af02      	add	r7, sp, #8
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	607a      	str	r2, [r7, #4]
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	460b      	mov	r3, r1
 800a606:	72fb      	strb	r3, [r7, #11]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	613b      	str	r3, [r7, #16]
    int mode;

    switch( operation )
 800a60c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <aes_crypt_xts_wrap+0x26>
 800a614:	2b01      	cmp	r3, #1
 800a616:	d105      	bne.n	800a624 <aes_crypt_xts_wrap+0x2c>
    {
        case MBEDTLS_ENCRYPT:
            mode = MBEDTLS_AES_ENCRYPT;
 800a618:	2301      	movs	r3, #1
 800a61a:	617b      	str	r3, [r7, #20]
            break;
 800a61c:	e004      	b.n	800a628 <aes_crypt_xts_wrap+0x30>
        case MBEDTLS_DECRYPT:
            mode = MBEDTLS_AES_DECRYPT;
 800a61e:	2300      	movs	r3, #0
 800a620:	617b      	str	r3, [r7, #20]
            break;
 800a622:	e001      	b.n	800a628 <aes_crypt_xts_wrap+0x30>
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800a624:	4b08      	ldr	r3, [pc, #32]	; (800a648 <aes_crypt_xts_wrap+0x50>)
 800a626:	e00a      	b.n	800a63e <aes_crypt_xts_wrap+0x46>
    }

    return mbedtls_aes_crypt_xts( xts_ctx, mode, length,
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6979      	ldr	r1, [r7, #20]
 800a636:	6938      	ldr	r0, [r7, #16]
 800a638:	f7fa fae2 	bl	8004c00 <mbedtls_aes_crypt_xts>
 800a63c:	4603      	mov	r3, r0
                                  data_unit, input, output );
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	ffff9f00 	.word	0xffff9f00

0800a64c <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f7f9 f8b5 	bl	80037cc <mbedtls_aes_setkey_dec>
 800a662:	4603      	mov	r3, r0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	68b9      	ldr	r1, [r7, #8]
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f7f8 fecf 	bl	8003420 <mbedtls_aes_setkey_enc>
 800a682:	4603      	mov	r3, r0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <aes_ctx_alloc>:

static void * aes_ctx_alloc( void )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 800a692:	f44f 718c 	mov.w	r1, #280	; 0x118
 800a696:	2001      	movs	r0, #1
 800a698:	f00a f8e8 	bl	801486c <calloc>
 800a69c:	4603      	mov	r3, r0
 800a69e:	607b      	str	r3, [r7, #4]

    if( aes == NULL )
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <aes_ctx_alloc+0x1e>
        return( NULL );
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e003      	b.n	800a6b2 <aes_ctx_alloc+0x26>

    mbedtls_aes_init( aes );
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7f8 fe70 	bl	8003390 <mbedtls_aes_init>

    return( aes );
 800a6b0:	687b      	ldr	r3, [r7, #4]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <aes_ctx_free>:

static void aes_ctx_free( void *ctx )
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7f8 fe72 	bl	80033ac <mbedtls_aes_free>
    mbedtls_free( ctx );
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f00a fd0f 	bl	80150ec <free>
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <xts_aes_setkey_enc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
static int xts_aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b086      	sub	sp, #24
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_enc( xts_ctx, key, key_bitlen ) );
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	6978      	ldr	r0, [r7, #20]
 800a6ec:	f7f9 f9b3 	bl	8003a56 <mbedtls_aes_xts_setkey_enc>
 800a6f0:	4603      	mov	r3, r0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <xts_aes_setkey_dec_wrap>:

static int xts_aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b086      	sub	sp, #24
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_dec( xts_ctx, key, key_bitlen ) );
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	6978      	ldr	r0, [r7, #20]
 800a710:	f7f9 f9d8 	bl	8003ac4 <mbedtls_aes_xts_setkey_dec>
 800a714:	4603      	mov	r3, r0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <xts_aes_ctx_alloc>:

static void *xts_aes_ctx_alloc( void )
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc( 1, sizeof( *xts_ctx ) );
 800a724:	f44f 710c 	mov.w	r1, #560	; 0x230
 800a728:	2001      	movs	r0, #1
 800a72a:	f00a f89f 	bl	801486c <calloc>
 800a72e:	4603      	mov	r3, r0
 800a730:	607b      	str	r3, [r7, #4]

    if( xts_ctx != NULL )
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d002      	beq.n	800a73e <xts_aes_ctx_alloc+0x20>
        mbedtls_aes_xts_init( xts_ctx );
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7f8 fe48 	bl	80033ce <mbedtls_aes_xts_init>

    return( xts_ctx );
 800a73e:	687b      	ldr	r3, [r7, #4]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <xts_aes_ctx_free>:

static void xts_aes_ctx_free( void *ctx )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60fb      	str	r3, [r7, #12]

    if( xts_ctx == NULL )
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d006      	beq.n	800a768 <xts_aes_ctx_free+0x20>
        return;

    mbedtls_aes_xts_free( xts_ctx );
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f7f8 fe49 	bl	80033f2 <mbedtls_aes_xts_free>
    mbedtls_free( xts_ctx );
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f00a fcc3 	bl	80150ec <free>
 800a766:	e000      	b.n	800a76a <xts_aes_ctx_free+0x22>
        return;
 800a768:	bf00      	nop
}
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	2102      	movs	r1, #2
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f002 feda 	bl	800d53c <mbedtls_gcm_setkey>
 800a788:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <ccm_aes_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	60f8      	str	r0, [r7, #12]
 800a79a:	60b9      	str	r1, [r7, #8]
 800a79c:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	2102      	movs	r1, #2
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7fd fa23 	bl	8007bf0 <mbedtls_ccm_setkey>
 800a7aa:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <camellia_crypt_ecb_wrap>:

#if defined(MBEDTLS_CAMELLIA_C)

static int camellia_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	607a      	str	r2, [r7, #4]
 800a7be:	603b      	str	r3, [r7, #0]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,
 800a7c4:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f7fc ff54 	bl	800767a <mbedtls_camellia_crypt_ecb>
 800a7d2:	4603      	mov	r3, r0
                               output );
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <camellia_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int camellia_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	607a      	str	r2, [r7, #4]
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cbc( (mbedtls_camellia_context *) ctx, operation, length, iv,
 800a7ec:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f7fd f8a6 	bl	800794e <mbedtls_camellia_crypt_cbc>
 800a802:	4603      	mov	r3, r0
                               input, output );
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <camellia_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int camellia_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, size_t *iv_off, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af04      	add	r7, sp, #16
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	607a      	str	r2, [r7, #4]
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	460b      	mov	r3, r1
 800a81a:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cfb128( (mbedtls_camellia_context *) ctx, operation, length,
 800a81c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	9302      	str	r3, [sp, #8]
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7fd f90d 	bl	8007a50 <mbedtls_camellia_crypt_cfb128>
 800a836:	4603      	mov	r3, r0
                                  iv_off, iv, input, output );
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <camellia_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int camellia_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        unsigned char *nonce_counter, unsigned char *stream_block,
        const unsigned char *input, unsigned char *output )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af04      	add	r7, sp, #16
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]
    return mbedtls_camellia_crypt_ctr( (mbedtls_camellia_context *) ctx, length, nc_off,
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	9302      	str	r3, [sp, #8]
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7fd f964 	bl	8007b2e <mbedtls_camellia_crypt_ctr>
 800a866:	4603      	mov	r3, r0
                               nonce_counter, stream_block, input, output );
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <camellia_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int camellia_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f7fc fe13 	bl	80074ac <mbedtls_camellia_setkey_dec>
 800a886:	4603      	mov	r3, r0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <camellia_setkey_enc_wrap>:

static int camellia_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	68b9      	ldr	r1, [r7, #8]
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f7fc f815 	bl	80068d0 <mbedtls_camellia_setkey_enc>
 800a8a6:	4603      	mov	r3, r0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <camellia_ctx_alloc>:

static void * camellia_ctx_alloc( void )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
    mbedtls_camellia_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );
 800a8b6:	f44f 718a 	mov.w	r1, #276	; 0x114
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	f009 ffd6 	bl	801486c <calloc>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <camellia_ctx_alloc+0x1e>
        return( NULL );
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e003      	b.n	800a8d6 <camellia_ctx_alloc+0x26>

    mbedtls_camellia_init( ctx );
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f7fb ffde 	bl	8006890 <mbedtls_camellia_init>

    return( ctx );
 800a8d4:	687b      	ldr	r3, [r7, #4]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <camellia_ctx_free>:

static void camellia_ctx_free( void *ctx )
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7fb ffe0 	bl	80068ac <mbedtls_camellia_free>
    mbedtls_free( ctx );
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f00a fbfd 	bl	80150ec <free>
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <gcm_camellia_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	2105      	movs	r1, #5
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f002 fe15 	bl	800d53c <mbedtls_gcm_setkey>
 800a912:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <ccm_camellia_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	2105      	movs	r1, #5
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f7fd f95e 	bl	8007bf0 <mbedtls_ccm_setkey>
 800a934:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <aria_crypt_ecb_wrap>:

#if defined(MBEDTLS_ARIA_C)

static int aria_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	603b      	str	r3, [r7, #0]
 800a94a:	460b      	mov	r3, r1
 800a94c:	72fb      	strb	r3, [r7, #11]
    (void) operation;
    return mbedtls_aria_crypt_ecb( (mbedtls_aria_context *) ctx, input,
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7fb f8f0 	bl	8005b38 <mbedtls_aria_crypt_ecb>
 800a958:	4603      	mov	r3, r0
                               output );
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <aria_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aria_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b086      	sub	sp, #24
 800a966:	af02      	add	r7, sp, #8
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	607a      	str	r2, [r7, #4]
 800a96c:	603b      	str	r3, [r7, #0]
 800a96e:	460b      	mov	r3, r1
 800a970:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cbc( (mbedtls_aria_context *) ctx, operation, length, iv,
 800a972:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	9301      	str	r3, [sp, #4]
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7fb fa6b 	bl	8005e5e <mbedtls_aria_crypt_cbc>
 800a988:	4603      	mov	r3, r0
                               input, output );
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <aria_crypt_cfb128_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int aria_crypt_cfb128_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, size_t *iv_off, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b088      	sub	sp, #32
 800a996:	af04      	add	r7, sp, #16
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	603b      	str	r3, [r7, #0]
 800a99e:	460b      	mov	r3, r1
 800a9a0:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aria_crypt_cfb128( (mbedtls_aria_context *) ctx, operation, length,
 800a9a2:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	9302      	str	r3, [sp, #8]
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	9301      	str	r3, [sp, #4]
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f7fb fad0 	bl	8005f5c <mbedtls_aria_crypt_cfb128>
 800a9bc:	4603      	mov	r3, r0
                                  iv_off, iv, input, output );
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <aria_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int aria_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        unsigned char *nonce_counter, unsigned char *stream_block,
        const unsigned char *input, unsigned char *output )
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b088      	sub	sp, #32
 800a9ca:	af04      	add	r7, sp, #16
 800a9cc:	60f8      	str	r0, [r7, #12]
 800a9ce:	60b9      	str	r1, [r7, #8]
 800a9d0:	607a      	str	r2, [r7, #4]
 800a9d2:	603b      	str	r3, [r7, #0]
    return mbedtls_aria_crypt_ctr( (mbedtls_aria_context *) ctx, length, nc_off,
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	9302      	str	r3, [sp, #8]
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	9301      	str	r3, [sp, #4]
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	68b9      	ldr	r1, [r7, #8]
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f7fb fb21 	bl	800602e <mbedtls_aria_crypt_ctr>
 800a9ec:	4603      	mov	r3, r0
                               nonce_counter, stream_block, input, output );
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <aria_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aria_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	60f8      	str	r0, [r7, #12]
 800a9fe:	60b9      	str	r1, [r7, #8]
 800aa00:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_dec( (mbedtls_aria_context *) ctx, key, key_bitlen );
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	68b9      	ldr	r1, [r7, #8]
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f7fb f81e 	bl	8005a48 <mbedtls_aria_setkey_dec>
 800aa0c:	4603      	mov	r3, r0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <aria_setkey_enc_wrap>:

static int aria_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b084      	sub	sp, #16
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	60f8      	str	r0, [r7, #12]
 800aa1e:	60b9      	str	r1, [r7, #8]
 800aa20:	607a      	str	r2, [r7, #4]
    return mbedtls_aria_setkey_enc( (mbedtls_aria_context *) ctx, key, key_bitlen );
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	68b9      	ldr	r1, [r7, #8]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7fa fe6a 	bl	8005700 <mbedtls_aria_setkey_enc>
 800aa2c:	4603      	mov	r3, r0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <aria_ctx_alloc>:

static void * aria_ctx_alloc( void )
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
    mbedtls_aria_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_aria_context ) );
 800aa3c:	f44f 718a 	mov.w	r1, #276	; 0x114
 800aa40:	2001      	movs	r0, #1
 800aa42:	f009 ff13 	bl	801486c <calloc>
 800aa46:	4603      	mov	r3, r0
 800aa48:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <aria_ctx_alloc+0x1e>
        return( NULL );
 800aa50:	2300      	movs	r3, #0
 800aa52:	e003      	b.n	800aa5c <aria_ctx_alloc+0x26>

    mbedtls_aria_init( ctx );
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f7fb f9e3 	bl	8005e20 <mbedtls_aria_init>

    return( ctx );
 800aa5a:	687b      	ldr	r3, [r7, #4]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <aria_ctx_free>:

static void aria_ctx_free( void *ctx )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
    mbedtls_aria_free( (mbedtls_aria_context *) ctx );
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7fb f9e5 	bl	8005e3c <mbedtls_aria_free>
    mbedtls_free( ctx );
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f00a fb3a 	bl	80150ec <free>
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <gcm_aria_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aria_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	2108      	movs	r1, #8
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f002 fd52 	bl	800d53c <mbedtls_gcm_setkey>
 800aa98:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <ccm_aria_setkey_wrap>:
#endif /* MBEDTLS_GCM_C */

#if defined(MBEDTLS_CCM_C)
static int ccm_aria_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	60b9      	str	r1, [r7, #8]
 800aaac:	607a      	str	r2, [r7, #4]
    return mbedtls_ccm_setkey( (mbedtls_ccm_context *) ctx, MBEDTLS_CIPHER_ID_ARIA,
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	68ba      	ldr	r2, [r7, #8]
 800aab2:	2108      	movs	r1, #8
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f7fd f89b 	bl	8007bf0 <mbedtls_ccm_setkey>
 800aaba:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <des_crypt_ecb_wrap>:

#if defined(MBEDTLS_DES_C)

static int des_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	607a      	str	r2, [r7, #4]
 800aace:	603b      	str	r3, [r7, #0]
 800aad0:	460b      	mov	r3, r1
 800aad2:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des_crypt_ecb( (mbedtls_des_context *) ctx, input, output );
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f001 fb01 	bl	800c0e0 <mbedtls_des_crypt_ecb>
 800aade:	4603      	mov	r3, r0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <des3_crypt_ecb_wrap>:

static int des3_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	607a      	str	r2, [r7, #4]
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	72fb      	strb	r3, [r7, #11]
    ((void) operation);
    return mbedtls_des3_crypt_ecb( (mbedtls_des3_context *) ctx, input, output );
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f001 fd35 	bl	800c56c <mbedtls_des3_crypt_ecb>
 800ab02:	4603      	mov	r3, r0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <des_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af02      	add	r7, sp, #8
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	603b      	str	r3, [r7, #0]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des_crypt_cbc( (mbedtls_des_context *) ctx, operation, length, iv, input,
 800ab1c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f001 fca1 	bl	800c474 <mbedtls_des_crypt_cbc>
 800ab32:	4603      	mov	r3, r0
                          output );
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <des3_crypt_cbc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int des3_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af02      	add	r7, sp, #8
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	607a      	str	r2, [r7, #4]
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	72fb      	strb	r3, [r7, #11]
    return mbedtls_des3_crypt_cbc( (mbedtls_des3_context *) ctx, operation, length, iv, input,
 800ab4c:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	69bb      	ldr	r3, [r7, #24]
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f002 f83b 	bl	800cbd8 <mbedtls_des3_crypt_cbc>
 800ab62:	4603      	mov	r3, r0
                           output );
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <des_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CBC */

static int des_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_dec( (mbedtls_des_context *) ctx, key );
 800ab78:	68b9      	ldr	r1, [r7, #8]
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f001 f8ff 	bl	800bd7e <mbedtls_des_setkey_dec>
 800ab80:	4603      	mov	r3, r0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <des_setkey_enc_wrap>:

static int des_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des_setkey_enc( (mbedtls_des_context *) ctx, key );
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f001 f8e1 	bl	800bd60 <mbedtls_des_setkey_enc>
 800ab9e:	4603      	mov	r3, r0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <des3_set2key_dec_wrap>:

static int des3_set2key_dec_wrap( void *ctx, const unsigned char *key,
                                  unsigned int key_bitlen )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_dec( (mbedtls_des3_context *) ctx, key );
 800abb4:	68b9      	ldr	r1, [r7, #8]
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f001 f9c8 	bl	800bf4c <mbedtls_des3_set2key_dec>
 800abbc:	4603      	mov	r3, r0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <des3_set2key_enc_wrap>:

static int des3_set2key_enc_wrap( void *ctx, const unsigned char *key,
                                  unsigned int key_bitlen )
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set2key_enc( (mbedtls_des3_context *) ctx, key );
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f001 f99d 	bl	800bf14 <mbedtls_des3_set2key_enc>
 800abda:	4603      	mov	r3, r0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <des3_set3key_dec_wrap>:

static int des3_set3key_dec_wrap( void *ctx, const unsigned char *key,
                                  unsigned int key_bitlen )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_dec( (mbedtls_des3_context *) ctx, key );
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f001 fa58 	bl	800c0a8 <mbedtls_des3_set3key_dec>
 800abf8:	4603      	mov	r3, r0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <des3_set3key_enc_wrap>:

static int des3_set3key_enc_wrap( void *ctx, const unsigned char *key,
                                  unsigned int key_bitlen )
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
    ((void) key_bitlen);

    return mbedtls_des3_set3key_enc( (mbedtls_des3_context *) ctx, key );
 800ac0e:	68b9      	ldr	r1, [r7, #8]
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f001 fa2d 	bl	800c070 <mbedtls_des3_set3key_enc>
 800ac16:	4603      	mov	r3, r0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <des_ctx_alloc>:

static void * des_ctx_alloc( void )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
    mbedtls_des_context *des = mbedtls_calloc( 1, sizeof( mbedtls_des_context ) );
 800ac26:	2180      	movs	r1, #128	; 0x80
 800ac28:	2001      	movs	r0, #1
 800ac2a:	f009 fe1f 	bl	801486c <calloc>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	607b      	str	r3, [r7, #4]

    if( des == NULL )
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <des_ctx_alloc+0x1c>
        return( NULL );
 800ac38:	2300      	movs	r3, #0
 800ac3a:	e003      	b.n	800ac44 <des_ctx_alloc+0x24>

    mbedtls_des_init( des );
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fe59 	bl	800b8f4 <mbedtls_des_init>

    return( des );
 800ac42:	687b      	ldr	r3, [r7, #4]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <des_ctx_free>:

static void des_ctx_free( void *ctx )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
    mbedtls_des_free( (mbedtls_des_context *) ctx );
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fe5a 	bl	800b90e <mbedtls_des_free>
    mbedtls_free( ctx );
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f00a fa46 	bl	80150ec <free>
}
 800ac60:	bf00      	nop
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <des3_ctx_alloc>:

static void * des3_ctx_alloc( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
    mbedtls_des3_context *des3;
    des3 = mbedtls_calloc( 1, sizeof( mbedtls_des3_context ) );
 800ac6e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800ac72:	2001      	movs	r0, #1
 800ac74:	f009 fdfa 	bl	801486c <calloc>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	607b      	str	r3, [r7, #4]

    if( des3 == NULL )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <des3_ctx_alloc+0x1e>
        return( NULL );
 800ac82:	2300      	movs	r3, #0
 800ac84:	e003      	b.n	800ac8e <des3_ctx_alloc+0x26>

    mbedtls_des3_init( des3 );
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fe51 	bl	800b92e <mbedtls_des3_init>

    return( des3 );
 800ac8c:	687b      	ldr	r3, [r7, #4]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <des3_ctx_free>:

static void des3_ctx_free( void *ctx )
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
    mbedtls_des3_free( (mbedtls_des3_context *) ctx );
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 fe53 	bl	800b94a <mbedtls_des3_free>
    mbedtls_free( ctx );
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f00a fa21 	bl	80150ec <free>
}
 800acaa:	bf00      	nop
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <blowfish_crypt_ecb_wrap>:

#if defined(MBEDTLS_BLOWFISH_C)

static int blowfish_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	60f8      	str	r0, [r7, #12]
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	603b      	str	r3, [r7, #0]
 800acbe:	460b      	mov	r3, r1
 800acc0:	72fb      	strb	r3, [r7, #11]
    return mbedtls_blowfish_crypt_ecb( (mbedtls_blowfish_context *) ctx, operation, input,
 800acc2:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f7fb fbb4 	bl	8006438 <mbedtls_blowfish_crypt_ecb>
 800acd0:	4603      	mov	r3, r0
                               output );
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <blowfish_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int blowfish_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, unsigned char *iv, const unsigned char *input,
        unsigned char *output )
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b086      	sub	sp, #24
 800acde:	af02      	add	r7, sp, #8
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	460b      	mov	r3, r1
 800ace8:	72fb      	strb	r3, [r7, #11]
    return mbedtls_blowfish_crypt_cbc( (mbedtls_blowfish_context *) ctx, operation, length, iv,
 800acea:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7fb fc0e 	bl	800651c <mbedtls_blowfish_crypt_cbc>
 800ad00:	4603      	mov	r3, r0
                               input, output );
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <blowfish_crypt_cfb64_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CFB)
static int blowfish_crypt_cfb64_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, size_t *iv_off, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b088      	sub	sp, #32
 800ad0e:	af04      	add	r7, sp, #16
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	603b      	str	r3, [r7, #0]
 800ad16:	460b      	mov	r3, r1
 800ad18:	72fb      	strb	r3, [r7, #11]
    return mbedtls_blowfish_crypt_cfb64( (mbedtls_blowfish_context *) ctx, operation, length,
 800ad1a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	9302      	str	r3, [sp, #8]
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f7fb fc71 	bl	8006616 <mbedtls_blowfish_crypt_cfb64>
 800ad34:	4603      	mov	r3, r0
                                 iv_off, iv, input, output );
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <blowfish_crypt_ctr_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CTR)
static int blowfish_crypt_ctr_wrap( void *ctx, size_t length, size_t *nc_off,
        unsigned char *nonce_counter, unsigned char *stream_block,
        const unsigned char *input, unsigned char *output )
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b088      	sub	sp, #32
 800ad42:	af04      	add	r7, sp, #16
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	607a      	str	r2, [r7, #4]
 800ad4a:	603b      	str	r3, [r7, #0]
    return mbedtls_blowfish_crypt_ctr( (mbedtls_blowfish_context *) ctx, length, nc_off,
 800ad4c:	6a3b      	ldr	r3, [r7, #32]
 800ad4e:	9302      	str	r3, [sp, #8]
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	9301      	str	r3, [sp, #4]
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	68b9      	ldr	r1, [r7, #8]
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f7fb fcc8 	bl	80066f4 <mbedtls_blowfish_crypt_ctr>
 800ad64:	4603      	mov	r3, r0
                               nonce_counter, stream_block, input, output );
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <blowfish_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int blowfish_setkey_wrap( void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen )
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
    return mbedtls_blowfish_setkey( (mbedtls_blowfish_context *) ctx, key, key_bitlen );
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	68b9      	ldr	r1, [r7, #8]
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f7fb fa9a 	bl	80062b8 <mbedtls_blowfish_setkey>
 800ad84:	4603      	mov	r3, r0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <blowfish_ctx_alloc>:

static void * blowfish_ctx_alloc( void )
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
    mbedtls_blowfish_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_blowfish_context ) );
 800ad94:	f241 0148 	movw	r1, #4168	; 0x1048
 800ad98:	2001      	movs	r0, #1
 800ad9a:	f009 fd67 	bl	801486c <calloc>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <blowfish_ctx_alloc+0x1e>
        return( NULL );
 800ada8:	2300      	movs	r3, #0
 800adaa:	e003      	b.n	800adb4 <blowfish_ctx_alloc+0x26>

    mbedtls_blowfish_init( ctx );
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7fb fa63 	bl	8006278 <mbedtls_blowfish_init>

    return( ctx );
 800adb2:	687b      	ldr	r3, [r7, #4]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <blowfish_ctx_free>:

static void blowfish_ctx_free( void *ctx )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
    mbedtls_blowfish_free( (mbedtls_blowfish_context *) ctx );
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7fb fa65 	bl	8006294 <mbedtls_blowfish_free>
    mbedtls_free( ctx );
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f00a f98e 	bl	80150ec <free>
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <arc4_crypt_stream_wrap>:

#if defined(MBEDTLS_ARC4_C)
static int arc4_crypt_stream_wrap( void *ctx, size_t length,
                                   const unsigned char *input,
                                   unsigned char *output )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
 800ade4:	603b      	str	r3, [r7, #0]
    return( mbedtls_arc4_crypt( (mbedtls_arc4_context *) ctx, length, input, output ) );
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	68b9      	ldr	r1, [r7, #8]
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f7fa f98d 	bl	800510c <mbedtls_arc4_crypt>
 800adf2:	4603      	mov	r3, r0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <arc4_setkey_wrap>:

static int arc4_setkey_wrap( void *ctx, const unsigned char *key,
                             unsigned int key_bitlen )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
    /* we get key_bitlen in bits, arc4 expects it in bytes */
    if( key_bitlen % 8 != 0 )
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f003 0307 	and.w	r3, r3, #7
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <arc4_setkey_wrap+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ae12:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <arc4_setkey_wrap+0x34>)
 800ae14:	e007      	b.n	800ae26 <arc4_setkey_wrap+0x2a>

    mbedtls_arc4_setup( (mbedtls_arc4_context *) ctx, key, key_bitlen / 8 );
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	08db      	lsrs	r3, r3, #3
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	68b9      	ldr	r1, [r7, #8]
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f7fa f91d 	bl	800505e <mbedtls_arc4_setup>
    return( 0 );
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	ffff9f00 	.word	0xffff9f00

0800ae34 <arc4_ctx_alloc>:

static void * arc4_ctx_alloc( void )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
    mbedtls_arc4_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_arc4_context ) );
 800ae3a:	f44f 7184 	mov.w	r1, #264	; 0x108
 800ae3e:	2001      	movs	r0, #1
 800ae40:	f009 fd14 	bl	801486c <calloc>
 800ae44:	4603      	mov	r3, r0
 800ae46:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <arc4_ctx_alloc+0x1e>
        return( NULL );
 800ae4e:	2300      	movs	r3, #0
 800ae50:	e003      	b.n	800ae5a <arc4_ctx_alloc+0x26>

    mbedtls_arc4_init( ctx );
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7fa f8e4 	bl	8005020 <mbedtls_arc4_init>

    return( ctx );
 800ae58:	687b      	ldr	r3, [r7, #4]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3708      	adds	r7, #8
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}

0800ae62 <arc4_ctx_free>:

static void arc4_ctx_free( void *ctx )
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b082      	sub	sp, #8
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
    mbedtls_arc4_free( (mbedtls_arc4_context *) ctx );
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7fa f8e6 	bl	800503c <mbedtls_arc4_free>
    mbedtls_free( ctx );
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f00a f93b 	bl	80150ec <free>
}
 800ae76:	bf00      	nop
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
	...

0800ae80 <chacha20_setkey_wrap>:

#if defined(MBEDTLS_CHACHA20_C)

static int chacha20_setkey_wrap( void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae92:	d001      	beq.n	800ae98 <chacha20_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ae94:	4b07      	ldr	r3, [pc, #28]	; (800aeb4 <chacha20_setkey_wrap+0x34>)
 800ae96:	e009      	b.n	800aeac <chacha20_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chacha20_setkey( (mbedtls_chacha20_context*)ctx, key ) )
 800ae98:	68b9      	ldr	r1, [r7, #8]
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f7fd fca4 	bl	80087e8 <mbedtls_chacha20_setkey>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <chacha20_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800aea6:	4b03      	ldr	r3, [pc, #12]	; (800aeb4 <chacha20_setkey_wrap+0x34>)
 800aea8:	e000      	b.n	800aeac <chacha20_setkey_wrap+0x2c>

    return( 0 );
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	ffff9f00 	.word	0xffff9f00

0800aeb8 <chacha20_stream_wrap>:

static int chacha20_stream_wrap( void *ctx,  size_t length,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
 800aec4:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800aec6:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800aeca:	617b      	str	r3, [r7, #20]

    ret = mbedtls_chacha20_update( ctx, length, input, output );
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	68b9      	ldr	r1, [r7, #8]
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f7fd fda6 	bl	8008a24 <mbedtls_chacha20_update>
 800aed8:	6178      	str	r0, [r7, #20]
    if( ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA )
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800aee0:	d101      	bne.n	800aee6 <chacha20_stream_wrap+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800aee2:	4b03      	ldr	r3, [pc, #12]	; (800aef0 <chacha20_stream_wrap+0x38>)
 800aee4:	e000      	b.n	800aee8 <chacha20_stream_wrap+0x30>

    return( ret );
 800aee6:	697b      	ldr	r3, [r7, #20]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	ffff9f00 	.word	0xffff9f00

0800aef4 <chacha20_ctx_alloc>:

static void * chacha20_ctx_alloc( void )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
    mbedtls_chacha20_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chacha20_context ) );
 800aefa:	2184      	movs	r1, #132	; 0x84
 800aefc:	2001      	movs	r0, #1
 800aefe:	f009 fcb5 	bl	801486c <calloc>
 800af02:	4603      	mov	r3, r0
 800af04:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <chacha20_ctx_alloc+0x1c>
        return( NULL );
 800af0c:	2300      	movs	r3, #0
 800af0e:	e003      	b.n	800af18 <chacha20_ctx_alloc+0x24>

    mbedtls_chacha20_init( ctx );
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7fd fc42 	bl	800879a <mbedtls_chacha20_init>

    return( ctx );
 800af16:	687b      	ldr	r3, [r7, #4]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <chacha20_ctx_free>:

static void chacha20_ctx_free( void *ctx )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_free( (mbedtls_chacha20_context *) ctx );
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7fd fc4d 	bl	80087c8 <mbedtls_chacha20_free>
    mbedtls_free( ctx );
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f00a f8dc 	bl	80150ec <free>
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <chachapoly_setkey_wrap>:
#if defined(MBEDTLS_CHACHAPOLY_C)

static int chachapoly_setkey_wrap( void *ctx,
                                   const unsigned char *key,
                                   unsigned int key_bitlen )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af4e:	d001      	beq.n	800af54 <chachapoly_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800af50:	4b07      	ldr	r3, [pc, #28]	; (800af70 <chachapoly_setkey_wrap+0x34>)
 800af52:	e009      	b.n	800af68 <chachapoly_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chachapoly_setkey( (mbedtls_chachapoly_context*)ctx, key ) )
 800af54:	68b9      	ldr	r1, [r7, #8]
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f7fd ff36 	bl	8008dc8 <mbedtls_chachapoly_setkey>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <chachapoly_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800af62:	4b03      	ldr	r3, [pc, #12]	; (800af70 <chachapoly_setkey_wrap+0x34>)
 800af64:	e000      	b.n	800af68 <chachapoly_setkey_wrap+0x2c>

    return( 0 );
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	ffff9f00 	.word	0xffff9f00

0800af74 <chachapoly_ctx_alloc>:

static void * chachapoly_ctx_alloc( void )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
    mbedtls_chachapoly_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chachapoly_context ) );
 800af7a:	21e8      	movs	r1, #232	; 0xe8
 800af7c:	2001      	movs	r0, #1
 800af7e:	f009 fc75 	bl	801486c <calloc>
 800af82:	4603      	mov	r3, r0
 800af84:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <chachapoly_ctx_alloc+0x1c>
        return( NULL );
 800af8c:	2300      	movs	r3, #0
 800af8e:	e003      	b.n	800af98 <chachapoly_ctx_alloc+0x24>

    mbedtls_chachapoly_init( ctx );
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7fd fec7 	bl	8008d24 <mbedtls_chachapoly_init>

    return( ctx );
 800af96:	687b      	ldr	r3, [r7, #4]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <chachapoly_ctx_free>:

static void chachapoly_ctx_free( void *ctx )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
    mbedtls_chachapoly_free( (mbedtls_chachapoly_context *) ctx );
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7fd fee2 	bl	8008d72 <mbedtls_chachapoly_free>
    mbedtls_free( ctx );
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f00a f89c 	bl	80150ec <free>
}
 800afb4:	bf00      	nop
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <kw_ctx_alloc>:
};
#endif /* defined(MBEDTLS_CIPHER_NULL_CIPHER) */

#if defined(MBEDTLS_NIST_KW_C)
static void *kw_ctx_alloc( void )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_nist_kw_context ) );
 800afc2:	2148      	movs	r1, #72	; 0x48
 800afc4:	2001      	movs	r0, #1
 800afc6:	f009 fc51 	bl	801486c <calloc>
 800afca:	4603      	mov	r3, r0
 800afcc:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <kw_ctx_alloc+0x1e>
        mbedtls_nist_kw_init( (mbedtls_nist_kw_context *) ctx );
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f003 f8ac 	bl	800e132 <mbedtls_nist_kw_init>

    return( ctx );
 800afda:	687b      	ldr	r3, [r7, #4]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <kw_ctx_free>:

static void kw_ctx_free( void *ctx )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
    mbedtls_nist_kw_free( ctx );
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f003 f8f9 	bl	800e1e4 <mbedtls_nist_kw_free>
    mbedtls_free( ctx );
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f00a f87a 	bl	80150ec <free>
}
 800aff8:	bf00      	nop
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <kw_aes_setkey_wrap>:

static int kw_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af02      	add	r7, sp, #8
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
    return mbedtls_nist_kw_setkey( (mbedtls_nist_kw_context *) ctx,
 800b00c:	2301      	movs	r3, #1
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	2102      	movs	r1, #2
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f003 f898 	bl	800e14c <mbedtls_nist_kw_setkey>
 800b01c:	4603      	mov	r3, r0
                                   MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 1 );
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <kw_aes_setkey_unwrap>:

static int kw_aes_setkey_unwrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b086      	sub	sp, #24
 800b02a:	af02      	add	r7, sp, #8
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	607a      	str	r2, [r7, #4]
   return mbedtls_nist_kw_setkey( (mbedtls_nist_kw_context *) ctx,
 800b032:	2300      	movs	r3, #0
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	2102      	movs	r1, #2
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f003 f885 	bl	800e14c <mbedtls_nist_kw_setkey>
 800b042:	4603      	mov	r3, r0
                                  MBEDTLS_CIPHER_ID_AES, key, key_bitlen, 0 );
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800b054:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800b058:	2100      	movs	r1, #0
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f00a f881 	bl	8015162 <memset>
    /* Indicate that the entropy nonce length is not set explicitly.
     * See mbedtls_ctr_drbg_set_nonce_len(). */
    ctx->reseed_counter = -1;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b066:	611a      	str	r2, [r3, #16]

    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b06e:	61da      	str	r2, [r3, #28]
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <mbedtls_ctr_drbg_free>:
/*
 *  This function resets CTR_DRBG context to the state immediately
 *  after initial call of mbedtls_ctr_drbg_init().
 */
void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d012      	beq.n	800b0ac <mbedtls_ctr_drbg_free+0x34>
#if defined(MBEDTLS_THREADING_C)
    /* The mutex is initialized iff f_entropy is set. */
    if( ctx->f_entropy != NULL )
        mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_aes_free( &ctx->aes_ctx );
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3320      	adds	r3, #32
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f8 f98e 	bl	80033ac <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 800b090:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f003 f92b 	bl	800e2f0 <mbedtls_platform_zeroize>
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f242 7210 	movw	r2, #10000	; 0x2710
 800b0a0:	61da      	str	r2, [r3, #28]
    ctx->reseed_counter = -1;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0a8:	611a      	str	r2, [r3, #16]
 800b0aa:	e000      	b.n	800b0ae <mbedtls_ctr_drbg_free+0x36>
        return;
 800b0ac:	bf00      	nop
}
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 800b0b4:	b5b0      	push	{r4, r5, r7, lr}
 800b0b6:	f5ad 7d52 	sub.w	sp, sp, #840	; 0x348
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	f107 030c 	add.w	r3, r7, #12
 800b0c0:	6018      	str	r0, [r3, #0]
 800b0c2:	f107 0308 	add.w	r3, r7, #8
 800b0c6:	6019      	str	r1, [r3, #0]
 800b0c8:	1d3b      	adds	r3, r7, #4
 800b0ca:	601a      	str	r2, [r3, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    unsigned char *p, *iv;
    mbedtls_aes_context aes_ctx;
    int ret = 0;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 800b0d2:	1d3b      	adds	r3, r7, #4
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b0da:	d902      	bls.n	800b0e2 <block_cipher_df+0x2e>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800b0dc:	f06f 0337 	mvn.w	r3, #55	; 0x37
 800b0e0:	e16a      	b.n	800b3b8 <block_cipher_df+0x304>

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT +
 800b0e2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b0e6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f00a f838 	bl	8015162 <memset>
            MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
    mbedtls_aes_init( &aes_ctx );
 800b0f2:	f107 0314 	add.w	r3, r7, #20
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7f8 f94a 	bl	8003390 <mbedtls_aes_init>
     * IV = Counter (in 32-bits) padded to 16 with zeroes
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
 800b0fc:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b100:	3310      	adds	r3, #16
 800b102:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    *p++ = ( data_len >> 24 ) & 0xff;
 800b106:	1d3b      	adds	r3, r7, #4
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	0e19      	lsrs	r1, r3, #24
 800b10c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800b116:	b2ca      	uxtb	r2, r1
 800b118:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 16 ) & 0xff;
 800b11a:	1d3b      	adds	r3, r7, #4
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	0c19      	lsrs	r1, r3, #16
 800b120:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800b12a:	b2ca      	uxtb	r2, r1
 800b12c:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 8  ) & 0xff;
 800b12e:	1d3b      	adds	r3, r7, #4
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	0a19      	lsrs	r1, r3, #8
 800b134:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800b138:	1c5a      	adds	r2, r3, #1
 800b13a:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800b13e:	b2ca      	uxtb	r2, r1
 800b140:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len       ) & 0xff;
 800b142:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800b14c:	1d3a      	adds	r2, r7, #4
 800b14e:	6812      	ldr	r2, [r2, #0]
 800b150:	b2d2      	uxtb	r2, r2
 800b152:	701a      	strb	r2, [r3, #0]
    p += 3;
 800b154:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800b158:	3303      	adds	r3, #3
 800b15a:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 800b15e:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 800b168:	2230      	movs	r2, #48	; 0x30
 800b16a:	701a      	strb	r2, [r3, #0]
    memcpy( p, data, data_len );
 800b16c:	1d3a      	adds	r2, r7, #4
 800b16e:	f107 0308 	add.w	r3, r7, #8
 800b172:	6812      	ldr	r2, [r2, #0]
 800b174:	6819      	ldr	r1, [r3, #0]
 800b176:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 800b17a:	f009 ffce 	bl	801511a <memcpy>
    p[data_len] = 0x80;
 800b17e:	1d3b      	adds	r3, r7, #4
 800b180:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4413      	add	r3, r2
 800b188:	2280      	movs	r2, #128	; 0x80
 800b18a:	701a      	strb	r2, [r3, #0]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 800b18c:	1d3b      	adds	r3, r7, #4
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3319      	adds	r3, #25
 800b192:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 800b196:	2300      	movs	r3, #0
 800b198:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800b19c:	e00e      	b.n	800b1bc <block_cipher_df+0x108>
        key[i] = i;
 800b19e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b1a2:	b2d9      	uxtb	r1, r3
 800b1a4:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800b1a8:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b1ac:	4413      	add	r3, r2
 800b1ae:	460a      	mov	r2, r1
 800b1b0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 800b1b2:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800b1bc:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b1c0:	2b1f      	cmp	r3, #31
 800b1c2:	ddec      	ble.n	800b19e <block_cipher_df+0xea>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key,
 800b1c4:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 800b1c8:	f107 0314 	add.w	r3, r7, #20
 800b1cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7f8 f925 	bl	8003420 <mbedtls_aes_setkey_enc>
 800b1d6:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 800b1da:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f040 80b9 	bne.w	800b356 <block_cipher_df+0x2a2>
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800b1ea:	e06e      	b.n	800b2ca <block_cipher_df+0x216>
    {
        p = buf;
 800b1ec:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b1f0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 800b1f4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b1f8:	2210      	movs	r2, #16
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f009 ffb0 	bl	8015162 <memset>
        use_len = buf_len;
 800b202:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800b206:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

        while( use_len > 0 )
 800b20a:	e03f      	b.n	800b28c <block_cipher_df+0x1d8>
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 800b20c:	2300      	movs	r3, #0
 800b20e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800b212:	e019      	b.n	800b248 <block_cipher_df+0x194>
                chain[i] ^= p[i];
 800b214:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800b218:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b21c:	4413      	add	r3, r2
 800b21e:	781a      	ldrb	r2, [r3, #0]
 800b220:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b224:	f8d7 1344 	ldr.w	r1, [r7, #836]	; 0x344
 800b228:	440b      	add	r3, r1
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	4053      	eors	r3, r2
 800b22e:	b2d9      	uxtb	r1, r3
 800b230:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800b234:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b238:	4413      	add	r3, r2
 800b23a:	460a      	mov	r2, r1
 800b23c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 800b23e:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b242:	3301      	adds	r3, #1
 800b244:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800b248:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 800b24c:	2b0f      	cmp	r3, #15
 800b24e:	dde1      	ble.n	800b214 <block_cipher_df+0x160>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 800b250:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800b254:	3310      	adds	r3, #16
 800b256:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 800b25a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800b25e:	2b10      	cmp	r3, #16
 800b260:	bf28      	it	cs
 800b262:	2310      	movcs	r3, #16
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 800b264:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 800b26e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b272:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800b276:	f107 0014 	add.w	r0, r7, #20
 800b27a:	2101      	movs	r1, #1
 800b27c:	f7f9 fa2a 	bl	80046d4 <mbedtls_aes_crypt_ecb>
 800b280:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 800b284:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d166      	bne.n	800b35a <block_cipher_df+0x2a6>
        while( use_len > 0 )
 800b28c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1bb      	bne.n	800b20c <block_cipher_df+0x158>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 800b294:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800b298:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 800b29c:	441a      	add	r2, r3
 800b29e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b2a2:	4614      	mov	r4, r2
 800b2a4:	461d      	mov	r5, r3
 800b2a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2a8:	6020      	str	r0, [r4, #0]
 800b2aa:	6061      	str	r1, [r4, #4]
 800b2ac:	60a2      	str	r2, [r4, #8]
 800b2ae:	60e3      	str	r3, [r4, #12]

        /*
         * Update IV
         */
        buf[3]++;
 800b2b0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b2b4:	78db      	ldrb	r3, [r3, #3]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b2be:	70da      	strb	r2, [r3, #3]
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800b2c0:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800b2c4:	3310      	adds	r3, #16
 800b2c6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800b2ca:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800b2ce:	2b2f      	cmp	r3, #47	; 0x2f
 800b2d0:	dd8c      	ble.n	800b1ec <block_cipher_df+0x138>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp,
 800b2d2:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 800b2d6:	f107 0314 	add.w	r3, r7, #20
 800b2da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f8 f89e 	bl	8003420 <mbedtls_aes_setkey_enc>
 800b2e4:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 800b2e8:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d136      	bne.n	800b35e <block_cipher_df+0x2aa>
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
 800b2f0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800b2f4:	3320      	adds	r3, #32
 800b2f6:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    p = output;
 800b2fa:	f107 030c 	add.w	r3, r7, #12
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800b304:	2300      	movs	r3, #0
 800b306:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800b30a:	e01f      	b.n	800b34c <block_cipher_df+0x298>
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT,
 800b30c:	f107 0014 	add.w	r0, r7, #20
 800b310:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800b314:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 800b318:	2101      	movs	r1, #1
 800b31a:	f7f9 f9db 	bl	80046d4 <mbedtls_aes_crypt_ecb>
 800b31e:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340
 800b322:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800b326:	2b00      	cmp	r3, #0
 800b328:	d11b      	bne.n	800b362 <block_cipher_df+0x2ae>
                                           iv, iv ) ) != 0 )
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 800b32a:	2210      	movs	r2, #16
 800b32c:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 800b330:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 800b334:	f009 fef1 	bl	801511a <memcpy>
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 800b338:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800b33c:	3310      	adds	r3, #16
 800b33e:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800b342:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800b346:	3310      	adds	r3, #16
 800b348:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 800b34c:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800b350:	2b2f      	cmp	r3, #47	; 0x2f
 800b352:	dddb      	ble.n	800b30c <block_cipher_df+0x258>
    }
exit:
 800b354:	e006      	b.n	800b364 <block_cipher_df+0x2b0>
        goto exit;
 800b356:	bf00      	nop
 800b358:	e004      	b.n	800b364 <block_cipher_df+0x2b0>
                goto exit;
 800b35a:	bf00      	nop
 800b35c:	e002      	b.n	800b364 <block_cipher_df+0x2b0>
        goto exit;
 800b35e:	bf00      	nop
 800b360:	e000      	b.n	800b364 <block_cipher_df+0x2b0>
            goto exit;
 800b362:	bf00      	nop
    mbedtls_aes_free( &aes_ctx );
 800b364:	f107 0314 	add.w	r3, r7, #20
 800b368:	4618      	mov	r0, r3
 800b36a:	f7f8 f81f 	bl	80033ac <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800b36e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800b372:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800b376:	4618      	mov	r0, r3
 800b378:	f002 ffba 	bl	800e2f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800b37c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800b380:	2130      	movs	r1, #48	; 0x30
 800b382:	4618      	mov	r0, r3
 800b384:	f002 ffb4 	bl	800e2f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 800b388:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800b38c:	2120      	movs	r1, #32
 800b38e:	4618      	mov	r0, r3
 800b390:	f002 ffae 	bl	800e2f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 800b394:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b398:	2110      	movs	r1, #16
 800b39a:	4618      	mov	r0, r3
 800b39c:	f002 ffa8 	bl	800e2f0 <mbedtls_platform_zeroize>
    if( 0 != ret )
 800b3a0:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d005      	beq.n	800b3b4 <block_cipher_df+0x300>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 800b3a8:	f107 030c 	add.w	r3, r7, #12
 800b3ac:	2130      	movs	r1, #48	; 0x30
 800b3ae:	6818      	ldr	r0, [r3, #0]
 800b3b0:	f002 ff9e 	bl	800e2f0 <mbedtls_platform_zeroize>
    }

    return( ret );
 800b3b4:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f507 7752 	add.w	r7, r7, #840	; 0x348
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bdb0      	pop	{r4, r5, r7, pc}

0800b3c2 <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                          const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b092      	sub	sp, #72	; 0x48
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
 800b3ca:	6039      	str	r1, [r7, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
 800b3cc:	f107 0308 	add.w	r3, r7, #8
 800b3d0:	647b      	str	r3, [r7, #68]	; 0x44
    int i, j;
    int ret = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	63bb      	str	r3, [r7, #56]	; 0x38

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	2230      	movs	r2, #48	; 0x30
 800b3dc:	2100      	movs	r1, #0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f009 febf 	bl	8015162 <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3e8:	e028      	b.n	800b43c <ctr_drbg_update_internal+0x7a>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 800b3ea:	2310      	movs	r3, #16
 800b3ec:	643b      	str	r3, [r7, #64]	; 0x40
 800b3ee:	e00e      	b.n	800b40e <ctr_drbg_update_internal+0x4c>
            if( ++ctx->counter[i - 1] != 0 )
 800b3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	5cd2      	ldrb	r2, [r2, r3]
 800b3f8:	3201      	adds	r2, #1
 800b3fa:	b2d1      	uxtb	r1, r2
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	54d1      	strb	r1, [r2, r3]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	5cd3      	ldrb	r3, [r2, r3]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d106      	bne.n	800b416 <ctr_drbg_update_internal+0x54>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 800b408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40a:	3b01      	subs	r3, #1
 800b40c:	643b      	str	r3, [r7, #64]	; 0x40
 800b40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b410:	2b00      	cmp	r3, #0
 800b412:	dced      	bgt.n	800b3f0 <ctr_drbg_update_internal+0x2e>
 800b414:	e000      	b.n	800b418 <ctr_drbg_update_internal+0x56>
                break;
 800b416:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f103 0020 	add.w	r0, r3, #32
                                           ctx->counter, p ) ) != 0 )
 800b41e:	687a      	ldr	r2, [r7, #4]
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800b420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b422:	2101      	movs	r1, #1
 800b424:	f7f9 f956 	bl	80046d4 <mbedtls_aes_crypt_ecb>
 800b428:	63b8      	str	r0, [r7, #56]	; 0x38
 800b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d138      	bne.n	800b4a2 <ctr_drbg_update_internal+0xe0>
        {
            goto exit;
        }

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 800b430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b432:	3310      	adds	r3, #16
 800b434:	647b      	str	r3, [r7, #68]	; 0x44
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800b436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b438:	3310      	adds	r3, #16
 800b43a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b43e:	2b2f      	cmp	r3, #47	; 0x2f
 800b440:	ddd3      	ble.n	800b3ea <ctr_drbg_update_internal+0x28>
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 800b442:	2300      	movs	r3, #0
 800b444:	643b      	str	r3, [r7, #64]	; 0x40
 800b446:	e013      	b.n	800b470 <ctr_drbg_update_internal+0xae>
        tmp[i] ^= data[i];
 800b448:	f107 0208 	add.w	r2, r7, #8
 800b44c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b44e:	4413      	add	r3, r2
 800b450:	781a      	ldrb	r2, [r3, #0]
 800b452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	440b      	add	r3, r1
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	4053      	eors	r3, r2
 800b45c:	b2d9      	uxtb	r1, r3
 800b45e:	f107 0208 	add.w	r2, r7, #8
 800b462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b464:	4413      	add	r3, r2
 800b466:	460a      	mov	r2, r1
 800b468:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 800b46a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b46c:	3301      	adds	r3, #1
 800b46e:	643b      	str	r3, [r7, #64]	; 0x40
 800b470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b472:	2b2f      	cmp	r3, #47	; 0x2f
 800b474:	dde8      	ble.n	800b448 <ctr_drbg_update_internal+0x86>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp,
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3320      	adds	r3, #32
 800b47a:	f107 0108 	add.w	r1, r7, #8
 800b47e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b482:	4618      	mov	r0, r3
 800b484:	f7f7 ffcc 	bl	8003420 <mbedtls_aes_setkey_enc>
 800b488:	63b8      	str	r0, [r7, #56]	; 0x38
 800b48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10a      	bne.n	800b4a6 <ctr_drbg_update_internal+0xe4>
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        goto exit;
    }
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE,
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f107 0308 	add.w	r3, r7, #8
 800b496:	3320      	adds	r3, #32
 800b498:	2210      	movs	r2, #16
 800b49a:	4619      	mov	r1, r3
 800b49c:	f009 fe3d 	bl	801511a <memcpy>
 800b4a0:	e002      	b.n	800b4a8 <ctr_drbg_update_internal+0xe6>
            goto exit;
 800b4a2:	bf00      	nop
 800b4a4:	e000      	b.n	800b4a8 <ctr_drbg_update_internal+0xe6>
        goto exit;
 800b4a6:	bf00      	nop
            MBEDTLS_CTR_DRBG_BLOCKSIZE );

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800b4a8:	f107 0308 	add.w	r3, r7, #8
 800b4ac:	2130      	movs	r1, #48	; 0x30
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f002 ff1e 	bl	800e2f0 <mbedtls_platform_zeroize>
    return( ret );
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3748      	adds	r7, #72	; 0x48
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <mbedtls_ctr_drbg_reseed_internal>:
 */
static int mbedtls_ctr_drbg_reseed_internal( mbedtls_ctr_drbg_context *ctx,
                                             const unsigned char *additional,
                                             size_t len,
                                             size_t nonce_len )
{
 800b4be:	b590      	push	{r4, r7, lr}
 800b4c0:	b0e7      	sub	sp, #412	; 0x19c
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	f107 040c 	add.w	r4, r7, #12
 800b4c8:	6020      	str	r0, [r4, #0]
 800b4ca:	f107 0008 	add.w	r0, r7, #8
 800b4ce:	6001      	str	r1, [r0, #0]
 800b4d0:	1d39      	adds	r1, r7, #4
 800b4d2:	600a      	str	r2, [r1, #0]
 800b4d4:	463a      	mov	r2, r7
 800b4d6:	6013      	str	r3, [r2, #0]
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800b4de:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800b4e2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 800b4e6:	f107 030c 	add.w	r3, r7, #12
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800b4f2:	d902      	bls.n	800b4fa <mbedtls_ctr_drbg_reseed_internal+0x3c>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800b4f4:	f06f 0337 	mvn.w	r3, #55	; 0x37
 800b4f8:	e0b3      	b.n	800b662 <mbedtls_ctr_drbg_reseed_internal+0x1a4>
    if( nonce_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 800b4fa:	f107 030c 	add.w	r3, r7, #12
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	699b      	ldr	r3, [r3, #24]
 800b502:	f5c3 73c0 	rsb	r3, r3, #384	; 0x180
 800b506:	463a      	mov	r2, r7
 800b508:	6812      	ldr	r2, [r2, #0]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d902      	bls.n	800b514 <mbedtls_ctr_drbg_reseed_internal+0x56>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800b50e:	f06f 0337 	mvn.w	r3, #55	; 0x37
 800b512:	e0a6      	b.n	800b662 <mbedtls_ctr_drbg_reseed_internal+0x1a4>
    if( len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len - nonce_len )
 800b514:	f107 030c 	add.w	r3, r7, #12
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	425a      	negs	r2, r3
 800b51e:	463b      	mov	r3, r7
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	1ad3      	subs	r3, r2, r3
 800b524:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b528:	1d3a      	adds	r2, r7, #4
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d902      	bls.n	800b536 <mbedtls_ctr_drbg_reseed_internal+0x78>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800b530:	f06f 0337 	mvn.w	r3, #55	; 0x37
 800b534:	e095      	b.n	800b662 <mbedtls_ctr_drbg_reseed_internal+0x1a4>

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 800b536:	f107 0310 	add.w	r3, r7, #16
 800b53a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b53e:	2100      	movs	r1, #0
 800b540:	4618      	mov	r0, r3
 800b542:	f009 fe0e 	bl	8015162 <memset>

    /* Gather entropy_len bytes of entropy to seed state. */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed, ctx->entropy_len ) )
 800b546:	f107 030c 	add.w	r3, r7, #12
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b550:	f107 020c 	add.w	r2, r7, #12
 800b554:	6812      	ldr	r2, [r2, #0]
 800b556:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
 800b55a:	f107 020c 	add.w	r2, r7, #12
 800b55e:	6812      	ldr	r2, [r2, #0]
 800b560:	6992      	ldr	r2, [r2, #24]
 800b562:	f107 0110 	add.w	r1, r7, #16
 800b566:	4798      	blx	r3
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <mbedtls_ctr_drbg_reseed_internal+0xb6>
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 800b56e:	f06f 0333 	mvn.w	r3, #51	; 0x33
 800b572:	e076      	b.n	800b662 <mbedtls_ctr_drbg_reseed_internal+0x1a4>
    }
    seedlen += ctx->entropy_len;
 800b574:	f107 030c 	add.w	r3, r7, #12
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800b580:	4413      	add	r3, r2
 800b582:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    /* Gather entropy for a nonce if requested. */
    if( nonce_len != 0 )
 800b586:	463b      	mov	r3, r7
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d01e      	beq.n	800b5cc <mbedtls_ctr_drbg_reseed_internal+0x10e>
    {
        if( 0 != ctx->f_entropy( ctx->p_entropy, seed + seedlen, nonce_len ) )
 800b58e:	f107 030c 	add.w	r3, r7, #12
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800b598:	f107 020c 	add.w	r2, r7, #12
 800b59c:	6812      	ldr	r2, [r2, #0]
 800b59e:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
 800b5a2:	f107 0110 	add.w	r1, r7, #16
 800b5a6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800b5aa:	4411      	add	r1, r2
 800b5ac:	463a      	mov	r2, r7
 800b5ae:	6812      	ldr	r2, [r2, #0]
 800b5b0:	4798      	blx	r3
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <mbedtls_ctr_drbg_reseed_internal+0x100>
        {
            return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 800b5b8:	f06f 0333 	mvn.w	r3, #51	; 0x33
 800b5bc:	e051      	b.n	800b662 <mbedtls_ctr_drbg_reseed_internal+0x1a4>
        }
        seedlen += nonce_len;
 800b5be:	463b      	mov	r3, r7
 800b5c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    }

    /* Add additional data if provided. */
    if( additional != NULL && len != 0 )
 800b5cc:	f107 0308 	add.w	r3, r7, #8
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d016      	beq.n	800b604 <mbedtls_ctr_drbg_reseed_internal+0x146>
 800b5d6:	1d3b      	adds	r3, r7, #4
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d012      	beq.n	800b604 <mbedtls_ctr_drbg_reseed_internal+0x146>
    {
        memcpy( seed + seedlen, additional, len );
 800b5de:	f107 0210 	add.w	r2, r7, #16
 800b5e2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800b5e6:	18d0      	adds	r0, r2, r3
 800b5e8:	1d3a      	adds	r2, r7, #4
 800b5ea:	f107 0308 	add.w	r3, r7, #8
 800b5ee:	6812      	ldr	r2, [r2, #0]
 800b5f0:	6819      	ldr	r1, [r3, #0]
 800b5f2:	f009 fd92 	bl	801511a <memcpy>
        seedlen += len;
 800b5f6:	1d3b      	adds	r3, r7, #4
 800b5f8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4413      	add	r3, r2
 800b600:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    }

    /* Reduce to 384 bits. */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 800b604:	f107 0110 	add.w	r1, r7, #16
 800b608:	f107 0310 	add.w	r3, r7, #16
 800b60c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff fd4f 	bl	800b0b4 <block_cipher_df>
 800b616:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 800b61a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d113      	bne.n	800b64a <mbedtls_ctr_drbg_reseed_internal+0x18c>
        goto exit;

    /* Update state. */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 800b622:	f107 0210 	add.w	r2, r7, #16
 800b626:	f107 030c 	add.w	r3, r7, #12
 800b62a:	4611      	mov	r1, r2
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	f7ff fec8 	bl	800b3c2 <ctr_drbg_update_internal>
 800b632:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 800b636:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d107      	bne.n	800b64e <mbedtls_ctr_drbg_reseed_internal+0x190>
        goto exit;
    ctx->reseed_counter = 1;
 800b63e:	f107 030c 	add.w	r3, r7, #12
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2201      	movs	r2, #1
 800b646:	611a      	str	r2, [r3, #16]
 800b648:	e002      	b.n	800b650 <mbedtls_ctr_drbg_reseed_internal+0x192>
        goto exit;
 800b64a:	bf00      	nop
 800b64c:	e000      	b.n	800b650 <mbedtls_ctr_drbg_reseed_internal+0x192>
        goto exit;
 800b64e:	bf00      	nop

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 800b650:	f107 0310 	add.w	r3, r7, #16
 800b654:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800b658:	4618      	mov	r0, r3
 800b65a:	f002 fe49 	bl	800e2f0 <mbedtls_platform_zeroize>
    return( ret );
 800b65e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
}
 800b662:	4618      	mov	r0, r3
 800b664:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd90      	pop	{r4, r7, pc}

0800b66c <mbedtls_ctr_drbg_reseed>:

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                             const unsigned char *additional, size_t len )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
    return( mbedtls_ctr_drbg_reseed_internal( ctx, additional, len, 0 ) );
 800b678:	2300      	movs	r3, #0
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	68b9      	ldr	r1, [r7, #8]
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f7ff ff1d 	bl	800b4be <mbedtls_ctr_drbg_reseed_internal>
 800b684:	4603      	mov	r3, r0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <good_nonce_len>:
 * is sufficient to achieve the maximum security strength given the key
 * size and entropy length. If there is enough entropy in the initial
 * call to the entropy function to serve as both the entropy input and
 * the nonce, don't make a second call to get a nonce. */
static size_t good_nonce_len( size_t entropy_len )
{
 800b68e:	b480      	push	{r7}
 800b690:	b083      	sub	sp, #12
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
    if( entropy_len >= MBEDTLS_CTR_DRBG_KEYSIZE * 3 / 2 )
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2b2f      	cmp	r3, #47	; 0x2f
 800b69a:	d901      	bls.n	800b6a0 <good_nonce_len+0x12>
        return( 0 );
 800b69c:	2300      	movs	r3, #0
 800b69e:	e002      	b.n	800b6a6 <good_nonce_len+0x18>
    else
        return( ( entropy_len + 1 ) / 2 );
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	085b      	lsrs	r3, r3, #1
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr

0800b6b2 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                           int (*f_entropy)(void *, unsigned char *, size_t),
                           void *p_entropy,
                           const unsigned char *custom,
                           size_t len )
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b08e      	sub	sp, #56	; 0x38
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	60f8      	str	r0, [r7, #12]
 800b6ba:	60b9      	str	r1, [r7, #8]
 800b6bc:	607a      	str	r2, [r7, #4]
 800b6be:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800b6c0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800b6c4:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    size_t nonce_len;

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 800b6c6:	f107 0310 	add.w	r3, r7, #16
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f009 fd47 	bl	8015162 <memset>
    /* The mutex is initialized iff f_entropy is set. */
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    mbedtls_aes_init( &ctx->aes_ctx );
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	3320      	adds	r3, #32
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7f7 fe59 	bl	8003390 <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    ctx->p_entropy = p_entropy;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

    if( ctx->entropy_len == 0 )
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	699b      	ldr	r3, [r3, #24]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d102      	bne.n	800b6fc <mbedtls_ctr_drbg_seed+0x4a>
        ctx->entropy_len = MBEDTLS_CTR_DRBG_ENTROPY_LEN;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2230      	movs	r2, #48	; 0x30
 800b6fa:	619a      	str	r2, [r3, #24]
    /* ctx->reseed_counter contains the desired amount of entropy to
     * grab for a nonce (see mbedtls_ctr_drbg_set_nonce_len()).
     * If it's -1, indicating that the entropy nonce length was not set
     * explicitly, use a sufficiently large nonce for security. */
    nonce_len = ( ctx->reseed_counter >= 0 ?
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	691b      	ldr	r3, [r3, #16]
                  (size_t) ctx->reseed_counter :
 800b700:	2b00      	cmp	r3, #0
 800b702:	db02      	blt.n	800b70a <mbedtls_ctr_drbg_seed+0x58>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	e005      	b.n	800b716 <mbedtls_ctr_drbg_seed+0x64>
                  good_nonce_len( ctx->entropy_len ) );
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	699b      	ldr	r3, [r3, #24]
                  (size_t) ctx->reseed_counter :
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff ffbd 	bl	800b68e <good_nonce_len>
 800b714:	4603      	mov	r3, r0
    nonce_len = ( ctx->reseed_counter >= 0 ?
 800b716:	633b      	str	r3, [r7, #48]	; 0x30

    /* Initialize with an empty key. */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key,
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	3320      	adds	r3, #32
 800b71c:	f107 0110 	add.w	r1, r7, #16
 800b720:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b724:	4618      	mov	r0, r3
 800b726:	f7f7 fe7b 	bl	8003420 <mbedtls_aes_setkey_enc>
 800b72a:	6378      	str	r0, [r7, #52]	; 0x34
 800b72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <mbedtls_ctr_drbg_seed+0x84>
                                        MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
    {
        return( ret );
 800b732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b734:	e00c      	b.n	800b750 <mbedtls_ctr_drbg_seed+0x9e>
    }

    /* Do the initial seeding. */
    if( ( ret = mbedtls_ctr_drbg_reseed_internal( ctx, custom, len,
 800b736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f7ff febe 	bl	800b4be <mbedtls_ctr_drbg_reseed_internal>
 800b742:	6378      	str	r0, [r7, #52]	; 0x34
 800b744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <mbedtls_ctr_drbg_seed+0x9c>
                                                  nonce_len ) ) != 0 )
    {
        return( ret );
 800b74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74c:	e000      	b.n	800b750 <mbedtls_ctr_drbg_seed+0x9e>
    }
    return( 0 );
 800b74e:	2300      	movs	r3, #0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3738      	adds	r7, #56	; 0x38
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b09a      	sub	sp, #104	; 0x68
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	667b      	str	r3, [r7, #100]	; 0x64
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	65bb      	str	r3, [r7, #88]	; 0x58
    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = output;
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	663b      	str	r3, [r7, #96]	; 0x60
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b778:	d902      	bls.n	800b780 <mbedtls_ctr_drbg_random_with_add+0x28>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 800b77a:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b77e:	e09c      	b.n	800b8ba <mbedtls_ctr_drbg_random_with_add+0x162>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 800b780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b786:	d902      	bls.n	800b78e <mbedtls_ctr_drbg_random_with_add+0x36>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800b788:	f06f 0337 	mvn.w	r3, #55	; 0x37
 800b78c:	e095      	b.n	800b8ba <mbedtls_ctr_drbg_random_with_add+0x162>

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 800b78e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b792:	2230      	movs	r2, #48	; 0x30
 800b794:	2100      	movs	r1, #0
 800b796:	4618      	mov	r0, r3
 800b798:	f009 fce3 	bl	8015162 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 800b79c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b79e:	691a      	ldr	r2, [r3, #16]
 800b7a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7a2:	69db      	ldr	r3, [r3, #28]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	dc03      	bgt.n	800b7b0 <mbedtls_ctr_drbg_random_with_add+0x58>
        ctx->prediction_resistance )
 800b7a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7aa:	695b      	ldr	r3, [r3, #20]
    if( ctx->reseed_counter > ctx->reseed_interval ||
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00c      	beq.n	800b7ca <mbedtls_ctr_drbg_random_with_add+0x72>
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 800b7b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b7b6:	f7ff ff59 	bl	800b66c <mbedtls_ctr_drbg_reseed>
 800b7ba:	6678      	str	r0, [r7, #100]	; 0x64
 800b7bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <mbedtls_ctr_drbg_random_with_add+0x6e>
        {
            return( ret );
 800b7c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7c4:	e079      	b.n	800b8ba <mbedtls_ctr_drbg_random_with_add+0x162>
        }
        add_len = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	673b      	str	r3, [r7, #112]	; 0x70
    }

    if( add_len > 0 )
 800b7ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d04d      	beq.n	800b86c <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 800b7d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f7ff fc6b 	bl	800b0b4 <block_cipher_df>
 800b7de:	6678      	str	r0, [r7, #100]	; 0x64
 800b7e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d155      	bne.n	800b892 <mbedtls_ctr_drbg_random_with_add+0x13a>
            goto exit;
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 800b7e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b7ee:	f7ff fde8 	bl	800b3c2 <ctr_drbg_update_internal>
 800b7f2:	6678      	str	r0, [r7, #100]	; 0x64
 800b7f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d14d      	bne.n	800b896 <mbedtls_ctr_drbg_random_with_add+0x13e>
            goto exit;
    }

    while( output_len > 0 )
 800b7fa:	e037      	b.n	800b86c <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 800b7fc:	2310      	movs	r3, #16
 800b7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b800:	e00e      	b.n	800b820 <mbedtls_ctr_drbg_random_with_add+0xc8>
            if( ++ctx->counter[i - 1] != 0 )
 800b802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b804:	3b01      	subs	r3, #1
 800b806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b808:	5cd2      	ldrb	r2, [r2, r3]
 800b80a:	3201      	adds	r2, #1
 800b80c:	b2d1      	uxtb	r1, r2
 800b80e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b810:	54d1      	strb	r1, [r2, r3]
 800b812:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b814:	5cd3      	ldrb	r3, [r2, r3]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <mbedtls_ctr_drbg_random_with_add+0xd0>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 800b81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b81c:	3b01      	subs	r3, #1
 800b81e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b822:	2b00      	cmp	r3, #0
 800b824:	dced      	bgt.n	800b802 <mbedtls_ctr_drbg_random_with_add+0xaa>
 800b826:	e000      	b.n	800b82a <mbedtls_ctr_drbg_random_with_add+0xd2>
                break;
 800b828:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800b82a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b82c:	f103 0020 	add.w	r0, r3, #32
                                           ctx->counter, tmp ) ) != 0 )
 800b830:	6dba      	ldr	r2, [r7, #88]	; 0x58
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT,
 800b832:	f107 0314 	add.w	r3, r7, #20
 800b836:	2101      	movs	r1, #1
 800b838:	f7f8 ff4c 	bl	80046d4 <mbedtls_aes_crypt_ecb>
 800b83c:	6678      	str	r0, [r7, #100]	; 0x64
 800b83e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b840:	2b00      	cmp	r3, #0
 800b842:	d12a      	bne.n	800b89a <mbedtls_ctr_drbg_random_with_add+0x142>
        {
            goto exit;
        }

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b10      	cmp	r3, #16
 800b848:	bf28      	it	cs
 800b84a:	2310      	movcs	r3, #16
 800b84c:	657b      	str	r3, [r7, #84]	; 0x54
            ? MBEDTLS_CTR_DRBG_BLOCKSIZE : output_len;
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 800b84e:	f107 0314 	add.w	r3, r7, #20
 800b852:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b854:	4619      	mov	r1, r3
 800b856:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b858:	f009 fc5f 	bl	801511a <memcpy>
        p += use_len;
 800b85c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b85e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b860:	4413      	add	r3, r2
 800b862:	663b      	str	r3, [r7, #96]	; 0x60
        output_len -= use_len;
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	607b      	str	r3, [r7, #4]
    while( output_len > 0 )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1c4      	bne.n	800b7fc <mbedtls_ctr_drbg_random_with_add+0xa4>
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 800b872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b876:	4619      	mov	r1, r3
 800b878:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b87a:	f7ff fda2 	bl	800b3c2 <ctr_drbg_update_internal>
 800b87e:	6678      	str	r0, [r7, #100]	; 0x64
 800b880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10b      	bne.n	800b89e <mbedtls_ctr_drbg_random_with_add+0x146>
        goto exit;

    ctx->reseed_counter++;
 800b886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b88e:	611a      	str	r2, [r3, #16]
 800b890:	e006      	b.n	800b8a0 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 800b892:	bf00      	nop
 800b894:	e004      	b.n	800b8a0 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 800b896:	bf00      	nop
 800b898:	e002      	b.n	800b8a0 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 800b89a:	bf00      	nop
 800b89c:	e000      	b.n	800b8a0 <mbedtls_ctr_drbg_random_with_add+0x148>
        goto exit;
 800b89e:	bf00      	nop

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 800b8a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8a4:	2130      	movs	r1, #48	; 0x30
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f002 fd22 	bl	800e2f0 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800b8ac:	f107 0314 	add.w	r3, r7, #20
 800b8b0:	2110      	movs	r1, #16
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f002 fd1c 	bl	800e2f0 <mbedtls_platform_zeroize>
    return( ret );
 800b8b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3768      	adds	r7, #104	; 0x68
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output,
                             size_t output_len )
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b088      	sub	sp, #32
 800b8c6:	af02      	add	r7, sp, #8
 800b8c8:	60f8      	str	r0, [r7, #12]
 800b8ca:	60b9      	str	r1, [r7, #8]
 800b8cc:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800b8ce:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800b8d2:	617b      	str	r3, [r7, #20]
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	613b      	str	r3, [r7, #16]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	2300      	movs	r3, #0
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	68b9      	ldr	r1, [r7, #8]
 800b8e2:	6938      	ldr	r0, [r7, #16]
 800b8e4:	f7ff ff38 	bl	800b758 <mbedtls_ctr_drbg_random_with_add>
 800b8e8:	6178      	str	r0, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800b8ea:	697b      	ldr	r3, [r7, #20]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <mbedtls_des_init>:
    {                                                   \
        uint32_t t = (a); (a) = (b); (b) = t; t = 0;    \
    } while( 0 )

void mbedtls_des_init( mbedtls_des_context *ctx )
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des_context ) );
 800b8fc:	2280      	movs	r2, #128	; 0x80
 800b8fe:	2100      	movs	r1, #0
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f009 fc2e 	bl	8015162 <memset>
}
 800b906:	bf00      	nop
 800b908:	3708      	adds	r7, #8
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <mbedtls_des_free>:

void mbedtls_des_free( mbedtls_des_context *ctx )
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d004      	beq.n	800b926 <mbedtls_des_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_des_context ) );
 800b91c:	2180      	movs	r1, #128	; 0x80
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f002 fce6 	bl	800e2f0 <mbedtls_platform_zeroize>
 800b924:	e000      	b.n	800b928 <mbedtls_des_free+0x1a>
        return;
 800b926:	bf00      	nop
}
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <mbedtls_des3_init>:

void mbedtls_des3_init( mbedtls_des3_context *ctx )
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_des3_context ) );
 800b936:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b93a:	2100      	movs	r1, #0
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f009 fc10 	bl	8015162 <memset>
}
 800b942:	bf00      	nop
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <mbedtls_des3_free>:

void mbedtls_des3_free( mbedtls_des3_context *ctx )
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <mbedtls_des3_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_des3_context ) );
 800b958:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f002 fcc7 	bl	800e2f0 <mbedtls_platform_zeroize>
 800b962:	e000      	b.n	800b966 <mbedtls_des3_free+0x1c>
        return;
 800b964:	bf00      	nop
}
 800b966:	3708      	adds	r7, #8
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <mbedtls_des_setkey>:
    return( 0 );
}

#if !defined(MBEDTLS_DES_SETKEY_ALT)
void mbedtls_des_setkey( uint32_t SK[32], const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
    int i;
    uint32_t X, Y, T;

    GET_UINT32_BE( X, key, 0 );
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	061a      	lsls	r2, r3, #24
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	3301      	adds	r3, #1
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	041b      	lsls	r3, r3, #16
 800b984:	431a      	orrs	r2, r3
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	3302      	adds	r3, #2
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	021b      	lsls	r3, r3, #8
 800b98e:	4313      	orrs	r3, r2
 800b990:	683a      	ldr	r2, [r7, #0]
 800b992:	3203      	adds	r2, #3
 800b994:	7812      	ldrb	r2, [r2, #0]
 800b996:	4313      	orrs	r3, r2
 800b998:	613b      	str	r3, [r7, #16]
    GET_UINT32_BE( Y, key, 4 );
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	3304      	adds	r3, #4
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	061a      	lsls	r2, r3, #24
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	3305      	adds	r3, #5
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	041b      	lsls	r3, r3, #16
 800b9aa:	431a      	orrs	r2, r3
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	3306      	adds	r3, #6
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	021b      	lsls	r3, r3, #8
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	3207      	adds	r2, #7
 800b9ba:	7812      	ldrb	r2, [r2, #0]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	60fb      	str	r3, [r7, #12]

    /*
     * Permuted Choice 1
     */
    T =  ((Y >>  4) ^ X) & 0x0F0F0F0F;  X ^= T; Y ^= (T <<  4);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	091a      	lsrs	r2, r3, #4
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	4053      	eors	r3, r2
 800b9c8:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800b9cc:	60bb      	str	r3, [r7, #8]
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	4053      	eors	r3, r2
 800b9d4:	613b      	str	r3, [r7, #16]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	011b      	lsls	r3, r3, #4
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	4053      	eors	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
    T =  ((Y      ) ^ X) & 0x10101010;  X ^= T; Y ^= (T      );
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	4053      	eors	r3, r2
 800b9e6:	f003 3310 	and.w	r3, r3, #269488144	; 0x10101010
 800b9ea:	60bb      	str	r3, [r7, #8]
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	4053      	eors	r3, r2
 800b9f2:	613b      	str	r3, [r7, #16]
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	4053      	eors	r3, r2
 800b9fa:	60fb      	str	r3, [r7, #12]

    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	f003 030f 	and.w	r3, r3, #15
 800ba02:	4a55      	ldr	r2, [pc, #340]	; (800bb58 <mbedtls_des_setkey+0x1ec>)
 800ba04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba08:	00da      	lsls	r2, r3, #3
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	0a1b      	lsrs	r3, r3, #8
 800ba0e:	f003 030f 	and.w	r3, r3, #15
 800ba12:	4951      	ldr	r1, [pc, #324]	; (800bb58 <mbedtls_des_setkey+0x1ec>)
 800ba14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	431a      	orrs	r2, r3
        | (LHs[ (X >> 16) & 0xF] << 1) | (LHs[ (X >> 24) & 0xF ]     )
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	0c1b      	lsrs	r3, r3, #16
 800ba20:	f003 030f 	and.w	r3, r3, #15
 800ba24:	494c      	ldr	r1, [pc, #304]	; (800bb58 <mbedtls_des_setkey+0x1ec>)
 800ba26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	0e1b      	lsrs	r3, r3, #24
 800ba32:	f003 030f 	and.w	r3, r3, #15
 800ba36:	4948      	ldr	r1, [pc, #288]	; (800bb58 <mbedtls_des_setkey+0x1ec>)
 800ba38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba3c:	431a      	orrs	r2, r3
        | (LHs[ (X >>  5) & 0xF] << 7) | (LHs[ (X >> 13) & 0xF ] << 6)
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	095b      	lsrs	r3, r3, #5
 800ba42:	f003 030f 	and.w	r3, r3, #15
 800ba46:	4944      	ldr	r1, [pc, #272]	; (800bb58 <mbedtls_des_setkey+0x1ec>)
 800ba48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba4c:	01db      	lsls	r3, r3, #7
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	0b5b      	lsrs	r3, r3, #13
 800ba54:	f003 030f 	and.w	r3, r3, #15
 800ba58:	493f      	ldr	r1, [pc, #252]	; (800bb58 <mbedtls_des_setkey+0x1ec>)
 800ba5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba5e:	019b      	lsls	r3, r3, #6
 800ba60:	431a      	orrs	r2, r3
        | (LHs[ (X >> 21) & 0xF] << 5) | (LHs[ (X >> 29) & 0xF ] << 4);
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	0d5b      	lsrs	r3, r3, #21
 800ba66:	f003 030f 	and.w	r3, r3, #15
 800ba6a:	493b      	ldr	r1, [pc, #236]	; (800bb58 <mbedtls_des_setkey+0x1ec>)
 800ba6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba70:	015b      	lsls	r3, r3, #5
 800ba72:	431a      	orrs	r2, r3
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	0f5b      	lsrs	r3, r3, #29
 800ba78:	4937      	ldr	r1, [pc, #220]	; (800bb58 <mbedtls_des_setkey+0x1ec>)
 800ba7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba7e:	011b      	lsls	r3, r3, #4
    X =   (LHs[ (X      ) & 0xF] << 3) | (LHs[ (X >>  8) & 0xF ] << 2)
 800ba80:	4313      	orrs	r3, r2
 800ba82:	613b      	str	r3, [r7, #16]

    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	085b      	lsrs	r3, r3, #1
 800ba88:	f003 030f 	and.w	r3, r3, #15
 800ba8c:	4a33      	ldr	r2, [pc, #204]	; (800bb5c <mbedtls_des_setkey+0x1f0>)
 800ba8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba92:	00da      	lsls	r2, r3, #3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	0a5b      	lsrs	r3, r3, #9
 800ba98:	f003 030f 	and.w	r3, r3, #15
 800ba9c:	492f      	ldr	r1, [pc, #188]	; (800bb5c <mbedtls_des_setkey+0x1f0>)
 800ba9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 17) & 0xF] << 1) | (RHs[ (Y >> 25) & 0xF ]     )
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	0c5b      	lsrs	r3, r3, #17
 800baaa:	f003 030f 	and.w	r3, r3, #15
 800baae:	492b      	ldr	r1, [pc, #172]	; (800bb5c <mbedtls_des_setkey+0x1f0>)
 800bab0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	431a      	orrs	r2, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	0e5b      	lsrs	r3, r3, #25
 800babc:	f003 030f 	and.w	r3, r3, #15
 800bac0:	4926      	ldr	r1, [pc, #152]	; (800bb5c <mbedtls_des_setkey+0x1f0>)
 800bac2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bac6:	431a      	orrs	r2, r3
        | (RHs[ (Y >>  4) & 0xF] << 7) | (RHs[ (Y >> 12) & 0xF ] << 6)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	091b      	lsrs	r3, r3, #4
 800bacc:	f003 030f 	and.w	r3, r3, #15
 800bad0:	4922      	ldr	r1, [pc, #136]	; (800bb5c <mbedtls_des_setkey+0x1f0>)
 800bad2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bad6:	01db      	lsls	r3, r3, #7
 800bad8:	431a      	orrs	r2, r3
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	0b1b      	lsrs	r3, r3, #12
 800bade:	f003 030f 	and.w	r3, r3, #15
 800bae2:	491e      	ldr	r1, [pc, #120]	; (800bb5c <mbedtls_des_setkey+0x1f0>)
 800bae4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bae8:	019b      	lsls	r3, r3, #6
 800baea:	431a      	orrs	r2, r3
        | (RHs[ (Y >> 20) & 0xF] << 5) | (RHs[ (Y >> 28) & 0xF ] << 4);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	0d1b      	lsrs	r3, r3, #20
 800baf0:	f003 030f 	and.w	r3, r3, #15
 800baf4:	4919      	ldr	r1, [pc, #100]	; (800bb5c <mbedtls_des_setkey+0x1f0>)
 800baf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bafa:	015b      	lsls	r3, r3, #5
 800bafc:	431a      	orrs	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	0f1b      	lsrs	r3, r3, #28
 800bb02:	4916      	ldr	r1, [pc, #88]	; (800bb5c <mbedtls_des_setkey+0x1f0>)
 800bb04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bb08:	011b      	lsls	r3, r3, #4
    Y =   (RHs[ (Y >>  1) & 0xF] << 3) | (RHs[ (Y >>  9) & 0xF ] << 2)
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	60fb      	str	r3, [r7, #12]

    X &= 0x0FFFFFFF;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb14:	613b      	str	r3, [r7, #16]
    Y &= 0x0FFFFFFF;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb1c:	60fb      	str	r3, [r7, #12]

    /*
     * calculate subkeys
     */
    for( i = 0; i < 16; i++ )
 800bb1e:	2300      	movs	r3, #0
 800bb20:	617b      	str	r3, [r7, #20]
 800bb22:	e113      	b.n	800bd4c <mbedtls_des_setkey+0x3e0>
    {
        if( i < 2 || i == 8 || i == 15 )
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	dd05      	ble.n	800bb36 <mbedtls_des_setkey+0x1ca>
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d002      	beq.n	800bb36 <mbedtls_des_setkey+0x1ca>
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	2b0f      	cmp	r3, #15
 800bb34:	d114      	bne.n	800bb60 <mbedtls_des_setkey+0x1f4>
        {
            X = ((X <<  1) | (X >> 27)) & 0x0FFFFFFF;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	005a      	lsls	r2, r3, #1
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	0edb      	lsrs	r3, r3, #27
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb44:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  1) | (Y >> 27)) & 0x0FFFFFFF;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	005a      	lsls	r2, r3, #1
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	0edb      	lsrs	r3, r3, #27
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb54:	60fb      	str	r3, [r7, #12]
 800bb56:	e013      	b.n	800bb80 <mbedtls_des_setkey+0x214>
 800bb58:	08019b60 	.word	0x08019b60
 800bb5c:	08019ba0 	.word	0x08019ba0
        }
        else
        {
            X = ((X <<  2) | (X >> 26)) & 0x0FFFFFFF;
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	009a      	lsls	r2, r3, #2
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	0e9b      	lsrs	r3, r3, #26
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb6e:	613b      	str	r3, [r7, #16]
            Y = ((Y <<  2) | (Y >> 26)) & 0x0FFFFFFF;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	009a      	lsls	r2, r3, #2
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	0e9b      	lsrs	r3, r3, #26
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb7e:	60fb      	str	r3, [r7, #12]
        }

        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	011b      	lsls	r3, r3, #4
 800bb84:	f003 5210 	and.w	r2, r3, #603979776	; 0x24000000
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	071b      	lsls	r3, r3, #28
 800bb8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb90:	431a      	orrs	r2, r3
                | ((X << 14) & 0x08000000) | ((X << 18) & 0x02080000)
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	039b      	lsls	r3, r3, #14
 800bb96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb9a:	431a      	orrs	r2, r3
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	049b      	lsls	r3, r3, #18
 800bba0:	f003 7302 	and.w	r3, r3, #34078720	; 0x2080000
 800bba4:	431a      	orrs	r2, r3
                | ((X <<  6) & 0x01000000) | ((X <<  9) & 0x00200000)
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	019b      	lsls	r3, r3, #6
 800bbaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbae:	431a      	orrs	r2, r3
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	025b      	lsls	r3, r3, #9
 800bbb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbb8:	431a      	orrs	r2, r3
                | ((X >>  1) & 0x00100000) | ((X << 10) & 0x00040000)
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	085b      	lsrs	r3, r3, #1
 800bbbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbc2:	431a      	orrs	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	029b      	lsls	r3, r3, #10
 800bbc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbcc:	431a      	orrs	r2, r3
                | ((X <<  2) & 0x00020000) | ((X >> 10) & 0x00010000)
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbd6:	431a      	orrs	r2, r3
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	0a9b      	lsrs	r3, r3, #10
 800bbdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbe0:	431a      	orrs	r2, r3
                | ((Y >> 13) & 0x00002000) | ((Y >>  4) & 0x00001000)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	0b5b      	lsrs	r3, r3, #13
 800bbe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbea:	431a      	orrs	r2, r3
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	091b      	lsrs	r3, r3, #4
 800bbf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbf4:	431a      	orrs	r2, r3
                | ((Y <<  6) & 0x00000800) | ((Y >>  1) & 0x00000400)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	019b      	lsls	r3, r3, #6
 800bbfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbfe:	431a      	orrs	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	085b      	lsrs	r3, r3, #1
 800bc04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc08:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000200) | ((Y      ) & 0x00000100)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	0b9b      	lsrs	r3, r3, #14
 800bc0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc12:	431a      	orrs	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc1a:	431a      	orrs	r2, r3
                | ((Y >>  5) & 0x00000020) | ((Y >> 10) & 0x00000010)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	095b      	lsrs	r3, r3, #5
 800bc20:	f003 0320 	and.w	r3, r3, #32
 800bc24:	431a      	orrs	r2, r3
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	0a9b      	lsrs	r3, r3, #10
 800bc2a:	f003 0310 	and.w	r3, r3, #16
 800bc2e:	431a      	orrs	r2, r3
                | ((Y >>  3) & 0x00000008) | ((Y >> 18) & 0x00000004)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	08db      	lsrs	r3, r3, #3
 800bc34:	f003 0308 	and.w	r3, r3, #8
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	0c9b      	lsrs	r3, r3, #18
 800bc3e:	f003 0304 	and.w	r3, r3, #4
 800bc42:	431a      	orrs	r2, r3
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	0e9b      	lsrs	r3, r3, #26
 800bc48:	f003 0302 	and.w	r3, r3, #2
 800bc4c:	ea42 0103 	orr.w	r1, r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	0e1b      	lsrs	r3, r3, #24
 800bc54:	f003 0201 	and.w	r2, r3, #1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	1d18      	adds	r0, r3, #4
 800bc5c:	6078      	str	r0, [r7, #4]
                | ((Y >> 26) & 0x00000002) | ((Y >> 24) & 0x00000001);
 800bc5e:	430a      	orrs	r2, r1
        *SK++ =   ((X <<  4) & 0x24000000) | ((X << 28) & 0x10000000)
 800bc60:	601a      	str	r2, [r3, #0]

        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	03db      	lsls	r3, r3, #15
 800bc66:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	045b      	lsls	r3, r3, #17
 800bc6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc72:	431a      	orrs	r2, r3
                | ((X << 10) & 0x08000000) | ((X << 22) & 0x04000000)
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	029b      	lsls	r3, r3, #10
 800bc78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc7c:	431a      	orrs	r2, r3
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	059b      	lsls	r3, r3, #22
 800bc82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc86:	431a      	orrs	r2, r3
                | ((X >>  2) & 0x02000000) | ((X <<  1) & 0x01000000)
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	089b      	lsrs	r3, r3, #2
 800bc8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc90:	431a      	orrs	r2, r3
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc9a:	431a      	orrs	r2, r3
                | ((X << 16) & 0x00200000) | ((X << 11) & 0x00100000)
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	041b      	lsls	r3, r3, #16
 800bca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bca4:	431a      	orrs	r2, r3
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	02db      	lsls	r3, r3, #11
 800bcaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcae:	431a      	orrs	r2, r3
                | ((X <<  3) & 0x00080000) | ((X >>  6) & 0x00040000)
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bcb8:	431a      	orrs	r2, r3
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	099b      	lsrs	r3, r3, #6
 800bcbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcc2:	431a      	orrs	r2, r3
                | ((X << 15) & 0x00020000) | ((X >>  4) & 0x00010000)
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	03db      	lsls	r3, r3, #15
 800bcc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bccc:	431a      	orrs	r2, r3
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	091b      	lsrs	r3, r3, #4
 800bcd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcd6:	431a      	orrs	r2, r3
                | ((Y >>  2) & 0x00002000) | ((Y <<  8) & 0x00001000)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	089b      	lsrs	r3, r3, #2
 800bcdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bce0:	431a      	orrs	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	021b      	lsls	r3, r3, #8
 800bce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bcea:	431a      	orrs	r2, r3
                | ((Y >> 14) & 0x00000808) | ((Y >>  9) & 0x00000400)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	0b99      	lsrs	r1, r3, #14
 800bcf0:	f640 0308 	movw	r3, #2056	; 0x808
 800bcf4:	400b      	ands	r3, r1
 800bcf6:	431a      	orrs	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	0a5b      	lsrs	r3, r3, #9
 800bcfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd00:	431a      	orrs	r2, r3
                | ((Y      ) & 0x00000200) | ((Y <<  7) & 0x00000100)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	01db      	lsls	r3, r3, #7
 800bd0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd12:	431a      	orrs	r2, r3
                | ((Y >>  7) & 0x00000020) | ((Y >>  3) & 0x00000011)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	09db      	lsrs	r3, r3, #7
 800bd18:	f003 0320 	and.w	r3, r3, #32
 800bd1c:	431a      	orrs	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	08db      	lsrs	r3, r3, #3
 800bd22:	f003 0311 	and.w	r3, r3, #17
 800bd26:	431a      	orrs	r2, r3
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	f003 0304 	and.w	r3, r3, #4
 800bd30:	ea42 0103 	orr.w	r1, r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	0d5b      	lsrs	r3, r3, #21
 800bd38:	f003 0202 	and.w	r2, r3, #2
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	1d18      	adds	r0, r3, #4
 800bd40:	6078      	str	r0, [r7, #4]
                | ((Y <<  2) & 0x00000004) | ((Y >> 21) & 0x00000002);
 800bd42:	430a      	orrs	r2, r1
        *SK++ =   ((X << 15) & 0x20000000) | ((X << 17) & 0x10000000)
 800bd44:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i++ )
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	2b0f      	cmp	r3, #15
 800bd50:	f77f aee8 	ble.w	800bb24 <mbedtls_des_setkey+0x1b8>
    }
}
 800bd54:	bf00      	nop
 800bd56:	371c      	adds	r7, #28
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <mbedtls_des_setkey_enc>:

/*
 * DES key schedule (56-bit, encryption)
 */
int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
    mbedtls_des_setkey( ctx->sk, key );
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fdfc 	bl	800b96c <mbedtls_des_setkey>

    return( 0 );
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <mbedtls_des_setkey_dec>:

/*
 * DES key schedule (56-bit, decryption)
 */
int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[MBEDTLS_DES_KEY_SIZE] )
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b086      	sub	sp, #24
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	6039      	str	r1, [r7, #0]
    int i;

    mbedtls_des_setkey( ctx->sk, key );
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7ff fded 	bl	800b96c <mbedtls_des_setkey>

    for( i = 0; i < 16; i += 2 )
 800bd92:	2300      	movs	r3, #0
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	e034      	b.n	800be02 <mbedtls_des_setkey_dec+0x84>
    {
        SWAP( ctx->sk[i    ], ctx->sk[30 - i] );
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda0:	613b      	str	r3, [r7, #16]
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f1c3 021e 	rsb	r2, r3, #30
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	f1c3 021e 	rsb	r2, r3, #30
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6939      	ldr	r1, [r7, #16]
 800bdc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	613b      	str	r3, [r7, #16]
        SWAP( ctx->sk[i + 1], ctx->sk[31 - i] );
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	1c5a      	adds	r2, r3, #1
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	f1c3 011f 	rsb	r1, r3, #31
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	1c5a      	adds	r2, r3, #1
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f1c3 021f 	rsb	r2, r3, #31
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68f9      	ldr	r1, [r7, #12]
 800bdf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	60fb      	str	r3, [r7, #12]
    for( i = 0; i < 16; i += 2 )
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	3302      	adds	r3, #2
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2b0f      	cmp	r3, #15
 800be06:	ddc7      	ble.n	800bd98 <mbedtls_des_setkey_dec+0x1a>
    }

    return( 0 );
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <des3_set2key>:

static void des3_set2key( uint32_t esk[96],
                          uint32_t dsk[96],
                          const unsigned char key[MBEDTLS_DES_KEY_SIZE*2] )
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b086      	sub	sp, #24
 800be16:	af00      	add	r7, sp, #0
 800be18:	60f8      	str	r0, [r7, #12]
 800be1a:	60b9      	str	r1, [r7, #8]
 800be1c:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey( esk, key );
 800be1e:	6879      	ldr	r1, [r7, #4]
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff fda3 	bl	800b96c <mbedtls_des_setkey>
    mbedtls_des_setkey( dsk + 32, key + 8 );
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3308      	adds	r3, #8
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7ff fd9a 	bl	800b96c <mbedtls_des_setkey>

    for( i = 0; i < 32; i += 2 )
 800be38:	2300      	movs	r3, #0
 800be3a:	617b      	str	r3, [r7, #20]
 800be3c:	e063      	b.n	800bf06 <des3_set2key+0xf4>
    {
        dsk[i     ] = esk[30 - i];
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f1c3 031e 	rsb	r3, r3, #30
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	441a      	add	r2, r3
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	68b9      	ldr	r1, [r7, #8]
 800be50:	440b      	add	r3, r1
 800be52:	6812      	ldr	r2, [r2, #0]
 800be54:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[31 - i];
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f1c3 031f 	rsb	r3, r3, #31
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	441a      	add	r2, r3
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	3301      	adds	r3, #1
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	68b9      	ldr	r1, [r7, #8]
 800be6a:	440b      	add	r3, r1
 800be6c:	6812      	ldr	r2, [r2, #0]
 800be6e:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	441a      	add	r2, r3
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	3320      	adds	r3, #32
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	68f9      	ldr	r1, [r7, #12]
 800be84:	440b      	add	r3, r1
 800be86:	6812      	ldr	r2, [r2, #0]
 800be88:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	441a      	add	r2, r3
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	3321      	adds	r3, #33	; 0x21
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	68f9      	ldr	r1, [r7, #12]
 800be9e:	440b      	add	r3, r1
 800bea0:	6812      	ldr	r2, [r2, #0]
 800bea2:	601a      	str	r2, [r3, #0]

        esk[i + 64] = esk[i    ];
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	441a      	add	r2, r3
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	3340      	adds	r3, #64	; 0x40
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	68f9      	ldr	r1, [r7, #12]
 800beb4:	440b      	add	r3, r1
 800beb6:	6812      	ldr	r2, [r2, #0]
 800beb8:	601a      	str	r2, [r3, #0]
        esk[i + 65] = esk[i + 1];
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	3301      	adds	r3, #1
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	441a      	add	r2, r3
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	3341      	adds	r3, #65	; 0x41
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	68f9      	ldr	r1, [r7, #12]
 800becc:	440b      	add	r3, r1
 800bece:	6812      	ldr	r2, [r2, #0]
 800bed0:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = dsk[i    ];
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	441a      	add	r2, r3
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	3340      	adds	r3, #64	; 0x40
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	68b9      	ldr	r1, [r7, #8]
 800bee2:	440b      	add	r3, r1
 800bee4:	6812      	ldr	r2, [r2, #0]
 800bee6:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = dsk[i + 1];
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	3301      	adds	r3, #1
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	441a      	add	r2, r3
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	3341      	adds	r3, #65	; 0x41
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	68b9      	ldr	r1, [r7, #8]
 800befa:	440b      	add	r3, r1
 800befc:	6812      	ldr	r2, [r2, #0]
 800befe:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 32; i += 2 )
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	3302      	adds	r3, #2
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b1f      	cmp	r3, #31
 800bf0a:	dd98      	ble.n	800be3e <des3_set2key+0x2c>
    }
}
 800bf0c:	bf00      	nop
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <mbedtls_des3_set2key_enc>:
/*
 * Triple-DES key schedule (112-bit, encryption)
 */
int mbedtls_des3_set2key_enc( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2] )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b0e2      	sub	sp, #392	; 0x188
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	1d3b      	adds	r3, r7, #4
 800bf1c:	6018      	str	r0, [r3, #0]
 800bf1e:	463b      	mov	r3, r7
 800bf20:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key( ctx->sk, sk, key );
 800bf22:	1d3b      	adds	r3, r7, #4
 800bf24:	6818      	ldr	r0, [r3, #0]
 800bf26:	463b      	mov	r3, r7
 800bf28:	f107 0108 	add.w	r1, r7, #8
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	f7ff ff70 	bl	800be12 <des3_set2key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 800bf32:	f107 0308 	add.w	r3, r7, #8
 800bf36:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f002 f9d8 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( 0 );
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <mbedtls_des3_set2key_dec>:
/*
 * Triple-DES key schedule (112-bit, decryption)
 */
int mbedtls_des3_set2key_dec( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 2] )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b0e2      	sub	sp, #392	; 0x188
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	1d3b      	adds	r3, r7, #4
 800bf54:	6018      	str	r0, [r3, #0]
 800bf56:	463b      	mov	r3, r7
 800bf58:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set2key( sk, ctx->sk, key );
 800bf5a:	1d3b      	adds	r3, r7, #4
 800bf5c:	6819      	ldr	r1, [r3, #0]
 800bf5e:	463b      	mov	r3, r7
 800bf60:	f107 0008 	add.w	r0, r7, #8
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	f7ff ff54 	bl	800be12 <des3_set2key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 800bf6a:	f107 0308 	add.w	r3, r7, #8
 800bf6e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800bf72:	4618      	mov	r0, r3
 800bf74:	f002 f9bc 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( 0 );
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <des3_set3key>:

static void des3_set3key( uint32_t esk[96],
                          uint32_t dsk[96],
                          const unsigned char key[24] )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
    int i;

    mbedtls_des_setkey( esk, key );
 800bf90:	6879      	ldr	r1, [r7, #4]
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f7ff fcea 	bl	800b96c <mbedtls_des_setkey>
    mbedtls_des_setkey( dsk + 32, key +  8 );
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	f7ff fce1 	bl	800b96c <mbedtls_des_setkey>
    mbedtls_des_setkey( esk + 64, key + 16 );
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f503 7280 	add.w	r2, r3, #256	; 0x100
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	3310      	adds	r3, #16
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	f7ff fcd8 	bl	800b96c <mbedtls_des_setkey>

    for( i = 0; i < 32; i += 2 )
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	617b      	str	r3, [r7, #20]
 800bfc0:	e04f      	b.n	800c062 <des3_set3key+0xde>
    {
        dsk[i     ] = esk[94 - i];
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	441a      	add	r2, r3
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	68b9      	ldr	r1, [r7, #8]
 800bfd4:	440b      	add	r3, r1
 800bfd6:	6812      	ldr	r2, [r2, #0]
 800bfd8:	601a      	str	r2, [r3, #0]
        dsk[i +  1] = esk[95 - i];
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	441a      	add	r2, r3
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	68b9      	ldr	r1, [r7, #8]
 800bfee:	440b      	add	r3, r1
 800bff0:	6812      	ldr	r2, [r2, #0]
 800bff2:	601a      	str	r2, [r3, #0]

        esk[i + 32] = dsk[62 - i];
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	f1c3 033e 	rsb	r3, r3, #62	; 0x3e
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	441a      	add	r2, r3
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	3320      	adds	r3, #32
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	68f9      	ldr	r1, [r7, #12]
 800c008:	440b      	add	r3, r1
 800c00a:	6812      	ldr	r2, [r2, #0]
 800c00c:	601a      	str	r2, [r3, #0]
        esk[i + 33] = dsk[63 - i];
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	441a      	add	r2, r3
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	3321      	adds	r3, #33	; 0x21
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	68f9      	ldr	r1, [r7, #12]
 800c022:	440b      	add	r3, r1
 800c024:	6812      	ldr	r2, [r2, #0]
 800c026:	601a      	str	r2, [r3, #0]

        dsk[i + 64] = esk[30 - i];
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	f1c3 031e 	rsb	r3, r3, #30
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	441a      	add	r2, r3
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	3340      	adds	r3, #64	; 0x40
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	68b9      	ldr	r1, [r7, #8]
 800c03c:	440b      	add	r3, r1
 800c03e:	6812      	ldr	r2, [r2, #0]
 800c040:	601a      	str	r2, [r3, #0]
        dsk[i + 65] = esk[31 - i];
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	f1c3 031f 	rsb	r3, r3, #31
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	441a      	add	r2, r3
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	3341      	adds	r3, #65	; 0x41
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	440b      	add	r3, r1
 800c058:	6812      	ldr	r2, [r2, #0]
 800c05a:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 32; i += 2 )
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	3302      	adds	r3, #2
 800c060:	617b      	str	r3, [r7, #20]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2b1f      	cmp	r3, #31
 800c066:	ddac      	ble.n	800bfc2 <des3_set3key+0x3e>
    }
}
 800c068:	bf00      	nop
 800c06a:	3718      	adds	r7, #24
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <mbedtls_des3_set3key_enc>:
/*
 * Triple-DES key schedule (168-bit, encryption)
 */
int mbedtls_des3_set3key_enc( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3] )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b0e2      	sub	sp, #392	; 0x188
 800c074:	af00      	add	r7, sp, #0
 800c076:	1d3b      	adds	r3, r7, #4
 800c078:	6018      	str	r0, [r3, #0]
 800c07a:	463b      	mov	r3, r7
 800c07c:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key( ctx->sk, sk, key );
 800c07e:	1d3b      	adds	r3, r7, #4
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	463b      	mov	r3, r7
 800c084:	f107 0108 	add.w	r1, r7, #8
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	f7ff ff7b 	bl	800bf84 <des3_set3key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 800c08e:	f107 0308 	add.w	r3, r7, #8
 800c092:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c096:	4618      	mov	r0, r3
 800c098:	f002 f92a 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( 0 );
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <mbedtls_des3_set3key_dec>:
/*
 * Triple-DES key schedule (168-bit, decryption)
 */
int mbedtls_des3_set3key_dec( mbedtls_des3_context *ctx,
                      const unsigned char key[MBEDTLS_DES_KEY_SIZE * 3] )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b0e2      	sub	sp, #392	; 0x188
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	1d3b      	adds	r3, r7, #4
 800c0b0:	6018      	str	r0, [r3, #0]
 800c0b2:	463b      	mov	r3, r7
 800c0b4:	6019      	str	r1, [r3, #0]
    uint32_t sk[96];

    des3_set3key( sk, ctx->sk, key );
 800c0b6:	1d3b      	adds	r3, r7, #4
 800c0b8:	6819      	ldr	r1, [r3, #0]
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	f107 0008 	add.w	r0, r7, #8
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	f7ff ff5f 	bl	800bf84 <des3_set3key>
    mbedtls_platform_zeroize( sk,  sizeof( sk ) );
 800c0c6:	f107 0308 	add.w	r3, r7, #8
 800c0ca:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f002 f90e 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( 0 );
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <mbedtls_des_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES_CRYPT_ECB_ALT)
int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
                    const unsigned char input[8],
                    unsigned char output[8] )
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b08b      	sub	sp, #44	; 0x2c
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	61bb      	str	r3, [r7, #24]

    GET_UINT32_BE( X, input, 0 );
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	061a      	lsls	r2, r3, #24
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	041b      	lsls	r3, r3, #16
 800c0fe:	431a      	orrs	r2, r3
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	3302      	adds	r3, #2
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	021b      	lsls	r3, r3, #8
 800c108:	4313      	orrs	r3, r2
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	3203      	adds	r2, #3
 800c10e:	7812      	ldrb	r2, [r2, #0]
 800c110:	4313      	orrs	r3, r2
 800c112:	623b      	str	r3, [r7, #32]
    GET_UINT32_BE( Y, input, 4 );
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	3304      	adds	r3, #4
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	061a      	lsls	r2, r3, #24
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	3305      	adds	r3, #5
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	041b      	lsls	r3, r3, #16
 800c124:	431a      	orrs	r2, r3
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	3306      	adds	r3, #6
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	021b      	lsls	r3, r3, #8
 800c12e:	4313      	orrs	r3, r2
 800c130:	68ba      	ldr	r2, [r7, #8]
 800c132:	3207      	adds	r2, #7
 800c134:	7812      	ldrb	r2, [r2, #0]
 800c136:	4313      	orrs	r3, r2
 800c138:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 800c13a:	6a3b      	ldr	r3, [r7, #32]
 800c13c:	091a      	lsrs	r2, r3, #4
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	4053      	eors	r3, r2
 800c142:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800c146:	617b      	str	r3, [r7, #20]
 800c148:	69fa      	ldr	r2, [r7, #28]
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	4053      	eors	r3, r2
 800c14e:	61fb      	str	r3, [r7, #28]
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	011b      	lsls	r3, r3, #4
 800c154:	6a3a      	ldr	r2, [r7, #32]
 800c156:	4053      	eors	r3, r2
 800c158:	623b      	str	r3, [r7, #32]
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	0c1a      	lsrs	r2, r3, #16
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	4053      	eors	r3, r2
 800c162:	b29b      	uxth	r3, r3
 800c164:	617b      	str	r3, [r7, #20]
 800c166:	69fa      	ldr	r2, [r7, #28]
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	4053      	eors	r3, r2
 800c16c:	61fb      	str	r3, [r7, #28]
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	041b      	lsls	r3, r3, #16
 800c172:	6a3a      	ldr	r2, [r7, #32]
 800c174:	4053      	eors	r3, r2
 800c176:	623b      	str	r3, [r7, #32]
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	089a      	lsrs	r2, r3, #2
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	4053      	eors	r3, r2
 800c180:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	6a3a      	ldr	r2, [r7, #32]
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	4053      	eors	r3, r2
 800c18c:	623b      	str	r3, [r7, #32]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	69fa      	ldr	r2, [r7, #28]
 800c194:	4053      	eors	r3, r2
 800c196:	61fb      	str	r3, [r7, #28]
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	0a1a      	lsrs	r2, r3, #8
 800c19c:	6a3b      	ldr	r3, [r7, #32]
 800c19e:	4053      	eors	r3, r2
 800c1a0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c1a4:	617b      	str	r3, [r7, #20]
 800c1a6:	6a3a      	ldr	r2, [r7, #32]
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	4053      	eors	r3, r2
 800c1ac:	623b      	str	r3, [r7, #32]
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	021b      	lsls	r3, r3, #8
 800c1b2:	69fa      	ldr	r2, [r7, #28]
 800c1b4:	4053      	eors	r3, r2
 800c1b6:	61fb      	str	r3, [r7, #28]
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c1be:	61fb      	str	r3, [r7, #28]
 800c1c0:	6a3a      	ldr	r2, [r7, #32]
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	4053      	eors	r3, r2
 800c1c6:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	69fa      	ldr	r2, [r7, #28]
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	4053      	eors	r3, r2
 800c1d2:	61fb      	str	r3, [r7, #28]
 800c1d4:	6a3a      	ldr	r2, [r7, #32]
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	4053      	eors	r3, r2
 800c1da:	623b      	str	r3, [r7, #32]
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c1e2:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1e8:	e0a6      	b.n	800c338 <mbedtls_des_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	1d1a      	adds	r2, r3, #4
 800c1ee:	61ba      	str	r2, [r7, #24]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	69fa      	ldr	r2, [r7, #28]
 800c1f4:	4053      	eors	r3, r2
 800c1f6:	617b      	str	r3, [r7, #20]
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1fe:	4a95      	ldr	r2, [pc, #596]	; (800c454 <mbedtls_des_crypt_ecb+0x374>)
 800c200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	0a1b      	lsrs	r3, r3, #8
 800c208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c20c:	4992      	ldr	r1, [pc, #584]	; (800c458 <mbedtls_des_crypt_ecb+0x378>)
 800c20e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c212:	405a      	eors	r2, r3
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	0c1b      	lsrs	r3, r3, #16
 800c218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c21c:	498f      	ldr	r1, [pc, #572]	; (800c45c <mbedtls_des_crypt_ecb+0x37c>)
 800c21e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c222:	405a      	eors	r2, r3
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	0e1b      	lsrs	r3, r3, #24
 800c228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c22c:	498c      	ldr	r1, [pc, #560]	; (800c460 <mbedtls_des_crypt_ecb+0x380>)
 800c22e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c232:	4053      	eors	r3, r2
 800c234:	6a3a      	ldr	r2, [r7, #32]
 800c236:	4053      	eors	r3, r2
 800c238:	623b      	str	r3, [r7, #32]
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	1d1a      	adds	r2, r3, #4
 800c23e:	61ba      	str	r2, [r7, #24]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	ea4f 1333 	mov.w	r3, r3, ror #4
 800c248:	4053      	eors	r3, r2
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c252:	4a84      	ldr	r2, [pc, #528]	; (800c464 <mbedtls_des_crypt_ecb+0x384>)
 800c254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	0a1b      	lsrs	r3, r3, #8
 800c25c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c260:	4981      	ldr	r1, [pc, #516]	; (800c468 <mbedtls_des_crypt_ecb+0x388>)
 800c262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c266:	405a      	eors	r2, r3
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	0c1b      	lsrs	r3, r3, #16
 800c26c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c270:	497e      	ldr	r1, [pc, #504]	; (800c46c <mbedtls_des_crypt_ecb+0x38c>)
 800c272:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c276:	405a      	eors	r2, r3
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	0e1b      	lsrs	r3, r3, #24
 800c27c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c280:	497b      	ldr	r1, [pc, #492]	; (800c470 <mbedtls_des_crypt_ecb+0x390>)
 800c282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c286:	4053      	eors	r3, r2
 800c288:	6a3a      	ldr	r2, [r7, #32]
 800c28a:	4053      	eors	r3, r2
 800c28c:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 800c28e:	69bb      	ldr	r3, [r7, #24]
 800c290:	1d1a      	adds	r2, r3, #4
 800c292:	61ba      	str	r2, [r7, #24]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	6a3a      	ldr	r2, [r7, #32]
 800c298:	4053      	eors	r3, r2
 800c29a:	617b      	str	r3, [r7, #20]
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2a2:	4a6c      	ldr	r2, [pc, #432]	; (800c454 <mbedtls_des_crypt_ecb+0x374>)
 800c2a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	0a1b      	lsrs	r3, r3, #8
 800c2ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2b0:	4969      	ldr	r1, [pc, #420]	; (800c458 <mbedtls_des_crypt_ecb+0x378>)
 800c2b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c2b6:	405a      	eors	r2, r3
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	0c1b      	lsrs	r3, r3, #16
 800c2bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2c0:	4966      	ldr	r1, [pc, #408]	; (800c45c <mbedtls_des_crypt_ecb+0x37c>)
 800c2c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c2c6:	405a      	eors	r2, r3
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	0e1b      	lsrs	r3, r3, #24
 800c2cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2d0:	4963      	ldr	r1, [pc, #396]	; (800c460 <mbedtls_des_crypt_ecb+0x380>)
 800c2d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c2d6:	4053      	eors	r3, r2
 800c2d8:	69fa      	ldr	r2, [r7, #28]
 800c2da:	4053      	eors	r3, r2
 800c2dc:	61fb      	str	r3, [r7, #28]
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	1d1a      	adds	r2, r3, #4
 800c2e2:	61ba      	str	r2, [r7, #24]
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	ea4f 1333 	mov.w	r3, r3, ror #4
 800c2ec:	4053      	eors	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2f6:	4a5b      	ldr	r2, [pc, #364]	; (800c464 <mbedtls_des_crypt_ecb+0x384>)
 800c2f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	0a1b      	lsrs	r3, r3, #8
 800c300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c304:	4958      	ldr	r1, [pc, #352]	; (800c468 <mbedtls_des_crypt_ecb+0x388>)
 800c306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c30a:	405a      	eors	r2, r3
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	0c1b      	lsrs	r3, r3, #16
 800c310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c314:	4955      	ldr	r1, [pc, #340]	; (800c46c <mbedtls_des_crypt_ecb+0x38c>)
 800c316:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c31a:	405a      	eors	r2, r3
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	0e1b      	lsrs	r3, r3, #24
 800c320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c324:	4952      	ldr	r1, [pc, #328]	; (800c470 <mbedtls_des_crypt_ecb+0x390>)
 800c326:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c32a:	4053      	eors	r3, r2
 800c32c:	69fa      	ldr	r2, [r7, #28]
 800c32e:	4053      	eors	r3, r2
 800c330:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	3301      	adds	r3, #1
 800c336:	627b      	str	r3, [r7, #36]	; 0x24
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	2b07      	cmp	r3, #7
 800c33c:	f77f af55 	ble.w	800c1ea <mbedtls_des_crypt_ecb+0x10a>
    }

    DES_FP( Y, X );
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	ea4f 0373 	mov.w	r3, r3, ror #1
 800c346:	61fb      	str	r3, [r7, #28]
 800c348:	69fa      	ldr	r2, [r7, #28]
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	4053      	eors	r3, r2
 800c34e:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800c352:	617b      	str	r3, [r7, #20]
 800c354:	69fa      	ldr	r2, [r7, #28]
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	4053      	eors	r3, r2
 800c35a:	61fb      	str	r3, [r7, #28]
 800c35c:	6a3a      	ldr	r2, [r7, #32]
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	4053      	eors	r3, r2
 800c362:	623b      	str	r3, [r7, #32]
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	ea4f 0373 	mov.w	r3, r3, ror #1
 800c36a:	623b      	str	r3, [r7, #32]
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	0a1a      	lsrs	r2, r3, #8
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	4053      	eors	r3, r2
 800c374:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c378:	617b      	str	r3, [r7, #20]
 800c37a:	69fa      	ldr	r2, [r7, #28]
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	4053      	eors	r3, r2
 800c380:	61fb      	str	r3, [r7, #28]
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	6a3a      	ldr	r2, [r7, #32]
 800c388:	4053      	eors	r3, r2
 800c38a:	623b      	str	r3, [r7, #32]
 800c38c:	6a3b      	ldr	r3, [r7, #32]
 800c38e:	089a      	lsrs	r2, r3, #2
 800c390:	69fb      	ldr	r3, [r7, #28]
 800c392:	4053      	eors	r3, r2
 800c394:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800c398:	617b      	str	r3, [r7, #20]
 800c39a:	69fa      	ldr	r2, [r7, #28]
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	4053      	eors	r3, r2
 800c3a0:	61fb      	str	r3, [r7, #28]
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	6a3a      	ldr	r2, [r7, #32]
 800c3a8:	4053      	eors	r3, r2
 800c3aa:	623b      	str	r3, [r7, #32]
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	0c1a      	lsrs	r2, r3, #16
 800c3b0:	6a3b      	ldr	r3, [r7, #32]
 800c3b2:	4053      	eors	r3, r2
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	6a3a      	ldr	r2, [r7, #32]
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	4053      	eors	r3, r2
 800c3be:	623b      	str	r3, [r7, #32]
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	041b      	lsls	r3, r3, #16
 800c3c4:	69fa      	ldr	r2, [r7, #28]
 800c3c6:	4053      	eors	r3, r2
 800c3c8:	61fb      	str	r3, [r7, #28]
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	091a      	lsrs	r2, r3, #4
 800c3ce:	6a3b      	ldr	r3, [r7, #32]
 800c3d0:	4053      	eors	r3, r2
 800c3d2:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800c3d6:	617b      	str	r3, [r7, #20]
 800c3d8:	6a3a      	ldr	r2, [r7, #32]
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	4053      	eors	r3, r2
 800c3de:	623b      	str	r3, [r7, #32]
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	011b      	lsls	r3, r3, #4
 800c3e4:	69fa      	ldr	r2, [r7, #28]
 800c3e6:	4053      	eors	r3, r2
 800c3e8:	61fb      	str	r3, [r7, #28]

    PUT_UINT32_BE( Y, output, 0 );
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	0e1b      	lsrs	r3, r3, #24
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	701a      	strb	r2, [r3, #0]
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	0c1a      	lsrs	r2, r3, #16
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	b2d2      	uxtb	r2, r2
 800c3fe:	701a      	strb	r2, [r3, #0]
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	0a1a      	lsrs	r2, r3, #8
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	3302      	adds	r3, #2
 800c408:	b2d2      	uxtb	r2, r2
 800c40a:	701a      	strb	r2, [r3, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3303      	adds	r3, #3
 800c410:	69fa      	ldr	r2, [r7, #28]
 800c412:	b2d2      	uxtb	r2, r2
 800c414:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X, output, 4 );
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	0e1a      	lsrs	r2, r3, #24
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	3304      	adds	r3, #4
 800c41e:	b2d2      	uxtb	r2, r2
 800c420:	701a      	strb	r2, [r3, #0]
 800c422:	6a3b      	ldr	r3, [r7, #32]
 800c424:	0c1a      	lsrs	r2, r3, #16
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3305      	adds	r3, #5
 800c42a:	b2d2      	uxtb	r2, r2
 800c42c:	701a      	strb	r2, [r3, #0]
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	0a1a      	lsrs	r2, r3, #8
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	3306      	adds	r3, #6
 800c436:	b2d2      	uxtb	r2, r2
 800c438:	701a      	strb	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	3307      	adds	r3, #7
 800c43e:	6a3a      	ldr	r2, [r7, #32]
 800c440:	b2d2      	uxtb	r2, r2
 800c442:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	372c      	adds	r7, #44	; 0x2c
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	08019a60 	.word	0x08019a60
 800c458:	08019860 	.word	0x08019860
 800c45c:	08019660 	.word	0x08019660
 800c460:	08019460 	.word	0x08019460
 800c464:	08019960 	.word	0x08019960
 800c468:	08019760 	.word	0x08019760
 800c46c:	08019560 	.word	0x08019560
 800c470:	08019360 	.word	0x08019360

0800c474 <mbedtls_des_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[8],
                    const unsigned char *input,
                    unsigned char *output )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b088      	sub	sp, #32
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
 800c480:	603b      	str	r3, [r7, #0]
    int i;
    unsigned char temp[8];

    if( length % 8 )
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f003 0307 	and.w	r3, r3, #7
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <mbedtls_des_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH );
 800c48c:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800c490:	e067      	b.n	800c562 <mbedtls_des_crypt_cbc+0xee>

    if( mode == MBEDTLS_DES_ENCRYPT )
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d160      	bne.n	800c55a <mbedtls_des_crypt_cbc+0xe6>
    {
        while( length > 0 )
 800c498:	e029      	b.n	800c4ee <mbedtls_des_crypt_cbc+0x7a>
        {
            for( i = 0; i < 8; i++ )
 800c49a:	2300      	movs	r3, #0
 800c49c:	61fb      	str	r3, [r7, #28]
 800c49e:	e010      	b.n	800c4c2 <mbedtls_des_crypt_cbc+0x4e>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4a4:	4413      	add	r3, r2
 800c4a6:	7819      	ldrb	r1, [r3, #0]
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	781a      	ldrb	r2, [r3, #0]
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4b4:	4403      	add	r3, r0
 800c4b6:	404a      	eors	r2, r1
 800c4b8:	b2d2      	uxtb	r2, r2
 800c4ba:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 8; i++ )
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	61fb      	str	r3, [r7, #28]
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	2b07      	cmp	r3, #7
 800c4c6:	ddeb      	ble.n	800c4a0 <mbedtls_des_crypt_cbc+0x2c>

            mbedtls_des_crypt_ecb( ctx, output, output );
 800c4c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f7ff fe07 	bl	800c0e0 <mbedtls_des_crypt_ecb>
            memcpy( iv, output, 8 );
 800c4d2:	2208      	movs	r2, #8
 800c4d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4d6:	6838      	ldr	r0, [r7, #0]
 800c4d8:	f008 fe1f 	bl	801511a <memcpy>

            input  += 8;
 800c4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4de:	3308      	adds	r3, #8
 800c4e0:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800c4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	3b08      	subs	r3, #8
 800c4ec:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1d2      	bne.n	800c49a <mbedtls_des_crypt_cbc+0x26>
 800c4f4:	e034      	b.n	800c560 <mbedtls_des_crypt_cbc+0xec>
    }
    else /* MBEDTLS_DES_DECRYPT */
    {
        while( length > 0 )
        {
            memcpy( temp, input, 8 );
 800c4f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4f8:	f107 0314 	add.w	r3, r7, #20
 800c4fc:	6810      	ldr	r0, [r2, #0]
 800c4fe:	6851      	ldr	r1, [r2, #4]
 800c500:	c303      	stmia	r3!, {r0, r1}
            mbedtls_des_crypt_ecb( ctx, input, output );
 800c502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f7ff fdea 	bl	800c0e0 <mbedtls_des_crypt_ecb>

            for( i = 0; i < 8; i++ )
 800c50c:	2300      	movs	r3, #0
 800c50e:	61fb      	str	r3, [r7, #28]
 800c510:	e010      	b.n	800c534 <mbedtls_des_crypt_cbc+0xc0>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c516:	4413      	add	r3, r2
 800c518:	7819      	ldrb	r1, [r3, #0]
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	4413      	add	r3, r2
 800c520:	781a      	ldrb	r2, [r3, #0]
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c526:	4403      	add	r3, r0
 800c528:	404a      	eors	r2, r1
 800c52a:	b2d2      	uxtb	r2, r2
 800c52c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 8; i++ )
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	3301      	adds	r3, #1
 800c532:	61fb      	str	r3, [r7, #28]
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	2b07      	cmp	r3, #7
 800c538:	ddeb      	ble.n	800c512 <mbedtls_des_crypt_cbc+0x9e>

            memcpy( iv, temp, 8 );
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	461a      	mov	r2, r3
 800c53e:	f107 0314 	add.w	r3, r7, #20
 800c542:	cb03      	ldmia	r3!, {r0, r1}
 800c544:	6010      	str	r0, [r2, #0]
 800c546:	6051      	str	r1, [r2, #4]

            input  += 8;
 800c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54a:	3308      	adds	r3, #8
 800c54c:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800c54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c550:	3308      	adds	r3, #8
 800c552:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	3b08      	subs	r3, #8
 800c558:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1ca      	bne.n	800c4f6 <mbedtls_des_crypt_cbc+0x82>
        }
    }

    return( 0 );
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3720      	adds	r7, #32
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
	...

0800c56c <mbedtls_des3_crypt_ecb>:
 */
#if !defined(MBEDTLS_DES3_CRYPT_ECB_ALT)
int mbedtls_des3_crypt_ecb( mbedtls_des3_context *ctx,
                     const unsigned char input[8],
                     unsigned char output[8] )
{
 800c56c:	b480      	push	{r7}
 800c56e:	b08b      	sub	sp, #44	; 0x2c
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t X, Y, T, *SK;

    SK = ctx->sk;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	61bb      	str	r3, [r7, #24]

    GET_UINT32_BE( X, input, 0 );
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	061a      	lsls	r2, r3, #24
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	3301      	adds	r3, #1
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	041b      	lsls	r3, r3, #16
 800c58a:	431a      	orrs	r2, r3
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	3302      	adds	r3, #2
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	021b      	lsls	r3, r3, #8
 800c594:	4313      	orrs	r3, r2
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	3203      	adds	r2, #3
 800c59a:	7812      	ldrb	r2, [r2, #0]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	623b      	str	r3, [r7, #32]
    GET_UINT32_BE( Y, input, 4 );
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	3304      	adds	r3, #4
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	061a      	lsls	r2, r3, #24
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	3305      	adds	r3, #5
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	041b      	lsls	r3, r3, #16
 800c5b0:	431a      	orrs	r2, r3
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	3306      	adds	r3, #6
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	021b      	lsls	r3, r3, #8
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	3207      	adds	r2, #7
 800c5c0:	7812      	ldrb	r2, [r2, #0]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	61fb      	str	r3, [r7, #28]

    DES_IP( X, Y );
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	091a      	lsrs	r2, r3, #4
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	4053      	eors	r3, r2
 800c5ce:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800c5d2:	617b      	str	r3, [r7, #20]
 800c5d4:	69fa      	ldr	r2, [r7, #28]
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	4053      	eors	r3, r2
 800c5da:	61fb      	str	r3, [r7, #28]
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	011b      	lsls	r3, r3, #4
 800c5e0:	6a3a      	ldr	r2, [r7, #32]
 800c5e2:	4053      	eors	r3, r2
 800c5e4:	623b      	str	r3, [r7, #32]
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	0c1a      	lsrs	r2, r3, #16
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	4053      	eors	r3, r2
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	617b      	str	r3, [r7, #20]
 800c5f2:	69fa      	ldr	r2, [r7, #28]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	4053      	eors	r3, r2
 800c5f8:	61fb      	str	r3, [r7, #28]
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	041b      	lsls	r3, r3, #16
 800c5fe:	6a3a      	ldr	r2, [r7, #32]
 800c600:	4053      	eors	r3, r2
 800c602:	623b      	str	r3, [r7, #32]
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	089a      	lsrs	r2, r3, #2
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	4053      	eors	r3, r2
 800c60c:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800c610:	617b      	str	r3, [r7, #20]
 800c612:	6a3a      	ldr	r2, [r7, #32]
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	4053      	eors	r3, r2
 800c618:	623b      	str	r3, [r7, #32]
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	69fa      	ldr	r2, [r7, #28]
 800c620:	4053      	eors	r3, r2
 800c622:	61fb      	str	r3, [r7, #28]
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	0a1a      	lsrs	r2, r3, #8
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	4053      	eors	r3, r2
 800c62c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c630:	617b      	str	r3, [r7, #20]
 800c632:	6a3a      	ldr	r2, [r7, #32]
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	4053      	eors	r3, r2
 800c638:	623b      	str	r3, [r7, #32]
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	021b      	lsls	r3, r3, #8
 800c63e:	69fa      	ldr	r2, [r7, #28]
 800c640:	4053      	eors	r3, r2
 800c642:	61fb      	str	r3, [r7, #28]
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c64a:	61fb      	str	r3, [r7, #28]
 800c64c:	6a3a      	ldr	r2, [r7, #32]
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	4053      	eors	r3, r2
 800c652:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800c656:	617b      	str	r3, [r7, #20]
 800c658:	69fa      	ldr	r2, [r7, #28]
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	4053      	eors	r3, r2
 800c65e:	61fb      	str	r3, [r7, #28]
 800c660:	6a3a      	ldr	r2, [r7, #32]
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	4053      	eors	r3, r2
 800c666:	623b      	str	r3, [r7, #32]
 800c668:	6a3b      	ldr	r3, [r7, #32]
 800c66a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800c66e:	623b      	str	r3, [r7, #32]

    for( i = 0; i < 8; i++ )
 800c670:	2300      	movs	r3, #0
 800c672:	627b      	str	r3, [r7, #36]	; 0x24
 800c674:	e0a6      	b.n	800c7c4 <mbedtls_des3_crypt_ecb+0x258>
    {
        DES_ROUND( Y, X );
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	1d1a      	adds	r2, r3, #4
 800c67a:	61ba      	str	r2, [r7, #24]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	69fa      	ldr	r2, [r7, #28]
 800c680:	4053      	eors	r3, r2
 800c682:	617b      	str	r3, [r7, #20]
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c68a:	4aa9      	ldr	r2, [pc, #676]	; (800c930 <mbedtls_des3_crypt_ecb+0x3c4>)
 800c68c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	0a1b      	lsrs	r3, r3, #8
 800c694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c698:	49a6      	ldr	r1, [pc, #664]	; (800c934 <mbedtls_des3_crypt_ecb+0x3c8>)
 800c69a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c69e:	405a      	eors	r2, r3
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	0c1b      	lsrs	r3, r3, #16
 800c6a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6a8:	49a3      	ldr	r1, [pc, #652]	; (800c938 <mbedtls_des3_crypt_ecb+0x3cc>)
 800c6aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c6ae:	405a      	eors	r2, r3
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	0e1b      	lsrs	r3, r3, #24
 800c6b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6b8:	49a0      	ldr	r1, [pc, #640]	; (800c93c <mbedtls_des3_crypt_ecb+0x3d0>)
 800c6ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c6be:	4053      	eors	r3, r2
 800c6c0:	6a3a      	ldr	r2, [r7, #32]
 800c6c2:	4053      	eors	r3, r2
 800c6c4:	623b      	str	r3, [r7, #32]
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	1d1a      	adds	r2, r3, #4
 800c6ca:	61ba      	str	r2, [r7, #24]
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	ea4f 1333 	mov.w	r3, r3, ror #4
 800c6d4:	4053      	eors	r3, r2
 800c6d6:	617b      	str	r3, [r7, #20]
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6de:	4a98      	ldr	r2, [pc, #608]	; (800c940 <mbedtls_des3_crypt_ecb+0x3d4>)
 800c6e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	0a1b      	lsrs	r3, r3, #8
 800c6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6ec:	4995      	ldr	r1, [pc, #596]	; (800c944 <mbedtls_des3_crypt_ecb+0x3d8>)
 800c6ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c6f2:	405a      	eors	r2, r3
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	0c1b      	lsrs	r3, r3, #16
 800c6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6fc:	4992      	ldr	r1, [pc, #584]	; (800c948 <mbedtls_des3_crypt_ecb+0x3dc>)
 800c6fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c702:	405a      	eors	r2, r3
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	0e1b      	lsrs	r3, r3, #24
 800c708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c70c:	498f      	ldr	r1, [pc, #572]	; (800c94c <mbedtls_des3_crypt_ecb+0x3e0>)
 800c70e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c712:	4053      	eors	r3, r2
 800c714:	6a3a      	ldr	r2, [r7, #32]
 800c716:	4053      	eors	r3, r2
 800c718:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	1d1a      	adds	r2, r3, #4
 800c71e:	61ba      	str	r2, [r7, #24]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	6a3a      	ldr	r2, [r7, #32]
 800c724:	4053      	eors	r3, r2
 800c726:	617b      	str	r3, [r7, #20]
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c72e:	4a80      	ldr	r2, [pc, #512]	; (800c930 <mbedtls_des3_crypt_ecb+0x3c4>)
 800c730:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	0a1b      	lsrs	r3, r3, #8
 800c738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c73c:	497d      	ldr	r1, [pc, #500]	; (800c934 <mbedtls_des3_crypt_ecb+0x3c8>)
 800c73e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c742:	405a      	eors	r2, r3
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	0c1b      	lsrs	r3, r3, #16
 800c748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c74c:	497a      	ldr	r1, [pc, #488]	; (800c938 <mbedtls_des3_crypt_ecb+0x3cc>)
 800c74e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c752:	405a      	eors	r2, r3
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	0e1b      	lsrs	r3, r3, #24
 800c758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c75c:	4977      	ldr	r1, [pc, #476]	; (800c93c <mbedtls_des3_crypt_ecb+0x3d0>)
 800c75e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c762:	4053      	eors	r3, r2
 800c764:	69fa      	ldr	r2, [r7, #28]
 800c766:	4053      	eors	r3, r2
 800c768:	61fb      	str	r3, [r7, #28]
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	1d1a      	adds	r2, r3, #4
 800c76e:	61ba      	str	r2, [r7, #24]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	6a3b      	ldr	r3, [r7, #32]
 800c774:	ea4f 1333 	mov.w	r3, r3, ror #4
 800c778:	4053      	eors	r3, r2
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c782:	4a6f      	ldr	r2, [pc, #444]	; (800c940 <mbedtls_des3_crypt_ecb+0x3d4>)
 800c784:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	0a1b      	lsrs	r3, r3, #8
 800c78c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c790:	496c      	ldr	r1, [pc, #432]	; (800c944 <mbedtls_des3_crypt_ecb+0x3d8>)
 800c792:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c796:	405a      	eors	r2, r3
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	0c1b      	lsrs	r3, r3, #16
 800c79c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7a0:	4969      	ldr	r1, [pc, #420]	; (800c948 <mbedtls_des3_crypt_ecb+0x3dc>)
 800c7a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7a6:	405a      	eors	r2, r3
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	0e1b      	lsrs	r3, r3, #24
 800c7ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7b0:	4966      	ldr	r1, [pc, #408]	; (800c94c <mbedtls_des3_crypt_ecb+0x3e0>)
 800c7b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7b6:	4053      	eors	r3, r2
 800c7b8:	69fa      	ldr	r2, [r7, #28]
 800c7ba:	4053      	eors	r3, r2
 800c7bc:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 800c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	2b07      	cmp	r3, #7
 800c7c8:	f77f af55 	ble.w	800c676 <mbedtls_des3_crypt_ecb+0x10a>
    }

    for( i = 0; i < 8; i++ )
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c7d0:	e0a6      	b.n	800c920 <mbedtls_des3_crypt_ecb+0x3b4>
    {
        DES_ROUND( X, Y );
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	1d1a      	adds	r2, r3, #4
 800c7d6:	61ba      	str	r2, [r7, #24]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6a3a      	ldr	r2, [r7, #32]
 800c7dc:	4053      	eors	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7e6:	4a52      	ldr	r2, [pc, #328]	; (800c930 <mbedtls_des3_crypt_ecb+0x3c4>)
 800c7e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	0a1b      	lsrs	r3, r3, #8
 800c7f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7f4:	494f      	ldr	r1, [pc, #316]	; (800c934 <mbedtls_des3_crypt_ecb+0x3c8>)
 800c7f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c7fa:	405a      	eors	r2, r3
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	0c1b      	lsrs	r3, r3, #16
 800c800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c804:	494c      	ldr	r1, [pc, #304]	; (800c938 <mbedtls_des3_crypt_ecb+0x3cc>)
 800c806:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c80a:	405a      	eors	r2, r3
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	0e1b      	lsrs	r3, r3, #24
 800c810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c814:	4949      	ldr	r1, [pc, #292]	; (800c93c <mbedtls_des3_crypt_ecb+0x3d0>)
 800c816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c81a:	4053      	eors	r3, r2
 800c81c:	69fa      	ldr	r2, [r7, #28]
 800c81e:	4053      	eors	r3, r2
 800c820:	61fb      	str	r3, [r7, #28]
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	1d1a      	adds	r2, r3, #4
 800c826:	61ba      	str	r2, [r7, #24]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	6a3b      	ldr	r3, [r7, #32]
 800c82c:	ea4f 1333 	mov.w	r3, r3, ror #4
 800c830:	4053      	eors	r3, r2
 800c832:	617b      	str	r3, [r7, #20]
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c83a:	4a41      	ldr	r2, [pc, #260]	; (800c940 <mbedtls_des3_crypt_ecb+0x3d4>)
 800c83c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	0a1b      	lsrs	r3, r3, #8
 800c844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c848:	493e      	ldr	r1, [pc, #248]	; (800c944 <mbedtls_des3_crypt_ecb+0x3d8>)
 800c84a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c84e:	405a      	eors	r2, r3
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	0c1b      	lsrs	r3, r3, #16
 800c854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c858:	493b      	ldr	r1, [pc, #236]	; (800c948 <mbedtls_des3_crypt_ecb+0x3dc>)
 800c85a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c85e:	405a      	eors	r2, r3
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	0e1b      	lsrs	r3, r3, #24
 800c864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c868:	4938      	ldr	r1, [pc, #224]	; (800c94c <mbedtls_des3_crypt_ecb+0x3e0>)
 800c86a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c86e:	4053      	eors	r3, r2
 800c870:	69fa      	ldr	r2, [r7, #28]
 800c872:	4053      	eors	r3, r2
 800c874:	61fb      	str	r3, [r7, #28]
        DES_ROUND( Y, X );
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	1d1a      	adds	r2, r3, #4
 800c87a:	61ba      	str	r2, [r7, #24]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	69fa      	ldr	r2, [r7, #28]
 800c880:	4053      	eors	r3, r2
 800c882:	617b      	str	r3, [r7, #20]
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c88a:	4a29      	ldr	r2, [pc, #164]	; (800c930 <mbedtls_des3_crypt_ecb+0x3c4>)
 800c88c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	0a1b      	lsrs	r3, r3, #8
 800c894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c898:	4926      	ldr	r1, [pc, #152]	; (800c934 <mbedtls_des3_crypt_ecb+0x3c8>)
 800c89a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c89e:	405a      	eors	r2, r3
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	0c1b      	lsrs	r3, r3, #16
 800c8a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8a8:	4923      	ldr	r1, [pc, #140]	; (800c938 <mbedtls_des3_crypt_ecb+0x3cc>)
 800c8aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8ae:	405a      	eors	r2, r3
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	0e1b      	lsrs	r3, r3, #24
 800c8b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8b8:	4920      	ldr	r1, [pc, #128]	; (800c93c <mbedtls_des3_crypt_ecb+0x3d0>)
 800c8ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8be:	4053      	eors	r3, r2
 800c8c0:	6a3a      	ldr	r2, [r7, #32]
 800c8c2:	4053      	eors	r3, r2
 800c8c4:	623b      	str	r3, [r7, #32]
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	1d1a      	adds	r2, r3, #4
 800c8ca:	61ba      	str	r2, [r7, #24]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	ea4f 1333 	mov.w	r3, r3, ror #4
 800c8d4:	4053      	eors	r3, r2
 800c8d6:	617b      	str	r3, [r7, #20]
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8de:	4a18      	ldr	r2, [pc, #96]	; (800c940 <mbedtls_des3_crypt_ecb+0x3d4>)
 800c8e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	0a1b      	lsrs	r3, r3, #8
 800c8e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8ec:	4915      	ldr	r1, [pc, #84]	; (800c944 <mbedtls_des3_crypt_ecb+0x3d8>)
 800c8ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8f2:	405a      	eors	r2, r3
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	0c1b      	lsrs	r3, r3, #16
 800c8f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8fc:	4912      	ldr	r1, [pc, #72]	; (800c948 <mbedtls_des3_crypt_ecb+0x3dc>)
 800c8fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c902:	405a      	eors	r2, r3
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	0e1b      	lsrs	r3, r3, #24
 800c908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c90c:	490f      	ldr	r1, [pc, #60]	; (800c94c <mbedtls_des3_crypt_ecb+0x3e0>)
 800c90e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c912:	4053      	eors	r3, r2
 800c914:	6a3a      	ldr	r2, [r7, #32]
 800c916:	4053      	eors	r3, r2
 800c918:	623b      	str	r3, [r7, #32]
    for( i = 0; i < 8; i++ )
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	3301      	adds	r3, #1
 800c91e:	627b      	str	r3, [r7, #36]	; 0x24
 800c920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c922:	2b07      	cmp	r3, #7
 800c924:	f77f af55 	ble.w	800c7d2 <mbedtls_des3_crypt_ecb+0x266>
    }

    for( i = 0; i < 8; i++ )
 800c928:	2300      	movs	r3, #0
 800c92a:	627b      	str	r3, [r7, #36]	; 0x24
 800c92c:	e0b7      	b.n	800ca9e <mbedtls_des3_crypt_ecb+0x532>
 800c92e:	bf00      	nop
 800c930:	08019a60 	.word	0x08019a60
 800c934:	08019860 	.word	0x08019860
 800c938:	08019660 	.word	0x08019660
 800c93c:	08019460 	.word	0x08019460
 800c940:	08019960 	.word	0x08019960
 800c944:	08019760 	.word	0x08019760
 800c948:	08019560 	.word	0x08019560
 800c94c:	08019360 	.word	0x08019360
    {
        DES_ROUND( Y, X );
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	1d1a      	adds	r2, r3, #4
 800c954:	61ba      	str	r2, [r7, #24]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	69fa      	ldr	r2, [r7, #28]
 800c95a:	4053      	eors	r3, r2
 800c95c:	617b      	str	r3, [r7, #20]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c964:	4a94      	ldr	r2, [pc, #592]	; (800cbb8 <mbedtls_des3_crypt_ecb+0x64c>)
 800c966:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	0a1b      	lsrs	r3, r3, #8
 800c96e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c972:	4992      	ldr	r1, [pc, #584]	; (800cbbc <mbedtls_des3_crypt_ecb+0x650>)
 800c974:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c978:	405a      	eors	r2, r3
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	0c1b      	lsrs	r3, r3, #16
 800c97e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c982:	498f      	ldr	r1, [pc, #572]	; (800cbc0 <mbedtls_des3_crypt_ecb+0x654>)
 800c984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c988:	405a      	eors	r2, r3
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	0e1b      	lsrs	r3, r3, #24
 800c98e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c992:	498c      	ldr	r1, [pc, #560]	; (800cbc4 <mbedtls_des3_crypt_ecb+0x658>)
 800c994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c998:	4053      	eors	r3, r2
 800c99a:	6a3a      	ldr	r2, [r7, #32]
 800c99c:	4053      	eors	r3, r2
 800c99e:	623b      	str	r3, [r7, #32]
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	1d1a      	adds	r2, r3, #4
 800c9a4:	61ba      	str	r2, [r7, #24]
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	ea4f 1333 	mov.w	r3, r3, ror #4
 800c9ae:	4053      	eors	r3, r2
 800c9b0:	617b      	str	r3, [r7, #20]
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9b8:	4a83      	ldr	r2, [pc, #524]	; (800cbc8 <mbedtls_des3_crypt_ecb+0x65c>)
 800c9ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	0a1b      	lsrs	r3, r3, #8
 800c9c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9c6:	4981      	ldr	r1, [pc, #516]	; (800cbcc <mbedtls_des3_crypt_ecb+0x660>)
 800c9c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9cc:	405a      	eors	r2, r3
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	0c1b      	lsrs	r3, r3, #16
 800c9d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9d6:	497e      	ldr	r1, [pc, #504]	; (800cbd0 <mbedtls_des3_crypt_ecb+0x664>)
 800c9d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9dc:	405a      	eors	r2, r3
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	0e1b      	lsrs	r3, r3, #24
 800c9e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9e6:	497b      	ldr	r1, [pc, #492]	; (800cbd4 <mbedtls_des3_crypt_ecb+0x668>)
 800c9e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c9ec:	4053      	eors	r3, r2
 800c9ee:	6a3a      	ldr	r2, [r7, #32]
 800c9f0:	4053      	eors	r3, r2
 800c9f2:	623b      	str	r3, [r7, #32]
        DES_ROUND( X, Y );
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	1d1a      	adds	r2, r3, #4
 800c9f8:	61ba      	str	r2, [r7, #24]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6a3a      	ldr	r2, [r7, #32]
 800c9fe:	4053      	eors	r3, r2
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca08:	4a6b      	ldr	r2, [pc, #428]	; (800cbb8 <mbedtls_des3_crypt_ecb+0x64c>)
 800ca0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	0a1b      	lsrs	r3, r3, #8
 800ca12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca16:	4969      	ldr	r1, [pc, #420]	; (800cbbc <mbedtls_des3_crypt_ecb+0x650>)
 800ca18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca1c:	405a      	eors	r2, r3
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	0c1b      	lsrs	r3, r3, #16
 800ca22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca26:	4966      	ldr	r1, [pc, #408]	; (800cbc0 <mbedtls_des3_crypt_ecb+0x654>)
 800ca28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca2c:	405a      	eors	r2, r3
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	0e1b      	lsrs	r3, r3, #24
 800ca32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca36:	4963      	ldr	r1, [pc, #396]	; (800cbc4 <mbedtls_des3_crypt_ecb+0x658>)
 800ca38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca3c:	4053      	eors	r3, r2
 800ca3e:	69fa      	ldr	r2, [r7, #28]
 800ca40:	4053      	eors	r3, r2
 800ca42:	61fb      	str	r3, [r7, #28]
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	1d1a      	adds	r2, r3, #4
 800ca48:	61ba      	str	r2, [r7, #24]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	ea4f 1333 	mov.w	r3, r3, ror #4
 800ca52:	4053      	eors	r3, r2
 800ca54:	617b      	str	r3, [r7, #20]
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca5c:	4a5a      	ldr	r2, [pc, #360]	; (800cbc8 <mbedtls_des3_crypt_ecb+0x65c>)
 800ca5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	0a1b      	lsrs	r3, r3, #8
 800ca66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca6a:	4958      	ldr	r1, [pc, #352]	; (800cbcc <mbedtls_des3_crypt_ecb+0x660>)
 800ca6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca70:	405a      	eors	r2, r3
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	0c1b      	lsrs	r3, r3, #16
 800ca76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca7a:	4955      	ldr	r1, [pc, #340]	; (800cbd0 <mbedtls_des3_crypt_ecb+0x664>)
 800ca7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca80:	405a      	eors	r2, r3
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	0e1b      	lsrs	r3, r3, #24
 800ca86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca8a:	4952      	ldr	r1, [pc, #328]	; (800cbd4 <mbedtls_des3_crypt_ecb+0x668>)
 800ca8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca90:	4053      	eors	r3, r2
 800ca92:	69fa      	ldr	r2, [r7, #28]
 800ca94:	4053      	eors	r3, r2
 800ca96:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < 8; i++ )
 800ca98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa0:	2b07      	cmp	r3, #7
 800caa2:	f77f af55 	ble.w	800c950 <mbedtls_des3_crypt_ecb+0x3e4>
    }

    DES_FP( Y, X );
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	ea4f 0373 	mov.w	r3, r3, ror #1
 800caac:	61fb      	str	r3, [r7, #28]
 800caae:	69fa      	ldr	r2, [r7, #28]
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	4053      	eors	r3, r2
 800cab4:	f003 33aa 	and.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800cab8:	617b      	str	r3, [r7, #20]
 800caba:	69fa      	ldr	r2, [r7, #28]
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	4053      	eors	r3, r2
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	6a3a      	ldr	r2, [r7, #32]
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	4053      	eors	r3, r2
 800cac8:	623b      	str	r3, [r7, #32]
 800caca:	6a3b      	ldr	r3, [r7, #32]
 800cacc:	ea4f 0373 	mov.w	r3, r3, ror #1
 800cad0:	623b      	str	r3, [r7, #32]
 800cad2:	6a3b      	ldr	r3, [r7, #32]
 800cad4:	0a1a      	lsrs	r2, r3, #8
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	4053      	eors	r3, r2
 800cada:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800cade:	617b      	str	r3, [r7, #20]
 800cae0:	69fa      	ldr	r2, [r7, #28]
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	4053      	eors	r3, r2
 800cae6:	61fb      	str	r3, [r7, #28]
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	021b      	lsls	r3, r3, #8
 800caec:	6a3a      	ldr	r2, [r7, #32]
 800caee:	4053      	eors	r3, r2
 800caf0:	623b      	str	r3, [r7, #32]
 800caf2:	6a3b      	ldr	r3, [r7, #32]
 800caf4:	089a      	lsrs	r2, r3, #2
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	4053      	eors	r3, r2
 800cafa:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800cafe:	617b      	str	r3, [r7, #20]
 800cb00:	69fa      	ldr	r2, [r7, #28]
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	4053      	eors	r3, r2
 800cb06:	61fb      	str	r3, [r7, #28]
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	6a3a      	ldr	r2, [r7, #32]
 800cb0e:	4053      	eors	r3, r2
 800cb10:	623b      	str	r3, [r7, #32]
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	0c1a      	lsrs	r2, r3, #16
 800cb16:	6a3b      	ldr	r3, [r7, #32]
 800cb18:	4053      	eors	r3, r2
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	617b      	str	r3, [r7, #20]
 800cb1e:	6a3a      	ldr	r2, [r7, #32]
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	4053      	eors	r3, r2
 800cb24:	623b      	str	r3, [r7, #32]
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	041b      	lsls	r3, r3, #16
 800cb2a:	69fa      	ldr	r2, [r7, #28]
 800cb2c:	4053      	eors	r3, r2
 800cb2e:	61fb      	str	r3, [r7, #28]
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	091a      	lsrs	r2, r3, #4
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	4053      	eors	r3, r2
 800cb38:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
 800cb3c:	617b      	str	r3, [r7, #20]
 800cb3e:	6a3a      	ldr	r2, [r7, #32]
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	4053      	eors	r3, r2
 800cb44:	623b      	str	r3, [r7, #32]
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	011b      	lsls	r3, r3, #4
 800cb4a:	69fa      	ldr	r2, [r7, #28]
 800cb4c:	4053      	eors	r3, r2
 800cb4e:	61fb      	str	r3, [r7, #28]

    PUT_UINT32_BE( Y, output, 0 );
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	0e1b      	lsrs	r3, r3, #24
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	701a      	strb	r2, [r3, #0]
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	0c1a      	lsrs	r2, r3, #16
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3301      	adds	r3, #1
 800cb62:	b2d2      	uxtb	r2, r2
 800cb64:	701a      	strb	r2, [r3, #0]
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	0a1a      	lsrs	r2, r3, #8
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3302      	adds	r3, #2
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	3303      	adds	r3, #3
 800cb76:	69fa      	ldr	r2, [r7, #28]
 800cb78:	b2d2      	uxtb	r2, r2
 800cb7a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X, output, 4 );
 800cb7c:	6a3b      	ldr	r3, [r7, #32]
 800cb7e:	0e1a      	lsrs	r2, r3, #24
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	3304      	adds	r3, #4
 800cb84:	b2d2      	uxtb	r2, r2
 800cb86:	701a      	strb	r2, [r3, #0]
 800cb88:	6a3b      	ldr	r3, [r7, #32]
 800cb8a:	0c1a      	lsrs	r2, r3, #16
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	3305      	adds	r3, #5
 800cb90:	b2d2      	uxtb	r2, r2
 800cb92:	701a      	strb	r2, [r3, #0]
 800cb94:	6a3b      	ldr	r3, [r7, #32]
 800cb96:	0a1a      	lsrs	r2, r3, #8
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	3306      	adds	r3, #6
 800cb9c:	b2d2      	uxtb	r2, r2
 800cb9e:	701a      	strb	r2, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3307      	adds	r3, #7
 800cba4:	6a3a      	ldr	r2, [r7, #32]
 800cba6:	b2d2      	uxtb	r2, r2
 800cba8:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	372c      	adds	r7, #44	; 0x2c
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr
 800cbb8:	08019a60 	.word	0x08019a60
 800cbbc:	08019860 	.word	0x08019860
 800cbc0:	08019660 	.word	0x08019660
 800cbc4:	08019460 	.word	0x08019460
 800cbc8:	08019960 	.word	0x08019960
 800cbcc:	08019760 	.word	0x08019760
 800cbd0:	08019560 	.word	0x08019560
 800cbd4:	08019360 	.word	0x08019360

0800cbd8 <mbedtls_des3_crypt_cbc>:
                     int mode,
                     size_t length,
                     unsigned char iv[8],
                     const unsigned char *input,
                     unsigned char *output )
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b088      	sub	sp, #32
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	603b      	str	r3, [r7, #0]
    int i;
    unsigned char temp[8];

    if( length % 8 )
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f003 0307 	and.w	r3, r3, #7
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d002      	beq.n	800cbf6 <mbedtls_des3_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH );
 800cbf0:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800cbf4:	e067      	b.n	800ccc6 <mbedtls_des3_crypt_cbc+0xee>

    if( mode == MBEDTLS_DES_ENCRYPT )
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d160      	bne.n	800ccbe <mbedtls_des3_crypt_cbc+0xe6>
    {
        while( length > 0 )
 800cbfc:	e029      	b.n	800cc52 <mbedtls_des3_crypt_cbc+0x7a>
        {
            for( i = 0; i < 8; i++ )
 800cbfe:	2300      	movs	r3, #0
 800cc00:	61fb      	str	r3, [r7, #28]
 800cc02:	e010      	b.n	800cc26 <mbedtls_des3_crypt_cbc+0x4e>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800cc04:	69fb      	ldr	r3, [r7, #28]
 800cc06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc08:	4413      	add	r3, r2
 800cc0a:	7819      	ldrb	r1, [r3, #0]
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	4413      	add	r3, r2
 800cc12:	781a      	ldrb	r2, [r3, #0]
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc18:	4403      	add	r3, r0
 800cc1a:	404a      	eors	r2, r1
 800cc1c:	b2d2      	uxtb	r2, r2
 800cc1e:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 8; i++ )
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	3301      	adds	r3, #1
 800cc24:	61fb      	str	r3, [r7, #28]
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	2b07      	cmp	r3, #7
 800cc2a:	ddeb      	ble.n	800cc04 <mbedtls_des3_crypt_cbc+0x2c>

            mbedtls_des3_crypt_ecb( ctx, output, output );
 800cc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff fc9b 	bl	800c56c <mbedtls_des3_crypt_ecb>
            memcpy( iv, output, 8 );
 800cc36:	2208      	movs	r2, #8
 800cc38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc3a:	6838      	ldr	r0, [r7, #0]
 800cc3c:	f008 fa6d 	bl	801511a <memcpy>

            input  += 8;
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	3308      	adds	r3, #8
 800cc44:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800cc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc48:	3308      	adds	r3, #8
 800cc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	3b08      	subs	r3, #8
 800cc50:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d1d2      	bne.n	800cbfe <mbedtls_des3_crypt_cbc+0x26>
 800cc58:	e034      	b.n	800ccc4 <mbedtls_des3_crypt_cbc+0xec>
    }
    else /* MBEDTLS_DES_DECRYPT */
    {
        while( length > 0 )
        {
            memcpy( temp, input, 8 );
 800cc5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc5c:	f107 0314 	add.w	r3, r7, #20
 800cc60:	6810      	ldr	r0, [r2, #0]
 800cc62:	6851      	ldr	r1, [r2, #4]
 800cc64:	c303      	stmia	r3!, {r0, r1}
            mbedtls_des3_crypt_ecb( ctx, input, output );
 800cc66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f7ff fc7e 	bl	800c56c <mbedtls_des3_crypt_ecb>

            for( i = 0; i < 8; i++ )
 800cc70:	2300      	movs	r3, #0
 800cc72:	61fb      	str	r3, [r7, #28]
 800cc74:	e010      	b.n	800cc98 <mbedtls_des3_crypt_cbc+0xc0>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc7a:	4413      	add	r3, r2
 800cc7c:	7819      	ldrb	r1, [r3, #0]
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	4413      	add	r3, r2
 800cc84:	781a      	ldrb	r2, [r3, #0]
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc8a:	4403      	add	r3, r0
 800cc8c:	404a      	eors	r2, r1
 800cc8e:	b2d2      	uxtb	r2, r2
 800cc90:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 8; i++ )
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	3301      	adds	r3, #1
 800cc96:	61fb      	str	r3, [r7, #28]
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	2b07      	cmp	r3, #7
 800cc9c:	ddeb      	ble.n	800cc76 <mbedtls_des3_crypt_cbc+0x9e>

            memcpy( iv, temp, 8 );
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	461a      	mov	r2, r3
 800cca2:	f107 0314 	add.w	r3, r7, #20
 800cca6:	cb03      	ldmia	r3!, {r0, r1}
 800cca8:	6010      	str	r0, [r2, #0]
 800ccaa:	6051      	str	r1, [r2, #4]

            input  += 8;
 800ccac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccae:	3308      	adds	r3, #8
 800ccb0:	62bb      	str	r3, [r7, #40]	; 0x28
            output += 8;
 800ccb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	62fb      	str	r3, [r7, #44]	; 0x2c
            length -= 8;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3b08      	subs	r3, #8
 800ccbc:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1ca      	bne.n	800cc5a <mbedtls_des3_crypt_cbc+0x82>
        }
    }

    return( 0 );
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3720      	adds	r7, #32
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
	...

0800ccd0 <mbedtls_entropy_init>:


#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	6078      	str	r0, [r7, #4]
    ctx->source_count = 0;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	33e4      	adds	r3, #228	; 0xe4
 800cce4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cce8:	2100      	movs	r1, #0
 800ccea:	4618      	mov	r0, r3
 800ccec:	f008 fa39 	bl	8015162 <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f005 fc0c 	bl	8012518 <mbedtls_sha512_init>
    mbedtls_entropy_add_source( ctx, mbedtls_hardware_poll, NULL,
                                MBEDTLS_ENTROPY_MIN_HARDWARE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
#endif
#if defined(MBEDTLS_ENTROPY_NV_SEED)
    mbedtls_entropy_add_source( ctx, mbedtls_nv_seed_poll, NULL,
 800cd00:	2301      	movs	r3, #1
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	2340      	movs	r3, #64	; 0x40
 800cd06:	2200      	movs	r2, #0
 800cd08:	4905      	ldr	r1, [pc, #20]	; (800cd20 <mbedtls_entropy_init+0x50>)
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f830 	bl	800cd70 <mbedtls_entropy_add_source>
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
    ctx->initial_entropy_run = 0;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 800cd18:	bf00      	nop
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	0800d255 	.word	0x0800d255

0800cd24 <mbedtls_entropy_free>:

void mbedtls_entropy_free( mbedtls_entropy_context *ctx )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
    /* If the context was already free, don't call free() again.
     * This is important for mutexes which don't allow double-free. */
    if( ctx->accumulator_started == -1 )
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd34:	d018      	beq.n	800cd68 <mbedtls_entropy_free+0x44>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_free( &ctx->accumulator );
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	3308      	adds	r3, #8
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f005 fbf9 	bl	8012532 <mbedtls_sha512_free>
#else
    mbedtls_sha256_free( &ctx->accumulator );
#endif
#if defined(MBEDTLS_ENTROPY_NV_SEED)
    ctx->initial_entropy_run = 0;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
#endif
    ctx->source_count = 0;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	33e4      	adds	r3, #228	; 0xe4
 800cd54:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f001 fac9 	bl	800e2f0 <mbedtls_platform_zeroize>
    ctx->accumulator_started = -1;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd64:	601a      	str	r2, [r3, #0]
 800cd66:	e000      	b.n	800cd6a <mbedtls_entropy_free+0x46>
        return;
 800cd68:	bf00      	nop
}
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <mbedtls_entropy_add_source>:

int mbedtls_entropy_add_source( mbedtls_entropy_context *ctx,
                        mbedtls_entropy_f_source_ptr f_source, void *p_source,
                        size_t threshold, int strong )
{
 800cd70:	b480      	push	{r7}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
    int idx, ret = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    idx = ctx->source_count;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd88:	613b      	str	r3, [r7, #16]
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	2b13      	cmp	r3, #19
 800cd8e:	dd03      	ble.n	800cd98 <mbedtls_entropy_add_source+0x28>
    {
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
 800cd90:	f06f 033d 	mvn.w	r3, #61	; 0x3d
 800cd94:	617b      	str	r3, [r7, #20]
        goto exit;
 800cd96:	e02e      	b.n	800cdf6 <mbedtls_entropy_add_source+0x86>
    }

    ctx->source[idx].f_source  = f_source;
 800cd98:	68f9      	ldr	r1, [r7, #12]
 800cd9a:	693a      	ldr	r2, [r7, #16]
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	440b      	add	r3, r1
 800cda6:	33e4      	adds	r3, #228	; 0xe4
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	601a      	str	r2, [r3, #0]
    ctx->source[idx].p_source  = p_source;
 800cdac:	68f9      	ldr	r1, [r7, #12]
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	440b      	add	r3, r1
 800cdba:	33e8      	adds	r3, #232	; 0xe8
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	601a      	str	r2, [r3, #0]
    ctx->source[idx].threshold = threshold;
 800cdc0:	68f9      	ldr	r1, [r7, #12]
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	4613      	mov	r3, r2
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	4413      	add	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	440b      	add	r3, r1
 800cdce:	33f0      	adds	r3, #240	; 0xf0
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	601a      	str	r2, [r3, #0]
    ctx->source[idx].strong    = strong;
 800cdd4:	68f9      	ldr	r1, [r7, #12]
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	4413      	add	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	440b      	add	r3, r1
 800cde2:	33f4      	adds	r3, #244	; 0xf4
 800cde4:	6a3a      	ldr	r2, [r7, #32]
 800cde6:	601a      	str	r2, [r3, #0]

    ctx->source_count++;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800cdf6:	697b      	ldr	r3, [r7, #20]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	371c      	adds	r7, #28
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b098      	sub	sp, #96	; 0x60
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	607a      	str	r2, [r7, #4]
 800ce0e:	603b      	str	r3, [r7, #0]
 800ce10:	460b      	mov	r3, r1
 800ce12:	72fb      	strb	r3, [r7, #11]
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	65fb      	str	r3, [r7, #92]	; 0x5c
    const unsigned char *p = data;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	65bb      	str	r3, [r7, #88]	; 0x58
    int ret = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	657b      	str	r3, [r7, #84]	; 0x54

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 800ce20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce22:	2b40      	cmp	r3, #64	; 0x40
 800ce24:	d90f      	bls.n	800ce46 <entropy_update+0x42>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 800ce26:	f107 0210 	add.w	r2, r7, #16
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	6839      	ldr	r1, [r7, #0]
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f007 fcb3 	bl	801479a <mbedtls_sha512_ret>
 800ce34:	6578      	str	r0, [r7, #84]	; 0x54
 800ce36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d131      	bne.n	800cea0 <entropy_update+0x9c>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 800ce3c:	f107 0310 	add.w	r3, r7, #16
 800ce40:	65bb      	str	r3, [r7, #88]	; 0x58
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 800ce42:	2340      	movs	r3, #64	; 0x40
 800ce44:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    header[0] = source_id;
 800ce46:	7afb      	ldrb	r3, [r7, #11]
 800ce48:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    header[1] = use_len & 0xFF;
 800ce4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d109      	bne.n	800ce70 <entropy_update+0x6c>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3308      	adds	r3, #8
    if( ctx->accumulator_started == 0 &&
 800ce60:	2100      	movs	r1, #0
 800ce62:	4618      	mov	r0, r3
 800ce64:	f005 fb78 	bl	8012558 <mbedtls_sha512_starts_ret>
 800ce68:	6578      	str	r0, [r7, #84]	; 0x54
 800ce6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d119      	bne.n	800cea4 <entropy_update+0xa0>
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2201      	movs	r2, #1
 800ce74:	601a      	str	r2, [r3, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3308      	adds	r3, #8
 800ce7a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ce7e:	2202      	movs	r2, #2
 800ce80:	4618      	mov	r0, r3
 800ce82:	f006 ff7f 	bl	8013d84 <mbedtls_sha512_update_ret>
 800ce86:	6578      	str	r0, [r7, #84]	; 0x54
 800ce88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d10c      	bne.n	800cea8 <entropy_update+0xa4>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3308      	adds	r3, #8
 800ce92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce96:	4618      	mov	r0, r3
 800ce98:	f006 ff74 	bl	8013d84 <mbedtls_sha512_update_ret>
 800ce9c:	6578      	str	r0, [r7, #84]	; 0x54
 800ce9e:	e004      	b.n	800ceaa <entropy_update+0xa6>
            goto cleanup;
 800cea0:	bf00      	nop
 800cea2:	e002      	b.n	800ceaa <entropy_update+0xa6>
    if( ( ret = mbedtls_sha256_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
 800cea4:	bf00      	nop
 800cea6:	e000      	b.n	800ceaa <entropy_update+0xa6>
        goto cleanup;
 800cea8:	bf00      	nop
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 800ceaa:	f107 0310 	add.w	r3, r7, #16
 800ceae:	2140      	movs	r1, #64	; 0x40
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f001 fa1d 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( ret );
 800ceb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3760      	adds	r7, #96	; 0x60
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <mbedtls_entropy_update_manual>:

int mbedtls_entropy_update_manual( mbedtls_entropy_context *ctx,
                           const unsigned char *data, size_t len )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800cecc:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800ced0:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = entropy_update( ctx, MBEDTLS_ENTROPY_SOURCE_MANUAL, data, len );
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	2114      	movs	r1, #20
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f7ff ff93 	bl	800ce04 <entropy_update>
 800cede:	6178      	str	r0, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800cee0:	697b      	ldr	r3, [r7, #20]
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3718      	adds	r7, #24
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 800ceea:	b590      	push	{r4, r7, lr}
 800ceec:	b0a7      	sub	sp, #156	; 0x9c
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800cef2:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800cef6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int i;
    int have_one_strong = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d102      	bne.n	800cf10 <entropy_gather_internal+0x26>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 800cf0a:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 800cf0e:	e07f      	b.n	800d010 <entropy_gather_internal+0x126>

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 800cf10:	2300      	movs	r3, #0
 800cf12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cf16:	e060      	b.n	800cfda <entropy_gather_internal+0xf0>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 800cf18:	6879      	ldr	r1, [r7, #4]
 800cf1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cf1e:	4613      	mov	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	4413      	add	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	440b      	add	r3, r1
 800cf28:	33f4      	adds	r3, #244	; 0xf4
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d102      	bne.n	800cf36 <entropy_gather_internal+0x4c>
            have_one_strong = 1;
 800cf30:	2301      	movs	r3, #1
 800cf32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

        olen = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	60bb      	str	r3, [r7, #8]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	440b      	add	r3, r1
 800cf4a:	33e4      	adds	r3, #228	; 0xe4
 800cf4c:	681c      	ldr	r4, [r3, #0]
 800cf4e:	6879      	ldr	r1, [r7, #4]
 800cf50:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cf54:	4613      	mov	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	440b      	add	r3, r1
 800cf5e:	33e8      	adds	r3, #232	; 0xe8
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	f107 0308 	add.w	r3, r7, #8
 800cf66:	f107 010c 	add.w	r1, r7, #12
 800cf6a:	2280      	movs	r2, #128	; 0x80
 800cf6c:	47a0      	blx	r4
 800cf6e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800cf72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d13f      	bne.n	800cffa <entropy_gather_internal+0x110>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d027      	beq.n	800cfd0 <entropy_gather_internal+0xe6>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 800cf80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cf84:	b2d9      	uxtb	r1, r3
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	f107 020c 	add.w	r2, r7, #12
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7ff ff39 	bl	800ce04 <entropy_update>
 800cf92:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 800cf96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d002      	beq.n	800cfa4 <entropy_gather_internal+0xba>
                                        buf, olen ) ) != 0 )
                return( ret );
 800cf9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cfa2:	e035      	b.n	800d010 <entropy_gather_internal+0x126>
            ctx->source[i].size += olen;
 800cfa4:	6879      	ldr	r1, [r7, #4]
 800cfa6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cfaa:	4613      	mov	r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	4413      	add	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	440b      	add	r3, r1
 800cfb4:	33ec      	adds	r3, #236	; 0xec
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	18d1      	adds	r1, r2, r3
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	4413      	add	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4403      	add	r3, r0
 800cfcc:	33ec      	adds	r3, #236	; 0xec
 800cfce:	6019      	str	r1, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 800cfd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cfe0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	db97      	blt.n	800cf18 <entropy_gather_internal+0x2e>
        }
    }

    if( have_one_strong == 0 )
 800cfe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d106      	bne.n	800cffe <entropy_gather_internal+0x114>
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 800cff0:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 800cff4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cff8:	e002      	b.n	800d000 <entropy_gather_internal+0x116>
            goto cleanup;
 800cffa:	bf00      	nop
 800cffc:	e000      	b.n	800d000 <entropy_gather_internal+0x116>

cleanup:
 800cffe:	bf00      	nop
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800d000:	f107 030c 	add.w	r3, r7, #12
 800d004:	2180      	movs	r1, #128	; 0x80
 800d006:	4618      	mov	r0, r3
 800d008:	f001 f972 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( ret );
 800d00c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
}
 800d010:	4618      	mov	r0, r3
 800d012:	379c      	adds	r7, #156	; 0x9c
 800d014:	46bd      	mov	sp, r7
 800d016:	bd90      	pop	{r4, r7, pc}

0800d018 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b09a      	sub	sp, #104	; 0x68
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
    int ret, count = 0, i, thresholds_reached;
 800d024:	2300      	movs	r3, #0
 800d026:	663b      	str	r3, [r7, #96]	; 0x60
    size_t strong_size;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	653b      	str	r3, [r7, #80]	; 0x50
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b40      	cmp	r3, #64	; 0x40
 800d030:	d902      	bls.n	800d038 <mbedtls_entropy_func+0x20>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 800d032:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800d036:	e0d5      	b.n	800d1e4 <mbedtls_entropy_func+0x1cc>

#if defined(MBEDTLS_ENTROPY_NV_SEED)
    /* Update the NV entropy seed before generating any entropy for outside
     * use.
     */
    if( ctx->initial_entropy_run == 0 )
 800d038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d03a:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10c      	bne.n	800d05c <mbedtls_entropy_func+0x44>
    {
        ctx->initial_entropy_run = 1;
 800d042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d044:	2201      	movs	r2, #1
 800d046:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
        if( ( ret = mbedtls_entropy_update_nv_seed( ctx ) ) != 0 )
 800d04a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d04c:	f000 f8ce 	bl	800d1ec <mbedtls_entropy_update_nv_seed>
 800d050:	6678      	str	r0, [r7, #100]	; 0x64
 800d052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <mbedtls_entropy_func+0x44>
            return( ret );
 800d058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d05a:	e0c3      	b.n	800d1e4 <mbedtls_entropy_func+0x1cc>
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 800d05c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d05e:	1c5a      	adds	r2, r3, #1
 800d060:	663a      	str	r2, [r7, #96]	; 0x60
 800d062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d066:	dd03      	ble.n	800d070 <mbedtls_entropy_func+0x58>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 800d068:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800d06c:	667b      	str	r3, [r7, #100]	; 0x64
            goto exit;
 800d06e:	e0b2      	b.n	800d1d6 <mbedtls_entropy_func+0x1be>
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 800d070:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d072:	f7ff ff3a 	bl	800ceea <entropy_gather_internal>
 800d076:	6678      	str	r0, [r7, #100]	; 0x64
 800d078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f040 80a2 	bne.w	800d1c4 <mbedtls_entropy_func+0x1ac>
            goto exit;

        thresholds_reached = 1;
 800d080:	2301      	movs	r3, #1
 800d082:	65bb      	str	r3, [r7, #88]	; 0x58
        strong_size = 0;
 800d084:	2300      	movs	r3, #0
 800d086:	657b      	str	r3, [r7, #84]	; 0x54
        for( i = 0; i < ctx->source_count; i++ )
 800d088:	2300      	movs	r3, #0
 800d08a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d08c:	e02f      	b.n	800d0ee <mbedtls_entropy_func+0xd6>
        {
            if( ctx->source[i].size < ctx->source[i].threshold )
 800d08e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d090:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d092:	4613      	mov	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	440b      	add	r3, r1
 800d09c:	33ec      	adds	r3, #236	; 0xec
 800d09e:	6819      	ldr	r1, [r3, #0]
 800d0a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d0a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	4413      	add	r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	4403      	add	r3, r0
 800d0ae:	33f0      	adds	r3, #240	; 0xf0
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4299      	cmp	r1, r3
 800d0b4:	d201      	bcs.n	800d0ba <mbedtls_entropy_func+0xa2>
                thresholds_reached = 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	65bb      	str	r3, [r7, #88]	; 0x58
            if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 800d0ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0be:	4613      	mov	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	4413      	add	r3, r2
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	440b      	add	r3, r1
 800d0c8:	33f4      	adds	r3, #244	; 0xf4
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d10b      	bne.n	800d0e8 <mbedtls_entropy_func+0xd0>
                strong_size += ctx->source[i].size;
 800d0d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4413      	add	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	440b      	add	r3, r1
 800d0de:	33ec      	adds	r3, #236	; 0xec
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0e4:	4413      	add	r3, r2
 800d0e6:	657b      	str	r3, [r7, #84]	; 0x54
        for( i = 0; i < ctx->source_count; i++ )
 800d0e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d0f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	dbc9      	blt.n	800d08e <mbedtls_entropy_func+0x76>
        }
    }
    while( ! thresholds_reached || strong_size < MBEDTLS_ENTROPY_BLOCK_SIZE );
 800d0fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d0ad      	beq.n	800d05c <mbedtls_entropy_func+0x44>
 800d100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d102:	2b3f      	cmp	r3, #63	; 0x3f
 800d104:	d9aa      	bls.n	800d05c <mbedtls_entropy_func+0x44>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 800d106:	f107 0310 	add.w	r3, r7, #16
 800d10a:	2240      	movs	r2, #64	; 0x40
 800d10c:	2100      	movs	r1, #0
 800d10e:	4618      	mov	r0, r3
 800d110:	f008 f827 	bl	8015162 <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 800d114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d116:	3308      	adds	r3, #8
 800d118:	f107 0210 	add.w	r2, r7, #16
 800d11c:	4611      	mov	r1, r2
 800d11e:	4618      	mov	r0, r3
 800d120:	f006 feb8 	bl	8013e94 <mbedtls_sha512_finish_ret>
 800d124:	6678      	str	r0, [r7, #100]	; 0x64
 800d126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d14d      	bne.n	800d1c8 <mbedtls_entropy_func+0x1b0>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 800d12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d12e:	3308      	adds	r3, #8
 800d130:	4618      	mov	r0, r3
 800d132:	f005 f9fe 	bl	8012532 <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 800d136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d138:	3308      	adds	r3, #8
 800d13a:	4618      	mov	r0, r3
 800d13c:	f005 f9ec 	bl	8012518 <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 800d140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d142:	3308      	adds	r3, #8
 800d144:	2100      	movs	r1, #0
 800d146:	4618      	mov	r0, r3
 800d148:	f005 fa06 	bl	8012558 <mbedtls_sha512_starts_ret>
 800d14c:	6678      	str	r0, [r7, #100]	; 0x64
 800d14e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d150:	2b00      	cmp	r3, #0
 800d152:	d13b      	bne.n	800d1cc <mbedtls_entropy_func+0x1b4>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 800d154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d156:	3308      	adds	r3, #8
 800d158:	f107 0110 	add.w	r1, r7, #16
 800d15c:	2240      	movs	r2, #64	; 0x40
 800d15e:	4618      	mov	r0, r3
 800d160:	f006 fe10 	bl	8013d84 <mbedtls_sha512_update_ret>
 800d164:	6678      	str	r0, [r7, #100]	; 0x64
 800d166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d131      	bne.n	800d1d0 <mbedtls_entropy_func+0x1b8>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 800d16c:	f107 0210 	add.w	r2, r7, #16
 800d170:	f107 0010 	add.w	r0, r7, #16
 800d174:	2300      	movs	r3, #0
 800d176:	2140      	movs	r1, #64	; 0x40
 800d178:	f007 fb0f 	bl	801479a <mbedtls_sha512_ret>
 800d17c:	6678      	str	r0, [r7, #100]	; 0x64
 800d17e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d180:	2b00      	cmp	r3, #0
 800d182:	d127      	bne.n	800d1d4 <mbedtls_entropy_func+0x1bc>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 800d184:	2300      	movs	r3, #0
 800d186:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d188:	e00c      	b.n	800d1a4 <mbedtls_entropy_func+0x18c>
        ctx->source[i].size = 0;
 800d18a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d18c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d18e:	4613      	mov	r3, r2
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4413      	add	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	440b      	add	r3, r1
 800d198:	33ec      	adds	r3, #236	; 0xec
 800d19a:	2200      	movs	r2, #0
 800d19c:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 800d19e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	dbec      	blt.n	800d18a <mbedtls_entropy_func+0x172>

    memcpy( output, buf, len );
 800d1b0:	f107 0310 	add.w	r3, r7, #16
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	68b8      	ldr	r0, [r7, #8]
 800d1ba:	f007 ffae 	bl	801511a <memcpy>

    ret = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	667b      	str	r3, [r7, #100]	; 0x64
 800d1c2:	e008      	b.n	800d1d6 <mbedtls_entropy_func+0x1be>
            goto exit;
 800d1c4:	bf00      	nop
 800d1c6:	e006      	b.n	800d1d6 <mbedtls_entropy_func+0x1be>
        goto exit;
 800d1c8:	bf00      	nop
 800d1ca:	e004      	b.n	800d1d6 <mbedtls_entropy_func+0x1be>
        goto exit;
 800d1cc:	bf00      	nop
 800d1ce:	e002      	b.n	800d1d6 <mbedtls_entropy_func+0x1be>
        goto exit;
 800d1d0:	bf00      	nop
 800d1d2:	e000      	b.n	800d1d6 <mbedtls_entropy_func+0x1be>
        goto exit;
 800d1d4:	bf00      	nop

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800d1d6:	f107 0310 	add.w	r3, r7, #16
 800d1da:	2140      	movs	r1, #64	; 0x40
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f001 f887 	bl	800e2f0 <mbedtls_platform_zeroize>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800d1e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3768      	adds	r7, #104	; 0x68
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <mbedtls_entropy_update_nv_seed>:

#if defined(MBEDTLS_ENTROPY_NV_SEED)
int mbedtls_entropy_update_nv_seed( mbedtls_entropy_context *ctx )
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b094      	sub	sp, #80	; 0x50
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
    int ret = MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR;
 800d1f4:	f06f 033e 	mvn.w	r3, #62	; 0x3e
 800d1f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    /* Read new seed  and write it to NV */
    if( ( ret = mbedtls_entropy_func( ctx, buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) ) != 0 )
 800d1fa:	f107 030c 	add.w	r3, r7, #12
 800d1fe:	2240      	movs	r2, #64	; 0x40
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff ff08 	bl	800d018 <mbedtls_entropy_func>
 800d208:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d001      	beq.n	800d214 <mbedtls_entropy_update_nv_seed+0x28>
        return( ret );
 800d210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d212:	e01b      	b.n	800d24c <mbedtls_entropy_update_nv_seed+0x60>

    if( mbedtls_nv_seed_write( buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) < 0 )
 800d214:	f107 030c 	add.w	r3, r7, #12
 800d218:	2140      	movs	r1, #64	; 0x40
 800d21a:	4618      	mov	r0, r3
 800d21c:	f001 f824 	bl	800e268 <mbedtls_platform_std_nv_seed_write>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	da02      	bge.n	800d22c <mbedtls_entropy_update_nv_seed+0x40>
        return( MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR );
 800d226:	f06f 033e 	mvn.w	r3, #62	; 0x3e
 800d22a:	e00f      	b.n	800d24c <mbedtls_entropy_update_nv_seed+0x60>

    /* Manually update the remaining stream with a separator value to diverge */
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 800d22c:	f107 030c 	add.w	r3, r7, #12
 800d230:	2240      	movs	r2, #64	; 0x40
 800d232:	2100      	movs	r1, #0
 800d234:	4618      	mov	r0, r3
 800d236:	f007 ff94 	bl	8015162 <memset>
    ret = mbedtls_entropy_update_manual( ctx, buf, MBEDTLS_ENTROPY_BLOCK_SIZE );
 800d23a:	f107 030c 	add.w	r3, r7, #12
 800d23e:	2240      	movs	r2, #64	; 0x40
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7ff fe3c 	bl	800cec0 <mbedtls_entropy_update_manual>
 800d248:	64f8      	str	r0, [r7, #76]	; 0x4c

    return( ret );
 800d24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3750      	adds	r7, #80	; 0x50
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <mbedtls_nv_seed_poll>:
#endif /* MBEDTLS_TIMING_C */

#if defined(MBEDTLS_ENTROPY_NV_SEED)
int mbedtls_nv_seed_poll( void *data,
                          unsigned char *output, size_t len, size_t *olen )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b096      	sub	sp, #88	; 0x58
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	603b      	str	r3, [r7, #0]
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 800d262:	2340      	movs	r3, #64	; 0x40
 800d264:	657b      	str	r3, [r7, #84]	; 0x54
    ((void) data);

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 800d266:	f107 0314 	add.w	r3, r7, #20
 800d26a:	2240      	movs	r2, #64	; 0x40
 800d26c:	2100      	movs	r1, #0
 800d26e:	4618      	mov	r0, r3
 800d270:	f007 ff77 	bl	8015162 <memset>

    if( mbedtls_nv_seed_read( buf, MBEDTLS_ENTROPY_BLOCK_SIZE ) < 0 )
 800d274:	f107 0314 	add.w	r3, r7, #20
 800d278:	2140      	movs	r1, #64	; 0x40
 800d27a:	4618      	mov	r0, r3
 800d27c:	f000 ffc2 	bl	800e204 <mbedtls_platform_std_nv_seed_read>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	da02      	bge.n	800d28c <mbedtls_nv_seed_poll+0x38>
      return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 800d286:	f06f 033b 	mvn.w	r3, #59	; 0x3b
 800d28a:	e010      	b.n	800d2ae <mbedtls_nv_seed_poll+0x5a>

    if( len < use_len )
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d290:	429a      	cmp	r2, r3
 800d292:	d201      	bcs.n	800d298 <mbedtls_nv_seed_poll+0x44>
      use_len = len;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	657b      	str	r3, [r7, #84]	; 0x54

    memcpy( output, buf, use_len );
 800d298:	f107 0314 	add.w	r3, r7, #20
 800d29c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d29e:	4619      	mov	r1, r3
 800d2a0:	68b8      	ldr	r0, [r7, #8]
 800d2a2:	f007 ff3a 	bl	801511a <memcpy>
    *olen = use_len;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2aa:	601a      	str	r2, [r3, #0]

    return( 0 );
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3758      	adds	r7, #88	; 0x58
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b082      	sub	sp, #8
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
    GCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 800d2be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f007 ff4c 	bl	8015162 <memset>
}
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}

0800d2d2 <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table( mbedtls_gcm_context *ctx )
{
 800d2d2:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800d2d6:	b098      	sub	sp, #96	; 0x60
 800d2d8:	af02      	add	r7, sp, #8
 800d2da:	6078      	str	r0, [r7, #4]
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	60bb      	str	r3, [r7, #8]

    memset( h, 0, 16 );
 800d2e0:	f107 030c 	add.w	r3, r7, #12
 800d2e4:	2210      	movs	r2, #16
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f007 ff3a 	bl	8015162 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f107 020c 	add.w	r2, r7, #12
 800d2f4:	f107 010c 	add.w	r1, r7, #12
 800d2f8:	f107 0308 	add.w	r3, r7, #8
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	4613      	mov	r3, r2
 800d300:	2210      	movs	r2, #16
 800d302:	f7fc fa55 	bl	80097b0 <mbedtls_cipher_update>
 800d306:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <gcm_gen_table+0x40>
        return( ret );
 800d30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d310:	e10f      	b.n	800d532 <gcm_gen_table+0x260>

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
 800d312:	7b3b      	ldrb	r3, [r7, #12]
 800d314:	061a      	lsls	r2, r3, #24
 800d316:	7b7b      	ldrb	r3, [r7, #13]
 800d318:	041b      	lsls	r3, r3, #16
 800d31a:	431a      	orrs	r2, r3
 800d31c:	7bbb      	ldrb	r3, [r7, #14]
 800d31e:	021b      	lsls	r3, r3, #8
 800d320:	4313      	orrs	r3, r2
 800d322:	7bfa      	ldrb	r2, [r7, #15]
 800d324:	4313      	orrs	r3, r2
 800d326:	f04f 0400 	mov.w	r4, #0
 800d32a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    GET_UINT32_BE( lo, h,  4  );
 800d32e:	7c3b      	ldrb	r3, [r7, #16]
 800d330:	061a      	lsls	r2, r3, #24
 800d332:	7c7b      	ldrb	r3, [r7, #17]
 800d334:	041b      	lsls	r3, r3, #16
 800d336:	431a      	orrs	r2, r3
 800d338:	7cbb      	ldrb	r3, [r7, #18]
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	4313      	orrs	r3, r2
 800d33e:	7cfa      	ldrb	r2, [r7, #19]
 800d340:	4313      	orrs	r3, r2
 800d342:	f04f 0400 	mov.w	r4, #0
 800d346:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    vh = (uint64_t) hi << 32 | lo;
 800d34a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d34e:	f04f 0500 	mov.w	r5, #0
 800d352:	f04f 0600 	mov.w	r6, #0
 800d356:	000e      	movs	r6, r1
 800d358:	2500      	movs	r5, #0
 800d35a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d35e:	ea45 0301 	orr.w	r3, r5, r1
 800d362:	ea46 0402 	orr.w	r4, r6, r2
 800d366:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

    GET_UINT32_BE( hi, h,  8  );
 800d36a:	7d3b      	ldrb	r3, [r7, #20]
 800d36c:	061a      	lsls	r2, r3, #24
 800d36e:	7d7b      	ldrb	r3, [r7, #21]
 800d370:	041b      	lsls	r3, r3, #16
 800d372:	431a      	orrs	r2, r3
 800d374:	7dbb      	ldrb	r3, [r7, #22]
 800d376:	021b      	lsls	r3, r3, #8
 800d378:	4313      	orrs	r3, r2
 800d37a:	7dfa      	ldrb	r2, [r7, #23]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	f04f 0400 	mov.w	r4, #0
 800d382:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    GET_UINT32_BE( lo, h,  12 );
 800d386:	7e3b      	ldrb	r3, [r7, #24]
 800d388:	061a      	lsls	r2, r3, #24
 800d38a:	7e7b      	ldrb	r3, [r7, #25]
 800d38c:	041b      	lsls	r3, r3, #16
 800d38e:	431a      	orrs	r2, r3
 800d390:	7ebb      	ldrb	r3, [r7, #26]
 800d392:	021b      	lsls	r3, r3, #8
 800d394:	4313      	orrs	r3, r2
 800d396:	7efa      	ldrb	r2, [r7, #27]
 800d398:	4313      	orrs	r3, r2
 800d39a:	f04f 0400 	mov.w	r4, #0
 800d39e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    vl = (uint64_t) hi << 32 | lo;
 800d3a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d3a6:	f04f 0500 	mov.w	r5, #0
 800d3aa:	f04f 0600 	mov.w	r6, #0
 800d3ae:	000e      	movs	r6, r1
 800d3b0:	2500      	movs	r5, #0
 800d3b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d3b6:	ea45 0301 	orr.w	r3, r5, r1
 800d3ba:	ea46 0402 	orr.w	r4, r6, r2
 800d3be:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d3c8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
    ctx->HH[8] = vh;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800d3d2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d3d6:	e9c2 3400 	strd	r3, r4, [r2]
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	f04f 0300 	mov.w	r3, #0
 800d3e0:	f04f 0400 	mov.w	r4, #0
 800d3e4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
    ctx->HL[0] = 0;
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	f04f 0300 	mov.w	r3, #0
 800d3ee:	f04f 0400 	mov.w	r4, #0
 800d3f2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

    for( i = 4; i > 0; i >>= 1 )
 800d3f6:	2304      	movs	r3, #4
 800d3f8:	657b      	str	r3, [r7, #84]	; 0x54
 800d3fa:	e045      	b.n	800d488 <gcm_gen_table+0x1b6>
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 800d3fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3fe:	f003 0201 	and.w	r2, r3, #1
 800d402:	4613      	mov	r3, r2
 800d404:	0152      	lsls	r2, r2, #5
 800d406:	1a9b      	subs	r3, r3, r2
 800d408:	061b      	lsls	r3, r3, #24
 800d40a:	61fb      	str	r3, [r7, #28]
        vl  = ( vh << 63 ) | ( vl >> 1 );
 800d40c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d410:	f04f 0500 	mov.w	r5, #0
 800d414:	f04f 0600 	mov.w	r6, #0
 800d418:	07ce      	lsls	r6, r1, #31
 800d41a:	2500      	movs	r5, #0
 800d41c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d420:	0852      	lsrs	r2, r2, #1
 800d422:	ea4f 0131 	mov.w	r1, r1, rrx
 800d426:	ea45 0301 	orr.w	r3, r5, r1
 800d42a:	ea46 0402 	orr.w	r4, r6, r2
 800d42e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 800d432:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d436:	0862      	lsrs	r2, r4, #1
 800d438:	ea4f 0133 	mov.w	r1, r3, rrx
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	461d      	mov	r5, r3
 800d440:	f04f 0600 	mov.w	r6, #0
 800d444:	f04f 0b00 	mov.w	fp, #0
 800d448:	f04f 0c00 	mov.w	ip, #0
 800d44c:	46ac      	mov	ip, r5
 800d44e:	f04f 0b00 	mov.w	fp, #0
 800d452:	ea8b 0301 	eor.w	r3, fp, r1
 800d456:	ea8c 0402 	eor.w	r4, ip, r2
 800d45a:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

        ctx->HL[i] = vl;
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d462:	3309      	adds	r3, #9
 800d464:	00db      	lsls	r3, r3, #3
 800d466:	441a      	add	r2, r3
 800d468:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d46c:	e9c2 3400 	strd	r3, r4, [r2]
        ctx->HH[i] = vh;
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d474:	3319      	adds	r3, #25
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	441a      	add	r2, r3
 800d47a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d47e:	e9c2 3400 	strd	r3, r4, [r2]
    for( i = 4; i > 0; i >>= 1 )
 800d482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d484:	105b      	asrs	r3, r3, #1
 800d486:	657b      	str	r3, [r7, #84]	; 0x54
 800d488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	dcb6      	bgt.n	800d3fc <gcm_gen_table+0x12a>
    }

    for( i = 2; i <= 8; i *= 2 )
 800d48e:	2302      	movs	r3, #2
 800d490:	657b      	str	r3, [r7, #84]	; 0x54
 800d492:	e04a      	b.n	800d52a <gcm_gen_table+0x258>
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d49a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	4413      	add	r3, r2
 800d4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800d4a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4aa:	00db      	lsls	r3, r3, #3
 800d4ac:	4413      	add	r3, r2
 800d4ae:	623b      	str	r3, [r7, #32]
        vh = *HiH;
 800d4b0:	6a3b      	ldr	r3, [r7, #32]
 800d4b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d4b6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
        vl = *HiL;
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d4c0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
        for( j = 1; j < i; j++ )
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	653b      	str	r3, [r7, #80]	; 0x50
 800d4c8:	e028      	b.n	800d51c <gcm_gen_table+0x24a>
        {
            HiH[j] = vh ^ ctx->HH[j];
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ce:	3319      	adds	r3, #25
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	4413      	add	r3, r2
 800d4d4:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d4d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	6a38      	ldr	r0, [r7, #32]
 800d4de:	4418      	add	r0, r3
 800d4e0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d4e4:	ea83 0501 	eor.w	r5, r3, r1
 800d4e8:	ea84 0602 	eor.w	r6, r4, r2
 800d4ec:	e9c0 5600 	strd	r5, r6, [r0]
            HiL[j] = vl ^ ctx->HL[j];
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4f4:	3309      	adds	r3, #9
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	4413      	add	r3, r2
 800d4fa:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d504:	4418      	add	r0, r3
 800d506:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800d50a:	ea83 0501 	eor.w	r5, r3, r1
 800d50e:	ea84 0602 	eor.w	r6, r4, r2
 800d512:	e9c0 5600 	strd	r5, r6, [r0]
        for( j = 1; j < i; j++ )
 800d516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d518:	3301      	adds	r3, #1
 800d51a:	653b      	str	r3, [r7, #80]	; 0x50
 800d51c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d51e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d520:	429a      	cmp	r2, r3
 800d522:	dbd2      	blt.n	800d4ca <gcm_gen_table+0x1f8>
    for( i = 2; i <= 8; i *= 2 )
 800d524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d526:	005b      	lsls	r3, r3, #1
 800d528:	657b      	str	r3, [r7, #84]	; 0x54
 800d52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d52c:	2b08      	cmp	r3, #8
 800d52e:	ddb1      	ble.n	800d494 <gcm_gen_table+0x1c2>
        }
    }

    return( 0 );
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3758      	adds	r7, #88	; 0x58
 800d536:	46bd      	mov	sp, r7
 800d538:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0800d53c <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	607a      	str	r2, [r7, #4]
 800d546:	603b      	str	r3, [r7, #0]
 800d548:	460b      	mov	r3, r1
 800d54a:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800d54c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800d550:	617b      	str	r3, [r7, #20]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits,
 800d552:	6839      	ldr	r1, [r7, #0]
 800d554:	7afb      	ldrb	r3, [r7, #11]
 800d556:	2201      	movs	r2, #1
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fb ffa9 	bl	80094b0 <mbedtls_cipher_info_from_values>
 800d55e:	6138      	str	r0, [r7, #16]
                                                   MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d102      	bne.n	800d56c <mbedtls_gcm_setkey+0x30>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d566:	f06f 0313 	mvn.w	r3, #19
 800d56a:	e02b      	b.n	800d5c4 <mbedtls_gcm_setkey+0x88>

    if( cipher_info->block_size != 16 )
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	695b      	ldr	r3, [r3, #20]
 800d570:	2b10      	cmp	r3, #16
 800d572:	d002      	beq.n	800d57a <mbedtls_gcm_setkey+0x3e>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d574:	f06f 0313 	mvn.w	r3, #19
 800d578:	e024      	b.n	800d5c4 <mbedtls_gcm_setkey+0x88>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fb ffd6 	bl	800952e <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6939      	ldr	r1, [r7, #16]
 800d586:	4618      	mov	r0, r3
 800d588:	f7fc f81e 	bl	80095c8 <mbedtls_cipher_setup>
 800d58c:	6178      	str	r0, [r7, #20]
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <mbedtls_gcm_setkey+0x5c>
        return( ret );
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	e015      	b.n	800d5c4 <mbedtls_gcm_setkey+0x88>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	2301      	movs	r3, #1
 800d59e:	6879      	ldr	r1, [r7, #4]
 800d5a0:	f7fc f83e 	bl	8009620 <mbedtls_cipher_setkey>
 800d5a4:	6178      	str	r0, [r7, #20]
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d001      	beq.n	800d5b0 <mbedtls_gcm_setkey+0x74>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	e009      	b.n	800d5c4 <mbedtls_gcm_setkey+0x88>
    }

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f7ff fe8e 	bl	800d2d2 <gcm_gen_table>
 800d5b6:	6178      	str	r0, [r7, #20]
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <mbedtls_gcm_setkey+0x86>
        return( ret );
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	e000      	b.n	800d5c4 <mbedtls_gcm_setkey+0x88>

    return( 0 );
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3718      	adds	r7, #24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 800d5cc:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 800d5d0:	b08d      	sub	sp, #52	; 0x34
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	60f8      	str	r0, [r7, #12]
 800d5d6:	60b9      	str	r1, [r7, #8]
 800d5d8:	607a      	str	r2, [r7, #4]
    int i = 0;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	330f      	adds	r3, #15
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	f003 030f 	and.w	r3, r3, #15
 800d5e8:	75fb      	strb	r3, [r7, #23]

    zh = ctx->HH[lo];
 800d5ea:	7dfb      	ldrb	r3, [r7, #23]
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	3319      	adds	r3, #25
 800d5f0:	00db      	lsls	r3, r3, #3
 800d5f2:	4413      	add	r3, r2
 800d5f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d5f8:	e9c7 3408 	strd	r3, r4, [r7, #32]
    zl = ctx->HL[lo];
 800d5fc:	7dfb      	ldrb	r3, [r7, #23]
 800d5fe:	68fa      	ldr	r2, [r7, #12]
 800d600:	3309      	adds	r3, #9
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	4413      	add	r3, r2
 800d606:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d60a:	e9c7 3406 	strd	r3, r4, [r7, #24]

    for( i = 15; i >= 0; i-- )
 800d60e:	230f      	movs	r3, #15
 800d610:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d612:	e0ca      	b.n	800d7aa <gcm_mult+0x1de>
    {
        lo = x[i] & 0xf;
 800d614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	4413      	add	r3, r2
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	f003 030f 	and.w	r3, r3, #15
 800d620:	75fb      	strb	r3, [r7, #23]
        hi = ( x[i] >> 4 ) & 0xf;
 800d622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d624:	68ba      	ldr	r2, [r7, #8]
 800d626:	4413      	add	r3, r2
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	091b      	lsrs	r3, r3, #4
 800d62c:	75bb      	strb	r3, [r7, #22]

        if( i != 15 )
 800d62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d630:	2b0f      	cmp	r3, #15
 800d632:	d05b      	beq.n	800d6ec <gcm_mult+0x120>
        {
            rem = (unsigned char) zl & 0xf;
 800d634:	7e3b      	ldrb	r3, [r7, #24]
 800d636:	f003 030f 	and.w	r3, r3, #15
 800d63a:	757b      	strb	r3, [r7, #21]
            zl = ( zh << 60 ) | ( zl >> 4 );
 800d63c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d640:	f04f 0500 	mov.w	r5, #0
 800d644:	f04f 0600 	mov.w	r6, #0
 800d648:	071e      	lsls	r6, r3, #28
 800d64a:	2500      	movs	r5, #0
 800d64c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d650:	f04f 0b00 	mov.w	fp, #0
 800d654:	f04f 0c00 	mov.w	ip, #0
 800d658:	ea4f 1b11 	mov.w	fp, r1, lsr #4
 800d65c:	ea4b 7b02 	orr.w	fp, fp, r2, lsl #28
 800d660:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800d664:	ea4b 0305 	orr.w	r3, fp, r5
 800d668:	ea4c 0406 	orr.w	r4, ip, r6
 800d66c:	e9c7 3406 	strd	r3, r4, [r7, #24]
            zh = ( zh >> 4 );
 800d670:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d674:	f04f 0300 	mov.w	r3, #0
 800d678:	f04f 0400 	mov.w	r4, #0
 800d67c:	090b      	lsrs	r3, r1, #4
 800d67e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800d682:	0914      	lsrs	r4, r2, #4
 800d684:	e9c7 3408 	strd	r3, r4, [r7, #32]
            zh ^= (uint64_t) last4[rem] << 48;
 800d688:	7d7b      	ldrb	r3, [r7, #21]
 800d68a:	4aab      	ldr	r2, [pc, #684]	; (800d938 <gcm_mult+0x36c>)
 800d68c:	00db      	lsls	r3, r3, #3
 800d68e:	4413      	add	r3, r2
 800d690:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d694:	f04f 0500 	mov.w	r5, #0
 800d698:	f04f 0600 	mov.w	r6, #0
 800d69c:	040e      	lsls	r6, r1, #16
 800d69e:	2500      	movs	r5, #0
 800d6a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d6a4:	ea85 0301 	eor.w	r3, r5, r1
 800d6a8:	ea86 0402 	eor.w	r4, r6, r2
 800d6ac:	e9c7 3408 	strd	r3, r4, [r7, #32]
            zh ^= ctx->HH[lo];
 800d6b0:	7dfb      	ldrb	r3, [r7, #23]
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	3319      	adds	r3, #25
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	4413      	add	r3, r2
 800d6ba:	e9d3 5600 	ldrd	r5, r6, [r3]
 800d6be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d6c2:	ea85 0301 	eor.w	r3, r5, r1
 800d6c6:	ea86 0402 	eor.w	r4, r6, r2
 800d6ca:	e9c7 3408 	strd	r3, r4, [r7, #32]
            zl ^= ctx->HL[lo];
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	3309      	adds	r3, #9
 800d6d4:	00db      	lsls	r3, r3, #3
 800d6d6:	4413      	add	r3, r2
 800d6d8:	e9d3 5600 	ldrd	r5, r6, [r3]
 800d6dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d6e0:	ea85 0301 	eor.w	r3, r5, r1
 800d6e4:	ea86 0402 	eor.w	r4, r6, r2
 800d6e8:	e9c7 3406 	strd	r3, r4, [r7, #24]

        }

        rem = (unsigned char) zl & 0xf;
 800d6ec:	7e3b      	ldrb	r3, [r7, #24]
 800d6ee:	f003 030f 	and.w	r3, r3, #15
 800d6f2:	757b      	strb	r3, [r7, #21]
        zl = ( zh << 60 ) | ( zl >> 4 );
 800d6f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d6f8:	f04f 0500 	mov.w	r5, #0
 800d6fc:	f04f 0600 	mov.w	r6, #0
 800d700:	071e      	lsls	r6, r3, #28
 800d702:	2500      	movs	r5, #0
 800d704:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d708:	f04f 0b00 	mov.w	fp, #0
 800d70c:	f04f 0c00 	mov.w	ip, #0
 800d710:	ea4f 1b11 	mov.w	fp, r1, lsr #4
 800d714:	ea4b 7b02 	orr.w	fp, fp, r2, lsl #28
 800d718:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800d71c:	ea4b 0305 	orr.w	r3, fp, r5
 800d720:	ea4c 0406 	orr.w	r4, ip, r6
 800d724:	e9c7 3406 	strd	r3, r4, [r7, #24]
        zh = ( zh >> 4 );
 800d728:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d72c:	f04f 0300 	mov.w	r3, #0
 800d730:	f04f 0400 	mov.w	r4, #0
 800d734:	090b      	lsrs	r3, r1, #4
 800d736:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800d73a:	0914      	lsrs	r4, r2, #4
 800d73c:	e9c7 3408 	strd	r3, r4, [r7, #32]
        zh ^= (uint64_t) last4[rem] << 48;
 800d740:	7d7b      	ldrb	r3, [r7, #21]
 800d742:	4a7d      	ldr	r2, [pc, #500]	; (800d938 <gcm_mult+0x36c>)
 800d744:	00db      	lsls	r3, r3, #3
 800d746:	4413      	add	r3, r2
 800d748:	e9d3 1200 	ldrd	r1, r2, [r3]
 800d74c:	f04f 0500 	mov.w	r5, #0
 800d750:	f04f 0600 	mov.w	r6, #0
 800d754:	040e      	lsls	r6, r1, #16
 800d756:	2500      	movs	r5, #0
 800d758:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d75c:	ea85 0301 	eor.w	r3, r5, r1
 800d760:	ea86 0402 	eor.w	r4, r6, r2
 800d764:	e9c7 3408 	strd	r3, r4, [r7, #32]
        zh ^= ctx->HH[hi];
 800d768:	7dbb      	ldrb	r3, [r7, #22]
 800d76a:	68fa      	ldr	r2, [r7, #12]
 800d76c:	3319      	adds	r3, #25
 800d76e:	00db      	lsls	r3, r3, #3
 800d770:	4413      	add	r3, r2
 800d772:	e9d3 5600 	ldrd	r5, r6, [r3]
 800d776:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d77a:	ea85 0301 	eor.w	r3, r5, r1
 800d77e:	ea86 0402 	eor.w	r4, r6, r2
 800d782:	e9c7 3408 	strd	r3, r4, [r7, #32]
        zl ^= ctx->HL[hi];
 800d786:	7dbb      	ldrb	r3, [r7, #22]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	3309      	adds	r3, #9
 800d78c:	00db      	lsls	r3, r3, #3
 800d78e:	4413      	add	r3, r2
 800d790:	e9d3 5600 	ldrd	r5, r6, [r3]
 800d794:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d798:	ea85 0301 	eor.w	r3, r5, r1
 800d79c:	ea86 0402 	eor.w	r4, r6, r2
 800d7a0:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for( i = 15; i >= 0; i-- )
 800d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f6bf af31 	bge.w	800d614 <gcm_mult+0x48>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 800d7b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d7b6:	f04f 0300 	mov.w	r3, #0
 800d7ba:	f04f 0400 	mov.w	r4, #0
 800d7be:	0e13      	lsrs	r3, r2, #24
 800d7c0:	2400      	movs	r4, #0
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	701a      	strb	r2, [r3, #0]
 800d7c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d7cc:	f04f 0300 	mov.w	r3, #0
 800d7d0:	f04f 0400 	mov.w	r4, #0
 800d7d4:	0c13      	lsrs	r3, r2, #16
 800d7d6:	2400      	movs	r4, #0
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	3201      	adds	r2, #1
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	7013      	strb	r3, [r2, #0]
 800d7e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d7e4:	f04f 0300 	mov.w	r3, #0
 800d7e8:	f04f 0400 	mov.w	r4, #0
 800d7ec:	0a13      	lsrs	r3, r2, #8
 800d7ee:	2400      	movs	r4, #0
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	3202      	adds	r2, #2
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	7013      	strb	r3, [r2, #0]
 800d7f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d7fc:	f04f 0300 	mov.w	r3, #0
 800d800:	f04f 0400 	mov.w	r4, #0
 800d804:	0013      	movs	r3, r2
 800d806:	2400      	movs	r4, #0
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	3203      	adds	r2, #3
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	7013      	strb	r3, [r2, #0]
    PUT_UINT32_BE( zh, output, 4 );
 800d810:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d814:	f04f 0300 	mov.w	r3, #0
 800d818:	f04f 0400 	mov.w	r4, #0
 800d81c:	0e0b      	lsrs	r3, r1, #24
 800d81e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d822:	0e14      	lsrs	r4, r2, #24
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	3204      	adds	r2, #4
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	7013      	strb	r3, [r2, #0]
 800d82c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d830:	f04f 0300 	mov.w	r3, #0
 800d834:	f04f 0400 	mov.w	r4, #0
 800d838:	0c0b      	lsrs	r3, r1, #16
 800d83a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d83e:	0c14      	lsrs	r4, r2, #16
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	3205      	adds	r2, #5
 800d844:	b2db      	uxtb	r3, r3
 800d846:	7013      	strb	r3, [r2, #0]
 800d848:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d84c:	f04f 0300 	mov.w	r3, #0
 800d850:	f04f 0400 	mov.w	r4, #0
 800d854:	0a0b      	lsrs	r3, r1, #8
 800d856:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d85a:	0a14      	lsrs	r4, r2, #8
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	3206      	adds	r2, #6
 800d860:	b2db      	uxtb	r3, r3
 800d862:	7013      	strb	r3, [r2, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	3307      	adds	r3, #7
 800d868:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d86c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 800d86e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d872:	f04f 0300 	mov.w	r3, #0
 800d876:	f04f 0400 	mov.w	r4, #0
 800d87a:	0e13      	lsrs	r3, r2, #24
 800d87c:	2400      	movs	r4, #0
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	3208      	adds	r2, #8
 800d882:	b2db      	uxtb	r3, r3
 800d884:	7013      	strb	r3, [r2, #0]
 800d886:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d88a:	f04f 0300 	mov.w	r3, #0
 800d88e:	f04f 0400 	mov.w	r4, #0
 800d892:	0c13      	lsrs	r3, r2, #16
 800d894:	2400      	movs	r4, #0
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	3209      	adds	r2, #9
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	7013      	strb	r3, [r2, #0]
 800d89e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d8a2:	f04f 0300 	mov.w	r3, #0
 800d8a6:	f04f 0400 	mov.w	r4, #0
 800d8aa:	0a13      	lsrs	r3, r2, #8
 800d8ac:	2400      	movs	r4, #0
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	320a      	adds	r2, #10
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	7013      	strb	r3, [r2, #0]
 800d8b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d8ba:	f04f 0300 	mov.w	r3, #0
 800d8be:	f04f 0400 	mov.w	r4, #0
 800d8c2:	0013      	movs	r3, r2
 800d8c4:	2400      	movs	r4, #0
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	320b      	adds	r2, #11
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	7013      	strb	r3, [r2, #0]
    PUT_UINT32_BE( zl, output, 12 );
 800d8ce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d8d2:	f04f 0300 	mov.w	r3, #0
 800d8d6:	f04f 0400 	mov.w	r4, #0
 800d8da:	0e0b      	lsrs	r3, r1, #24
 800d8dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d8e0:	0e14      	lsrs	r4, r2, #24
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	320c      	adds	r2, #12
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	7013      	strb	r3, [r2, #0]
 800d8ea:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d8ee:	f04f 0300 	mov.w	r3, #0
 800d8f2:	f04f 0400 	mov.w	r4, #0
 800d8f6:	0c0b      	lsrs	r3, r1, #16
 800d8f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8fc:	0c14      	lsrs	r4, r2, #16
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	320d      	adds	r2, #13
 800d902:	b2db      	uxtb	r3, r3
 800d904:	7013      	strb	r3, [r2, #0]
 800d906:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d90a:	f04f 0300 	mov.w	r3, #0
 800d90e:	f04f 0400 	mov.w	r4, #0
 800d912:	0a0b      	lsrs	r3, r1, #8
 800d914:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d918:	0a14      	lsrs	r4, r2, #8
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	320e      	adds	r2, #14
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	7013      	strb	r3, [r2, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	330f      	adds	r3, #15
 800d926:	7e3a      	ldrb	r2, [r7, #24]
 800d928:	701a      	strb	r2, [r3, #0]
}
 800d92a:	bf00      	nop
 800d92c:	3734      	adds	r7, #52	; 0x34
 800d92e:	46bd      	mov	sp, r7
 800d930:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	08019be0 	.word	0x08019be0

0800d93c <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 800d93c:	b590      	push	{r4, r7, lr}
 800d93e:	b091      	sub	sp, #68	; 0x44
 800d940:	af02      	add	r7, sp, #8
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
 800d948:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800d94a:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800d94e:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	617b      	str	r3, [r7, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d017      	beq.n	800d98a <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	4619      	mov	r1, r3
 800d95e:	f04f 0200 	mov.w	r2, #0
 800d962:	f04f 0300 	mov.w	r3, #0
 800d966:	f04f 0400 	mov.w	r4, #0
 800d96a:	0f53      	lsrs	r3, r2, #29
 800d96c:	2400      	movs	r4, #0
    if( iv_len == 0 ||
 800d96e:	4323      	orrs	r3, r4
 800d970:	d10b      	bne.n	800d98a <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) add_len ) >> 61 != 0 )
 800d972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d974:	4619      	mov	r1, r3
 800d976:	f04f 0200 	mov.w	r2, #0
 800d97a:	f04f 0300 	mov.w	r3, #0
 800d97e:	f04f 0400 	mov.w	r4, #0
 800d982:	0f53      	lsrs	r3, r2, #29
 800d984:	2400      	movs	r4, #0
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800d986:	4323      	orrs	r3, r4
 800d988:	d002      	beq.n	800d990 <mbedtls_gcm_starts+0x54>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800d98a:	f06f 0313 	mvn.w	r3, #19
 800d98e:	e10c      	b.n	800dbaa <mbedtls_gcm_starts+0x26e>
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d996:	2210      	movs	r2, #16
 800d998:	2100      	movs	r1, #0
 800d99a:	4618      	mov	r0, r3
 800d99c:	f007 fbe1 	bl	8015162 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d9a6:	2210      	movs	r2, #16
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f007 fbd9 	bl	8015162 <memset>

    ctx->mode = mode;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    ctx->len = 0;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 800d9be:	f04f 0300 	mov.w	r3, #0
 800d9c2:	f04f 0400 	mov.w	r4, #0
 800d9c6:	e9c2 3400 	strd	r3, r4, [r2]
    ctx->add_len = 0;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 800d9d0:	f04f 0300 	mov.w	r3, #0
 800d9d4:	f04f 0400 	mov.w	r4, #0
 800d9d8:	e9c2 3400 	strd	r3, r4, [r2]

    if( iv_len == 12 )
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	2b0c      	cmp	r3, #12
 800d9e0:	d10c      	bne.n	800d9fc <mbedtls_gcm_starts+0xc0>
    {
        memcpy( ctx->y, iv, iv_len );
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	6879      	ldr	r1, [r7, #4]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f007 fb94 	bl	801511a <memcpy>
        ctx->y[15] = 1;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 800d9fa:	e07f      	b.n	800dafc <mbedtls_gcm_starts+0x1c0>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 800d9fc:	f107 0318 	add.w	r3, r7, #24
 800da00:	2210      	movs	r2, #16
 800da02:	2100      	movs	r1, #0
 800da04:	4618      	mov	r0, r3
 800da06:	f007 fbac 	bl	8015162 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	0e1b      	lsrs	r3, r3, #24
 800da10:	b2db      	uxtb	r3, r3
 800da12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	00db      	lsls	r3, r3, #3
 800da1a:	0c1b      	lsrs	r3, r3, #16
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	0a1b      	lsrs	r3, r3, #8
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	b2db      	uxtb	r3, r3
 800da32:	00db      	lsls	r3, r3, #3
 800da34:	b2db      	uxtb	r3, r3
 800da36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        p = iv;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 800da3e:	e033      	b.n	800daa8 <mbedtls_gcm_starts+0x16c>
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2b10      	cmp	r3, #16
 800da44:	bf28      	it	cs
 800da46:	2310      	movcs	r3, #16
 800da48:	62bb      	str	r3, [r7, #40]	; 0x28

            for( i = 0; i < use_len; i++ )
 800da4a:	2300      	movs	r3, #0
 800da4c:	637b      	str	r3, [r7, #52]	; 0x34
 800da4e:	e015      	b.n	800da7c <mbedtls_gcm_starts+0x140>
                ctx->y[i] ^= p[i];
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da54:	4413      	add	r3, r2
 800da56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800da5a:	781a      	ldrb	r2, [r3, #0]
 800da5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da60:	440b      	add	r3, r1
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	4053      	eors	r3, r2
 800da66:	b2d9      	uxtb	r1, r3
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6c:	4413      	add	r3, r2
 800da6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800da72:	460a      	mov	r2, r1
 800da74:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < use_len; i++ )
 800da76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da78:	3301      	adds	r3, #1
 800da7a:	637b      	str	r3, [r7, #52]	; 0x34
 800da7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da80:	429a      	cmp	r2, r3
 800da82:	d3e5      	bcc.n	800da50 <mbedtls_gcm_starts+0x114>

            gcm_mult( ctx, ctx->y, ctx->y );
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800da90:	461a      	mov	r2, r3
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f7ff fd9a 	bl	800d5cc <gcm_mult>

            iv_len -= use_len;
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9c:	1ad3      	subs	r3, r2, r3
 800da9e:	603b      	str	r3, [r7, #0]
            p += use_len;
 800daa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa4:	4413      	add	r3, r2
 800daa6:	633b      	str	r3, [r7, #48]	; 0x30
        while( iv_len > 0 )
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1c8      	bne.n	800da40 <mbedtls_gcm_starts+0x104>
        }

        for( i = 0; i < 16; i++ )
 800daae:	2300      	movs	r3, #0
 800dab0:	637b      	str	r3, [r7, #52]	; 0x34
 800dab2:	e016      	b.n	800dae2 <mbedtls_gcm_starts+0x1a6>
            ctx->y[i] ^= work_buf[i];
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab8:	4413      	add	r3, r2
 800daba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dabe:	781a      	ldrb	r2, [r3, #0]
 800dac0:	f107 0118 	add.w	r1, r7, #24
 800dac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac6:	440b      	add	r3, r1
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	4053      	eors	r3, r2
 800dacc:	b2d9      	uxtb	r1, r3
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad2:	4413      	add	r3, r2
 800dad4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dad8:	460a      	mov	r2, r1
 800dada:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800dadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dade:	3301      	adds	r3, #1
 800dae0:	637b      	str	r3, [r7, #52]	; 0x34
 800dae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae4:	2b0f      	cmp	r3, #15
 800dae6:	d9e5      	bls.n	800dab4 <mbedtls_gcm_starts+0x178>

        gcm_mult( ctx, ctx->y, ctx->y );
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800daf4:	461a      	mov	r2, r3
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f7ff fd68 	bl	800d5cc <gcm_mult>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16,
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f503 71b4 	add.w	r1, r3, #360	; 0x168
                                       ctx->base_ectr, &olen ) ) != 0 )
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f503 72ac 	add.w	r2, r3, #344	; 0x158
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16,
 800db0a:	f107 0314 	add.w	r3, r7, #20
 800db0e:	9300      	str	r3, [sp, #0]
 800db10:	4613      	mov	r3, r2
 800db12:	2210      	movs	r2, #16
 800db14:	f7fb fe4c 	bl	80097b0 <mbedtls_cipher_update>
 800db18:	62f8      	str	r0, [r7, #44]	; 0x2c
 800db1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <mbedtls_gcm_starts+0x1e8>
    {
        return( ret );
 800db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db22:	e042      	b.n	800dbaa <mbedtls_gcm_starts+0x26e>
    }

    ctx->add_len = add_len;
 800db24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db26:	f04f 0400 	mov.w	r4, #0
 800db2a:	68fa      	ldr	r2, [r7, #12]
 800db2c:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 800db30:	e9c2 3400 	strd	r3, r4, [r2]
    p = add;
 800db34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db36:	633b      	str	r3, [r7, #48]	; 0x30
    while( add_len > 0 )
 800db38:	e033      	b.n	800dba2 <mbedtls_gcm_starts+0x266>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 800db3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db3c:	2b10      	cmp	r3, #16
 800db3e:	bf28      	it	cs
 800db40:	2310      	movcs	r3, #16
 800db42:	62bb      	str	r3, [r7, #40]	; 0x28

        for( i = 0; i < use_len; i++ )
 800db44:	2300      	movs	r3, #0
 800db46:	637b      	str	r3, [r7, #52]	; 0x34
 800db48:	e015      	b.n	800db76 <mbedtls_gcm_starts+0x23a>
            ctx->buf[i] ^= p[i];
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db4e:	4413      	add	r3, r2
 800db50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800db54:	781a      	ldrb	r2, [r3, #0]
 800db56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db5a:	440b      	add	r3, r1
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	4053      	eors	r3, r2
 800db60:	b2d9      	uxtb	r1, r3
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db66:	4413      	add	r3, r2
 800db68:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800db6c:	460a      	mov	r2, r1
 800db6e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 800db70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db72:	3301      	adds	r3, #1
 800db74:	637b      	str	r3, [r7, #52]	; 0x34
 800db76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d3e5      	bcc.n	800db4a <mbedtls_gcm_starts+0x20e>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800db8a:	461a      	mov	r2, r3
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f7ff fd1d 	bl	800d5cc <gcm_mult>

        add_len -= use_len;
 800db92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db96:	1ad3      	subs	r3, r2, r3
 800db98:	64fb      	str	r3, [r7, #76]	; 0x4c
        p += use_len;
 800db9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9e:	4413      	add	r3, r2
 800dba0:	633b      	str	r3, [r7, #48]	; 0x30
    while( add_len > 0 )
 800dba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1c8      	bne.n	800db3a <mbedtls_gcm_starts+0x1fe>
    }

    return( 0 );
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	373c      	adds	r7, #60	; 0x3c
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd90      	pop	{r4, r7, pc}

0800dbb2 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 800dbb2:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800dbb6:	b090      	sub	sp, #64	; 0x40
 800dbb8:	af02      	add	r7, sp, #8
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
 800dbc0:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800dbc2:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800dbc6:	62bb      	str	r3, [r7, #40]	; 0x28
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t use_len, olen = 0;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	613b      	str	r3, [r7, #16]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 800dbd0:	683a      	ldr	r2, [r7, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d909      	bls.n	800dbec <mbedtls_gcm_update+0x3a>
 800dbd8:	683a      	ldr	r2, [r7, #0]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	1ad3      	subs	r3, r2, r3
 800dbde:	461a      	mov	r2, r3
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d902      	bls.n	800dbec <mbedtls_gcm_update+0x3a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800dbe6:	f06f 0313 	mvn.w	r3, #19
 800dbea:	e0da      	b.n	800dda2 <mbedtls_gcm_update+0x1f0>

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800dbf2:	e9d3 bc00 	ldrd	fp, ip, [r3]
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	f04f 0400 	mov.w	r4, #0
 800dbfc:	eb1b 0103 	adds.w	r1, fp, r3
 800dc00:	eb4c 0204 	adc.w	r2, ip, r4
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800dc0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dc0e:	42a2      	cmp	r2, r4
 800dc10:	bf08      	it	eq
 800dc12:	4299      	cmpeq	r1, r3
 800dc14:	d314      	bcc.n	800dc40 <mbedtls_gcm_update+0x8e>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800dc1c:	e9d3 1200 	ldrd	r1, r2, [r3]
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	469b      	mov	fp, r3
 800dc24:	f04f 0c00 	mov.w	ip, #0
 800dc28:	eb1b 0301 	adds.w	r3, fp, r1
 800dc2c:	eb4c 0402 	adc.w	r4, ip, r2
    if( ctx->len + length < ctx->len ||
 800dc30:	f06f 011f 	mvn.w	r1, #31
 800dc34:	f04f 020f 	mov.w	r2, #15
 800dc38:	42a2      	cmp	r2, r4
 800dc3a:	bf08      	it	eq
 800dc3c:	4299      	cmpeq	r1, r3
 800dc3e:	d202      	bcs.n	800dc46 <mbedtls_gcm_update+0x94>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800dc40:	f06f 0313 	mvn.w	r3, #19
 800dc44:	e0ad      	b.n	800dda2 <mbedtls_gcm_update+0x1f0>
    }

    ctx->len += length;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800dc4c:	e9d3 1200 	ldrd	r1, r2, [r3]
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	469b      	mov	fp, r3
 800dc54:	f04f 0c00 	mov.w	ip, #0
 800dc58:	eb1b 0301 	adds.w	r3, fp, r1
 800dc5c:	eb4c 0402 	adc.w	r4, ip, r2
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 800dc66:	e9c2 3400 	strd	r3, r4, [r2]

    p = input;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	633b      	str	r3, [r7, #48]	; 0x30
    while( length > 0 )
 800dc6e:	e093      	b.n	800dd98 <mbedtls_gcm_update+0x1e6>
    {
        use_len = ( length < 16 ) ? length : 16;
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	2b10      	cmp	r3, #16
 800dc74:	bf28      	it	cs
 800dc76:	2310      	movcs	r3, #16
 800dc78:	627b      	str	r3, [r7, #36]	; 0x24

        for( i = 16; i > 12; i-- )
 800dc7a:	2310      	movs	r3, #16
 800dc7c:	637b      	str	r3, [r7, #52]	; 0x34
 800dc7e:	e014      	b.n	800dcaa <mbedtls_gcm_update+0xf8>
            if( ++ctx->y[i - 1] != 0 )
 800dc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc82:	3b01      	subs	r3, #1
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	441a      	add	r2, r3
 800dc88:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 800dc8c:	3201      	adds	r2, #1
 800dc8e:	b2d1      	uxtb	r1, r2
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	441a      	add	r2, r3
 800dc94:	f882 1168 	strb.w	r1, [r2, #360]	; 0x168
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f893 3168 	ldrb.w	r3, [r3, #360]	; 0x168
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <mbedtls_gcm_update+0x100>
        for( i = 16; i > 12; i-- )
 800dca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dca6:	3b01      	subs	r3, #1
 800dca8:	637b      	str	r3, [r7, #52]	; 0x34
 800dcaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcac:	2b0c      	cmp	r3, #12
 800dcae:	d8e7      	bhi.n	800dc80 <mbedtls_gcm_update+0xce>
 800dcb0:	e000      	b.n	800dcb4 <mbedtls_gcm_update+0x102>
                break;
 800dcb2:	bf00      	nop

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800dcbc:	f107 0214 	add.w	r2, r7, #20
 800dcc0:	f107 0310 	add.w	r3, r7, #16
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	2210      	movs	r2, #16
 800dcca:	f7fb fd71 	bl	80097b0 <mbedtls_cipher_update>
 800dcce:	62b8      	str	r0, [r7, #40]	; 0x28
 800dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d001      	beq.n	800dcda <mbedtls_gcm_update+0x128>
                                   &olen ) ) != 0 )
        {
            return( ret );
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	e063      	b.n	800dda2 <mbedtls_gcm_update+0x1f0>
        }

        for( i = 0; i < use_len; i++ )
 800dcda:	2300      	movs	r3, #0
 800dcdc:	637b      	str	r3, [r7, #52]	; 0x34
 800dcde:	e041      	b.n	800dd64 <mbedtls_gcm_update+0x1b2>
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d112      	bne.n	800dd10 <mbedtls_gcm_update+0x15e>
                ctx->buf[i] ^= p[i];
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcee:	4413      	add	r3, r2
 800dcf0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dcf4:	781a      	ldrb	r2, [r3, #0]
 800dcf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcfa:	440b      	add	r3, r1
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	4053      	eors	r3, r2
 800dd00:	b2d9      	uxtb	r1, r3
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd06:	4413      	add	r3, r2
 800dd08:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dd0c:	460a      	mov	r2, r1
 800dd0e:	701a      	strb	r2, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 800dd10:	f107 0214 	add.w	r2, r7, #20
 800dd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd16:	4413      	add	r3, r2
 800dd18:	7819      	ldrb	r1, [r3, #0]
 800dd1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd1e:	4413      	add	r3, r2
 800dd20:	781a      	ldrb	r2, [r3, #0]
 800dd22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd26:	4403      	add	r3, r0
 800dd28:	404a      	eors	r2, r1
 800dd2a:	b2d2      	uxtb	r2, r2
 800dd2c:	701a      	strb	r2, [r3, #0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d112      	bne.n	800dd5e <mbedtls_gcm_update+0x1ac>
                ctx->buf[i] ^= out_p[i];
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd3c:	4413      	add	r3, r2
 800dd3e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dd42:	781a      	ldrb	r2, [r3, #0]
 800dd44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd48:	440b      	add	r3, r1
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	4053      	eors	r3, r2
 800dd4e:	b2d9      	uxtb	r1, r3
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd54:	4413      	add	r3, r2
 800dd56:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dd5a:	460a      	mov	r2, r1
 800dd5c:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 800dd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd60:	3301      	adds	r3, #1
 800dd62:	637b      	str	r3, [r7, #52]	; 0x34
 800dd64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d3b9      	bcc.n	800dce0 <mbedtls_gcm_update+0x12e>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dd78:	461a      	mov	r2, r3
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f7ff fc26 	bl	800d5cc <gcm_mult>

        length -= use_len;
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	60bb      	str	r3, [r7, #8]
        p += use_len;
 800dd88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8c:	4413      	add	r3, r2
 800dd8e:	633b      	str	r3, [r7, #48]	; 0x30
        out_p += use_len;
 800dd90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	4413      	add	r3, r2
 800dd96:	62fb      	str	r3, [r7, #44]	; 0x2c
    while( length > 0 )
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f47f af68 	bne.w	800dc70 <mbedtls_gcm_update+0xbe>
    }

    return( 0 );
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3738      	adds	r7, #56	; 0x38
 800dda6:	46bd      	mov	sp, r7
 800dda8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800ddac <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 800ddac:	b590      	push	{r4, r7, lr}
 800ddae:	b08f      	sub	sp, #60	; 0x3c
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	607a      	str	r2, [r7, #4]
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800ddbe:	e9d3 1200 	ldrd	r1, r2, [r3]
 800ddc2:	f04f 0300 	mov.w	r3, #0
 800ddc6:	f04f 0400 	mov.w	r4, #0
 800ddca:	00d4      	lsls	r4, r2, #3
 800ddcc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ddd0:	00cb      	lsls	r3, r1, #3
 800ddd2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    orig_add_len = ctx->add_len * 8;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dddc:	e9d3 1200 	ldrd	r1, r2, [r3]
 800dde0:	f04f 0300 	mov.w	r3, #0
 800dde4:	f04f 0400 	mov.w	r4, #0
 800dde8:	00d4      	lsls	r4, r2, #3
 800ddea:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ddee:	00cb      	lsls	r3, r1, #3
 800ddf0:	e9c7 3408 	strd	r3, r4, [r7, #32]

    if( tag_len > 16 || tag_len < 4 )
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2b10      	cmp	r3, #16
 800ddf8:	d802      	bhi.n	800de00 <mbedtls_gcm_finish+0x54>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2b03      	cmp	r3, #3
 800ddfe:	d802      	bhi.n	800de06 <mbedtls_gcm_finish+0x5a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800de00:	f06f 0313 	mvn.w	r3, #19
 800de04:	e0f7      	b.n	800dff6 <mbedtls_gcm_finish+0x24a>

    memcpy( tag, ctx->base_ectr, tag_len );
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	4619      	mov	r1, r3
 800de10:	68b8      	ldr	r0, [r7, #8]
 800de12:	f007 f982 	bl	801511a <memcpy>

    if( orig_len || orig_add_len )
 800de16:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800de1a:	4323      	orrs	r3, r4
 800de1c:	d104      	bne.n	800de28 <mbedtls_gcm_finish+0x7c>
 800de1e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800de22:	4323      	orrs	r3, r4
 800de24:	f000 80e6 	beq.w	800dff4 <mbedtls_gcm_finish+0x248>
    {
        memset( work_buf, 0x00, 16 );
 800de28:	f107 0310 	add.w	r3, r7, #16
 800de2c:	2210      	movs	r2, #16
 800de2e:	2100      	movs	r1, #0
 800de30:	4618      	mov	r0, r3
 800de32:	f007 f996 	bl	8015162 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 800de36:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de3a:	f04f 0300 	mov.w	r3, #0
 800de3e:	f04f 0400 	mov.w	r4, #0
 800de42:	0e13      	lsrs	r3, r2, #24
 800de44:	2400      	movs	r4, #0
 800de46:	b2db      	uxtb	r3, r3
 800de48:	743b      	strb	r3, [r7, #16]
 800de4a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de4e:	f04f 0300 	mov.w	r3, #0
 800de52:	f04f 0400 	mov.w	r4, #0
 800de56:	0c13      	lsrs	r3, r2, #16
 800de58:	2400      	movs	r4, #0
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	747b      	strb	r3, [r7, #17]
 800de5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de62:	f04f 0300 	mov.w	r3, #0
 800de66:	f04f 0400 	mov.w	r4, #0
 800de6a:	0a13      	lsrs	r3, r2, #8
 800de6c:	2400      	movs	r4, #0
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	74bb      	strb	r3, [r7, #18]
 800de72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de76:	f04f 0300 	mov.w	r3, #0
 800de7a:	f04f 0400 	mov.w	r4, #0
 800de7e:	0013      	movs	r3, r2
 800de80:	2400      	movs	r4, #0
 800de82:	b2db      	uxtb	r3, r3
 800de84:	74fb      	strb	r3, [r7, #19]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 800de86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800de8a:	f04f 0300 	mov.w	r3, #0
 800de8e:	f04f 0400 	mov.w	r4, #0
 800de92:	0e0b      	lsrs	r3, r1, #24
 800de94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800de98:	0e14      	lsrs	r4, r2, #24
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	753b      	strb	r3, [r7, #20]
 800de9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dea2:	f04f 0300 	mov.w	r3, #0
 800dea6:	f04f 0400 	mov.w	r4, #0
 800deaa:	0c0b      	lsrs	r3, r1, #16
 800deac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800deb0:	0c14      	lsrs	r4, r2, #16
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	757b      	strb	r3, [r7, #21]
 800deb6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800deba:	f04f 0300 	mov.w	r3, #0
 800debe:	f04f 0400 	mov.w	r4, #0
 800dec2:	0a0b      	lsrs	r3, r1, #8
 800dec4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dec8:	0a14      	lsrs	r4, r2, #8
 800deca:	b2db      	uxtb	r3, r3
 800decc:	75bb      	strb	r3, [r7, #22]
 800dece:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ded2:	75fb      	strb	r3, [r7, #23]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 800ded4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ded8:	f04f 0300 	mov.w	r3, #0
 800dedc:	f04f 0400 	mov.w	r4, #0
 800dee0:	0e13      	lsrs	r3, r2, #24
 800dee2:	2400      	movs	r4, #0
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	763b      	strb	r3, [r7, #24]
 800dee8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800deec:	f04f 0300 	mov.w	r3, #0
 800def0:	f04f 0400 	mov.w	r4, #0
 800def4:	0c13      	lsrs	r3, r2, #16
 800def6:	2400      	movs	r4, #0
 800def8:	b2db      	uxtb	r3, r3
 800defa:	767b      	strb	r3, [r7, #25]
 800defc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800df00:	f04f 0300 	mov.w	r3, #0
 800df04:	f04f 0400 	mov.w	r4, #0
 800df08:	0a13      	lsrs	r3, r2, #8
 800df0a:	2400      	movs	r4, #0
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	76bb      	strb	r3, [r7, #26]
 800df10:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800df14:	f04f 0300 	mov.w	r3, #0
 800df18:	f04f 0400 	mov.w	r4, #0
 800df1c:	0013      	movs	r3, r2
 800df1e:	2400      	movs	r4, #0
 800df20:	b2db      	uxtb	r3, r3
 800df22:	76fb      	strb	r3, [r7, #27]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 800df24:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800df28:	f04f 0300 	mov.w	r3, #0
 800df2c:	f04f 0400 	mov.w	r4, #0
 800df30:	0e0b      	lsrs	r3, r1, #24
 800df32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800df36:	0e14      	lsrs	r4, r2, #24
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	773b      	strb	r3, [r7, #28]
 800df3c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800df40:	f04f 0300 	mov.w	r3, #0
 800df44:	f04f 0400 	mov.w	r4, #0
 800df48:	0c0b      	lsrs	r3, r1, #16
 800df4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df4e:	0c14      	lsrs	r4, r2, #16
 800df50:	b2db      	uxtb	r3, r3
 800df52:	777b      	strb	r3, [r7, #29]
 800df54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800df58:	f04f 0300 	mov.w	r3, #0
 800df5c:	f04f 0400 	mov.w	r4, #0
 800df60:	0a0b      	lsrs	r3, r1, #8
 800df62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800df66:	0a14      	lsrs	r4, r2, #8
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	77bb      	strb	r3, [r7, #30]
 800df6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df70:	77fb      	strb	r3, [r7, #31]

        for( i = 0; i < 16; i++ )
 800df72:	2300      	movs	r3, #0
 800df74:	637b      	str	r3, [r7, #52]	; 0x34
 800df76:	e016      	b.n	800dfa6 <mbedtls_gcm_finish+0x1fa>
            ctx->buf[i] ^= work_buf[i];
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800df82:	781a      	ldrb	r2, [r3, #0]
 800df84:	f107 0110 	add.w	r1, r7, #16
 800df88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df8a:	440b      	add	r3, r1
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	4053      	eors	r3, r2
 800df90:	b2d9      	uxtb	r1, r3
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df96:	4413      	add	r3, r2
 800df98:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800df9c:	460a      	mov	r2, r1
 800df9e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800dfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	637b      	str	r3, [r7, #52]	; 0x34
 800dfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa8:	2b0f      	cmp	r3, #15
 800dfaa:	d9e5      	bls.n	800df78 <mbedtls_gcm_finish+0x1cc>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dfb8:	461a      	mov	r2, r3
 800dfba:	68f8      	ldr	r0, [r7, #12]
 800dfbc:	f7ff fb06 	bl	800d5cc <gcm_mult>

        for( i = 0; i < tag_len; i++ )
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	637b      	str	r3, [r7, #52]	; 0x34
 800dfc4:	e012      	b.n	800dfec <mbedtls_gcm_finish+0x240>
            tag[i] ^= ctx->buf[i];
 800dfc6:	68ba      	ldr	r2, [r7, #8]
 800dfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfca:	4413      	add	r3, r2
 800dfcc:	7819      	ldrb	r1, [r3, #0]
 800dfce:	68fa      	ldr	r2, [r7, #12]
 800dfd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfd2:	4413      	add	r3, r2
 800dfd4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dfd8:	781a      	ldrb	r2, [r3, #0]
 800dfda:	68b8      	ldr	r0, [r7, #8]
 800dfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfde:	4403      	add	r3, r0
 800dfe0:	404a      	eors	r2, r1
 800dfe2:	b2d2      	uxtb	r2, r2
 800dfe4:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < tag_len; i++ )
 800dfe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfe8:	3301      	adds	r3, #1
 800dfea:	637b      	str	r3, [r7, #52]	; 0x34
 800dfec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d3e8      	bcc.n	800dfc6 <mbedtls_gcm_finish+0x21a>
    }

    return( 0 );
 800dff4:	2300      	movs	r3, #0
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	373c      	adds	r7, #60	; 0x3c
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd90      	pop	{r4, r7, pc}

0800dffe <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b088      	sub	sp, #32
 800e002:	af02      	add	r7, sp, #8
 800e004:	60f8      	str	r0, [r7, #12]
 800e006:	60b9      	str	r1, [r7, #8]
 800e008:	607a      	str	r2, [r7, #4]
 800e00a:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e00c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e010:	617b      	str	r3, [r7, #20]
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 800e012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e014:	9301      	str	r3, [sp, #4]
 800e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	6a3b      	ldr	r3, [r7, #32]
 800e01c:	683a      	ldr	r2, [r7, #0]
 800e01e:	68b9      	ldr	r1, [r7, #8]
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7ff fc8b 	bl	800d93c <mbedtls_gcm_starts>
 800e026:	6178      	str	r0, [r7, #20]
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d001      	beq.n	800e032 <mbedtls_gcm_crypt_and_tag+0x34>
        return( ret );
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	e017      	b.n	800e062 <mbedtls_gcm_crypt_and_tag+0x64>

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 800e032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e036:	6879      	ldr	r1, [r7, #4]
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f7ff fdba 	bl	800dbb2 <mbedtls_gcm_update>
 800e03e:	6178      	str	r0, [r7, #20]
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <mbedtls_gcm_crypt_and_tag+0x4c>
        return( ret );
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	e00b      	b.n	800e062 <mbedtls_gcm_crypt_and_tag+0x64>

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 800e04a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e04c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f7ff feac 	bl	800ddac <mbedtls_gcm_finish>
 800e054:	6178      	str	r0, [r7, #20]
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d001      	beq.n	800e060 <mbedtls_gcm_crypt_and_tag+0x62>
        return( ret );
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	e000      	b.n	800e062 <mbedtls_gcm_crypt_and_tag+0x64>

    return( 0 );
 800e060:	2300      	movs	r3, #0
}
 800e062:	4618      	mov	r0, r3
 800e064:	3718      	adds	r7, #24
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b094      	sub	sp, #80	; 0x50
 800e06e:	af08      	add	r7, sp, #32
 800e070:	60f8      	str	r0, [r7, #12]
 800e072:	60b9      	str	r1, [r7, #8]
 800e074:	607a      	str	r2, [r7, #4]
 800e076:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e078:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e07c:	627b      	str	r3, [r7, #36]	; 0x24
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 800e07e:	f107 0314 	add.w	r3, r7, #20
 800e082:	9306      	str	r3, [sp, #24]
 800e084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e086:	9305      	str	r3, [sp, #20]
 800e088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e08a:	9304      	str	r3, [sp, #16]
 800e08c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e08e:	9303      	str	r3, [sp, #12]
 800e090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e092:	9302      	str	r3, [sp, #8]
 800e094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e096:	9301      	str	r3, [sp, #4]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	2100      	movs	r1, #0
 800e0a2:	68f8      	ldr	r0, [r7, #12]
 800e0a4:	f7ff ffab 	bl	800dffe <mbedtls_gcm_crypt_and_tag>
 800e0a8:	6278      	str	r0, [r7, #36]	; 0x24
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d001      	beq.n	800e0b4 <mbedtls_gcm_auth_decrypt+0x4a>
                                   iv, iv_len, add, add_len,
                                   input, output, tag_len, check_tag ) ) != 0 )
    {
        return( ret );
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b2:	e025      	b.n	800e100 <mbedtls_gcm_auth_decrypt+0x96>
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0bc:	e011      	b.n	800e0e2 <mbedtls_gcm_auth_decrypt+0x78>
        diff |= tag[i] ^ check_tag[i];
 800e0be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	4413      	add	r3, r2
 800e0c4:	781a      	ldrb	r2, [r3, #0]
 800e0c6:	f107 0114 	add.w	r1, r7, #20
 800e0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0cc:	440b      	add	r3, r1
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	4053      	eors	r3, r2
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	62bb      	str	r3, [r7, #40]	; 0x28
    for( diff = 0, i = 0; i < tag_len; i++ )
 800e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0de:	3301      	adds	r3, #1
 800e0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d3e9      	bcc.n	800e0be <mbedtls_gcm_auth_decrypt+0x54>

    if( diff != 0 )
 800e0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d006      	beq.n	800e0fe <mbedtls_gcm_auth_decrypt+0x94>
    {
        mbedtls_platform_zeroize( output, length );
 800e0f0:	68b9      	ldr	r1, [r7, #8]
 800e0f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e0f4:	f000 f8fc 	bl	800e2f0 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 800e0f8:	f06f 0311 	mvn.w	r3, #17
 800e0fc:	e000      	b.n	800e100 <mbedtls_gcm_auth_decrypt+0x96>
    }

    return( 0 );
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3730      	adds	r7, #48	; 0x30
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d009      	beq.n	800e12a <mbedtls_gcm_free+0x22>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fb fa08 	bl	800952e <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 800e11e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f8e4 	bl	800e2f0 <mbedtls_platform_zeroize>
 800e128:	e000      	b.n	800e12c <mbedtls_gcm_free+0x24>
        return;
 800e12a:	bf00      	nop
}
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <mbedtls_nist_kw_init>:

/*
 * Initialize context
 */
void mbedtls_nist_kw_init( mbedtls_nist_kw_context *ctx )
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b082      	sub	sp, #8
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_nist_kw_context ) );
 800e13a:	2248      	movs	r2, #72	; 0x48
 800e13c:	2100      	movs	r1, #0
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f007 f80f 	bl	8015162 <memset>
}
 800e144:	bf00      	nop
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <mbedtls_nist_kw_setkey>:
int mbedtls_nist_kw_setkey( mbedtls_nist_kw_context *ctx,
                            mbedtls_cipher_id_t cipher,
                            const unsigned char *key,
                            unsigned int keybits,
                            const int is_wrap )
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b086      	sub	sp, #24
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	607a      	str	r2, [r7, #4]
 800e156:	603b      	str	r3, [r7, #0]
 800e158:	460b      	mov	r3, r1
 800e15a:	72fb      	strb	r3, [r7, #11]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 800e15c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 800e160:	617b      	str	r3, [r7, #20]
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher,
 800e162:	6839      	ldr	r1, [r7, #0]
 800e164:	7afb      	ldrb	r3, [r7, #11]
 800e166:	2201      	movs	r2, #1
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fb f9a1 	bl	80094b0 <mbedtls_cipher_info_from_values>
 800e16e:	6138      	str	r0, [r7, #16]
                                                   keybits,
                                                   MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <mbedtls_nist_kw_setkey+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800e176:	4b19      	ldr	r3, [pc, #100]	; (800e1dc <mbedtls_nist_kw_setkey+0x90>)
 800e178:	e02c      	b.n	800e1d4 <mbedtls_nist_kw_setkey+0x88>

    if( cipher_info->block_size != 16 )
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	695b      	ldr	r3, [r3, #20]
 800e17e:	2b10      	cmp	r3, #16
 800e180:	d001      	beq.n	800e186 <mbedtls_nist_kw_setkey+0x3a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800e182:	4b16      	ldr	r3, [pc, #88]	; (800e1dc <mbedtls_nist_kw_setkey+0x90>)
 800e184:	e026      	b.n	800e1d4 <mbedtls_nist_kw_setkey+0x88>
     *  lengths of 128, 192, or 256 bits, is the only block cipher that fits
     *  this profile."
     *  Currently we don't support other 128 bit block ciphers for key wrapping,
     *  such as Camellia and Aria.
     */
    if( cipher != MBEDTLS_CIPHER_ID_AES )
 800e186:	7afb      	ldrb	r3, [r7, #11]
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d001      	beq.n	800e190 <mbedtls_nist_kw_setkey+0x44>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800e18c:	4b14      	ldr	r3, [pc, #80]	; (800e1e0 <mbedtls_nist_kw_setkey+0x94>)
 800e18e:	e021      	b.n	800e1d4 <mbedtls_nist_kw_setkey+0x88>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	4618      	mov	r0, r3
 800e194:	f7fb f9cb 	bl	800952e <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6939      	ldr	r1, [r7, #16]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7fb fa13 	bl	80095c8 <mbedtls_cipher_setup>
 800e1a2:	6178      	str	r0, [r7, #20]
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <mbedtls_nist_kw_setkey+0x62>
        return( ret );
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	e012      	b.n	800e1d4 <mbedtls_nist_kw_setkey+0x88>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	683a      	ldr	r2, [r7, #0]
 800e1b2:	6a3b      	ldr	r3, [r7, #32]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	bf14      	ite	ne
 800e1b8:	2301      	movne	r3, #1
 800e1ba:	2300      	moveq	r3, #0
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	b25b      	sxtb	r3, r3
 800e1c0:	6879      	ldr	r1, [r7, #4]
 800e1c2:	f7fb fa2d 	bl	8009620 <mbedtls_cipher_setkey>
 800e1c6:	6178      	str	r0, [r7, #20]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d001      	beq.n	800e1d2 <mbedtls_nist_kw_setkey+0x86>
                                       is_wrap ? MBEDTLS_ENCRYPT :
                                                 MBEDTLS_DECRYPT )
                                                                   ) != 0 )
    {
        return( ret );
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	e000      	b.n	800e1d4 <mbedtls_nist_kw_setkey+0x88>
    }

    return( 0 );
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3718      	adds	r7, #24
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	ffff9f00 	.word	0xffff9f00
 800e1e0:	ffff9f80 	.word	0xffff9f80

0800e1e4 <mbedtls_nist_kw_free>:

/*
 * Free context
 */
void mbedtls_nist_kw_free( mbedtls_nist_kw_context *ctx )
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
    mbedtls_cipher_free( &ctx->cipher_ctx );
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fb f99d 	bl	800952e <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_nist_kw_context ) );
 800e1f4:	2148      	movs	r1, #72	; 0x48
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 f87a 	bl	800e2f0 <mbedtls_platform_zeroize>
}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <mbedtls_platform_std_nv_seed_read>:
#if !defined(MBEDTLS_PLATFORM_NO_STD_FUNCTIONS) && defined(MBEDTLS_FS_IO)
/* Default implementations for the platform independent seed functions use
 * standard libc file functions to read from and write to a pre-defined filename
 */
int mbedtls_platform_std_nv_seed_read( unsigned char *buf, size_t buf_len )
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
    FILE *file;
    size_t n;

    if( ( file = fopen( MBEDTLS_PLATFORM_STD_NV_SEED_FILE, "rb" ) ) == NULL )
 800e20e:	4914      	ldr	r1, [pc, #80]	; (800e260 <mbedtls_platform_std_nv_seed_read+0x5c>)
 800e210:	4814      	ldr	r0, [pc, #80]	; (800e264 <mbedtls_platform_std_nv_seed_read+0x60>)
 800e212:	f006 fd43 	bl	8014c9c <fopen>
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d102      	bne.n	800e224 <mbedtls_platform_std_nv_seed_read+0x20>
        return( -1 );
 800e21e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e222:	e018      	b.n	800e256 <mbedtls_platform_std_nv_seed_read+0x52>

    if( ( n = fread( buf, 1, buf_len, file ) ) != buf_len )
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	683a      	ldr	r2, [r7, #0]
 800e228:	2101      	movs	r1, #1
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f006 fd8e 	bl	8014d4c <fread>
 800e230:	60b8      	str	r0, [r7, #8]
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	429a      	cmp	r2, r3
 800e238:	d009      	beq.n	800e24e <mbedtls_platform_std_nv_seed_read+0x4a>
    {
        fclose( file );
 800e23a:	68f8      	ldr	r0, [r7, #12]
 800e23c:	f006 fb76 	bl	801492c <fclose>
        mbedtls_platform_zeroize( buf, buf_len );
 800e240:	6839      	ldr	r1, [r7, #0]
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 f854 	bl	800e2f0 <mbedtls_platform_zeroize>
        return( -1 );
 800e248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e24c:	e003      	b.n	800e256 <mbedtls_platform_std_nv_seed_read+0x52>
    }

    fclose( file );
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f006 fb6c 	bl	801492c <fclose>
    return( (int)n );
 800e254:	68bb      	ldr	r3, [r7, #8]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	08016aac 	.word	0x08016aac
 800e264:	08016ab0 	.word	0x08016ab0

0800e268 <mbedtls_platform_std_nv_seed_write>:

int mbedtls_platform_std_nv_seed_write( unsigned char *buf, size_t buf_len )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
    FILE *file;
    size_t n;

    if( ( file = fopen( MBEDTLS_PLATFORM_STD_NV_SEED_FILE, "w" ) ) == NULL )
 800e272:	4912      	ldr	r1, [pc, #72]	; (800e2bc <mbedtls_platform_std_nv_seed_write+0x54>)
 800e274:	4812      	ldr	r0, [pc, #72]	; (800e2c0 <mbedtls_platform_std_nv_seed_write+0x58>)
 800e276:	f006 fd11 	bl	8014c9c <fopen>
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d102      	bne.n	800e288 <mbedtls_platform_std_nv_seed_write+0x20>
        return -1;
 800e282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e286:	e014      	b.n	800e2b2 <mbedtls_platform_std_nv_seed_write+0x4a>

    if( ( n = fwrite( buf, 1, buf_len, file ) ) != buf_len )
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	2101      	movs	r1, #1
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f006 fe8e 	bl	8014fb0 <fwrite>
 800e294:	60b8      	str	r0, [r7, #8]
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d005      	beq.n	800e2aa <mbedtls_platform_std_nv_seed_write+0x42>
    {
        fclose( file );
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f006 fb44 	bl	801492c <fclose>
        return -1;
 800e2a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2a8:	e003      	b.n	800e2b2 <mbedtls_platform_std_nv_seed_write+0x4a>
    }

    fclose( file );
 800e2aa:	68f8      	ldr	r0, [r7, #12]
 800e2ac:	f006 fb3e 	bl	801492c <fclose>
    return( (int)n );
 800e2b0:	68bb      	ldr	r3, [r7, #8]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	08016abc 	.word	0x08016abc
 800e2c0:	08016ab0 	.word	0x08016ab0

0800e2c4 <mbedtls_platform_setup>:
#if !defined(MBEDTLS_PLATFORM_SETUP_TEARDOWN_ALT)
/*
 * Placeholder platform setup that does nothing by default
 */
int mbedtls_platform_setup( mbedtls_platform_context *ctx )
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
    (void)ctx;

    return( 0 );
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	370c      	adds	r7, #12
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr

0800e2da <mbedtls_platform_teardown>:

/*
 * Placeholder platform teardown that does nothing by default
 */
void mbedtls_platform_teardown( mbedtls_platform_context *ctx )
{
 800e2da:	b480      	push	{r7}
 800e2dc:	b083      	sub	sp, #12
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
    (void)ctx;
}
 800e2e2:	bf00      	nop
 800e2e4:	370c      	adds	r7, #12
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
	...

0800e2f0 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	6039      	str	r1, [r7, #0]
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d005      	beq.n	800e30c <mbedtls_platform_zeroize+0x1c>
        memset_func( buf, 0, len );
 800e300:	4b04      	ldr	r3, [pc, #16]	; (800e314 <mbedtls_platform_zeroize+0x24>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	2100      	movs	r1, #0
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	4798      	blx	r3
}
 800e30c:	bf00      	nop
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	2000000c 	.word	0x2000000c

0800e318 <mul64>:

    return( lo + ( me << 16 ) + ( (uint64_t) hi << 32 ) );
}
#else
static inline uint64_t mul64( uint32_t a, uint32_t b )
{
 800e318:	b4b0      	push	{r4, r5, r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
    return( (uint64_t) a * b );
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	4619      	mov	r1, r3
 800e326:	f04f 0200 	mov.w	r2, #0
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	f04f 0400 	mov.w	r4, #0
 800e330:	fb03 f502 	mul.w	r5, r3, r2
 800e334:	fb01 f004 	mul.w	r0, r1, r4
 800e338:	4428      	add	r0, r5
 800e33a:	fba1 3403 	umull	r3, r4, r1, r3
 800e33e:	1902      	adds	r2, r0, r4
 800e340:	4614      	mov	r4, r2
}
 800e342:	4618      	mov	r0, r3
 800e344:	4621      	mov	r1, r4
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	bcb0      	pop	{r4, r5, r7}
 800e34c:	4770      	bx	lr

0800e34e <poly1305_process>:
 */
static void poly1305_process( mbedtls_poly1305_context *ctx,
                              size_t nblocks,
                              const unsigned char *input,
                              uint32_t needs_padding )
{
 800e34e:	e92d 4cf0 	stmdb	sp!, {r4, r5, r6, r7, sl, fp, lr}
 800e352:	b09b      	sub	sp, #108	; 0x6c
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]
 800e35c:	603b      	str	r3, [r7, #0]
    uint64_t d0, d1, d2, d3;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
 800e35e:	2300      	movs	r3, #0
 800e360:	653b      	str	r3, [r7, #80]	; 0x50
    size_t i;

    r0 = ctx->r[0];
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	64bb      	str	r3, [r7, #72]	; 0x48
    r1 = ctx->r[1];
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	647b      	str	r3, [r7, #68]	; 0x44
    r2 = ctx->r[2];
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	643b      	str	r3, [r7, #64]	; 0x40
    r3 = ctx->r[3];
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	63fb      	str	r3, [r7, #60]	; 0x3c

    rs1 = r1 + ( r1 >> 2U );
 800e37a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e37c:	089b      	lsrs	r3, r3, #2
 800e37e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e380:	4413      	add	r3, r2
 800e382:	63bb      	str	r3, [r7, #56]	; 0x38
    rs2 = r2 + ( r2 >> 2U );
 800e384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e386:	089b      	lsrs	r3, r3, #2
 800e388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e38a:	4413      	add	r3, r2
 800e38c:	637b      	str	r3, [r7, #52]	; 0x34
    rs3 = r3 + ( r3 >> 2U );
 800e38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e390:	089b      	lsrs	r3, r3, #2
 800e392:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e394:	4413      	add	r3, r2
 800e396:	633b      	str	r3, [r7, #48]	; 0x30

    acc0 = ctx->acc[0];
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6a1b      	ldr	r3, [r3, #32]
 800e39c:	667b      	str	r3, [r7, #100]	; 0x64
    acc1 = ctx->acc[1];
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a2:	663b      	str	r3, [r7, #96]	; 0x60
    acc2 = ctx->acc[2];
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    acc3 = ctx->acc[3];
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ae:	65bb      	str	r3, [r7, #88]	; 0x58
    acc4 = ctx->acc[4];
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3b4:	657b      	str	r3, [r7, #84]	; 0x54

    /* Process full blocks */
    for( i = 0U; i < nblocks; i++ )
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3ba:	e261      	b.n	800e880 <poly1305_process+0x532>
    {
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = BYTES_TO_U32_LE( input, offset + 0  );
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3c0:	4413      	add	r3, r2
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	021b      	lsls	r3, r3, #8
 800e3d2:	ea41 0203 	orr.w	r2, r1, r3
 800e3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d8:	3302      	adds	r3, #2
 800e3da:	6879      	ldr	r1, [r7, #4]
 800e3dc:	440b      	add	r3, r1
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	041b      	lsls	r3, r3, #16
 800e3e2:	431a      	orrs	r2, r3
 800e3e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3e6:	3303      	adds	r3, #3
 800e3e8:	6879      	ldr	r1, [r7, #4]
 800e3ea:	440b      	add	r3, r1
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	061b      	lsls	r3, r3, #24
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	f04f 0400 	mov.w	r4, #0
 800e3f6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        d1   = BYTES_TO_U32_LE( input, offset + 4  );
 800e3fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3fc:	3304      	adds	r3, #4
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	4413      	add	r3, r2
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	4619      	mov	r1, r3
 800e406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e408:	3305      	adds	r3, #5
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	4413      	add	r3, r2
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	021b      	lsls	r3, r3, #8
 800e412:	ea41 0203 	orr.w	r2, r1, r3
 800e416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e418:	3306      	adds	r3, #6
 800e41a:	6879      	ldr	r1, [r7, #4]
 800e41c:	440b      	add	r3, r1
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	041b      	lsls	r3, r3, #16
 800e422:	431a      	orrs	r2, r3
 800e424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e426:	3307      	adds	r3, #7
 800e428:	6879      	ldr	r1, [r7, #4]
 800e42a:	440b      	add	r3, r1
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	061b      	lsls	r3, r3, #24
 800e430:	4313      	orrs	r3, r2
 800e432:	f04f 0400 	mov.w	r4, #0
 800e436:	e9c7 3408 	strd	r3, r4, [r7, #32]
        d2   = BYTES_TO_U32_LE( input, offset + 8  );
 800e43a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e43c:	3308      	adds	r3, #8
 800e43e:	687a      	ldr	r2, [r7, #4]
 800e440:	4413      	add	r3, r2
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	4619      	mov	r1, r3
 800e446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e448:	3309      	adds	r3, #9
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	4413      	add	r3, r2
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	021b      	lsls	r3, r3, #8
 800e452:	ea41 0203 	orr.w	r2, r1, r3
 800e456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e458:	330a      	adds	r3, #10
 800e45a:	6879      	ldr	r1, [r7, #4]
 800e45c:	440b      	add	r3, r1
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	041b      	lsls	r3, r3, #16
 800e462:	431a      	orrs	r2, r3
 800e464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e466:	330b      	adds	r3, #11
 800e468:	6879      	ldr	r1, [r7, #4]
 800e46a:	440b      	add	r3, r1
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	061b      	lsls	r3, r3, #24
 800e470:	4313      	orrs	r3, r2
 800e472:	f04f 0400 	mov.w	r4, #0
 800e476:	e9c7 3406 	strd	r3, r4, [r7, #24]
        d3   = BYTES_TO_U32_LE( input, offset + 12 );
 800e47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e47c:	330c      	adds	r3, #12
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	4413      	add	r3, r2
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	4619      	mov	r1, r3
 800e486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e488:	330d      	adds	r3, #13
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	4413      	add	r3, r2
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	021b      	lsls	r3, r3, #8
 800e492:	ea41 0203 	orr.w	r2, r1, r3
 800e496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e498:	330e      	adds	r3, #14
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	440b      	add	r3, r1
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	041b      	lsls	r3, r3, #16
 800e4a2:	431a      	orrs	r2, r3
 800e4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4a6:	330f      	adds	r3, #15
 800e4a8:	6879      	ldr	r1, [r7, #4]
 800e4aa:	440b      	add	r3, r1
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	061b      	lsls	r3, r3, #24
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	f04f 0400 	mov.w	r4, #0
 800e4b6:	e9c7 3404 	strd	r3, r4, [r7, #16]

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
 800e4ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4bc:	461d      	mov	r5, r3
 800e4be:	f04f 0600 	mov.w	r6, #0
 800e4c2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e4c6:	186b      	adds	r3, r5, r1
 800e4c8:	eb46 0402 	adc.w	r4, r6, r2
 800e4cc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        d1  += (uint64_t) acc1 + ( d0 >> 32U );
 800e4d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	f04f 0200 	mov.w	r2, #0
 800e4d8:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800e4dc:	f04f 0300 	mov.w	r3, #0
 800e4e0:	f04f 0400 	mov.w	r4, #0
 800e4e4:	0033      	movs	r3, r6
 800e4e6:	2400      	movs	r4, #0
 800e4e8:	185d      	adds	r5, r3, r1
 800e4ea:	eb44 0602 	adc.w	r6, r4, r2
 800e4ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e4f2:	186b      	adds	r3, r5, r1
 800e4f4:	eb46 0402 	adc.w	r4, r6, r2
 800e4f8:	e9c7 3408 	strd	r3, r4, [r7, #32]
        d2  += (uint64_t) acc2 + ( d1 >> 32U );
 800e4fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4fe:	4619      	mov	r1, r3
 800e500:	f04f 0200 	mov.w	r2, #0
 800e504:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800e508:	f04f 0300 	mov.w	r3, #0
 800e50c:	f04f 0400 	mov.w	r4, #0
 800e510:	0033      	movs	r3, r6
 800e512:	2400      	movs	r4, #0
 800e514:	185d      	adds	r5, r3, r1
 800e516:	eb44 0602 	adc.w	r6, r4, r2
 800e51a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e51e:	186b      	adds	r3, r5, r1
 800e520:	eb46 0402 	adc.w	r4, r6, r2
 800e524:	e9c7 3406 	strd	r3, r4, [r7, #24]
        d3  += (uint64_t) acc3 + ( d2 >> 32U );
 800e528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e52a:	4619      	mov	r1, r3
 800e52c:	f04f 0200 	mov.w	r2, #0
 800e530:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 800e534:	f04f 0300 	mov.w	r3, #0
 800e538:	f04f 0400 	mov.w	r4, #0
 800e53c:	0033      	movs	r3, r6
 800e53e:	2400      	movs	r4, #0
 800e540:	185d      	adds	r5, r3, r1
 800e542:	eb44 0602 	adc.w	r6, r4, r2
 800e546:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e54a:	186b      	adds	r3, r5, r1
 800e54c:	eb46 0402 	adc.w	r4, r6, r2
 800e550:	e9c7 3404 	strd	r3, r4, [r7, #16]
        acc0 = (uint32_t) d0;
 800e554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e556:	667b      	str	r3, [r7, #100]	; 0x64
        acc1 = (uint32_t) d1;
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	663b      	str	r3, [r7, #96]	; 0x60
        acc2 = (uint32_t) d2;
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	65fb      	str	r3, [r7, #92]	; 0x5c
        acc3 = (uint32_t) d3;
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	65bb      	str	r3, [r7, #88]	; 0x58
        acc4 += (uint32_t) ( d3 >> 32U ) + needs_padding;
 800e564:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e568:	f04f 0300 	mov.w	r3, #0
 800e56c:	f04f 0400 	mov.w	r4, #0
 800e570:	0013      	movs	r3, r2
 800e572:	2400      	movs	r4, #0
 800e574:	461a      	mov	r2, r3
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	4413      	add	r3, r2
 800e57a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e57c:	4413      	add	r3, r2
 800e57e:	657b      	str	r3, [r7, #84]	; 0x54

        /* Compute: acc *= r */
        d0 = mul64( acc0, r0  ) +
 800e580:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e582:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e584:	f7ff fec8 	bl	800e318 <mul64>
 800e588:	4605      	mov	r5, r0
 800e58a:	460e      	mov	r6, r1
             mul64( acc1, rs3 ) +
 800e58c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e58e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e590:	f7ff fec2 	bl	800e318 <mul64>
 800e594:	4603      	mov	r3, r0
 800e596:	460c      	mov	r4, r1
        d0 = mul64( acc0, r0  ) +
 800e598:	18e9      	adds	r1, r5, r3
 800e59a:	eb46 0204 	adc.w	r2, r6, r4
 800e59e:	468a      	mov	sl, r1
 800e5a0:	4693      	mov	fp, r2
             mul64( acc2, rs2 ) +
 800e5a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e5a4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e5a6:	f7ff feb7 	bl	800e318 <mul64>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
             mul64( acc1, rs3 ) +
 800e5ae:	eb1a 0402 	adds.w	r4, sl, r2
 800e5b2:	eb4b 0503 	adc.w	r5, fp, r3
             mul64( acc3, rs1 );
 800e5b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e5ba:	f7ff fead 	bl	800e318 <mul64>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
        d0 = mul64( acc0, r0  ) +
 800e5c2:	18a0      	adds	r0, r4, r2
 800e5c4:	eb45 0103 	adc.w	r1, r5, r3
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        d1 = mul64( acc0, r1  ) +
 800e5d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5d2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e5d4:	f7ff fea0 	bl	800e318 <mul64>
 800e5d8:	4605      	mov	r5, r0
 800e5da:	460e      	mov	r6, r1
             mul64( acc1, r0  ) +
 800e5dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e5de:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e5e0:	f7ff fe9a 	bl	800e318 <mul64>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	460c      	mov	r4, r1
        d1 = mul64( acc0, r1  ) +
 800e5e8:	18e9      	adds	r1, r5, r3
 800e5ea:	eb46 0204 	adc.w	r2, r6, r4
 800e5ee:	460c      	mov	r4, r1
 800e5f0:	4615      	mov	r5, r2
             mul64( acc2, rs3 ) +
 800e5f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e5f6:	f7ff fe8f 	bl	800e318 <mul64>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	460b      	mov	r3, r1
             mul64( acc1, r0  ) +
 800e5fe:	eb14 0a02 	adds.w	sl, r4, r2
 800e602:	eb45 0b03 	adc.w	fp, r5, r3
             mul64( acc3, rs2 ) +
 800e606:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e608:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e60a:	f7ff fe85 	bl	800e318 <mul64>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
             mul64( acc2, rs3 ) +
 800e612:	eb1a 0402 	adds.w	r4, sl, r2
 800e616:	eb4b 0503 	adc.w	r5, fp, r3
             mul64( acc4, rs1 );
 800e61a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e61c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e61e:	f7ff fe7b 	bl	800e318 <mul64>
 800e622:	4602      	mov	r2, r0
 800e624:	460b      	mov	r3, r1
        d1 = mul64( acc0, r1  ) +
 800e626:	18a0      	adds	r0, r4, r2
 800e628:	eb45 0103 	adc.w	r1, r5, r3
 800e62c:	4603      	mov	r3, r0
 800e62e:	460c      	mov	r4, r1
 800e630:	e9c7 3408 	strd	r3, r4, [r7, #32]
        d2 = mul64( acc0, r2  ) +
 800e634:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e636:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e638:	f7ff fe6e 	bl	800e318 <mul64>
 800e63c:	4605      	mov	r5, r0
 800e63e:	460e      	mov	r6, r1
             mul64( acc1, r1  ) +
 800e640:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e642:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e644:	f7ff fe68 	bl	800e318 <mul64>
 800e648:	4603      	mov	r3, r0
 800e64a:	460c      	mov	r4, r1
        d2 = mul64( acc0, r2  ) +
 800e64c:	18e9      	adds	r1, r5, r3
 800e64e:	eb46 0204 	adc.w	r2, r6, r4
 800e652:	460c      	mov	r4, r1
 800e654:	4615      	mov	r5, r2
             mul64( acc2, r0  ) +
 800e656:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e658:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e65a:	f7ff fe5d 	bl	800e318 <mul64>
 800e65e:	4602      	mov	r2, r0
 800e660:	460b      	mov	r3, r1
             mul64( acc1, r1  ) +
 800e662:	eb14 0a02 	adds.w	sl, r4, r2
 800e666:	eb45 0b03 	adc.w	fp, r5, r3
             mul64( acc3, rs3 ) +
 800e66a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e66c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e66e:	f7ff fe53 	bl	800e318 <mul64>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
             mul64( acc2, r0  ) +
 800e676:	eb1a 0402 	adds.w	r4, sl, r2
 800e67a:	eb4b 0503 	adc.w	r5, fp, r3
             mul64( acc4, rs2 );
 800e67e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e680:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e682:	f7ff fe49 	bl	800e318 <mul64>
 800e686:	4602      	mov	r2, r0
 800e688:	460b      	mov	r3, r1
        d2 = mul64( acc0, r2  ) +
 800e68a:	18a0      	adds	r0, r4, r2
 800e68c:	eb45 0103 	adc.w	r1, r5, r3
 800e690:	4603      	mov	r3, r0
 800e692:	460c      	mov	r4, r1
 800e694:	e9c7 3406 	strd	r3, r4, [r7, #24]
        d3 = mul64( acc0, r3  ) +
 800e698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e69a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800e69c:	f7ff fe3c 	bl	800e318 <mul64>
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	460e      	mov	r6, r1
             mul64( acc1, r2  ) +
 800e6a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e6a8:	f7ff fe36 	bl	800e318 <mul64>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	460c      	mov	r4, r1
        d3 = mul64( acc0, r3  ) +
 800e6b0:	18e9      	adds	r1, r5, r3
 800e6b2:	eb46 0204 	adc.w	r2, r6, r4
 800e6b6:	460c      	mov	r4, r1
 800e6b8:	4615      	mov	r5, r2
             mul64( acc2, r1  ) +
 800e6ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e6be:	f7ff fe2b 	bl	800e318 <mul64>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	460b      	mov	r3, r1
             mul64( acc1, r2  ) +
 800e6c6:	eb14 0a02 	adds.w	sl, r4, r2
 800e6ca:	eb45 0b03 	adc.w	fp, r5, r3
             mul64( acc3, r0  ) +
 800e6ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e6d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e6d2:	f7ff fe21 	bl	800e318 <mul64>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	460b      	mov	r3, r1
             mul64( acc2, r1  ) +
 800e6da:	eb1a 0402 	adds.w	r4, sl, r2
 800e6de:	eb4b 0503 	adc.w	r5, fp, r3
             mul64( acc4, rs3 );
 800e6e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e6e6:	f7ff fe17 	bl	800e318 <mul64>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	460b      	mov	r3, r1
        d3 = mul64( acc0, r3  ) +
 800e6ee:	18a0      	adds	r0, r4, r2
 800e6f0:	eb45 0103 	adc.w	r1, r5, r3
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	e9c7 3404 	strd	r3, r4, [r7, #16]
        acc4 *= r0;
 800e6fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e700:	fb02 f303 	mul.w	r3, r2, r3
 800e704:	657b      	str	r3, [r7, #84]	; 0x54

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += ( d0 >> 32 );
 800e706:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e70a:	f04f 0500 	mov.w	r5, #0
 800e70e:	f04f 0600 	mov.w	r6, #0
 800e712:	0015      	movs	r5, r2
 800e714:	2600      	movs	r6, #0
 800e716:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e71a:	186b      	adds	r3, r5, r1
 800e71c:	eb46 0402 	adc.w	r4, r6, r2
 800e720:	e9c7 3408 	strd	r3, r4, [r7, #32]
        d2 += ( d1 >> 32 );
 800e724:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e728:	f04f 0500 	mov.w	r5, #0
 800e72c:	f04f 0600 	mov.w	r6, #0
 800e730:	0015      	movs	r5, r2
 800e732:	2600      	movs	r6, #0
 800e734:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e738:	186b      	adds	r3, r5, r1
 800e73a:	eb46 0402 	adc.w	r4, r6, r2
 800e73e:	e9c7 3406 	strd	r3, r4, [r7, #24]
        d3 += ( d2 >> 32 );
 800e742:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e746:	f04f 0500 	mov.w	r5, #0
 800e74a:	f04f 0600 	mov.w	r6, #0
 800e74e:	0015      	movs	r5, r2
 800e750:	2600      	movs	r6, #0
 800e752:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e756:	186b      	adds	r3, r5, r1
 800e758:	eb46 0402 	adc.w	r4, r6, r2
 800e75c:	e9c7 3404 	strd	r3, r4, [r7, #16]
        acc0 = (uint32_t) d0;
 800e760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e762:	667b      	str	r3, [r7, #100]	; 0x64
        acc1 = (uint32_t) d1;
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	663b      	str	r3, [r7, #96]	; 0x60
        acc2 = (uint32_t) d2;
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	65fb      	str	r3, [r7, #92]	; 0x5c
        acc3 = (uint32_t) d3;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	65bb      	str	r3, [r7, #88]	; 0x58
        acc4 = (uint32_t) ( d3 >> 32 ) + acc4;
 800e770:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e774:	f04f 0300 	mov.w	r3, #0
 800e778:	f04f 0400 	mov.w	r4, #0
 800e77c:	0013      	movs	r3, r2
 800e77e:	2400      	movs	r4, #0
 800e780:	461a      	mov	r2, r3
 800e782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e784:	4413      	add	r3, r2
 800e786:	657b      	str	r3, [r7, #84]	; 0x54

        d0 = (uint64_t) acc0 + ( acc4 >> 2 ) + ( acc4 & 0xFFFFFFFCU );
 800e788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e78a:	461d      	mov	r5, r3
 800e78c:	f04f 0600 	mov.w	r6, #0
 800e790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e792:	089b      	lsrs	r3, r3, #2
 800e794:	f04f 0400 	mov.w	r4, #0
 800e798:	18e9      	adds	r1, r5, r3
 800e79a:	eb46 0204 	adc.w	r2, r6, r4
 800e79e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7a0:	f04f 0400 	mov.w	r4, #0
 800e7a4:	f06f 0503 	mvn.w	r5, #3
 800e7a8:	f04f 0600 	mov.w	r6, #0
 800e7ac:	ea03 0a05 	and.w	sl, r3, r5
 800e7b0:	ea04 0b06 	and.w	fp, r4, r6
 800e7b4:	eb1a 0301 	adds.w	r3, sl, r1
 800e7b8:	eb4b 0402 	adc.w	r4, fp, r2
 800e7bc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        acc4 &= 3U;
 800e7c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7c2:	f003 0303 	and.w	r3, r3, #3
 800e7c6:	657b      	str	r3, [r7, #84]	; 0x54
        acc0 = (uint32_t) d0;
 800e7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ca:	667b      	str	r3, [r7, #100]	; 0x64
        d0 = (uint64_t) acc1 + ( d0 >> 32U );
 800e7cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	f04f 0200 	mov.w	r2, #0
 800e7d4:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800e7d8:	f04f 0b00 	mov.w	fp, #0
 800e7dc:	f04f 0c00 	mov.w	ip, #0
 800e7e0:	46b3      	mov	fp, r6
 800e7e2:	f04f 0c00 	mov.w	ip, #0
 800e7e6:	eb1b 0301 	adds.w	r3, fp, r1
 800e7ea:	eb4c 0402 	adc.w	r4, ip, r2
 800e7ee:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        acc1 = (uint32_t) d0;
 800e7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f4:	663b      	str	r3, [r7, #96]	; 0x60
        d0 = (uint64_t) acc2 + ( d0 >> 32U );
 800e7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	f04f 0200 	mov.w	r2, #0
 800e7fe:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800e802:	f04f 0b00 	mov.w	fp, #0
 800e806:	f04f 0c00 	mov.w	ip, #0
 800e80a:	46b3      	mov	fp, r6
 800e80c:	f04f 0c00 	mov.w	ip, #0
 800e810:	eb1b 0301 	adds.w	r3, fp, r1
 800e814:	eb4c 0402 	adc.w	r4, ip, r2
 800e818:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        acc2 = (uint32_t) d0;
 800e81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81e:	65fb      	str	r3, [r7, #92]	; 0x5c
        d0 = (uint64_t) acc3 + ( d0 >> 32U );
 800e820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e822:	4619      	mov	r1, r3
 800e824:	f04f 0200 	mov.w	r2, #0
 800e828:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800e82c:	f04f 0b00 	mov.w	fp, #0
 800e830:	f04f 0c00 	mov.w	ip, #0
 800e834:	46b3      	mov	fp, r6
 800e836:	f04f 0c00 	mov.w	ip, #0
 800e83a:	eb1b 0301 	adds.w	r3, fp, r1
 800e83e:	eb4c 0402 	adc.w	r4, ip, r2
 800e842:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        acc3 = (uint32_t) d0;
 800e846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e848:	65bb      	str	r3, [r7, #88]	; 0x58
        d0 = (uint64_t) acc4 + ( d0 >> 32U );
 800e84a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e84c:	4619      	mov	r1, r3
 800e84e:	f04f 0200 	mov.w	r2, #0
 800e852:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800e856:	f04f 0b00 	mov.w	fp, #0
 800e85a:	f04f 0c00 	mov.w	ip, #0
 800e85e:	46b3      	mov	fp, r6
 800e860:	f04f 0c00 	mov.w	ip, #0
 800e864:	eb1b 0301 	adds.w	r3, fp, r1
 800e868:	eb4c 0402 	adc.w	r4, ip, r2
 800e86c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
        acc4 = (uint32_t) d0;
 800e870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e872:	657b      	str	r3, [r7, #84]	; 0x54

        offset    += POLY1305_BLOCK_SIZE_BYTES;
 800e874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e876:	3310      	adds	r3, #16
 800e878:	653b      	str	r3, [r7, #80]	; 0x50
    for( i = 0U; i < nblocks; i++ )
 800e87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e87c:	3301      	adds	r3, #1
 800e87e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	429a      	cmp	r2, r3
 800e886:	f4ff ad99 	bcc.w	800e3bc <poly1305_process+0x6e>
    }

    ctx->acc[0] = acc0;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e88e:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = acc1;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e894:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->acc[2] = acc2;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e89a:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->acc[3] = acc3;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8a0:	62da      	str	r2, [r3, #44]	; 0x2c
    ctx->acc[4] = acc4;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e8a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e8a8:	bf00      	nop
 800e8aa:	376c      	adds	r7, #108	; 0x6c
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	e8bd 8cf0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, fp, pc}

0800e8b2 <poly1305_compute_mac>:
 * \param mac               The buffer to where the MAC is written. Must be
 *                          big enough to contain the 16-byte MAC.
 */
static void poly1305_compute_mac( const mbedtls_poly1305_context *ctx,
                                  unsigned char mac[16] )
{
 800e8b2:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 800e8b6:	b093      	sub	sp, #76	; 0x4c
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
    uint32_t g0, g1, g2, g3, g4;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t mask;
    uint32_t mask_inv;

    acc0 = ctx->acc[0];
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a1b      	ldr	r3, [r3, #32]
 800e8c2:	647b      	str	r3, [r7, #68]	; 0x44
    acc1 = ctx->acc[1];
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c8:	643b      	str	r3, [r7, #64]	; 0x40
    acc2 = ctx->acc[2];
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    acc3 = ctx->acc[3];
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d4:	63bb      	str	r3, [r7, #56]	; 0x38
    acc4 = ctx->acc[4];
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8da:	637b      	str	r3, [r7, #52]	; 0x34
     * We do this by calculating acc - (2^130 - 5), then checking if
     * the 131st bit is set. If it is, then reduce: acc -= (2^130 - 5)
     */

    /* Calculate acc + -(2^130 - 5) */
    d  = ( (uint64_t) acc0 + 5U );
 800e8dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8de:	4619      	mov	r1, r3
 800e8e0:	f04f 0200 	mov.w	r2, #0
 800e8e4:	1d4b      	adds	r3, r1, #5
 800e8e6:	f142 0400 	adc.w	r4, r2, #0
 800e8ea:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    g0 = (uint32_t) d;
 800e8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f0:	627b      	str	r3, [r7, #36]	; 0x24
    d  = ( (uint64_t) acc1 + ( d >> 32 ) );
 800e8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	f04f 0200 	mov.w	r2, #0
 800e8fa:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800e8fe:	f04f 0b00 	mov.w	fp, #0
 800e902:	f04f 0c00 	mov.w	ip, #0
 800e906:	46b3      	mov	fp, r6
 800e908:	f04f 0c00 	mov.w	ip, #0
 800e90c:	eb1b 0301 	adds.w	r3, fp, r1
 800e910:	eb4c 0402 	adc.w	r4, ip, r2
 800e914:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    g1 = (uint32_t) d;
 800e918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91a:	623b      	str	r3, [r7, #32]
    d  = ( (uint64_t) acc2 + ( d >> 32 ) );
 800e91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91e:	4619      	mov	r1, r3
 800e920:	f04f 0200 	mov.w	r2, #0
 800e924:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800e928:	f04f 0b00 	mov.w	fp, #0
 800e92c:	f04f 0c00 	mov.w	ip, #0
 800e930:	46b3      	mov	fp, r6
 800e932:	f04f 0c00 	mov.w	ip, #0
 800e936:	eb1b 0301 	adds.w	r3, fp, r1
 800e93a:	eb4c 0402 	adc.w	r4, ip, r2
 800e93e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    g2 = (uint32_t) d;
 800e942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e944:	61fb      	str	r3, [r7, #28]
    d  = ( (uint64_t) acc3 + ( d >> 32 ) );
 800e946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e948:	4619      	mov	r1, r3
 800e94a:	f04f 0200 	mov.w	r2, #0
 800e94e:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800e952:	f04f 0b00 	mov.w	fp, #0
 800e956:	f04f 0c00 	mov.w	ip, #0
 800e95a:	46b3      	mov	fp, r6
 800e95c:	f04f 0c00 	mov.w	ip, #0
 800e960:	eb1b 0301 	adds.w	r3, fp, r1
 800e964:	eb4c 0402 	adc.w	r4, ip, r2
 800e968:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    g3 = (uint32_t) d;
 800e96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96e:	61bb      	str	r3, [r7, #24]
    g4 = acc4 + (uint32_t) ( d >> 32U );
 800e970:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e974:	f04f 0300 	mov.w	r3, #0
 800e978:	f04f 0400 	mov.w	r4, #0
 800e97c:	0013      	movs	r3, r2
 800e97e:	2400      	movs	r4, #0
 800e980:	461a      	mov	r2, r3
 800e982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e984:	4413      	add	r3, r2
 800e986:	617b      	str	r3, [r7, #20]

    /* mask == 0xFFFFFFFF if 131st bit is set, otherwise mask == 0 */
    mask = (uint32_t) 0U - ( g4 >> 2U );
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	089b      	lsrs	r3, r3, #2
 800e98c:	425b      	negs	r3, r3
 800e98e:	613b      	str	r3, [r7, #16]
    mask_inv = ~mask;
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	43db      	mvns	r3, r3
 800e994:	60fb      	str	r3, [r7, #12]

    /* If 131st bit is set then acc=g, otherwise, acc is unmodified */
    acc0 = ( acc0 & mask_inv ) | ( g0 & mask );
 800e996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	401a      	ands	r2, r3
 800e99c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	400b      	ands	r3, r1
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	647b      	str	r3, [r7, #68]	; 0x44
    acc1 = ( acc1 & mask_inv ) | ( g1 & mask );
 800e9a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	401a      	ands	r2, r3
 800e9ac:	6a39      	ldr	r1, [r7, #32]
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	400b      	ands	r3, r1
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	643b      	str	r3, [r7, #64]	; 0x40
    acc2 = ( acc2 & mask_inv ) | ( g2 & mask );
 800e9b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	401a      	ands	r2, r3
 800e9bc:	69f9      	ldr	r1, [r7, #28]
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	400b      	ands	r3, r1
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    acc3 = ( acc3 & mask_inv ) | ( g3 & mask );
 800e9c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	401a      	ands	r2, r3
 800e9cc:	69b9      	ldr	r1, [r7, #24]
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	400b      	ands	r3, r1
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Add 's' */
    d = (uint64_t) acc0 + ctx->s[0];
 800e9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9d8:	4619      	mov	r1, r3
 800e9da:	f04f 0200 	mov.w	r2, #0
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	691b      	ldr	r3, [r3, #16]
 800e9e2:	461d      	mov	r5, r3
 800e9e4:	f04f 0600 	mov.w	r6, #0
 800e9e8:	186b      	adds	r3, r5, r1
 800e9ea:	eb46 0402 	adc.w	r4, r6, r2
 800e9ee:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    acc0 = (uint32_t) d;
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	647b      	str	r3, [r7, #68]	; 0x44
    d = (uint64_t) acc1 + ctx->s[1] + ( d >> 32U );
 800e9f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9f8:	461d      	mov	r5, r3
 800e9fa:	f04f 0600 	mov.w	r6, #0
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	695b      	ldr	r3, [r3, #20]
 800ea02:	f04f 0400 	mov.w	r4, #0
 800ea06:	18e9      	adds	r1, r5, r3
 800ea08:	eb46 0204 	adc.w	r2, r6, r4
 800ea0c:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800ea10:	f04f 0b00 	mov.w	fp, #0
 800ea14:	f04f 0c00 	mov.w	ip, #0
 800ea18:	46b3      	mov	fp, r6
 800ea1a:	f04f 0c00 	mov.w	ip, #0
 800ea1e:	eb1b 0301 	adds.w	r3, fp, r1
 800ea22:	eb4c 0402 	adc.w	r4, ip, r2
 800ea26:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    acc1 = (uint32_t) d;
 800ea2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2c:	643b      	str	r3, [r7, #64]	; 0x40
    d = (uint64_t) acc2 + ctx->s[2] + ( d >> 32U );
 800ea2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea30:	461d      	mov	r5, r3
 800ea32:	f04f 0600 	mov.w	r6, #0
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	699b      	ldr	r3, [r3, #24]
 800ea3a:	f04f 0400 	mov.w	r4, #0
 800ea3e:	18e9      	adds	r1, r5, r3
 800ea40:	eb46 0204 	adc.w	r2, r6, r4
 800ea44:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 800ea48:	f04f 0b00 	mov.w	fp, #0
 800ea4c:	f04f 0c00 	mov.w	ip, #0
 800ea50:	46b3      	mov	fp, r6
 800ea52:	f04f 0c00 	mov.w	ip, #0
 800ea56:	eb1b 0301 	adds.w	r3, fp, r1
 800ea5a:	eb4c 0402 	adc.w	r4, ip, r2
 800ea5e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    acc2 = (uint32_t) d;
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	63fb      	str	r3, [r7, #60]	; 0x3c
    acc3 += ctx->s[3] + (uint32_t) ( d >> 32U );
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	69d8      	ldr	r0, [r3, #28]
 800ea6a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ea6e:	f04f 0300 	mov.w	r3, #0
 800ea72:	f04f 0400 	mov.w	r4, #0
 800ea76:	0013      	movs	r3, r2
 800ea78:	2400      	movs	r4, #0
 800ea7a:	4403      	add	r3, r0
 800ea7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea7e:	4413      	add	r3, r2
 800ea80:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Compute MAC (128 least significant bits of the accumulator) */
    mac[ 0] = (unsigned char)( acc0       );
 800ea82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea84:	b2da      	uxtb	r2, r3
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	701a      	strb	r2, [r3, #0]
    mac[ 1] = (unsigned char)( acc0 >>  8 );
 800ea8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea8c:	0a1a      	lsrs	r2, r3, #8
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	3301      	adds	r3, #1
 800ea92:	b2d2      	uxtb	r2, r2
 800ea94:	701a      	strb	r2, [r3, #0]
    mac[ 2] = (unsigned char)( acc0 >> 16 );
 800ea96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea98:	0c1a      	lsrs	r2, r3, #16
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	3302      	adds	r3, #2
 800ea9e:	b2d2      	uxtb	r2, r2
 800eaa0:	701a      	strb	r2, [r3, #0]
    mac[ 3] = (unsigned char)( acc0 >> 24 );
 800eaa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaa4:	0e1a      	lsrs	r2, r3, #24
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	3303      	adds	r3, #3
 800eaaa:	b2d2      	uxtb	r2, r2
 800eaac:	701a      	strb	r2, [r3, #0]
    mac[ 4] = (unsigned char)( acc1       );
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	3304      	adds	r3, #4
 800eab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eab4:	b2d2      	uxtb	r2, r2
 800eab6:	701a      	strb	r2, [r3, #0]
    mac[ 5] = (unsigned char)( acc1 >>  8 );
 800eab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaba:	0a1a      	lsrs	r2, r3, #8
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	3305      	adds	r3, #5
 800eac0:	b2d2      	uxtb	r2, r2
 800eac2:	701a      	strb	r2, [r3, #0]
    mac[ 6] = (unsigned char)( acc1 >> 16 );
 800eac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eac6:	0c1a      	lsrs	r2, r3, #16
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	3306      	adds	r3, #6
 800eacc:	b2d2      	uxtb	r2, r2
 800eace:	701a      	strb	r2, [r3, #0]
    mac[ 7] = (unsigned char)( acc1 >> 24 );
 800ead0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ead2:	0e1a      	lsrs	r2, r3, #24
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	3307      	adds	r3, #7
 800ead8:	b2d2      	uxtb	r2, r2
 800eada:	701a      	strb	r2, [r3, #0]
    mac[ 8] = (unsigned char)( acc2       );
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	3308      	adds	r3, #8
 800eae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eae2:	b2d2      	uxtb	r2, r2
 800eae4:	701a      	strb	r2, [r3, #0]
    mac[ 9] = (unsigned char)( acc2 >>  8 );
 800eae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eae8:	0a1a      	lsrs	r2, r3, #8
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	3309      	adds	r3, #9
 800eaee:	b2d2      	uxtb	r2, r2
 800eaf0:	701a      	strb	r2, [r3, #0]
    mac[10] = (unsigned char)( acc2 >> 16 );
 800eaf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf4:	0c1a      	lsrs	r2, r3, #16
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	330a      	adds	r3, #10
 800eafa:	b2d2      	uxtb	r2, r2
 800eafc:	701a      	strb	r2, [r3, #0]
    mac[11] = (unsigned char)( acc2 >> 24 );
 800eafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb00:	0e1a      	lsrs	r2, r3, #24
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	330b      	adds	r3, #11
 800eb06:	b2d2      	uxtb	r2, r2
 800eb08:	701a      	strb	r2, [r3, #0]
    mac[12] = (unsigned char)( acc3       );
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	330c      	adds	r3, #12
 800eb0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb10:	b2d2      	uxtb	r2, r2
 800eb12:	701a      	strb	r2, [r3, #0]
    mac[13] = (unsigned char)( acc3 >>  8 );
 800eb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb16:	0a1a      	lsrs	r2, r3, #8
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	330d      	adds	r3, #13
 800eb1c:	b2d2      	uxtb	r2, r2
 800eb1e:	701a      	strb	r2, [r3, #0]
    mac[14] = (unsigned char)( acc3 >> 16 );
 800eb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb22:	0c1a      	lsrs	r2, r3, #16
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	330e      	adds	r3, #14
 800eb28:	b2d2      	uxtb	r2, r2
 800eb2a:	701a      	strb	r2, [r3, #0]
    mac[15] = (unsigned char)( acc3 >> 24 );
 800eb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2e:	0e1a      	lsrs	r2, r3, #24
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	330f      	adds	r3, #15
 800eb34:	b2d2      	uxtb	r2, r2
 800eb36:	701a      	strb	r2, [r3, #0]
}
 800eb38:	bf00      	nop
 800eb3a:	374c      	adds	r7, #76	; 0x4c
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 800eb42:	4770      	bx	lr

0800eb44 <mbedtls_poly1305_init>:

void mbedtls_poly1305_init( mbedtls_poly1305_context *ctx )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
    POLY1305_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 800eb4c:	2148      	movs	r1, #72	; 0x48
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f7ff fbce 	bl	800e2f0 <mbedtls_platform_zeroize>
}
 800eb54:	bf00      	nop
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <mbedtls_poly1305_free>:

void mbedtls_poly1305_free( mbedtls_poly1305_context *ctx )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d004      	beq.n	800eb74 <mbedtls_poly1305_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 800eb6a:	2148      	movs	r1, #72	; 0x48
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f7ff fbbf 	bl	800e2f0 <mbedtls_platform_zeroize>
 800eb72:	e000      	b.n	800eb76 <mbedtls_poly1305_free+0x1a>
        return;
 800eb74:	bf00      	nop
}
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <mbedtls_poly1305_starts>:

int mbedtls_poly1305_starts( mbedtls_poly1305_context *ctx,
                             const unsigned char key[32] )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( key != NULL );

    /* r &= 0x0ffffffc0ffffffc0ffffffc0fffffff */
    ctx->r[0] = BYTES_TO_U32_LE( key, 0 )  & 0x0FFFFFFFU;
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	3301      	adds	r3, #1
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	021b      	lsls	r3, r3, #8
 800eb94:	431a      	orrs	r2, r3
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	3302      	adds	r3, #2
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	041b      	lsls	r3, r3, #16
 800eb9e:	431a      	orrs	r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	3303      	adds	r3, #3
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	061b      	lsls	r3, r3, #24
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	601a      	str	r2, [r3, #0]
    ctx->r[1] = BYTES_TO_U32_LE( key, 4 )  & 0x0FFFFFFCU;
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	3304      	adds	r3, #4
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	461a      	mov	r2, r3
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	3305      	adds	r3, #5
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	021b      	lsls	r3, r3, #8
 800ebc2:	431a      	orrs	r2, r3
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	3306      	adds	r3, #6
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	041b      	lsls	r3, r3, #16
 800ebcc:	431a      	orrs	r2, r3
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	3307      	adds	r3, #7
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	061b      	lsls	r3, r3, #24
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ebdc:	f023 0303 	bic.w	r3, r3, #3
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	6053      	str	r3, [r2, #4]
    ctx->r[2] = BYTES_TO_U32_LE( key, 8 )  & 0x0FFFFFFCU;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	3308      	adds	r3, #8
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	461a      	mov	r2, r3
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	3309      	adds	r3, #9
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	021b      	lsls	r3, r3, #8
 800ebf4:	431a      	orrs	r2, r3
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	330a      	adds	r3, #10
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	041b      	lsls	r3, r3, #16
 800ebfe:	431a      	orrs	r2, r3
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	330b      	adds	r3, #11
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	061b      	lsls	r3, r3, #24
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ec0e:	f023 0303 	bic.w	r3, r3, #3
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	6093      	str	r3, [r2, #8]
    ctx->r[3] = BYTES_TO_U32_LE( key, 12 ) & 0x0FFFFFFCU;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	330c      	adds	r3, #12
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	330d      	adds	r3, #13
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	021b      	lsls	r3, r3, #8
 800ec26:	431a      	orrs	r2, r3
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	330e      	adds	r3, #14
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	041b      	lsls	r3, r3, #16
 800ec30:	431a      	orrs	r2, r3
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	330f      	adds	r3, #15
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	061b      	lsls	r3, r3, #24
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ec40:	f023 0303 	bic.w	r3, r3, #3
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	60d3      	str	r3, [r2, #12]

    ctx->s[0] = BYTES_TO_U32_LE( key, 16 );
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	3310      	adds	r3, #16
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	3311      	adds	r3, #17
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	021b      	lsls	r3, r3, #8
 800ec58:	431a      	orrs	r2, r3
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	3312      	adds	r3, #18
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	041b      	lsls	r3, r3, #16
 800ec62:	431a      	orrs	r2, r3
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	3313      	adds	r3, #19
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	061b      	lsls	r3, r3, #24
 800ec6c:	431a      	orrs	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	611a      	str	r2, [r3, #16]
    ctx->s[1] = BYTES_TO_U32_LE( key, 20 );
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	3314      	adds	r3, #20
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	461a      	mov	r2, r3
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	3315      	adds	r3, #21
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	021b      	lsls	r3, r3, #8
 800ec82:	431a      	orrs	r2, r3
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	3316      	adds	r3, #22
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	041b      	lsls	r3, r3, #16
 800ec8c:	431a      	orrs	r2, r3
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	3317      	adds	r3, #23
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	061b      	lsls	r3, r3, #24
 800ec96:	431a      	orrs	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	615a      	str	r2, [r3, #20]
    ctx->s[2] = BYTES_TO_U32_LE( key, 24 );
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	3318      	adds	r3, #24
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	461a      	mov	r2, r3
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	3319      	adds	r3, #25
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	021b      	lsls	r3, r3, #8
 800ecac:	431a      	orrs	r2, r3
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	331a      	adds	r3, #26
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	041b      	lsls	r3, r3, #16
 800ecb6:	431a      	orrs	r2, r3
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	331b      	adds	r3, #27
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	061b      	lsls	r3, r3, #24
 800ecc0:	431a      	orrs	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	619a      	str	r2, [r3, #24]
    ctx->s[3] = BYTES_TO_U32_LE( key, 28 );
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	331c      	adds	r3, #28
 800ecca:	781b      	ldrb	r3, [r3, #0]
 800eccc:	461a      	mov	r2, r3
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	331d      	adds	r3, #29
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	021b      	lsls	r3, r3, #8
 800ecd6:	431a      	orrs	r2, r3
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	331e      	adds	r3, #30
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	041b      	lsls	r3, r3, #16
 800ece0:	431a      	orrs	r2, r3
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	331f      	adds	r3, #31
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	061b      	lsls	r3, r3, #24
 800ecea:	431a      	orrs	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	61da      	str	r2, [r3, #28]

    /* Initial accumulator state */
    ctx->acc[0] = 0U;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = 0U;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	625a      	str	r2, [r3, #36]	; 0x24
    ctx->acc[2] = 0U;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	629a      	str	r2, [r3, #40]	; 0x28
    ctx->acc[3] = 0U;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	62da      	str	r2, [r3, #44]	; 0x2c
    ctx->acc[4] = 0U;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Queue initially empty */
    mbedtls_platform_zeroize( ctx->queue, sizeof( ctx->queue ) );
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	3334      	adds	r3, #52	; 0x34
 800ed12:	2110      	movs	r1, #16
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7ff faeb 	bl	800e2f0 <mbedtls_platform_zeroize>
    ctx->queue_len = 0U;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	645a      	str	r2, [r3, #68]	; 0x44

    return( 0 );
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3708      	adds	r7, #8
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}

0800ed2a <mbedtls_poly1305_update>:

int mbedtls_poly1305_update( mbedtls_poly1305_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 800ed2a:	b580      	push	{r7, lr}
 800ed2c:	b088      	sub	sp, #32
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	60f8      	str	r0, [r7, #12]
 800ed32:	60b9      	str	r1, [r7, #8]
 800ed34:	607a      	str	r2, [r7, #4]
    size_t offset    = 0U;
 800ed36:	2300      	movs	r3, #0
 800ed38:	61fb      	str	r3, [r7, #28]
    size_t remaining = ilen;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	61bb      	str	r3, [r7, #24]
    size_t queue_free_len;
    size_t nblocks;
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ( remaining > 0U ) && ( ctx->queue_len > 0U ) )
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d03e      	beq.n	800edc2 <mbedtls_poly1305_update+0x98>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d03a      	beq.n	800edc2 <mbedtls_poly1305_update+0x98>
    {
        queue_free_len = ( POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len );
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed50:	f1c3 0310 	rsb	r3, r3, #16
 800ed54:	617b      	str	r3, [r7, #20]

        if( ilen < queue_free_len )
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d213      	bcs.n	800ed86 <mbedtls_poly1305_update+0x5c>
        {
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy( &ctx->queue[ctx->queue_len],
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed62:	3330      	adds	r3, #48	; 0x30
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	4413      	add	r3, r2
 800ed68:	3304      	adds	r3, #4
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	68b9      	ldr	r1, [r7, #8]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f006 f9d3 	bl	801511a <memcpy>
                    input,
                    ilen );

            ctx->queue_len += ilen;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	441a      	add	r2, r3
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	645a      	str	r2, [r3, #68]	; 0x44

            remaining = 0U;
 800ed80:	2300      	movs	r3, #0
 800ed82:	61bb      	str	r3, [r7, #24]
 800ed84:	e01d      	b.n	800edc2 <mbedtls_poly1305_update+0x98>
        }
        else
        {
            /* Enough data to produce a complete block */
            memcpy( &ctx->queue[ctx->queue_len],
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed8a:	3330      	adds	r3, #48	; 0x30
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	4413      	add	r3, r2
 800ed90:	3304      	adds	r3, #4
 800ed92:	697a      	ldr	r2, [r7, #20]
 800ed94:	68b9      	ldr	r1, [r7, #8]
 800ed96:	4618      	mov	r0, r3
 800ed98:	f006 f9bf 	bl	801511a <memcpy>
                    input,
                    queue_free_len );

            ctx->queue_len = 0U;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	645a      	str	r2, [r3, #68]	; 0x44

            poly1305_process( ctx, 1U, ctx->queue, 1U ); /* add padding bit */
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eda8:	2301      	movs	r3, #1
 800edaa:	2101      	movs	r1, #1
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f7ff face 	bl	800e34e <poly1305_process>

            offset    += queue_free_len;
 800edb2:	69fa      	ldr	r2, [r7, #28]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	4413      	add	r3, r2
 800edb8:	61fb      	str	r3, [r7, #28]
            remaining -= queue_free_len;
 800edba:	69ba      	ldr	r2, [r7, #24]
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	61bb      	str	r3, [r7, #24]
        }
    }

    if( remaining >= POLY1305_BLOCK_SIZE_BYTES )
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	2b0f      	cmp	r3, #15
 800edc6:	d913      	bls.n	800edf0 <mbedtls_poly1305_update+0xc6>
    {
        nblocks = remaining / POLY1305_BLOCK_SIZE_BYTES;
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	091b      	lsrs	r3, r3, #4
 800edcc:	613b      	str	r3, [r7, #16]

        poly1305_process( ctx, nblocks, &input[offset], 1U );
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	441a      	add	r2, r3
 800edd4:	2301      	movs	r3, #1
 800edd6:	6939      	ldr	r1, [r7, #16]
 800edd8:	68f8      	ldr	r0, [r7, #12]
 800edda:	f7ff fab8 	bl	800e34e <poly1305_process>

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	011b      	lsls	r3, r3, #4
 800ede2:	69fa      	ldr	r2, [r7, #28]
 800ede4:	4413      	add	r3, r2
 800ede6:	61fb      	str	r3, [r7, #28]
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	f003 030f 	and.w	r3, r3, #15
 800edee:	61bb      	str	r3, [r7, #24]
    }

    if( remaining > 0U )
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00c      	beq.n	800ee10 <mbedtls_poly1305_update+0xe6>
    {
        /* Store partial block */
        ctx->queue_len = remaining;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	69ba      	ldr	r2, [r7, #24]
 800edfa:	645a      	str	r2, [r3, #68]	; 0x44
        memcpy( ctx->queue, &input[offset], remaining );
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ee02:	68ba      	ldr	r2, [r7, #8]
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	4413      	add	r3, r2
 800ee08:	69ba      	ldr	r2, [r7, #24]
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	f006 f985 	bl	801511a <memcpy>
    }

    return( 0 );
 800ee10:	2300      	movs	r3, #0
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3720      	adds	r7, #32
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}

0800ee1a <mbedtls_poly1305_finish>:

int mbedtls_poly1305_finish( mbedtls_poly1305_context *ctx,
                             unsigned char mac[16] )
{
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
 800ee22:	6039      	str	r1, [r7, #0]
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( mac != NULL );

    /* Process any leftover data */
    if( ctx->queue_len > 0U )
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d021      	beq.n	800ee70 <mbedtls_poly1305_finish+0x56>
    {
        /* Add padding bit */
        ctx->queue[ctx->queue_len] = 1U;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	4413      	add	r3, r2
 800ee34:	2201      	movs	r2, #1
 800ee36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ctx->queue_len++;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee3e:	1c5a      	adds	r2, r3, #1
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	645a      	str	r2, [r3, #68]	; 0x44

        /* Pad with zeroes */
        memset( &ctx->queue[ctx->queue_len],
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee48:	3330      	adds	r3, #48	; 0x30
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	1d18      	adds	r0, r3, #4
                0,
                POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len );
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        memset( &ctx->queue[ctx->queue_len],
 800ee54:	f1c3 0310 	rsb	r3, r3, #16
 800ee58:	461a      	mov	r2, r3
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	f006 f981 	bl	8015162 <memset>

        poly1305_process( ctx, 1U,          /* Process 1 block */
                          ctx->queue, 0U ); /* Already padded above */
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f103 0234 	add.w	r2, r3, #52	; 0x34
        poly1305_process( ctx, 1U,          /* Process 1 block */
 800ee66:	2300      	movs	r3, #0
 800ee68:	2101      	movs	r1, #1
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f7ff fa6f 	bl	800e34e <poly1305_process>
    }

    poly1305_compute_mac( ctx, mac );
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f7ff fd1d 	bl	800e8b2 <poly1305_compute_mac>

    return( 0 );
 800ee78:	2300      	movs	r3, #0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <mbedtls_svc_key_id_is_null>:
 * \param key Key identifier.
 *
 * \return Non-zero if the key identifier is null, zero otherwise.
 */
static inline int mbedtls_svc_key_id_is_null( mbedtls_svc_key_id_t key )
{
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
    return( key == 0 );
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	bf0c      	ite	eq
 800ee90:	2301      	moveq	r3, #1
 800ee92:	2300      	movne	r3, #0
 800ee94:	b2db      	uxtb	r3, r3
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	370c      	adds	r7, #12
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr

0800eea2 <psa_get_key_id>:
{
 800eea2:	b480      	push	{r7}
 800eea4:	b083      	sub	sp, #12
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
    return( attributes->core.id );
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	689b      	ldr	r3, [r3, #8]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	370c      	adds	r7, #12
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr

0800eeba <psa_get_key_lifetime>:
{
 800eeba:	b480      	push	{r7}
 800eebc:	b083      	sub	sp, #12
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
    return( attributes->core.lifetime );
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	685b      	ldr	r3, [r3, #4]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	370c      	adds	r7, #12
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr

0800eed2 <psa_get_key_bits>:
        attributes->core.bits = (psa_key_bits_t) bits;
}

static inline size_t psa_get_key_bits(
    const psa_key_attributes_t *attributes)
{
 800eed2:	b480      	push	{r7}
 800eed4:	b083      	sub	sp, #12
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
    return( attributes->core.bits );
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	885b      	ldrh	r3, [r3, #2]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	370c      	adds	r7, #12
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <psa_key_slot_get_slot_number>:
 *                   the description of a key of a dynamically registered
 *                   secure element, otherwise the behaviour is undefined.
 */
static inline psa_key_slot_number_t psa_key_slot_get_slot_number(
    const psa_key_slot_t *slot )
{
 800eeea:	b490      	push	{r4, r7}
 800eeec:	b082      	sub	sp, #8
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
    return( *( (psa_key_slot_number_t *)( slot->key.data ) ) );
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6a1b      	ldr	r3, [r3, #32]
 800eef6:	e9d3 3400 	ldrd	r3, r4, [r3]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	4621      	mov	r1, r4
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bc90      	pop	{r4, r7}
 800ef04:	4770      	bx	lr
	...

0800ef08 <psa_crypto_prepare_transaction>:
 *
 * \param type          The type of transaction to start.
 */
static inline void psa_crypto_prepare_transaction(
    psa_crypto_transaction_type_t type )
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	4603      	mov	r3, r0
 800ef10:	80fb      	strh	r3, [r7, #6]
    psa_crypto_transaction.unknown.type = type;
 800ef12:	4a04      	ldr	r2, [pc, #16]	; (800ef24 <psa_crypto_prepare_transaction+0x1c>)
 800ef14:	88fb      	ldrh	r3, [r7, #6]
 800ef16:	8013      	strh	r3, [r2, #0]
}
 800ef18:	bf00      	nop
 800ef1a:	370c      	adds	r7, #12
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr
 800ef24:	200028b0 	.word	0x200028b0

0800ef28 <key_type_is_raw_bytes>:
/****************************************************************/
/* Global data, support functions and library management */
/****************************************************************/

static int key_type_is_raw_bytes( psa_key_type_t type )
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	4603      	mov	r3, r0
 800ef30:	80fb      	strh	r3, [r7, #6]
    return( PSA_KEY_TYPE_IS_UNSTRUCTURED( type ) );
 800ef32:	88fb      	ldrh	r3, [r7, #6]
 800ef34:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ef38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef3c:	d005      	beq.n	800ef4a <key_type_is_raw_bytes+0x22>
 800ef3e:	88fb      	ldrh	r3, [r7, #6]
 800ef40:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ef44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef48:	d101      	bne.n	800ef4e <key_type_is_raw_bytes+0x26>
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e000      	b.n	800ef50 <key_type_is_raw_bytes+0x28>
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <mbedtls_to_psa_error>:
#define GUARD_MODULE_INITIALIZED        \
    if( global_data.initialized == 0 )  \
        return( PSA_ERROR_BAD_STATE );

psa_status_t mbedtls_to_psa_error( int ret )
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b085      	sub	sp, #20
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
    /* Mbed TLS error codes can combine a high-level error code and a
     * low-level error code. The low-level error usually reflects the
     * root cause better, so dispatch on that preferably. */
    int low_level_ret = - ( -ret & 0x007f );
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	425b      	negs	r3, r3
 800ef68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef6c:	425b      	negs	r3, r3
 800ef6e:	60fb      	str	r3, [r7, #12]
    switch( low_level_ret != 0 ? low_level_ret : ret )
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d001      	beq.n	800ef7a <mbedtls_to_psa_error+0x1e>
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	e000      	b.n	800ef7c <mbedtls_to_psa_error+0x20>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f513 5f64 	cmn.w	r3, #14592	; 0x3900
 800ef80:	f000 8236 	beq.w	800f3f0 <mbedtls_to_psa_error+0x494>
 800ef84:	f513 5f64 	cmn.w	r3, #14592	; 0x3900
 800ef88:	f300 80e1 	bgt.w	800f14e <mbedtls_to_psa_error+0x1f2>
 800ef8c:	f513 4f88 	cmn.w	r3, #17408	; 0x4400
 800ef90:	f000 8249 	beq.w	800f426 <mbedtls_to_psa_error+0x4ca>
 800ef94:	f513 4f88 	cmn.w	r3, #17408	; 0x4400
 800ef98:	dc6c      	bgt.n	800f074 <mbedtls_to_psa_error+0x118>
 800ef9a:	f513 4fa2 	cmn.w	r3, #20736	; 0x5100
 800ef9e:	f000 81ee 	beq.w	800f37e <mbedtls_to_psa_error+0x422>
 800efa2:	f513 4fa2 	cmn.w	r3, #20736	; 0x5100
 800efa6:	dc30      	bgt.n	800f00a <mbedtls_to_psa_error+0xae>
 800efa8:	f513 4fc3 	cmn.w	r3, #24960	; 0x6180
 800efac:	f000 81c0 	beq.w	800f330 <mbedtls_to_psa_error+0x3d4>
 800efb0:	f513 4fc3 	cmn.w	r3, #24960	; 0x6180
 800efb4:	dc14      	bgt.n	800efe0 <mbedtls_to_psa_error+0x84>
 800efb6:	f513 4fc6 	cmn.w	r3, #25344	; 0x6300
 800efba:	f000 81c2 	beq.w	800f342 <mbedtls_to_psa_error+0x3e6>
 800efbe:	f513 4fc6 	cmn.w	r3, #25344	; 0x6300
 800efc2:	dc04      	bgt.n	800efce <mbedtls_to_psa_error+0x72>
 800efc4:	f513 4fc7 	cmn.w	r3, #25472	; 0x6380
 800efc8:	f000 81be 	beq.w	800f348 <mbedtls_to_psa_error+0x3ec>
 800efcc:	e249      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800efce:	f513 4fc5 	cmn.w	r3, #25216	; 0x6280
 800efd2:	f000 81b3 	beq.w	800f33c <mbedtls_to_psa_error+0x3e0>
 800efd6:	f513 4fc4 	cmn.w	r3, #25088	; 0x6200
 800efda:	f000 81ac 	beq.w	800f336 <mbedtls_to_psa_error+0x3da>
 800efde:	e240      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800efe0:	f513 4fc1 	cmn.w	r3, #24704	; 0x6080
 800efe4:	f000 819e 	beq.w	800f324 <mbedtls_to_psa_error+0x3c8>
 800efe8:	f513 4fc1 	cmn.w	r3, #24704	; 0x6080
 800efec:	dc04      	bgt.n	800eff8 <mbedtls_to_psa_error+0x9c>
 800efee:	f513 4fc2 	cmn.w	r3, #24832	; 0x6100
 800eff2:	f000 819a 	beq.w	800f32a <mbedtls_to_psa_error+0x3ce>
 800eff6:	e234      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800eff8:	f513 4fa4 	cmn.w	r3, #20992	; 0x5200
 800effc:	f000 81c5 	beq.w	800f38a <mbedtls_to_psa_error+0x42e>
 800f000:	f513 4fa3 	cmn.w	r3, #20864	; 0x5180
 800f004:	f000 81be 	beq.w	800f384 <mbedtls_to_psa_error+0x428>
 800f008:	e22b      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f00a:	f513 4f9c 	cmn.w	r3, #19968	; 0x4e00
 800f00e:	f000 821c 	beq.w	800f44a <mbedtls_to_psa_error+0x4ee>
 800f012:	f513 4f9c 	cmn.w	r3, #19968	; 0x4e00
 800f016:	dc14      	bgt.n	800f042 <mbedtls_to_psa_error+0xe6>
 800f018:	f513 4f9f 	cmn.w	r3, #20352	; 0x4f80
 800f01c:	f000 820c 	beq.w	800f438 <mbedtls_to_psa_error+0x4dc>
 800f020:	f513 4f9f 	cmn.w	r3, #20352	; 0x4f80
 800f024:	dc04      	bgt.n	800f030 <mbedtls_to_psa_error+0xd4>
 800f026:	f513 4fa1 	cmn.w	r3, #20608	; 0x5080
 800f02a:	f000 81a5 	beq.w	800f378 <mbedtls_to_psa_error+0x41c>
 800f02e:	e218      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f030:	f513 4f9e 	cmn.w	r3, #20224	; 0x4f00
 800f034:	f000 8203 	beq.w	800f43e <mbedtls_to_psa_error+0x4e2>
 800f038:	f513 4f9d 	cmn.w	r3, #20096	; 0x4e80
 800f03c:	f000 8202 	beq.w	800f444 <mbedtls_to_psa_error+0x4e8>
 800f040:	e20f      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f042:	f513 4f99 	cmn.w	r3, #19584	; 0x4c80
 800f046:	f000 81f7 	beq.w	800f438 <mbedtls_to_psa_error+0x4dc>
 800f04a:	f513 4f99 	cmn.w	r3, #19584	; 0x4c80
 800f04e:	dc08      	bgt.n	800f062 <mbedtls_to_psa_error+0x106>
 800f050:	f513 4f9b 	cmn.w	r3, #19840	; 0x4d80
 800f054:	f000 81fc 	beq.w	800f450 <mbedtls_to_psa_error+0x4f4>
 800f058:	f513 4f9a 	cmn.w	r3, #19712	; 0x4d00
 800f05c:	f000 81fb 	beq.w	800f456 <mbedtls_to_psa_error+0x4fa>
 800f060:	e1ff      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f062:	f513 4f98 	cmn.w	r3, #19456	; 0x4c00
 800f066:	f000 81f0 	beq.w	800f44a <mbedtls_to_psa_error+0x4ee>
 800f06a:	f513 4f89 	cmn.w	r3, #17536	; 0x4480
 800f06e:	f000 81dd 	beq.w	800f42c <mbedtls_to_psa_error+0x4d0>
 800f072:	e1f6      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f074:	f513 5f7a 	cmn.w	r3, #16000	; 0x3e80
 800f078:	f000 81a5 	beq.w	800f3c6 <mbedtls_to_psa_error+0x46a>
 800f07c:	f513 5f7a 	cmn.w	r3, #16000	; 0x3e80
 800f080:	dc30      	bgt.n	800f0e4 <mbedtls_to_psa_error+0x188>
 800f082:	f513 4f83 	cmn.w	r3, #16768	; 0x4180
 800f086:	f000 81c2 	beq.w	800f40e <mbedtls_to_psa_error+0x4b2>
 800f08a:	f513 4f83 	cmn.w	r3, #16768	; 0x4180
 800f08e:	dc14      	bgt.n	800f0ba <mbedtls_to_psa_error+0x15e>
 800f090:	f513 4f86 	cmn.w	r3, #17152	; 0x4300
 800f094:	f000 81c1 	beq.w	800f41a <mbedtls_to_psa_error+0x4be>
 800f098:	f513 4f86 	cmn.w	r3, #17152	; 0x4300
 800f09c:	dc04      	bgt.n	800f0a8 <mbedtls_to_psa_error+0x14c>
 800f09e:	f513 4f87 	cmn.w	r3, #17280	; 0x4380
 800f0a2:	f000 81bd 	beq.w	800f420 <mbedtls_to_psa_error+0x4c4>
 800f0a6:	e1dc      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f0a8:	f513 4f85 	cmn.w	r3, #17024	; 0x4280
 800f0ac:	f000 81b5 	beq.w	800f41a <mbedtls_to_psa_error+0x4be>
 800f0b0:	f513 4f84 	cmn.w	r3, #16896	; 0x4200
 800f0b4:	f000 81ae 	beq.w	800f414 <mbedtls_to_psa_error+0x4b8>
 800f0b8:	e1d3      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f0ba:	f513 4f81 	cmn.w	r3, #16512	; 0x4080
 800f0be:	f000 81a0 	beq.w	800f402 <mbedtls_to_psa_error+0x4a6>
 800f0c2:	f513 4f81 	cmn.w	r3, #16512	; 0x4080
 800f0c6:	dc04      	bgt.n	800f0d2 <mbedtls_to_psa_error+0x176>
 800f0c8:	f513 4f82 	cmn.w	r3, #16640	; 0x4100
 800f0cc:	f000 819c 	beq.w	800f408 <mbedtls_to_psa_error+0x4ac>
 800f0d0:	e1c7      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f0d2:	f513 5f7e 	cmn.w	r3, #16256	; 0x3f80
 800f0d6:	f000 8173 	beq.w	800f3c0 <mbedtls_to_psa_error+0x464>
 800f0da:	f513 5f7c 	cmn.w	r3, #16128	; 0x3f00
 800f0de:	f000 8172 	beq.w	800f3c6 <mbedtls_to_psa_error+0x46a>
 800f0e2:	e1be      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f0e4:	f513 5f70 	cmn.w	r3, #15360	; 0x3c00
 800f0e8:	f000 8179 	beq.w	800f3de <mbedtls_to_psa_error+0x482>
 800f0ec:	f513 5f70 	cmn.w	r3, #15360	; 0x3c00
 800f0f0:	dc14      	bgt.n	800f11c <mbedtls_to_psa_error+0x1c0>
 800f0f2:	f513 5f76 	cmn.w	r3, #15744	; 0x3d80
 800f0f6:	f000 816c 	beq.w	800f3d2 <mbedtls_to_psa_error+0x476>
 800f0fa:	f513 5f76 	cmn.w	r3, #15744	; 0x3d80
 800f0fe:	dc04      	bgt.n	800f10a <mbedtls_to_psa_error+0x1ae>
 800f100:	f513 5f78 	cmn.w	r3, #15872	; 0x3e00
 800f104:	f000 8162 	beq.w	800f3cc <mbedtls_to_psa_error+0x470>
 800f108:	e1ab      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f10a:	f513 5f74 	cmn.w	r3, #15616	; 0x3d00
 800f10e:	f000 8160 	beq.w	800f3d2 <mbedtls_to_psa_error+0x476>
 800f112:	f513 5f72 	cmn.w	r3, #15488	; 0x3c80
 800f116:	f000 815f 	beq.w	800f3d8 <mbedtls_to_psa_error+0x47c>
 800f11a:	e1a2      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f11c:	f513 5f6a 	cmn.w	r3, #14976	; 0x3a80
 800f120:	f000 8163 	beq.w	800f3ea <mbedtls_to_psa_error+0x48e>
 800f124:	f513 5f6a 	cmn.w	r3, #14976	; 0x3a80
 800f128:	dc08      	bgt.n	800f13c <mbedtls_to_psa_error+0x1e0>
 800f12a:	f513 5f6e 	cmn.w	r3, #15232	; 0x3b80
 800f12e:	f000 8156 	beq.w	800f3de <mbedtls_to_psa_error+0x482>
 800f132:	f513 5f6c 	cmn.w	r3, #15104	; 0x3b00
 800f136:	f000 8155 	beq.w	800f3e4 <mbedtls_to_psa_error+0x488>
 800f13a:	e192      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f13c:	f513 5f68 	cmn.w	r3, #14848	; 0x3a00
 800f140:	f000 8153 	beq.w	800f3ea <mbedtls_to_psa_error+0x48e>
 800f144:	f513 5f66 	cmn.w	r3, #14720	; 0x3980
 800f148:	f000 814f 	beq.w	800f3ea <mbedtls_to_psa_error+0x48e>
 800f14c:	e189      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f14e:	f113 0f32 	cmn.w	r3, #50	; 0x32
 800f152:	f000 8105 	beq.w	800f360 <mbedtls_to_psa_error+0x404>
 800f156:	f113 0f32 	cmn.w	r3, #50	; 0x32
 800f15a:	dc68      	bgt.n	800f22e <mbedtls_to_psa_error+0x2d2>
 800f15c:	f113 0f60 	cmn.w	r3, #96	; 0x60
 800f160:	f000 80c2 	beq.w	800f2e8 <mbedtls_to_psa_error+0x38c>
 800f164:	f113 0f60 	cmn.w	r3, #96	; 0x60
 800f168:	dc30      	bgt.n	800f1cc <mbedtls_to_psa_error+0x270>
 800f16a:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
 800f16e:	f000 80be 	beq.w	800f2ee <mbedtls_to_psa_error+0x392>
 800f172:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
 800f176:	dc14      	bgt.n	800f1a2 <mbedtls_to_psa_error+0x246>
 800f178:	f113 0f70 	cmn.w	r3, #112	; 0x70
 800f17c:	f000 813b 	beq.w	800f3f6 <mbedtls_to_psa_error+0x49a>
 800f180:	f113 0f70 	cmn.w	r3, #112	; 0x70
 800f184:	dc04      	bgt.n	800f190 <mbedtls_to_psa_error+0x234>
 800f186:	f113 0f72 	cmn.w	r3, #114	; 0x72
 800f18a:	f000 8137 	beq.w	800f3fc <mbedtls_to_psa_error+0x4a0>
 800f18e:	e168      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f190:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 800f194:	f000 8162 	beq.w	800f45c <mbedtls_to_psa_error+0x500>
 800f198:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 800f19c:	f000 80aa 	beq.w	800f2f4 <mbedtls_to_psa_error+0x398>
 800f1a0:	e15f      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f1a2:	f113 0f66 	cmn.w	r3, #102	; 0x66
 800f1a6:	f000 809f 	beq.w	800f2e8 <mbedtls_to_psa_error+0x38c>
 800f1aa:	f113 0f66 	cmn.w	r3, #102	; 0x66
 800f1ae:	dc04      	bgt.n	800f1ba <mbedtls_to_psa_error+0x25e>
 800f1b0:	f113 0f68 	cmn.w	r3, #104	; 0x68
 800f1b4:	f000 8098 	beq.w	800f2e8 <mbedtls_to_psa_error+0x38c>
 800f1b8:	e153      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f1ba:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800f1be:	f000 8093 	beq.w	800f2e8 <mbedtls_to_psa_error+0x38c>
 800f1c2:	f113 0f62 	cmn.w	r3, #98	; 0x62
 800f1c6:	f000 808f 	beq.w	800f2e8 <mbedtls_to_psa_error+0x38c>
 800f1ca:	e14a      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f1cc:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
 800f1d0:	dc18      	bgt.n	800f204 <mbedtls_to_psa_error+0x2a8>
 800f1d2:	f113 0f3d 	cmn.w	r3, #61	; 0x3d
 800f1d6:	f280 80c6 	bge.w	800f366 <mbedtls_to_psa_error+0x40a>
 800f1da:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f1de:	f000 809b 	beq.w	800f318 <mbedtls_to_psa_error+0x3bc>
 800f1e2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f1e6:	dc04      	bgt.n	800f1f2 <mbedtls_to_psa_error+0x296>
 800f1e8:	f113 0f56 	cmn.w	r3, #86	; 0x56
 800f1ec:	f000 8097 	beq.w	800f31e <mbedtls_to_psa_error+0x3c2>
 800f1f0:	e137      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f1f2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800f1f6:	f000 808c 	beq.w	800f312 <mbedtls_to_psa_error+0x3b6>
 800f1fa:	f113 0f40 	cmn.w	r3, #64	; 0x40
 800f1fe:	f000 80b2 	beq.w	800f366 <mbedtls_to_psa_error+0x40a>
 800f202:	e12e      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f204:	f113 0f38 	cmn.w	r3, #56	; 0x38
 800f208:	f000 80a4 	beq.w	800f354 <mbedtls_to_psa_error+0x3f8>
 800f20c:	f113 0f38 	cmn.w	r3, #56	; 0x38
 800f210:	dc04      	bgt.n	800f21c <mbedtls_to_psa_error+0x2c0>
 800f212:	f113 0f3a 	cmn.w	r3, #58	; 0x3a
 800f216:	f000 80a0 	beq.w	800f35a <mbedtls_to_psa_error+0x3fe>
 800f21a:	e122      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f21c:	f113 0f36 	cmn.w	r3, #54	; 0x36
 800f220:	f000 8098 	beq.w	800f354 <mbedtls_to_psa_error+0x3f8>
 800f224:	f113 0f34 	cmn.w	r3, #52	; 0x34
 800f228:	f000 8091 	beq.w	800f34e <mbedtls_to_psa_error+0x3f2>
 800f22c:	e119      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f22e:	f113 0f10 	cmn.w	r3, #16
 800f232:	f000 80c2 	beq.w	800f3ba <mbedtls_to_psa_error+0x45e>
 800f236:	f113 0f10 	cmn.w	r3, #16
 800f23a:	dc28      	bgt.n	800f28e <mbedtls_to_psa_error+0x332>
 800f23c:	f113 0f20 	cmn.w	r3, #32
 800f240:	d04f      	beq.n	800f2e2 <mbedtls_to_psa_error+0x386>
 800f242:	f113 0f20 	cmn.w	r3, #32
 800f246:	dc11      	bgt.n	800f26c <mbedtls_to_psa_error+0x310>
 800f248:	f113 0f26 	cmn.w	r3, #38	; 0x26
 800f24c:	d058      	beq.n	800f300 <mbedtls_to_psa_error+0x3a4>
 800f24e:	f113 0f26 	cmn.w	r3, #38	; 0x26
 800f252:	dc04      	bgt.n	800f25e <mbedtls_to_psa_error+0x302>
 800f254:	f113 0f28 	cmn.w	r3, #40	; 0x28
 800f258:	f000 80eb 	beq.w	800f432 <mbedtls_to_psa_error+0x4d6>
 800f25c:	e101      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f25e:	f113 0f24 	cmn.w	r3, #36	; 0x24
 800f262:	d04d      	beq.n	800f300 <mbedtls_to_psa_error+0x3a4>
 800f264:	f113 0f22 	cmn.w	r3, #34	; 0x22
 800f268:	d03b      	beq.n	800f2e2 <mbedtls_to_psa_error+0x386>
 800f26a:	e0fa      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f26c:	f113 0f16 	cmn.w	r3, #22
 800f270:	d043      	beq.n	800f2fa <mbedtls_to_psa_error+0x39e>
 800f272:	f113 0f16 	cmn.w	r3, #22
 800f276:	dc03      	bgt.n	800f280 <mbedtls_to_psa_error+0x324>
 800f278:	f113 0f18 	cmn.w	r3, #24
 800f27c:	d03d      	beq.n	800f2fa <mbedtls_to_psa_error+0x39e>
 800f27e:	e0f0      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f280:	f113 0f14 	cmn.w	r3, #20
 800f284:	d075      	beq.n	800f372 <mbedtls_to_psa_error+0x416>
 800f286:	f113 0f12 	cmn.w	r3, #18
 800f28a:	d06f      	beq.n	800f36c <mbedtls_to_psa_error+0x410>
 800f28c:	e0e9      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f28e:	f113 0f0a 	cmn.w	r3, #10
 800f292:	f000 8089 	beq.w	800f3a8 <mbedtls_to_psa_error+0x44c>
 800f296:	f113 0f0a 	cmn.w	r3, #10
 800f29a:	dc0d      	bgt.n	800f2b8 <mbedtls_to_psa_error+0x35c>
 800f29c:	f113 0f0e 	cmn.w	r3, #14
 800f2a0:	f000 8088 	beq.w	800f3b4 <mbedtls_to_psa_error+0x458>
 800f2a4:	f113 0f0e 	cmn.w	r3, #14
 800f2a8:	db30      	blt.n	800f30c <mbedtls_to_psa_error+0x3b0>
 800f2aa:	f113 0f0d 	cmn.w	r3, #13
 800f2ae:	d02a      	beq.n	800f306 <mbedtls_to_psa_error+0x3aa>
 800f2b0:	f113 0f0c 	cmn.w	r3, #12
 800f2b4:	d07b      	beq.n	800f3ae <mbedtls_to_psa_error+0x452>
 800f2b6:	e0d4      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f2b8:	f113 0f04 	cmn.w	r3, #4
 800f2bc:	d06b      	beq.n	800f396 <mbedtls_to_psa_error+0x43a>
 800f2be:	f113 0f04 	cmn.w	r3, #4
 800f2c2:	dc06      	bgt.n	800f2d2 <mbedtls_to_psa_error+0x376>
 800f2c4:	f113 0f08 	cmn.w	r3, #8
 800f2c8:	d06b      	beq.n	800f3a2 <mbedtls_to_psa_error+0x446>
 800f2ca:	f113 0f06 	cmn.w	r3, #6
 800f2ce:	d065      	beq.n	800f39c <mbedtls_to_psa_error+0x440>
 800f2d0:	e0c7      	b.n	800f462 <mbedtls_to_psa_error+0x506>
 800f2d2:	f113 0f02 	cmn.w	r3, #2
 800f2d6:	d05b      	beq.n	800f390 <mbedtls_to_psa_error+0x434>
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	f040 80c2 	bne.w	800f462 <mbedtls_to_psa_error+0x506>
    {
        case 0:
            return( PSA_SUCCESS );
 800f2de:	2300      	movs	r3, #0
 800f2e0:	e0c1      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_AES_INVALID_KEY_LENGTH:
        case MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f2e2:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f2e6:	e0be      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_ASN1_OUT_OF_DATA:
        case MBEDTLS_ERR_ASN1_UNEXPECTED_TAG:
        case MBEDTLS_ERR_ASN1_INVALID_LENGTH:
        case MBEDTLS_ERR_ASN1_LENGTH_MISMATCH:
        case MBEDTLS_ERR_ASN1_INVALID_DATA:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f2e8:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f2ec:	e0bb      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_ASN1_ALLOC_FAILED:
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 800f2ee:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800f2f2:	e0b8      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_ASN1_BUF_TOO_SMALL:
            return( PSA_ERROR_BUFFER_TOO_SMALL );
 800f2f4:	f06f 0389 	mvn.w	r3, #137	; 0x89
 800f2f8:	e0b5      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

#if defined(MBEDTLS_ERR_BLOWFISH_BAD_INPUT_DATA)
        case MBEDTLS_ERR_BLOWFISH_BAD_INPUT_DATA:
#endif
        case MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f2fa:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f2fe:	e0b2      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

#if defined(MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA)
        case MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA:
#endif
        case MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f300:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f304:	e0af      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_CCM_BAD_INPUT:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f306:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f30a:	e0ac      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CCM_AUTH_FAILED:
            return( PSA_ERROR_INVALID_SIGNATURE );
 800f30c:	f06f 0394 	mvn.w	r3, #148	; 0x94
 800f310:	e0a9      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f312:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f316:	e0a6      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_CHACHAPOLY_BAD_STATE:
            return( PSA_ERROR_BAD_STATE );
 800f318:	f06f 0388 	mvn.w	r3, #136	; 0x88
 800f31c:	e0a3      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CHACHAPOLY_AUTH_FAILED:
            return( PSA_ERROR_INVALID_SIGNATURE );
 800f31e:	f06f 0394 	mvn.w	r3, #148	; 0x94
 800f322:	e0a0      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f324:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f328:	e09d      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f32a:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f32e:	e09a      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CIPHER_ALLOC_FAILED:
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 800f330:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800f334:	e097      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CIPHER_INVALID_PADDING:
            return( PSA_ERROR_INVALID_PADDING );
 800f336:	f06f 0395 	mvn.w	r3, #149	; 0x95
 800f33a:	e094      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f33c:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f340:	e091      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CIPHER_AUTH_FAILED:
            return( PSA_ERROR_INVALID_SIGNATURE );
 800f342:	f06f 0394 	mvn.w	r3, #148	; 0x94
 800f346:	e08e      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CIPHER_INVALID_CONTEXT:
            return( PSA_ERROR_CORRUPTION_DETECTED );
 800f348:	f06f 0396 	mvn.w	r3, #150	; 0x96
 800f34c:	e08b      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
#if !( defined(MBEDTLS_PSA_CRYPTO_EXTERNAL_RNG) ||      \
       defined(MBEDTLS_PSA_HMAC_DRBG_MD_TYPE) )
        /* Only check CTR_DRBG error codes if underlying mbedtls_xxx
         * functions are passed a CTR_DRBG instance. */
        case MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED:
            return( PSA_ERROR_INSUFFICIENT_ENTROPY );
 800f34e:	f06f 0393 	mvn.w	r3, #147	; 0x93
 800f352:	e088      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG:
        case MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f354:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f358:	e085      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR:
            return( PSA_ERROR_INSUFFICIENT_ENTROPY );
 800f35a:	f06f 0393 	mvn.w	r3, #147	; 0x93
 800f35e:	e082      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
#endif

        case MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f360:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f364:	e07f      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED:
        case MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE:
        case MBEDTLS_ERR_ENTROPY_SOURCE_FAILED:
            return( PSA_ERROR_INSUFFICIENT_ENTROPY );
 800f366:	f06f 0393 	mvn.w	r3, #147	; 0x93
 800f36a:	e07c      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_GCM_AUTH_FAILED:
            return( PSA_ERROR_INVALID_SIGNATURE );
 800f36c:	f06f 0394 	mvn.w	r3, #148	; 0x94
 800f370:	e079      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_GCM_BAD_INPUT:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f372:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f376:	e076      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR:
            return( PSA_ERROR_INSUFFICIENT_ENTROPY );
#endif

        case MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f378:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f37c:	e073      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MD_BAD_INPUT_DATA:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f37e:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f382:	e070      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MD_ALLOC_FAILED:
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 800f384:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800f388:	e06d      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MD_FILE_IO_ERROR:
            return( PSA_ERROR_STORAGE_FAILURE );
 800f38a:	f06f 0391 	mvn.w	r3, #145	; 0x91
 800f38e:	e06a      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_MPI_FILE_IO_ERROR:
            return( PSA_ERROR_STORAGE_FAILURE );
 800f390:	f06f 0391 	mvn.w	r3, #145	; 0x91
 800f394:	e067      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MPI_BAD_INPUT_DATA:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f396:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f39a:	e064      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MPI_INVALID_CHARACTER:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f39c:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f3a0:	e061      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL:
            return( PSA_ERROR_BUFFER_TOO_SMALL );
 800f3a2:	f06f 0389 	mvn.w	r3, #137	; 0x89
 800f3a6:	e05e      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MPI_NEGATIVE_VALUE:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f3a8:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f3ac:	e05b      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MPI_DIVISION_BY_ZERO:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f3ae:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f3b2:	e058      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MPI_NOT_ACCEPTABLE:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f3b4:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f3b8:	e055      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_MPI_ALLOC_FAILED:
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 800f3ba:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800f3be:	e052      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_PK_ALLOC_FAILED:
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 800f3c0:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800f3c4:	e04f      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_PK_TYPE_MISMATCH:
        case MBEDTLS_ERR_PK_BAD_INPUT_DATA:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f3c6:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f3ca:	e04c      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_PK_FILE_IO_ERROR:
            return( PSA_ERROR_STORAGE_FAILURE );
 800f3cc:	f06f 0391 	mvn.w	r3, #145	; 0x91
 800f3d0:	e049      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_PK_KEY_INVALID_VERSION:
        case MBEDTLS_ERR_PK_KEY_INVALID_FORMAT:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f3d2:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f3d6:	e046      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_PK_UNKNOWN_PK_ALG:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f3d8:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f3dc:	e043      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_PK_PASSWORD_REQUIRED:
        case MBEDTLS_ERR_PK_PASSWORD_MISMATCH:
            return( PSA_ERROR_NOT_PERMITTED );
 800f3de:	f06f 0384 	mvn.w	r3, #132	; 0x84
 800f3e2:	e040      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_PK_INVALID_PUBKEY:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f3e4:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f3e8:	e03d      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_PK_INVALID_ALG:
        case MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE:
        case MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f3ea:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f3ee:	e03a      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_PK_SIG_LEN_MISMATCH:
            return( PSA_ERROR_INVALID_SIGNATURE );
 800f3f0:	f06f 0394 	mvn.w	r3, #148	; 0x94
 800f3f4:	e037      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED:
            return( PSA_ERROR_HARDWARE_FAILURE );
 800f3f6:	f06f 0392 	mvn.w	r3, #146	; 0x92
 800f3fa:	e034      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f3fc:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f400:	e031      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_RSA_BAD_INPUT_DATA:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f402:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f406:	e02e      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_RSA_INVALID_PADDING:
            return( PSA_ERROR_INVALID_PADDING );
 800f408:	f06f 0395 	mvn.w	r3, #149	; 0x95
 800f40c:	e02b      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_RSA_KEY_GEN_FAILED:
            return( PSA_ERROR_HARDWARE_FAILURE );
 800f40e:	f06f 0392 	mvn.w	r3, #146	; 0x92
 800f412:	e028      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_RSA_KEY_CHECK_FAILED:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f414:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f418:	e025      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_RSA_PUBLIC_FAILED:
        case MBEDTLS_ERR_RSA_PRIVATE_FAILED:
            return( PSA_ERROR_CORRUPTION_DETECTED );
 800f41a:	f06f 0396 	mvn.w	r3, #150	; 0x96
 800f41e:	e022      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_RSA_VERIFY_FAILED:
            return( PSA_ERROR_INVALID_SIGNATURE );
 800f420:	f06f 0394 	mvn.w	r3, #148	; 0x94
 800f424:	e01f      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE:
            return( PSA_ERROR_BUFFER_TOO_SMALL );
 800f426:	f06f 0389 	mvn.w	r3, #137	; 0x89
 800f42a:	e01c      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_RSA_RNG_FAILED:
            return( PSA_ERROR_INSUFFICIENT_ENTROPY );
 800f42c:	f06f 0393 	mvn.w	r3, #147	; 0x93
 800f430:	e019      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f432:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f436:	e016      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_ECP_BAD_INPUT_DATA:
        case MBEDTLS_ERR_ECP_INVALID_KEY:
            return( PSA_ERROR_INVALID_ARGUMENT );
 800f438:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f43c:	e013      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL:
            return( PSA_ERROR_BUFFER_TOO_SMALL );
 800f43e:	f06f 0389 	mvn.w	r3, #137	; 0x89
 800f442:	e010      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f444:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f448:	e00d      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH:
        case MBEDTLS_ERR_ECP_VERIFY_FAILED:
            return( PSA_ERROR_INVALID_SIGNATURE );
 800f44a:	f06f 0394 	mvn.w	r3, #148	; 0x94
 800f44e:	e00a      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_ECP_ALLOC_FAILED:
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 800f450:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800f454:	e007      	b.n	800f466 <mbedtls_to_psa_error+0x50a>
        case MBEDTLS_ERR_ECP_RANDOM_FAILED:
            return( PSA_ERROR_INSUFFICIENT_ENTROPY );
 800f456:	f06f 0393 	mvn.w	r3, #147	; 0x93
 800f45a:	e004      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        case MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED:
            return( PSA_ERROR_CORRUPTION_DETECTED );
 800f45c:	f06f 0396 	mvn.w	r3, #150	; 0x96
 800f460:	e001      	b.n	800f466 <mbedtls_to_psa_error+0x50a>

        default:
            return( PSA_ERROR_GENERIC_ERROR );
 800f462:	f06f 0383 	mvn.w	r3, #131	; 0x83
    }
}
 800f466:	4618      	mov	r0, r3
 800f468:	3714      	adds	r7, #20
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr

0800f472 <validate_unstructured_key_bit_size>:
        * defined(MBEDTLS_PSA_ACCEL_KEY_TYPE_ECC_KEY_PAIR) ||
        * defined(MBEDTLS_PSA_ACCEL_KEY_TYPE_ECC_PUBLIC_KEY) */

static psa_status_t validate_unstructured_key_bit_size( psa_key_type_t type,
                                                        size_t bits )
{
 800f472:	b480      	push	{r7}
 800f474:	b083      	sub	sp, #12
 800f476:	af00      	add	r7, sp, #0
 800f478:	4603      	mov	r3, r0
 800f47a:	6039      	str	r1, [r7, #0]
 800f47c:	80fb      	strh	r3, [r7, #6]
    /* Check that the bit size is acceptable for the key type */
    switch( type )
 800f47e:	88fb      	ldrh	r3, [r7, #6]
 800f480:	f242 0202 	movw	r2, #8194	; 0x2002
 800f484:	4293      	cmp	r3, r2
 800f486:	d049      	beq.n	800f51c <validate_unstructured_key_bit_size+0xaa>
 800f488:	f242 0202 	movw	r2, #8194	; 0x2002
 800f48c:	4293      	cmp	r3, r2
 800f48e:	dc0a      	bgt.n	800f4a6 <validate_unstructured_key_bit_size+0x34>
 800f490:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 800f494:	d056      	beq.n	800f544 <validate_unstructured_key_bit_size+0xd2>
 800f496:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800f49a:	d053      	beq.n	800f544 <validate_unstructured_key_bit_size+0xd2>
 800f49c:	f241 0201 	movw	r2, #4097	; 0x1001
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d04f      	beq.n	800f544 <validate_unstructured_key_bit_size+0xd2>
 800f4a4:	e04b      	b.n	800f53e <validate_unstructured_key_bit_size+0xcc>
 800f4a6:	f242 3201 	movw	r2, #8961	; 0x2301
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d02a      	beq.n	800f504 <validate_unstructured_key_bit_size+0x92>
 800f4ae:	f242 3201 	movw	r2, #8961	; 0x2301
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	dc04      	bgt.n	800f4c0 <validate_unstructured_key_bit_size+0x4e>
 800f4b6:	f242 0204 	movw	r2, #8196	; 0x2004
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d038      	beq.n	800f530 <validate_unstructured_key_bit_size+0xbe>
 800f4be:	e03e      	b.n	800f53e <validate_unstructured_key_bit_size+0xcc>
 800f4c0:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800f4c4:	d004      	beq.n	800f4d0 <validate_unstructured_key_bit_size+0x5e>
 800f4c6:	f242 4203 	movw	r2, #9219	; 0x2403
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d00d      	beq.n	800f4ea <validate_unstructured_key_bit_size+0x78>
 800f4ce:	e036      	b.n	800f53e <validate_unstructured_key_bit_size+0xcc>
        case PSA_KEY_TYPE_HMAC:
        case PSA_KEY_TYPE_DERIVE:
            break;
#if defined(PSA_WANT_KEY_TYPE_AES)
        case PSA_KEY_TYPE_AES:
            if( bits != 128 && bits != 192 && bits != 256 )
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	2b80      	cmp	r3, #128	; 0x80
 800f4d4:	d038      	beq.n	800f548 <validate_unstructured_key_bit_size+0xd6>
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	2bc0      	cmp	r3, #192	; 0xc0
 800f4da:	d035      	beq.n	800f548 <validate_unstructured_key_bit_size+0xd6>
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4e2:	d031      	beq.n	800f548 <validate_unstructured_key_bit_size+0xd6>
                return( PSA_ERROR_INVALID_ARGUMENT );
 800f4e4:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f4e8:	e040      	b.n	800f56c <validate_unstructured_key_bit_size+0xfa>
            break;
#endif
#if defined(PSA_WANT_KEY_TYPE_CAMELLIA)
        case PSA_KEY_TYPE_CAMELLIA:
            if( bits != 128 && bits != 192 && bits != 256 )
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	2b80      	cmp	r3, #128	; 0x80
 800f4ee:	d02d      	beq.n	800f54c <validate_unstructured_key_bit_size+0xda>
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	2bc0      	cmp	r3, #192	; 0xc0
 800f4f4:	d02a      	beq.n	800f54c <validate_unstructured_key_bit_size+0xda>
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4fc:	d026      	beq.n	800f54c <validate_unstructured_key_bit_size+0xda>
                return( PSA_ERROR_INVALID_ARGUMENT );
 800f4fe:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f502:	e033      	b.n	800f56c <validate_unstructured_key_bit_size+0xfa>
            break;
#endif
#if defined(PSA_WANT_KEY_TYPE_DES)
        case PSA_KEY_TYPE_DES:
            if( bits != 64 && bits != 128 && bits != 192 )
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	2b40      	cmp	r3, #64	; 0x40
 800f508:	d022      	beq.n	800f550 <validate_unstructured_key_bit_size+0xde>
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	2b80      	cmp	r3, #128	; 0x80
 800f50e:	d01f      	beq.n	800f550 <validate_unstructured_key_bit_size+0xde>
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	2bc0      	cmp	r3, #192	; 0xc0
 800f514:	d01c      	beq.n	800f550 <validate_unstructured_key_bit_size+0xde>
                return( PSA_ERROR_INVALID_ARGUMENT );
 800f516:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f51a:	e027      	b.n	800f56c <validate_unstructured_key_bit_size+0xfa>
            break;
#endif
#if defined(PSA_WANT_KEY_TYPE_ARC4)
        case PSA_KEY_TYPE_ARC4:
            if( bits < 8 || bits > 2048 )
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	2b07      	cmp	r3, #7
 800f520:	d903      	bls.n	800f52a <validate_unstructured_key_bit_size+0xb8>
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f528:	d914      	bls.n	800f554 <validate_unstructured_key_bit_size+0xe2>
                return( PSA_ERROR_INVALID_ARGUMENT );
 800f52a:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f52e:	e01d      	b.n	800f56c <validate_unstructured_key_bit_size+0xfa>
            break;
#endif
#if defined(PSA_WANT_KEY_TYPE_CHACHA20)
        case PSA_KEY_TYPE_CHACHA20:
            if( bits != 256 )
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f536:	d00f      	beq.n	800f558 <validate_unstructured_key_bit_size+0xe6>
                return( PSA_ERROR_INVALID_ARGUMENT );
 800f538:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f53c:	e016      	b.n	800f56c <validate_unstructured_key_bit_size+0xfa>
            break;
#endif
        default:
            return( PSA_ERROR_NOT_SUPPORTED );
 800f53e:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f542:	e013      	b.n	800f56c <validate_unstructured_key_bit_size+0xfa>
            break;
 800f544:	bf00      	nop
 800f546:	e008      	b.n	800f55a <validate_unstructured_key_bit_size+0xe8>
            break;
 800f548:	bf00      	nop
 800f54a:	e006      	b.n	800f55a <validate_unstructured_key_bit_size+0xe8>
            break;
 800f54c:	bf00      	nop
 800f54e:	e004      	b.n	800f55a <validate_unstructured_key_bit_size+0xe8>
            break;
 800f550:	bf00      	nop
 800f552:	e002      	b.n	800f55a <validate_unstructured_key_bit_size+0xe8>
            break;
 800f554:	bf00      	nop
 800f556:	e000      	b.n	800f55a <validate_unstructured_key_bit_size+0xe8>
            break;
 800f558:	bf00      	nop
    }
    if( bits % 8 != 0 )
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	f003 0307 	and.w	r3, r3, #7
 800f560:	2b00      	cmp	r3, #0
 800f562:	d002      	beq.n	800f56a <validate_unstructured_key_bit_size+0xf8>
        return( PSA_ERROR_INVALID_ARGUMENT );
 800f564:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800f568:	e000      	b.n	800f56c <validate_unstructured_key_bit_size+0xfa>

    return( PSA_SUCCESS );
 800f56a:	2300      	movs	r3, #0
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	370c      	adds	r7, #12
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <psa_mac_key_can_do>:
 *         The \p key_type is not valid for use with the \p algorithm
 */
MBEDTLS_STATIC_TESTABLE psa_status_t psa_mac_key_can_do(
    psa_algorithm_t algorithm,
    psa_key_type_t key_type )
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	460b      	mov	r3, r1
 800f582:	807b      	strh	r3, [r7, #2]
    if( PSA_ALG_IS_HMAC( algorithm ) )
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	4b18      	ldr	r3, [pc, #96]	; (800f5e8 <psa_mac_key_can_do+0x70>)
 800f588:	4013      	ands	r3, r2
 800f58a:	f1b3 7f60 	cmp.w	r3, #58720256	; 0x3800000
 800f58e:	d105      	bne.n	800f59c <psa_mac_key_can_do+0x24>
    {
        if( key_type == PSA_KEY_TYPE_HMAC )
 800f590:	887b      	ldrh	r3, [r7, #2]
 800f592:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 800f596:	d101      	bne.n	800f59c <psa_mac_key_can_do+0x24>
            return( PSA_SUCCESS );
 800f598:	2300      	movs	r3, #0
 800f59a:	e01f      	b.n	800f5dc <psa_mac_key_can_do+0x64>
    }

    if( PSA_ALG_IS_BLOCK_CIPHER_MAC( algorithm ) )
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	4b12      	ldr	r3, [pc, #72]	; (800f5e8 <psa_mac_key_can_do+0x70>)
 800f5a0:	4013      	ands	r3, r2
 800f5a2:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800f5a6:	d117      	bne.n	800f5d8 <psa_mac_key_can_do+0x60>
    {
        /* Check that we're calling PSA_BLOCK_CIPHER_BLOCK_LENGTH with a cipher
         * key. */
        if( ( key_type & PSA_KEY_TYPE_CATEGORY_MASK ) ==
 800f5a8:	887b      	ldrh	r3, [r7, #2]
 800f5aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f5ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5b2:	d111      	bne.n	800f5d8 <psa_mac_key_can_do+0x60>
            PSA_KEY_TYPE_CATEGORY_SYMMETRIC )
        {
            /* PSA_BLOCK_CIPHER_BLOCK_LENGTH returns 1 for stream ciphers and
             * the block length (larger than 1) for block ciphers. */
            if( PSA_BLOCK_CIPHER_BLOCK_LENGTH( key_type ) > 1 )
 800f5b4:	887b      	ldrh	r3, [r7, #2]
 800f5b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f5ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5be:	d10b      	bne.n	800f5d8 <psa_mac_key_can_do+0x60>
 800f5c0:	887b      	ldrh	r3, [r7, #2]
 800f5c2:	0a1b      	lsrs	r3, r3, #8
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	f003 0307 	and.w	r3, r3, #7
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d901      	bls.n	800f5d8 <psa_mac_key_can_do+0x60>
                return( PSA_SUCCESS );
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	e001      	b.n	800f5dc <psa_mac_key_can_do+0x64>
        }
    }

    return( PSA_ERROR_INVALID_ARGUMENT );
 800f5d8:	f06f 0386 	mvn.w	r3, #134	; 0x86
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr
 800f5e8:	7fc00000 	.word	0x7fc00000

0800f5ec <psa_allocate_buffer_to_slot>:

psa_status_t psa_allocate_buffer_to_slot( psa_key_slot_t *slot,
                                          size_t buffer_length )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
    if( slot->key.data != NULL )
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d002      	beq.n	800f604 <psa_allocate_buffer_to_slot+0x18>
        return( PSA_ERROR_ALREADY_EXISTS );
 800f5fe:	f06f 038a 	mvn.w	r3, #138	; 0x8a
 800f602:	e012      	b.n	800f62a <psa_allocate_buffer_to_slot+0x3e>

    slot->key.data = mbedtls_calloc( 1, buffer_length );
 800f604:	6839      	ldr	r1, [r7, #0]
 800f606:	2001      	movs	r0, #1
 800f608:	f005 f930 	bl	801486c <calloc>
 800f60c:	4603      	mov	r3, r0
 800f60e:	461a      	mov	r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	621a      	str	r2, [r3, #32]
    if( slot->key.data == NULL )
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a1b      	ldr	r3, [r3, #32]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d102      	bne.n	800f622 <psa_allocate_buffer_to_slot+0x36>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 800f61c:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 800f620:	e003      	b.n	800f62a <psa_allocate_buffer_to_slot+0x3e>

    slot->key.bytes = buffer_length;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	683a      	ldr	r2, [r7, #0]
 800f626:	625a      	str	r2, [r3, #36]	; 0x24
    return( PSA_SUCCESS );
 800f628:	2300      	movs	r3, #0
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3708      	adds	r7, #8
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <psa_copy_key_material_into_slot>:

psa_status_t psa_copy_key_material_into_slot( psa_key_slot_t *slot,
                                              const uint8_t* data,
                                              size_t data_length )
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b086      	sub	sp, #24
 800f636:	af00      	add	r7, sp, #0
 800f638:	60f8      	str	r0, [r7, #12]
 800f63a:	60b9      	str	r1, [r7, #8]
 800f63c:	607a      	str	r2, [r7, #4]
    psa_status_t status = psa_allocate_buffer_to_slot( slot,
 800f63e:	6879      	ldr	r1, [r7, #4]
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f7ff ffd3 	bl	800f5ec <psa_allocate_buffer_to_slot>
 800f646:	6178      	str	r0, [r7, #20]
                                                       data_length );
    if( status != PSA_SUCCESS )
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <psa_copy_key_material_into_slot+0x20>
        return( status );
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	e007      	b.n	800f662 <psa_copy_key_material_into_slot+0x30>

    memcpy( slot->key.data, data, data_length );
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6a1b      	ldr	r3, [r3, #32]
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	68b9      	ldr	r1, [r7, #8]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f005 fd5d 	bl	801511a <memcpy>
    return( PSA_SUCCESS );
 800f660:	2300      	movs	r3, #0
}
 800f662:	4618      	mov	r0, r3
 800f664:	3718      	adds	r7, #24
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}

0800f66a <psa_import_key_into_slot>:
psa_status_t psa_import_key_into_slot(
    const psa_key_attributes_t *attributes,
    const uint8_t *data, size_t data_length,
    uint8_t *key_buffer, size_t key_buffer_size,
    size_t *key_buffer_length, size_t *bits )
{
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b086      	sub	sp, #24
 800f66e:	af00      	add	r7, sp, #0
 800f670:	60f8      	str	r0, [r7, #12]
 800f672:	60b9      	str	r1, [r7, #8]
 800f674:	607a      	str	r2, [r7, #4]
 800f676:	603b      	str	r3, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 800f678:	f06f 0396 	mvn.w	r3, #150	; 0x96
 800f67c:	617b      	str	r3, [r7, #20]
    psa_key_type_t type = attributes->core.type;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	827b      	strh	r3, [r7, #18]

    /* zero-length keys are never supported. */
    if( data_length == 0 )
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d102      	bne.n	800f690 <psa_import_key_into_slot+0x26>
        return( PSA_ERROR_NOT_SUPPORTED );
 800f68a:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f68e:	e033      	b.n	800f6f8 <psa_import_key_into_slot+0x8e>

    if( key_type_is_raw_bytes( type ) )
 800f690:	8a7b      	ldrh	r3, [r7, #18]
 800f692:	4618      	mov	r0, r3
 800f694:	f7ff fc48 	bl	800ef28 <key_type_is_raw_bytes>
 800f698:	4603      	mov	r3, r0
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d02a      	beq.n	800f6f4 <psa_import_key_into_slot+0x8a>
    {
        *bits = PSA_BYTES_TO_BITS( data_length );
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	00da      	lsls	r2, r3, #3
 800f6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6a4:	601a      	str	r2, [r3, #0]

        /* Ensure that the bytes-to-bits conversion hasn't overflown. */
        if( data_length > SIZE_MAX / 8 )
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6ac:	d302      	bcc.n	800f6b4 <psa_import_key_into_slot+0x4a>
            return( PSA_ERROR_NOT_SUPPORTED );
 800f6ae:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f6b2:	e021      	b.n	800f6f8 <psa_import_key_into_slot+0x8e>

        /* Enforce a size limit, and in particular ensure that the bit
         * size fits in its representation type. */
        if( ( *bits ) > PSA_MAX_KEY_BITS )
 800f6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d902      	bls.n	800f6c6 <psa_import_key_into_slot+0x5c>
            return( PSA_ERROR_NOT_SUPPORTED );
 800f6c0:	f06f 0385 	mvn.w	r3, #133	; 0x85
 800f6c4:	e018      	b.n	800f6f8 <psa_import_key_into_slot+0x8e>

        status = validate_unstructured_key_bit_size( type, *bits );
 800f6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	8a7b      	ldrh	r3, [r7, #18]
 800f6cc:	4611      	mov	r1, r2
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7ff fecf 	bl	800f472 <validate_unstructured_key_bit_size>
 800f6d4:	6178      	str	r0, [r7, #20]
        if( status != PSA_SUCCESS )
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <psa_import_key_into_slot+0x76>
            return( status );
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	e00b      	b.n	800f6f8 <psa_import_key_into_slot+0x8e>

        /* Copy the key material. */
        memcpy( key_buffer, data, data_length );
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	68b9      	ldr	r1, [r7, #8]
 800f6e4:	6838      	ldr	r0, [r7, #0]
 800f6e6:	f005 fd18 	bl	801511a <memcpy>
        *key_buffer_length = data_length;
 800f6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	601a      	str	r2, [r3, #0]
        (void)key_buffer_size;

        return( PSA_SUCCESS );
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	e001      	b.n	800f6f8 <psa_import_key_into_slot+0x8e>
        }
#endif /* defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_RSA_KEY_PAIR) ||
        * defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_RSA_PUBLIC_KEY) */
    }

    return( PSA_ERROR_NOT_SUPPORTED );
 800f6f4:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3718      	adds	r7, #24
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <psa_key_algorithm_permits>:
}

static int psa_key_algorithm_permits( psa_key_type_t key_type,
                                      psa_algorithm_t policy_alg,
                                      psa_algorithm_t requested_alg )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b086      	sub	sp, #24
 800f704:	af00      	add	r7, sp, #0
 800f706:	4603      	mov	r3, r0
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
 800f70c:	81fb      	strh	r3, [r7, #14]
    /* Common case: the policy only allows requested_alg. */
    if( requested_alg == policy_alg )
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	429a      	cmp	r2, r3
 800f714:	d101      	bne.n	800f71a <psa_key_algorithm_permits+0x1a>
        return( 1 );
 800f716:	2301      	movs	r3, #1
 800f718:	e275      	b.n	800fc06 <psa_key_algorithm_permits+0x506>
    /* If policy_alg is a hash-and-sign with a wildcard for the hash,
     * and requested_alg is the same hash-and-sign family with any hash,
     * then requested_alg is compliant with policy_alg. */
    if( PSA_ALG_IS_HASH_AND_SIGN( requested_alg ) &&
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f720:	4aa6      	ldr	r2, [pc, #664]	; (800f9bc <psa_key_algorithm_permits+0x2bc>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d01b      	beq.n	800f75e <psa_key_algorithm_permits+0x5e>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f72c:	4aa4      	ldr	r2, [pc, #656]	; (800f9c0 <psa_key_algorithm_permits+0x2c0>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d015      	beq.n	800f75e <psa_key_algorithm_permits+0x5e>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800f738:	f023 0301 	bic.w	r3, r3, #1
 800f73c:	f1b3 2f06 	cmp.w	r3, #100664832	; 0x6000600
 800f740:	d00d      	beq.n	800f75e <psa_key_algorithm_permits+0x5e>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f748:	4a9e      	ldr	r2, [pc, #632]	; (800f9c4 <psa_key_algorithm_permits+0x2c4>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d007      	beq.n	800f75e <psa_key_algorithm_permits+0x5e>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800f754:	f023 0301 	bic.w	r3, r3, #1
 800f758:	4a9b      	ldr	r2, [pc, #620]	; (800f9c8 <psa_key_algorithm_permits+0x2c8>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d137      	bne.n	800f7ce <psa_key_algorithm_permits+0xce>
        PSA_ALG_SIGN_GET_HASH( policy_alg ) == PSA_ALG_ANY_HASH )
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    if( PSA_ALG_IS_HASH_AND_SIGN( requested_alg ) &&
 800f764:	4a95      	ldr	r2, [pc, #596]	; (800f9bc <psa_key_algorithm_permits+0x2bc>)
 800f766:	4293      	cmp	r3, r2
 800f768:	d01b      	beq.n	800f7a2 <psa_key_algorithm_permits+0xa2>
        PSA_ALG_SIGN_GET_HASH( policy_alg ) == PSA_ALG_ANY_HASH )
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f770:	4a93      	ldr	r2, [pc, #588]	; (800f9c0 <psa_key_algorithm_permits+0x2c0>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d015      	beq.n	800f7a2 <psa_key_algorithm_permits+0xa2>
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800f77c:	f023 0301 	bic.w	r3, r3, #1
 800f780:	f1b3 2f06 	cmp.w	r3, #100664832	; 0x6000600
 800f784:	d00d      	beq.n	800f7a2 <psa_key_algorithm_permits+0xa2>
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f78c:	4a8d      	ldr	r2, [pc, #564]	; (800f9c4 <psa_key_algorithm_permits+0x2c4>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d007      	beq.n	800f7a2 <psa_key_algorithm_permits+0xa2>
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800f798:	f023 0301 	bic.w	r3, r3, #1
 800f79c:	4a8a      	ldr	r2, [pc, #552]	; (800f9c8 <psa_key_algorithm_permits+0x2c8>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d115      	bne.n	800f7ce <psa_key_algorithm_permits+0xce>
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d011      	beq.n	800f7ce <psa_key_algorithm_permits+0xce>
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f7b2:	4a86      	ldr	r2, [pc, #536]	; (800f9cc <psa_key_algorithm_permits+0x2cc>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d10a      	bne.n	800f7ce <psa_key_algorithm_permits+0xce>
    {
        return( ( policy_alg & ~PSA_ALG_HASH_MASK ) ==
 800f7b8:	68ba      	ldr	r2, [r7, #8]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4053      	eors	r3, r2
 800f7be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	bf0c      	ite	eq
 800f7c6:	2301      	moveq	r3, #1
 800f7c8:	2300      	movne	r3, #0
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	e21b      	b.n	800fc06 <psa_key_algorithm_permits+0x506>
                ( requested_alg & ~PSA_ALG_HASH_MASK ) );
    }
    /* If policy_alg is a wildcard AEAD algorithm of the same base as
     * the requested algorithm, check the requested tag length to be
     * equal-length or longer than the wildcard-specified length. */
    if( PSA_ALG_IS_AEAD( policy_alg ) &&
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f7d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f7d8:	d11f      	bne.n	800f81a <psa_key_algorithm_permits+0x11a>
        PSA_ALG_IS_AEAD( requested_alg ) &&
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
    if( PSA_ALG_IS_AEAD( policy_alg ) &&
 800f7e0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f7e4:	d119      	bne.n	800f81a <psa_key_algorithm_permits+0x11a>
        ( PSA_ALG_AEAD_WITH_SHORTENED_TAG( policy_alg, 0 ) ==
 800f7e6:	68ba      	ldr	r2, [r7, #8]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4053      	eors	r3, r2
 800f7ec:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
        PSA_ALG_IS_AEAD( requested_alg ) &&
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d112      	bne.n	800f81a <psa_key_algorithm_permits+0x11a>
          PSA_ALG_AEAD_WITH_SHORTENED_TAG( requested_alg, 0 ) ) &&
        ( ( policy_alg & PSA_ALG_AEAD_AT_LEAST_THIS_LENGTH_FLAG ) != 0 ) )
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
          PSA_ALG_AEAD_WITH_SHORTENED_TAG( requested_alg, 0 ) ) &&
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d00d      	beq.n	800f81a <psa_key_algorithm_permits+0x11a>
    {
        return( PSA_ALG_AEAD_GET_TAG_LENGTH( policy_alg ) <=
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	0c1b      	lsrs	r3, r3, #16
 800f802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
                PSA_ALG_AEAD_GET_TAG_LENGTH( requested_alg ) );
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	0c1b      	lsrs	r3, r3, #16
 800f80a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        return( PSA_ALG_AEAD_GET_TAG_LENGTH( policy_alg ) <=
 800f80e:	429a      	cmp	r2, r3
 800f810:	bf94      	ite	ls
 800f812:	2301      	movls	r3, #1
 800f814:	2300      	movhi	r3, #0
 800f816:	b2db      	uxtb	r3, r3
 800f818:	e1f5      	b.n	800fc06 <psa_key_algorithm_permits+0x506>
    }
    /* If policy_alg is a MAC algorithm of the same base as the requested
     * algorithm, check whether their MAC lengths are compatible. */
    if( PSA_ALG_IS_MAC( policy_alg ) &&
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f820:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f824:	f040 81cc 	bne.w	800fbc0 <psa_key_algorithm_permits+0x4c0>
        PSA_ALG_IS_MAC( requested_alg ) &&
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
    if( PSA_ALG_IS_MAC( policy_alg ) &&
 800f82e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f832:	f040 81c5 	bne.w	800fbc0 <psa_key_algorithm_permits+0x4c0>
        ( PSA_ALG_FULL_LENGTH_MAC( policy_alg ) ==
 800f836:	68ba      	ldr	r2, [r7, #8]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4053      	eors	r3, r2
 800f83c:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
        PSA_ALG_IS_MAC( requested_alg ) &&
 800f840:	2b00      	cmp	r3, #0
 800f842:	f040 81bd 	bne.w	800fbc0 <psa_key_algorithm_permits+0x4c0>
          PSA_ALG_FULL_LENGTH_MAC( requested_alg ) ) )
    {
        /* Validate the combination of key type and algorithm. Since the policy
         * and requested algorithms are the same, we only need this once. */
        if( PSA_SUCCESS != psa_mac_key_can_do( policy_alg, key_type ) )
 800f846:	89fb      	ldrh	r3, [r7, #14]
 800f848:	4619      	mov	r1, r3
 800f84a:	68b8      	ldr	r0, [r7, #8]
 800f84c:	f7ff fe94 	bl	800f578 <psa_mac_key_can_do>
 800f850:	4603      	mov	r3, r0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d001      	beq.n	800f85a <psa_key_algorithm_permits+0x15a>
            return( 0 );
 800f856:	2300      	movs	r3, #0
 800f858:	e1d5      	b.n	800fc06 <psa_key_algorithm_permits+0x506>
        /* Get both the requested output length for the algorithm which is to be
         * verified, and the default output length for the base algorithm.
         * Note that none of the currently supported algorithms have an output
         * length dependent on actual key size, so setting it to a bogus value
         * of 0 is currently OK. */
        size_t requested_output_length = PSA_MAC_LENGTH(
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800f860:	2b00      	cmp	r3, #0
 800f862:	d004      	beq.n	800f86e <psa_key_algorithm_permits+0x16e>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	0c1b      	lsrs	r3, r3, #16
 800f868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f86c:	e0d1      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	4b57      	ldr	r3, [pc, #348]	; (800f9d0 <psa_key_algorithm_permits+0x2d0>)
 800f872:	4013      	ands	r3, r2
 800f874:	f1b3 7f60 	cmp.w	r3, #58720256	; 0x3800000
 800f878:	f040 8089 	bne.w	800f98e <psa_key_algorithm_permits+0x28e>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f884:	4a53      	ldr	r2, [pc, #332]	; (800f9d4 <psa_key_algorithm_permits+0x2d4>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d07f      	beq.n	800f98a <psa_key_algorithm_permits+0x28a>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f892:	4a51      	ldr	r2, [pc, #324]	; (800f9d8 <psa_key_algorithm_permits+0x2d8>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d076      	beq.n	800f986 <psa_key_algorithm_permits+0x286>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f8a0:	4a4e      	ldr	r2, [pc, #312]	; (800f9dc <psa_key_algorithm_permits+0x2dc>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d06d      	beq.n	800f982 <psa_key_algorithm_permits+0x282>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f8ae:	4a4c      	ldr	r2, [pc, #304]	; (800f9e0 <psa_key_algorithm_permits+0x2e0>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d064      	beq.n	800f97e <psa_key_algorithm_permits+0x27e>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f8bc:	4a49      	ldr	r2, [pc, #292]	; (800f9e4 <psa_key_algorithm_permits+0x2e4>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d05b      	beq.n	800f97a <psa_key_algorithm_permits+0x27a>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f8ca:	4a47      	ldr	r2, [pc, #284]	; (800f9e8 <psa_key_algorithm_permits+0x2e8>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d052      	beq.n	800f976 <psa_key_algorithm_permits+0x276>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f8d8:	4a44      	ldr	r2, [pc, #272]	; (800f9ec <psa_key_algorithm_permits+0x2ec>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d049      	beq.n	800f972 <psa_key_algorithm_permits+0x272>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f8e6:	4a42      	ldr	r2, [pc, #264]	; (800f9f0 <psa_key_algorithm_permits+0x2f0>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d040      	beq.n	800f96e <psa_key_algorithm_permits+0x26e>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f8f4:	4a3f      	ldr	r2, [pc, #252]	; (800f9f4 <psa_key_algorithm_permits+0x2f4>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d037      	beq.n	800f96a <psa_key_algorithm_permits+0x26a>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f902:	4a3d      	ldr	r2, [pc, #244]	; (800f9f8 <psa_key_algorithm_permits+0x2f8>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d02e      	beq.n	800f966 <psa_key_algorithm_permits+0x266>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f910:	4a3a      	ldr	r2, [pc, #232]	; (800f9fc <psa_key_algorithm_permits+0x2fc>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d025      	beq.n	800f962 <psa_key_algorithm_permits+0x262>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f91e:	4a38      	ldr	r2, [pc, #224]	; (800fa00 <psa_key_algorithm_permits+0x300>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d01c      	beq.n	800f95e <psa_key_algorithm_permits+0x25e>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	b2db      	uxtb	r3, r3
 800f928:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f92c:	4a35      	ldr	r2, [pc, #212]	; (800fa04 <psa_key_algorithm_permits+0x304>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d013      	beq.n	800f95a <psa_key_algorithm_permits+0x25a>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	b2db      	uxtb	r3, r3
 800f936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f93a:	4a33      	ldr	r2, [pc, #204]	; (800fa08 <psa_key_algorithm_permits+0x308>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d00a      	beq.n	800f956 <psa_key_algorithm_permits+0x256>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	b2db      	uxtb	r3, r3
 800f944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f948:	4a30      	ldr	r2, [pc, #192]	; (800fa0c <psa_key_algorithm_permits+0x30c>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d101      	bne.n	800f952 <psa_key_algorithm_permits+0x252>
 800f94e:	2340      	movs	r3, #64	; 0x40
 800f950:	e05f      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f952:	2300      	movs	r3, #0
 800f954:	e05d      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f956:	2330      	movs	r3, #48	; 0x30
 800f958:	e05b      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f95a:	2320      	movs	r3, #32
 800f95c:	e059      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f95e:	231c      	movs	r3, #28
 800f960:	e057      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f962:	2320      	movs	r3, #32
 800f964:	e055      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f966:	231c      	movs	r3, #28
 800f968:	e053      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f96a:	2340      	movs	r3, #64	; 0x40
 800f96c:	e051      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f96e:	2330      	movs	r3, #48	; 0x30
 800f970:	e04f      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f972:	2320      	movs	r3, #32
 800f974:	e04d      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f976:	231c      	movs	r3, #28
 800f978:	e04b      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f97a:	2314      	movs	r3, #20
 800f97c:	e049      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f97e:	2314      	movs	r3, #20
 800f980:	e047      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f982:	2310      	movs	r3, #16
 800f984:	e045      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f986:	2310      	movs	r3, #16
 800f988:	e043      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f98a:	2310      	movs	r3, #16
 800f98c:	e041      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	4b0f      	ldr	r3, [pc, #60]	; (800f9d0 <psa_key_algorithm_permits+0x2d0>)
 800f992:	4013      	ands	r3, r2
 800f994:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800f998:	d13a      	bne.n	800fa10 <psa_key_algorithm_permits+0x310>
 800f99a:	89fb      	ldrh	r3, [r7, #14]
 800f99c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f9a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f9a4:	d108      	bne.n	800f9b8 <psa_key_algorithm_permits+0x2b8>
 800f9a6:	89fb      	ldrh	r3, [r7, #14]
 800f9a8:	0a1b      	lsrs	r3, r3, #8
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	f003 0307 	and.w	r3, r3, #7
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800f9b6:	e02c      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	e02a      	b.n	800fa12 <psa_key_algorithm_permits+0x312>
 800f9bc:	06000300 	.word	0x06000300
 800f9c0:	06000200 	.word	0x06000200
 800f9c4:	06000900 	.word	0x06000900
 800f9c8:	06000400 	.word	0x06000400
 800f9cc:	020000ff 	.word	0x020000ff
 800f9d0:	7fc00000 	.word	0x7fc00000
 800f9d4:	02000001 	.word	0x02000001
 800f9d8:	02000002 	.word	0x02000002
 800f9dc:	02000003 	.word	0x02000003
 800f9e0:	02000004 	.word	0x02000004
 800f9e4:	02000005 	.word	0x02000005
 800f9e8:	02000008 	.word	0x02000008
 800f9ec:	02000009 	.word	0x02000009
 800f9f0:	0200000a 	.word	0x0200000a
 800f9f4:	0200000b 	.word	0x0200000b
 800f9f8:	0200000c 	.word	0x0200000c
 800f9fc:	0200000d 	.word	0x0200000d
 800fa00:	02000010 	.word	0x02000010
 800fa04:	02000011 	.word	0x02000011
 800fa08:	02000012 	.word	0x02000012
 800fa0c:	02000013 	.word	0x02000013
 800fa10:	2300      	movs	r3, #0
 800fa12:	617b      	str	r3, [r7, #20]
                                            key_type, 0, requested_alg );
        size_t default_output_length = PSA_MAC_LENGTH(
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	4b7e      	ldr	r3, [pc, #504]	; (800fc10 <psa_key_algorithm_permits+0x510>)
 800fa18:	4013      	ands	r3, r2
 800fa1a:	f1b3 7f60 	cmp.w	r3, #58720256	; 0x3800000
 800fa1e:	f040 8089 	bne.w	800fb34 <psa_key_algorithm_permits+0x434>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa2a:	4a7a      	ldr	r2, [pc, #488]	; (800fc14 <psa_key_algorithm_permits+0x514>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d07f      	beq.n	800fb30 <psa_key_algorithm_permits+0x430>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa38:	4a77      	ldr	r2, [pc, #476]	; (800fc18 <psa_key_algorithm_permits+0x518>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d076      	beq.n	800fb2c <psa_key_algorithm_permits+0x42c>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	b2db      	uxtb	r3, r3
 800fa42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa46:	4a75      	ldr	r2, [pc, #468]	; (800fc1c <psa_key_algorithm_permits+0x51c>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d06d      	beq.n	800fb28 <psa_key_algorithm_permits+0x428>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa54:	4a72      	ldr	r2, [pc, #456]	; (800fc20 <psa_key_algorithm_permits+0x520>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d064      	beq.n	800fb24 <psa_key_algorithm_permits+0x424>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa62:	4a70      	ldr	r2, [pc, #448]	; (800fc24 <psa_key_algorithm_permits+0x524>)
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d05b      	beq.n	800fb20 <psa_key_algorithm_permits+0x420>
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa70:	4a6d      	ldr	r2, [pc, #436]	; (800fc28 <psa_key_algorithm_permits+0x528>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d052      	beq.n	800fb1c <psa_key_algorithm_permits+0x41c>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa7e:	4a6b      	ldr	r2, [pc, #428]	; (800fc2c <psa_key_algorithm_permits+0x52c>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d049      	beq.n	800fb18 <psa_key_algorithm_permits+0x418>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa8c:	4a68      	ldr	r2, [pc, #416]	; (800fc30 <psa_key_algorithm_permits+0x530>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d040      	beq.n	800fb14 <psa_key_algorithm_permits+0x414>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa9a:	4a66      	ldr	r2, [pc, #408]	; (800fc34 <psa_key_algorithm_permits+0x534>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d037      	beq.n	800fb10 <psa_key_algorithm_permits+0x410>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800faa8:	4a63      	ldr	r2, [pc, #396]	; (800fc38 <psa_key_algorithm_permits+0x538>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d02e      	beq.n	800fb0c <psa_key_algorithm_permits+0x40c>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fab6:	4a61      	ldr	r2, [pc, #388]	; (800fc3c <psa_key_algorithm_permits+0x53c>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	d025      	beq.n	800fb08 <psa_key_algorithm_permits+0x408>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fac4:	4a5e      	ldr	r2, [pc, #376]	; (800fc40 <psa_key_algorithm_permits+0x540>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d01c      	beq.n	800fb04 <psa_key_algorithm_permits+0x404>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	b2db      	uxtb	r3, r3
 800face:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fad2:	4a5c      	ldr	r2, [pc, #368]	; (800fc44 <psa_key_algorithm_permits+0x544>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d013      	beq.n	800fb00 <psa_key_algorithm_permits+0x400>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fae0:	4a59      	ldr	r2, [pc, #356]	; (800fc48 <psa_key_algorithm_permits+0x548>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d00a      	beq.n	800fafc <psa_key_algorithm_permits+0x3fc>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800faee:	4a57      	ldr	r2, [pc, #348]	; (800fc4c <psa_key_algorithm_permits+0x54c>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d101      	bne.n	800faf8 <psa_key_algorithm_permits+0x3f8>
 800faf4:	2340      	movs	r3, #64	; 0x40
 800faf6:	e035      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800faf8:	2300      	movs	r3, #0
 800fafa:	e033      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fafc:	2330      	movs	r3, #48	; 0x30
 800fafe:	e031      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb00:	2320      	movs	r3, #32
 800fb02:	e02f      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb04:	231c      	movs	r3, #28
 800fb06:	e02d      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb08:	2320      	movs	r3, #32
 800fb0a:	e02b      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb0c:	231c      	movs	r3, #28
 800fb0e:	e029      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb10:	2340      	movs	r3, #64	; 0x40
 800fb12:	e027      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb14:	2330      	movs	r3, #48	; 0x30
 800fb16:	e025      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb18:	2320      	movs	r3, #32
 800fb1a:	e023      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb1c:	231c      	movs	r3, #28
 800fb1e:	e021      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb20:	2314      	movs	r3, #20
 800fb22:	e01f      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb24:	2314      	movs	r3, #20
 800fb26:	e01d      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb28:	2310      	movs	r3, #16
 800fb2a:	e01b      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb2c:	2310      	movs	r3, #16
 800fb2e:	e019      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb30:	2310      	movs	r3, #16
 800fb32:	e017      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	4b36      	ldr	r3, [pc, #216]	; (800fc10 <psa_key_algorithm_permits+0x510>)
 800fb38:	4013      	ands	r3, r2
 800fb3a:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800fb3e:	d110      	bne.n	800fb62 <psa_key_algorithm_permits+0x462>
 800fb40:	89fb      	ldrh	r3, [r7, #14]
 800fb42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800fb46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fb4a:	d108      	bne.n	800fb5e <psa_key_algorithm_permits+0x45e>
 800fb4c:	89fb      	ldrh	r3, [r7, #14]
 800fb4e:	0a1b      	lsrs	r3, r3, #8
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	f003 0307 	and.w	r3, r3, #7
 800fb56:	2201      	movs	r2, #1
 800fb58:	fa02 f303 	lsl.w	r3, r2, r3
 800fb5c:	e002      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	e000      	b.n	800fb64 <psa_key_algorithm_permits+0x464>
 800fb62:	2300      	movs	r3, #0
 800fb64:	613b      	str	r3, [r7, #16]
                                        key_type, 0,
                                        PSA_ALG_FULL_LENGTH_MAC( requested_alg ) );

        /* If the policy is default-length, only allow an algorithm with
         * a declared exact-length matching the default. */
        if( PSA_MAC_TRUNCATED_LENGTH( policy_alg ) == 0 )
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	0c1b      	lsrs	r3, r3, #16
 800fb6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d107      	bne.n	800fb82 <psa_key_algorithm_permits+0x482>
            return( requested_output_length == default_output_length );
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	bf0c      	ite	eq
 800fb7a:	2301      	moveq	r3, #1
 800fb7c:	2300      	movne	r3, #0
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	e041      	b.n	800fc06 <psa_key_algorithm_permits+0x506>

        /* If the requested algorithm is default-length, allow it if the policy
         * length exactly matches the default length. */
        if( PSA_MAC_TRUNCATED_LENGTH( requested_alg ) == 0 &&
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	0c1b      	lsrs	r3, r3, #16
 800fb86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d108      	bne.n	800fba0 <psa_key_algorithm_permits+0x4a0>
            PSA_MAC_TRUNCATED_LENGTH( policy_alg ) == default_output_length )
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	0c1b      	lsrs	r3, r3, #16
 800fb92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        if( PSA_MAC_TRUNCATED_LENGTH( requested_alg ) == 0 &&
 800fb96:	693a      	ldr	r2, [r7, #16]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d101      	bne.n	800fba0 <psa_key_algorithm_permits+0x4a0>
        {
            return( 1 );
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	e032      	b.n	800fc06 <psa_key_algorithm_permits+0x506>
        }

        /* If policy_alg is an at-least-this-length wildcard MAC algorithm,
         * check for the requested MAC length to be equal to or longer than the
         * minimum allowed length. */
        if( ( policy_alg & PSA_ALG_MAC_AT_LEAST_THIS_LENGTH_FLAG ) != 0 )
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00a      	beq.n	800fbc0 <psa_key_algorithm_permits+0x4c0>
        {
            return( PSA_MAC_TRUNCATED_LENGTH( policy_alg ) <=
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	0c1b      	lsrs	r3, r3, #16
 800fbae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	bf2c      	ite	cs
 800fbb8:	2301      	movcs	r3, #1
 800fbba:	2300      	movcc	r3, #0
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	e022      	b.n	800fc06 <psa_key_algorithm_permits+0x506>
        }
    }
    /* If policy_alg is a generic key agreement operation, then using it for
     * a key derivation with that key agreement should also be allowed. This
     * behaviour is expected to be defined in a future specification version. */
    if( PSA_ALG_IS_RAW_KEY_AGREEMENT( policy_alg ) &&
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fbc6:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800fbca:	d11b      	bne.n	800fc04 <psa_key_algorithm_permits+0x504>
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	f023 631f 	bic.w	r3, r3, #166723584	; 0x9f00000
 800fbd2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800fbd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fbda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fbde:	d111      	bne.n	800fc04 <psa_key_algorithm_permits+0x504>
        PSA_ALG_IS_KEY_AGREEMENT( requested_alg ) )
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
    if( PSA_ALG_IS_RAW_KEY_AGREEMENT( policy_alg ) &&
 800fbe6:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800fbea:	d10b      	bne.n	800fc04 <psa_key_algorithm_permits+0x504>
    {
        return( PSA_ALG_KEY_AGREEMENT_GET_BASE( requested_alg ) ==
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	4b18      	ldr	r3, [pc, #96]	; (800fc50 <psa_key_algorithm_permits+0x550>)
 800fbf0:	4013      	ands	r3, r2
 800fbf2:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 800fbf6:	68ba      	ldr	r2, [r7, #8]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	bf0c      	ite	eq
 800fbfc:	2301      	moveq	r3, #1
 800fbfe:	2300      	movne	r3, #0
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	e000      	b.n	800fc06 <psa_key_algorithm_permits+0x506>
                policy_alg );
    }
    /* If it isn't explicitly permitted, it's forbidden. */
    return( 0 );
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3718      	adds	r7, #24
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	7fc00000 	.word	0x7fc00000
 800fc14:	02000001 	.word	0x02000001
 800fc18:	02000002 	.word	0x02000002
 800fc1c:	02000003 	.word	0x02000003
 800fc20:	02000004 	.word	0x02000004
 800fc24:	02000005 	.word	0x02000005
 800fc28:	02000008 	.word	0x02000008
 800fc2c:	02000009 	.word	0x02000009
 800fc30:	0200000a 	.word	0x0200000a
 800fc34:	0200000b 	.word	0x0200000b
 800fc38:	0200000c 	.word	0x0200000c
 800fc3c:	0200000d 	.word	0x0200000d
 800fc40:	02000010 	.word	0x02000010
 800fc44:	02000011 	.word	0x02000011
 800fc48:	02000012 	.word	0x02000012
 800fc4c:	02000013 	.word	0x02000013
 800fc50:	f6ff0000 	.word	0xf6ff0000

0800fc54 <psa_key_policy_permits>:
 *                                      the \p policy does not allow it.
 */
static psa_status_t psa_key_policy_permits( const psa_key_policy_t *policy,
                                            psa_key_type_t key_type,
                                            psa_algorithm_t alg )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	460b      	mov	r3, r1
 800fc5e:	607a      	str	r2, [r7, #4]
 800fc60:	817b      	strh	r3, [r7, #10]
    /* '0' is not a valid algorithm */
    if( alg == 0 )
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d102      	bne.n	800fc6e <psa_key_policy_permits+0x1a>
        return( PSA_ERROR_INVALID_ARGUMENT );
 800fc68:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800fc6c:	e097      	b.n	800fd9e <psa_key_policy_permits+0x14a>

    /* A requested algorithm cannot be a wildcard. */
    if( PSA_ALG_IS_WILDCARD( alg ) )
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fc74:	4a4c      	ldr	r2, [pc, #304]	; (800fda8 <psa_key_policy_permits+0x154>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d01b      	beq.n	800fcb2 <psa_key_policy_permits+0x5e>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fc80:	4a4a      	ldr	r2, [pc, #296]	; (800fdac <psa_key_policy_permits+0x158>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d015      	beq.n	800fcb2 <psa_key_policy_permits+0x5e>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800fc8c:	f023 0301 	bic.w	r3, r3, #1
 800fc90:	f1b3 2f06 	cmp.w	r3, #100664832	; 0x6000600
 800fc94:	d00d      	beq.n	800fcb2 <psa_key_policy_permits+0x5e>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fc9c:	4a44      	ldr	r2, [pc, #272]	; (800fdb0 <psa_key_policy_permits+0x15c>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d007      	beq.n	800fcb2 <psa_key_policy_permits+0x5e>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800fca8:	f023 0301 	bic.w	r3, r3, #1
 800fcac:	4a41      	ldr	r2, [pc, #260]	; (800fdb4 <psa_key_policy_permits+0x160>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d133      	bne.n	800fd1a <psa_key_policy_permits+0xc6>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fcb8:	4a3b      	ldr	r2, [pc, #236]	; (800fda8 <psa_key_policy_permits+0x154>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d01b      	beq.n	800fcf6 <psa_key_policy_permits+0xa2>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fcc4:	4a39      	ldr	r2, [pc, #228]	; (800fdac <psa_key_policy_permits+0x158>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d015      	beq.n	800fcf6 <psa_key_policy_permits+0xa2>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800fcd0:	f023 0301 	bic.w	r3, r3, #1
 800fcd4:	f1b3 2f06 	cmp.w	r3, #100664832	; 0x6000600
 800fcd8:	d00d      	beq.n	800fcf6 <psa_key_policy_permits+0xa2>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fce0:	4a33      	ldr	r2, [pc, #204]	; (800fdb0 <psa_key_policy_permits+0x15c>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d007      	beq.n	800fcf6 <psa_key_policy_permits+0xa2>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800fcec:	f023 0301 	bic.w	r3, r3, #1
 800fcf0:	4a30      	ldr	r2, [pc, #192]	; (800fdb4 <psa_key_policy_permits+0x160>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d10c      	bne.n	800fd10 <psa_key_policy_permits+0xbc>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d008      	beq.n	800fd10 <psa_key_policy_permits+0xbc>
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	b2db      	uxtb	r3, r3
 800fd02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fd06:	4a2c      	ldr	r2, [pc, #176]	; (800fdb8 <psa_key_policy_permits+0x164>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d101      	bne.n	800fd10 <psa_key_policy_permits+0xbc>
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	e000      	b.n	800fd12 <psa_key_policy_permits+0xbe>
 800fd10:	2300      	movs	r3, #0
 800fd12:	f003 0301 	and.w	r3, r3, #1
 800fd16:	b2db      	uxtb	r3, r3
 800fd18:	e024      	b.n	800fd64 <psa_key_policy_permits+0x110>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fd20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800fd24:	d108      	bne.n	800fd38 <psa_key_policy_permits+0xe4>
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	bf14      	ite	ne
 800fd30:	2301      	movne	r3, #1
 800fd32:	2300      	moveq	r3, #0
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	e015      	b.n	800fd64 <psa_key_policy_permits+0x110>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fd3e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800fd42:	d108      	bne.n	800fd56 <psa_key_policy_permits+0x102>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	bf14      	ite	ne
 800fd4e:	2301      	movne	r3, #1
 800fd50:	2300      	moveq	r3, #0
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	e006      	b.n	800fd64 <psa_key_policy_permits+0x110>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4a17      	ldr	r2, [pc, #92]	; (800fdb8 <psa_key_policy_permits+0x164>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	bf0c      	ite	eq
 800fd5e:	2301      	moveq	r3, #1
 800fd60:	2300      	movne	r3, #0
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <psa_key_policy_permits+0x11a>
        return( PSA_ERROR_INVALID_ARGUMENT );
 800fd68:	f06f 0386 	mvn.w	r3, #134	; 0x86
 800fd6c:	e017      	b.n	800fd9e <psa_key_policy_permits+0x14a>

    if( psa_key_algorithm_permits( key_type, policy->alg, alg ) ||
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	6859      	ldr	r1, [r3, #4]
 800fd72:	897b      	ldrh	r3, [r7, #10]
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7ff fcc2 	bl	800f700 <psa_key_algorithm_permits>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d109      	bne.n	800fd96 <psa_key_policy_permits+0x142>
        psa_key_algorithm_permits( key_type, policy->alg2, alg ) )
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6899      	ldr	r1, [r3, #8]
 800fd86:	897b      	ldrh	r3, [r7, #10]
 800fd88:	687a      	ldr	r2, [r7, #4]
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f7ff fcb8 	bl	800f700 <psa_key_algorithm_permits>
 800fd90:	4603      	mov	r3, r0
    if( psa_key_algorithm_permits( key_type, policy->alg, alg ) ||
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <psa_key_policy_permits+0x146>
        return( PSA_SUCCESS );
 800fd96:	2300      	movs	r3, #0
 800fd98:	e001      	b.n	800fd9e <psa_key_policy_permits+0x14a>
    else
        return( PSA_ERROR_NOT_PERMITTED );
 800fd9a:	f06f 0384 	mvn.w	r3, #132	; 0x84
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	06000300 	.word	0x06000300
 800fdac:	06000200 	.word	0x06000200
 800fdb0:	06000900 	.word	0x06000900
 800fdb4:	06000400 	.word	0x06000400
 800fdb8:	020000ff 	.word	0x020000ff

0800fdbc <psa_get_and_lock_key_slot_with_policy>:
static psa_status_t psa_get_and_lock_key_slot_with_policy(
    mbedtls_svc_key_id_t key,
    psa_key_slot_t **p_slot,
    psa_key_usage_t usage,
    psa_algorithm_t alg )
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b086      	sub	sp, #24
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
 800fdc8:	603b      	str	r3, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 800fdca:	f06f 0396 	mvn.w	r3, #150	; 0x96
 800fdce:	617b      	str	r3, [r7, #20]
    psa_key_slot_t *slot;

    status = psa_get_and_lock_key_slot( key, p_slot );
 800fdd0:	68b9      	ldr	r1, [r7, #8]
 800fdd2:	68f8      	ldr	r0, [r7, #12]
 800fdd4:	f001 fdae 	bl	8011934 <psa_get_and_lock_key_slot>
 800fdd8:	6178      	str	r0, [r7, #20]
    if( status != PSA_SUCCESS )
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <psa_get_and_lock_key_slot_with_policy+0x28>
        return( status );
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	e032      	b.n	800fe4a <psa_get_and_lock_key_slot_with_policy+0x8e>
    slot = *p_slot;
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	613b      	str	r3, [r7, #16]

    /* Enforce that usage policy for the key slot contains all the flags
     * required by the usage parameter. There is one exception: public
     * keys can always be exported, so we treat public key objects as
     * if they had the export flag. */
    if( PSA_KEY_TYPE_IS_PUBLIC_KEY( slot->attr.type ) )
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	881b      	ldrh	r3, [r3, #0]
 800fdee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800fdf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fdf6:	d103      	bne.n	800fe00 <psa_get_and_lock_key_slot_with_policy+0x44>
        usage &= ~PSA_KEY_USAGE_EXPORT;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f023 0301 	bic.w	r3, r3, #1
 800fdfe:	607b      	str	r3, [r7, #4]

    if( ( slot->attr.policy.usage & usage ) != usage )
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	68da      	ldr	r2, [r3, #12]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	4013      	ands	r3, r2
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d003      	beq.n	800fe16 <psa_get_and_lock_key_slot_with_policy+0x5a>
    {
        status = PSA_ERROR_NOT_PERMITTED;
 800fe0e:	f06f 0384 	mvn.w	r3, #132	; 0x84
 800fe12:	617b      	str	r3, [r7, #20]
        goto error;
 800fe14:	e012      	b.n	800fe3c <psa_get_and_lock_key_slot_with_policy+0x80>
    }

    /* Enforce that the usage policy permits the requested algortihm. */
    if( alg != 0 )
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d00c      	beq.n	800fe36 <psa_get_and_lock_key_slot_with_policy+0x7a>
    {
        status = psa_key_policy_permits( &slot->attr.policy,
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	f103 000c 	add.w	r0, r3, #12
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	683a      	ldr	r2, [r7, #0]
 800fe28:	4619      	mov	r1, r3
 800fe2a:	f7ff ff13 	bl	800fc54 <psa_key_policy_permits>
 800fe2e:	6178      	str	r0, [r7, #20]
                                         slot->attr.type,
                                         alg );
        if( status != PSA_SUCCESS )
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d101      	bne.n	800fe3a <psa_get_and_lock_key_slot_with_policy+0x7e>
            goto error;
    }

    return( PSA_SUCCESS );
 800fe36:	2300      	movs	r3, #0
 800fe38:	e007      	b.n	800fe4a <psa_get_and_lock_key_slot_with_policy+0x8e>
            goto error;
 800fe3a:	bf00      	nop

error:
    *p_slot = NULL;
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	601a      	str	r2, [r3, #0]
    psa_unlock_key_slot( slot );
 800fe42:	6938      	ldr	r0, [r7, #16]
 800fe44:	f001 fdce 	bl	80119e4 <psa_unlock_key_slot>

    return( status );
 800fe48:	697b      	ldr	r3, [r7, #20]
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3718      	adds	r7, #24
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}

0800fe52 <psa_remove_key_data_from_memory>:
#define psa_get_and_lock_transparent_key_slot_with_policy( key, p_slot, usage, alg )   \
    psa_get_and_lock_key_slot_with_policy( key, p_slot, usage, alg )
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */

psa_status_t psa_remove_key_data_from_memory( psa_key_slot_t *slot )
{
 800fe52:	b580      	push	{r7, lr}
 800fe54:	b082      	sub	sp, #8
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
    /* Data pointer will always be either a valid pointer or NULL in an
     * initialized slot, so we can just free it. */
    if( slot->key.data != NULL )
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a1b      	ldr	r3, [r3, #32]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d007      	beq.n	800fe72 <psa_remove_key_data_from_memory+0x20>
        mbedtls_platform_zeroize( slot->key.data, slot->key.bytes);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6a1a      	ldr	r2, [r3, #32]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	4610      	mov	r0, r2
 800fe6e:	f7fe fa3f 	bl	800e2f0 <mbedtls_platform_zeroize>

    mbedtls_free( slot->key.data );
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6a1b      	ldr	r3, [r3, #32]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f005 f938 	bl	80150ec <free>
    slot->key.data = NULL;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	621a      	str	r2, [r3, #32]
    slot->key.bytes = 0;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	625a      	str	r2, [r3, #36]	; 0x24

    return( PSA_SUCCESS );
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3708      	adds	r7, #8
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <psa_wipe_key_slot>:

/** Completely wipe a slot in memory, including its policy.
 * Persistent storage is not affected. */
psa_status_t psa_wipe_key_slot( psa_key_slot_t *slot )
{
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b084      	sub	sp, #16
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
    psa_status_t status = psa_remove_key_data_from_memory( slot );
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f7ff ffd9 	bl	800fe52 <psa_remove_key_data_from_memory>
 800fea0:	60f8      	str	r0, [r7, #12]
     * do our best to report an unexpected lock counter: if available
     * call MBEDTLS_PARAM_FAILED that may terminate execution (if called as
     * part of the execution of a test suite this will stop the test suite
     * execution).
     */
    if( slot->lock_count != 1 )
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	69db      	ldr	r3, [r3, #28]
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d002      	beq.n	800feb0 <psa_wipe_key_slot+0x1e>
    {
#ifdef MBEDTLS_CHECK_PARAMS
        MBEDTLS_PARAM_FAILED( slot->lock_count == 1 );
#endif
        status = PSA_ERROR_CORRUPTION_DETECTED;
 800feaa:	f06f 0396 	mvn.w	r3, #150	; 0x96
 800feae:	60fb      	str	r3, [r7, #12]
     * phase, they have a copy of the key. Note that this means that
     * key material can linger until all operations are completed. */
    /* At this point, key material and other type-specific content has
     * been wiped. Clear remaining metadata. We can call memset and not
     * zeroize because the metadata is not particularly sensitive. */
    memset( slot, 0, sizeof( *slot ) );
 800feb0:	2228      	movs	r2, #40	; 0x28
 800feb2:	2100      	movs	r1, #0
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f005 f954 	bl	8015162 <memset>
    return( status );
 800feba:	68fb      	ldr	r3, [r7, #12]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <psa_destroy_key>:

psa_status_t psa_destroy_key( mbedtls_svc_key_id_t key )
{
 800fec4:	b590      	push	{r4, r7, lr}
 800fec6:	b087      	sub	sp, #28
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
    psa_key_slot_t *slot;
    psa_status_t status; /* status of the last operation */
    psa_status_t overall_status = PSA_SUCCESS;
 800fecc:	2300      	movs	r3, #0
 800fece:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_PSA_CRYPTO_SE_C)
    psa_se_drv_table_entry_t *driver;
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */

    if( mbedtls_svc_key_id_is_null( key ) )
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7fe ffd6 	bl	800ee82 <mbedtls_svc_key_id_is_null>
 800fed6:	4603      	mov	r3, r0
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <psa_destroy_key+0x1c>
        return( PSA_SUCCESS );
 800fedc:	2300      	movs	r3, #0
 800fede:	e080      	b.n	800ffe2 <psa_destroy_key+0x11e>
     * key, this will load the key description from persistent memory if not
     * done yet. We cannot avoid this loading as without it we don't know if
     * the key is operated by an SE or not and this information is needed by
     * the current implementation.
     */
    status = psa_get_and_lock_key_slot( key, &slot );
 800fee0:	f107 0308 	add.w	r3, r7, #8
 800fee4:	4619      	mov	r1, r3
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f001 fd24 	bl	8011934 <psa_get_and_lock_key_slot>
 800feec:	6138      	str	r0, [r7, #16]
    if( status != PSA_SUCCESS )
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <psa_destroy_key+0x34>
        return( status );
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	e074      	b.n	800ffe2 <psa_destroy_key+0x11e>
     * library (apart from the present access), the key cannot be destroyed
     * yet. For the time being, just return in error. Eventually (to be
     * implemented), the key should be destroyed when all accesses have
     * stopped.
     */
    if( slot->lock_count > 1 )
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	69db      	ldr	r3, [r3, #28]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d906      	bls.n	800ff0e <psa_destroy_key+0x4a>
    {
       psa_unlock_key_slot( slot );
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f001 fd6e 	bl	80119e4 <psa_unlock_key_slot>
       return( PSA_ERROR_GENERIC_ERROR );
 800ff08:	f06f 0383 	mvn.w	r3, #131	; 0x83
 800ff0c:	e069      	b.n	800ffe2 <psa_destroy_key+0x11e>
    }

#if defined(MBEDTLS_PSA_CRYPTO_SE_C)
    driver = psa_get_se_driver_entry( slot->attr.lifetime );
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f001 fa16 	bl	8011344 <psa_get_se_driver_entry>
 800ff18:	60f8      	str	r0, [r7, #12]
    if( driver != NULL )
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d02f      	beq.n	800ff80 <psa_destroy_key+0xbc>
        /* For a key in a secure element, we need to do three things:
         * remove the key file in internal storage, destroy the
         * key inside the secure element, and update the driver's
         * persistent data. Start a transaction that will encompass these
         * three actions. */
        psa_crypto_prepare_transaction( PSA_CRYPTO_TRANSACTION_DESTROY_KEY );
 800ff20:	2002      	movs	r0, #2
 800ff22:	f7fe fff1 	bl	800ef08 <psa_crypto_prepare_transaction>
        psa_crypto_transaction.key.lifetime = slot->attr.lifetime;
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	4a30      	ldr	r2, [pc, #192]	; (800ffec <psa_destroy_key+0x128>)
 800ff2c:	6053      	str	r3, [r2, #4]
        psa_crypto_transaction.key.slot = psa_key_slot_get_slot_number( slot );
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fe ffda 	bl	800eeea <psa_key_slot_get_slot_number>
 800ff36:	4603      	mov	r3, r0
 800ff38:	460c      	mov	r4, r1
 800ff3a:	4a2c      	ldr	r2, [pc, #176]	; (800ffec <psa_destroy_key+0x128>)
 800ff3c:	e9c2 3402 	strd	r3, r4, [r2, #8]
        psa_crypto_transaction.key.id = slot->attr.id;
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	689b      	ldr	r3, [r3, #8]
 800ff44:	4a29      	ldr	r2, [pc, #164]	; (800ffec <psa_destroy_key+0x128>)
 800ff46:	6113      	str	r3, [r2, #16]
        status = psa_crypto_save_transaction( );
 800ff48:	f002 f8d0 	bl	80120ec <psa_crypto_save_transaction>
 800ff4c:	6138      	str	r0, [r7, #16]
        if( status != PSA_SUCCESS )
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d004      	beq.n	800ff5e <psa_destroy_key+0x9a>
        {
            (void) psa_crypto_stop_transaction( );
 800ff54:	f002 f8f4 	bl	8012140 <psa_crypto_stop_transaction>
             * important if the error is that the storage is full.
             * But how to do it exactly without risking an inconsistent
             * state after a reset?
             * https://github.com/ARMmbed/mbed-crypto/issues/215
             */
            overall_status = status;
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	617b      	str	r3, [r7, #20]
            goto exit;
 800ff5c:	e036      	b.n	800ffcc <psa_destroy_key+0x108>
        }

        status = psa_destroy_se_key( driver,
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fe ffc2 	bl	800eeea <psa_key_slot_get_slot_number>
 800ff66:	4603      	mov	r3, r0
 800ff68:	460c      	mov	r4, r1
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	4623      	mov	r3, r4
 800ff6e:	68f8      	ldr	r0, [r7, #12]
 800ff70:	f001 fae5 	bl	801153e <psa_destroy_se_key>
 800ff74:	6138      	str	r0, [r7, #16]
                                     psa_key_slot_get_slot_number( slot ) );
        if( overall_status == PSA_SUCCESS )
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d101      	bne.n	800ff80 <psa_destroy_key+0xbc>
            overall_status = status;
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	617b      	str	r3, [r7, #20]
    }
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */

#if defined(MBEDTLS_PSA_CRYPTO_STORAGE_C)
    if( ! PSA_KEY_LIFETIME_IS_VOLATILE( slot->attr.lifetime ) )
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d00a      	beq.n	800ffa0 <psa_destroy_key+0xdc>
    {
        status = psa_destroy_persistent_key( slot->attr.id );
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	689b      	ldr	r3, [r3, #8]
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f001 fe17 	bl	8011bc2 <psa_destroy_persistent_key>
 800ff94:	6138      	str	r0, [r7, #16]
        if( overall_status == PSA_SUCCESS )
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d101      	bne.n	800ffa0 <psa_destroy_key+0xdc>
            overall_status = status;
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	617b      	str	r3, [r7, #20]
         */
    }
#endif /* defined(MBEDTLS_PSA_CRYPTO_STORAGE_C) */

#if defined(MBEDTLS_PSA_CRYPTO_SE_C)
    if( driver != NULL )
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d011      	beq.n	800ffca <psa_destroy_key+0x106>
    {
        status = psa_save_se_persistent_data( driver );
 800ffa6:	68f8      	ldr	r0, [r7, #12]
 800ffa8:	f001 fa45 	bl	8011436 <psa_save_se_persistent_data>
 800ffac:	6138      	str	r0, [r7, #16]
        if( overall_status == PSA_SUCCESS )
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d101      	bne.n	800ffb8 <psa_destroy_key+0xf4>
            overall_status = status;
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	617b      	str	r3, [r7, #20]
        status = psa_crypto_stop_transaction( );
 800ffb8:	f002 f8c2 	bl	8012140 <psa_crypto_stop_transaction>
 800ffbc:	6138      	str	r0, [r7, #16]
        if( overall_status == PSA_SUCCESS )
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d102      	bne.n	800ffca <psa_destroy_key+0x106>
            overall_status = status;
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	617b      	str	r3, [r7, #20]
 800ffc8:	e000      	b.n	800ffcc <psa_destroy_key+0x108>
    }
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */

#if defined(MBEDTLS_PSA_CRYPTO_SE_C)
exit:
 800ffca:	bf00      	nop
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */
    status = psa_wipe_key_slot( slot );
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7ff ff5f 	bl	800fe92 <psa_wipe_key_slot>
 800ffd4:	6138      	str	r0, [r7, #16]
    /* Prioritize CORRUPTION_DETECTED from wiping over a storage error */
    if( overall_status == PSA_SUCCESS )
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d101      	bne.n	800ffe0 <psa_destroy_key+0x11c>
        overall_status = status;
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	617b      	str	r3, [r7, #20]
    return( overall_status );
 800ffe0:	697b      	ldr	r3, [r7, #20]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	371c      	adds	r7, #28
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd90      	pop	{r4, r7, pc}
 800ffea:	bf00      	nop
 800ffec:	200028b0 	.word	0x200028b0

0800fff0 <psa_get_key_slot_number>:

#if defined(MBEDTLS_PSA_CRYPTO_SE_C)
psa_status_t psa_get_key_slot_number(
    const psa_key_attributes_t *attributes,
    psa_key_slot_number_t *slot_number )
{
 800fff0:	b490      	push	{r4, r7}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
    if( attributes->core.flags & MBEDTLS_PSA_KA_FLAG_HAS_SLOT_NUMBER )
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	8b1b      	ldrh	r3, [r3, #24]
 800fffe:	f003 0301 	and.w	r3, r3, #1
 8010002:	2b00      	cmp	r3, #0
 8010004:	d007      	beq.n	8010016 <psa_get_key_slot_number+0x26>
    {
        *slot_number = attributes->slot_number;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 801000c:	683a      	ldr	r2, [r7, #0]
 801000e:	e9c2 3400 	strd	r3, r4, [r2]
        return( PSA_SUCCESS );
 8010012:	2300      	movs	r3, #0
 8010014:	e001      	b.n	801001a <psa_get_key_slot_number+0x2a>
    }
    else
        return( PSA_ERROR_INVALID_ARGUMENT );
 8010016:	f06f 0386 	mvn.w	r3, #134	; 0x86
}
 801001a:	4618      	mov	r0, r3
 801001c:	3708      	adds	r7, #8
 801001e:	46bd      	mov	sp, r7
 8010020:	bc90      	pop	{r4, r7}
 8010022:	4770      	bx	lr

08010024 <psa_validate_key_policy>:
 * This function only rejects invalid policies. It does not validate the
 * consistency of the policy with respect to other attributes of the key
 * such as the key type.
 */
static psa_status_t psa_validate_key_policy( const psa_key_policy_t *policy )
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
    if( ( policy->usage & ~( PSA_KEY_USAGE_EXPORT |
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8010034:	f023 0303 	bic.w	r3, r3, #3
 8010038:	2b00      	cmp	r3, #0
 801003a:	d002      	beq.n	8010042 <psa_validate_key_policy+0x1e>
                             PSA_KEY_USAGE_ENCRYPT |
                             PSA_KEY_USAGE_DECRYPT |
                             PSA_KEY_USAGE_SIGN_HASH |
                             PSA_KEY_USAGE_VERIFY_HASH |
                             PSA_KEY_USAGE_DERIVE ) ) != 0 )
        return( PSA_ERROR_INVALID_ARGUMENT );
 801003c:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8010040:	e000      	b.n	8010044 <psa_validate_key_policy+0x20>

    return( PSA_SUCCESS );
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <psa_validate_key_attributes>:
 *
 */
static psa_status_t psa_validate_key_attributes(
    const psa_key_attributes_t *attributes,
    psa_se_drv_table_entry_t **p_drv )
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
    psa_status_t status = PSA_ERROR_INVALID_ARGUMENT;
 801005a:	f06f 0386 	mvn.w	r3, #134	; 0x86
 801005e:	617b      	str	r3, [r7, #20]
    psa_key_lifetime_t lifetime = psa_get_key_lifetime( attributes );
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7fe ff2a 	bl	800eeba <psa_get_key_lifetime>
 8010066:	6138      	str	r0, [r7, #16]
    mbedtls_svc_key_id_t key = psa_get_key_id( attributes );
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f7fe ff1a 	bl	800eea2 <psa_get_key_id>
 801006e:	60f8      	str	r0, [r7, #12]

    status = psa_validate_key_location( lifetime, p_drv );
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6938      	ldr	r0, [r7, #16]
 8010074:	f001 fcd2 	bl	8011a1c <psa_validate_key_location>
 8010078:	6178      	str	r0, [r7, #20]
    if( status != PSA_SUCCESS )
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d001      	beq.n	8010084 <psa_validate_key_attributes+0x34>
        return( status );
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	e040      	b.n	8010106 <psa_validate_key_attributes+0xb6>

    status = psa_validate_key_persistence( lifetime );
 8010084:	6938      	ldr	r0, [r7, #16]
 8010086:	f001 fceb 	bl	8011a60 <psa_validate_key_persistence>
 801008a:	6178      	str	r0, [r7, #20]
    if( status != PSA_SUCCESS )
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d001      	beq.n	8010096 <psa_validate_key_attributes+0x46>
        return( status );
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	e037      	b.n	8010106 <psa_validate_key_attributes+0xb6>

    if ( PSA_KEY_LIFETIME_IS_VOLATILE( lifetime ) )
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	b2db      	uxtb	r3, r3
 801009a:	2b00      	cmp	r3, #0
 801009c:	d105      	bne.n	80100aa <psa_validate_key_attributes+0x5a>
    {
        if( MBEDTLS_SVC_KEY_ID_GET_KEY_ID( key ) != 0 )
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d010      	beq.n	80100c6 <psa_validate_key_attributes+0x76>
            return( PSA_ERROR_INVALID_ARGUMENT );
 80100a4:	f06f 0386 	mvn.w	r3, #134	; 0x86
 80100a8:	e02d      	b.n	8010106 <psa_validate_key_attributes+0xb6>
    }
    else
    {
        if( !psa_is_valid_key_id( psa_get_key_id( attributes ), 0 ) )
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7fe fef9 	bl	800eea2 <psa_get_key_id>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2100      	movs	r1, #0
 80100b4:	4618      	mov	r0, r3
 80100b6:	f001 fae4 	bl	8011682 <psa_is_valid_key_id>
 80100ba:	4603      	mov	r3, r0
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d102      	bne.n	80100c6 <psa_validate_key_attributes+0x76>
            return( PSA_ERROR_INVALID_ARGUMENT );
 80100c0:	f06f 0386 	mvn.w	r3, #134	; 0x86
 80100c4:	e01f      	b.n	8010106 <psa_validate_key_attributes+0xb6>
    }

    status = psa_validate_key_policy( &attributes->core.policy );
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	330c      	adds	r3, #12
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff ffaa 	bl	8010024 <psa_validate_key_policy>
 80100d0:	6178      	str	r0, [r7, #20]
    if( status != PSA_SUCCESS )
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d001      	beq.n	80100dc <psa_validate_key_attributes+0x8c>
        return( status );
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	e014      	b.n	8010106 <psa_validate_key_attributes+0xb6>

    /* Refuse to create overly large keys.
     * Note that this doesn't trigger on import if the attributes don't
     * explicitly specify a size (so psa_get_key_bits returns 0), so
     * psa_import_key() needs its own checks. */
    if( psa_get_key_bits( attributes ) > PSA_MAX_KEY_BITS )
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f7fe fef8 	bl	800eed2 <psa_get_key_bits>
 80100e2:	4602      	mov	r2, r0
 80100e4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d902      	bls.n	80100f2 <psa_validate_key_attributes+0xa2>
        return( PSA_ERROR_NOT_SUPPORTED );
 80100ec:	f06f 0385 	mvn.w	r3, #133	; 0x85
 80100f0:	e009      	b.n	8010106 <psa_validate_key_attributes+0xb6>

    /* Reject invalid flags. These should not be reachable through the API. */
    if( attributes->core.flags & ~ ( MBEDTLS_PSA_KA_MASK_EXTERNAL_ONLY |
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	8b1b      	ldrh	r3, [r3, #24]
 80100f6:	f023 0301 	bic.w	r3, r3, #1
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d002      	beq.n	8010104 <psa_validate_key_attributes+0xb4>
                                     MBEDTLS_PSA_KA_MASK_DUAL_USE ) )
        return( PSA_ERROR_INVALID_ARGUMENT );
 80100fe:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8010102:	e000      	b.n	8010106 <psa_validate_key_attributes+0xb6>

    return( PSA_SUCCESS );
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3718      	adds	r7, #24
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
	...

08010110 <psa_start_key_creation>:
static psa_status_t psa_start_key_creation(
    psa_key_creation_method_t method,
    const psa_key_attributes_t *attributes,
    psa_key_slot_t **p_slot,
    psa_se_drv_table_entry_t **p_drv )
{
 8010110:	b5b0      	push	{r4, r5, r7, lr}
 8010112:	b08a      	sub	sp, #40	; 0x28
 8010114:	af00      	add	r7, sp, #0
 8010116:	60b9      	str	r1, [r7, #8]
 8010118:	607a      	str	r2, [r7, #4]
 801011a:	603b      	str	r3, [r7, #0]
 801011c:	4603      	mov	r3, r0
 801011e:	73fb      	strb	r3, [r7, #15]
    psa_status_t status;
    psa_key_id_t volatile_key_id;
    psa_key_slot_t *slot;

    (void) method;
    *p_drv = NULL;
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	2200      	movs	r2, #0
 8010124:	601a      	str	r2, [r3, #0]

    status = psa_validate_key_attributes( attributes, p_drv );
 8010126:	6839      	ldr	r1, [r7, #0]
 8010128:	68b8      	ldr	r0, [r7, #8]
 801012a:	f7ff ff91 	bl	8010050 <psa_validate_key_attributes>
 801012e:	6278      	str	r0, [r7, #36]	; 0x24
    if( status != PSA_SUCCESS )
 8010130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010132:	2b00      	cmp	r3, #0
 8010134:	d001      	beq.n	801013a <psa_start_key_creation+0x2a>
        return( status );
 8010136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010138:	e06b      	b.n	8010212 <psa_start_key_creation+0x102>

    status = psa_get_empty_key_slot( &volatile_key_id, p_slot );
 801013a:	f107 031c 	add.w	r3, r7, #28
 801013e:	6879      	ldr	r1, [r7, #4]
 8010140:	4618      	mov	r0, r3
 8010142:	f001 fb2f 	bl	80117a4 <psa_get_empty_key_slot>
 8010146:	6278      	str	r0, [r7, #36]	; 0x24
    if( status != PSA_SUCCESS )
 8010148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014a:	2b00      	cmp	r3, #0
 801014c:	d001      	beq.n	8010152 <psa_start_key_creation+0x42>
        return( status );
 801014e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010150:	e05f      	b.n	8010212 <psa_start_key_creation+0x102>
    slot = *p_slot;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	623b      	str	r3, [r7, #32]
     * an input (generate, device) but not for those where the bit-size
     * is optional (import, copy). In case of a volatile key, assign it the
     * volatile key identifier associated to the slot returned to contain its
     * definition. */

    slot->attr = attributes->core;
 8010158:	6a3a      	ldr	r2, [r7, #32]
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	4614      	mov	r4, r2
 801015e:	461d      	mov	r5, r3
 8010160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010164:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010168:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if( PSA_KEY_LIFETIME_IS_VOLATILE( slot->attr.lifetime ) )
 801016c:	6a3b      	ldr	r3, [r7, #32]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	b2db      	uxtb	r3, r3
 8010172:	2b00      	cmp	r3, #0
 8010174:	d102      	bne.n	801017c <psa_start_key_creation+0x6c>
    {
#if !defined(MBEDTLS_PSA_CRYPTO_KEY_ID_ENCODES_OWNER)
        slot->attr.id = volatile_key_id;
 8010176:	69fa      	ldr	r2, [r7, #28]
 8010178:	6a3b      	ldr	r3, [r7, #32]
 801017a:	609a      	str	r2, [r3, #8]
    /* Erase external-only flags from the internal copy. To access
     * external-only flags, query `attributes`. Thanks to the check
     * in psa_validate_key_attributes(), this leaves the dual-use
     * flags and any internal flag that psa_get_empty_key_slot()
     * may have set. */
    slot->attr.flags &= ~MBEDTLS_PSA_KA_MASK_EXTERNAL_ONLY;
 801017c:	6a3b      	ldr	r3, [r7, #32]
 801017e:	8b1b      	ldrh	r3, [r3, #24]
 8010180:	f023 0301 	bic.w	r3, r3, #1
 8010184:	b29a      	uxth	r2, r3
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	831a      	strh	r2, [r3, #24]
     * fails during the key creation process, to clean up on the secure
     * element side after restarting. Obtaining a slot number from the
     * secure element driver updates its persistent state, but we do not yet
     * save the driver's persistent state, so that if the power fails,
     * we can roll back to a state where the key doesn't exist. */
    if( *p_drv != NULL )
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d034      	beq.n	80101fc <psa_start_key_creation+0xec>
    {
        psa_key_slot_number_t slot_number;
        status = psa_find_se_slot_for_key( attributes, method, *p_drv,
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	f107 0310 	add.w	r3, r7, #16
 801019a:	7bf9      	ldrb	r1, [r7, #15]
 801019c:	68b8      	ldr	r0, [r7, #8]
 801019e:	f001 f96a 	bl	8011476 <psa_find_se_slot_for_key>
 80101a2:	6278      	str	r0, [r7, #36]	; 0x24
                                           &slot_number );
        if( status != PSA_SUCCESS )
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d001      	beq.n	80101ae <psa_start_key_creation+0x9e>
            return( status );
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	e031      	b.n	8010212 <psa_start_key_creation+0x102>

        if( ! PSA_KEY_LIFETIME_IS_VOLATILE( attributes->core.lifetime ) )
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d019      	beq.n	80101ec <psa_start_key_creation+0xdc>
        {
            psa_crypto_prepare_transaction( PSA_CRYPTO_TRANSACTION_CREATE_KEY );
 80101b8:	2001      	movs	r0, #1
 80101ba:	f7fe fea5 	bl	800ef08 <psa_crypto_prepare_transaction>
            psa_crypto_transaction.key.lifetime = slot->attr.lifetime;
 80101be:	6a3b      	ldr	r3, [r7, #32]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	4a16      	ldr	r2, [pc, #88]	; (801021c <psa_start_key_creation+0x10c>)
 80101c4:	6053      	str	r3, [r2, #4]
            psa_crypto_transaction.key.slot = slot_number;
 80101c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80101ca:	4a14      	ldr	r2, [pc, #80]	; (801021c <psa_start_key_creation+0x10c>)
 80101cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
            psa_crypto_transaction.key.id = slot->attr.id;
 80101d0:	6a3b      	ldr	r3, [r7, #32]
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	4a11      	ldr	r2, [pc, #68]	; (801021c <psa_start_key_creation+0x10c>)
 80101d6:	6113      	str	r3, [r2, #16]
            status = psa_crypto_save_transaction( );
 80101d8:	f001 ff88 	bl	80120ec <psa_crypto_save_transaction>
 80101dc:	6278      	str	r0, [r7, #36]	; 0x24
            if( status != PSA_SUCCESS )
 80101de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d003      	beq.n	80101ec <psa_start_key_creation+0xdc>
            {
                (void) psa_crypto_stop_transaction( );
 80101e4:	f001 ffac 	bl	8012140 <psa_crypto_stop_transaction>
                return( status );
 80101e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ea:	e012      	b.n	8010212 <psa_start_key_creation+0x102>
            }
        }

        status = psa_copy_key_material_into_slot(
 80101ec:	f107 0310 	add.w	r3, r7, #16
 80101f0:	2208      	movs	r2, #8
 80101f2:	4619      	mov	r1, r3
 80101f4:	6a38      	ldr	r0, [r7, #32]
 80101f6:	f7ff fa1c 	bl	800f632 <psa_copy_key_material_into_slot>
 80101fa:	6278      	str	r0, [r7, #36]	; 0x24
            slot, (uint8_t *)( &slot_number ), sizeof( slot_number ) );
    }

    if( *p_drv == NULL && method == PSA_KEY_CREATION_REGISTER )
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d105      	bne.n	8010210 <psa_start_key_creation+0x100>
 8010204:	7bfb      	ldrb	r3, [r7, #15]
 8010206:	2b04      	cmp	r3, #4
 8010208:	d102      	bne.n	8010210 <psa_start_key_creation+0x100>
    {
        /* Key registration only makes sense with a secure element. */
        return( PSA_ERROR_INVALID_ARGUMENT );
 801020a:	f06f 0386 	mvn.w	r3, #134	; 0x86
 801020e:	e000      	b.n	8010212 <psa_start_key_creation+0x102>
    }
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */

    return( PSA_SUCCESS );
 8010210:	2300      	movs	r3, #0
}
 8010212:	4618      	mov	r0, r3
 8010214:	3728      	adds	r7, #40	; 0x28
 8010216:	46bd      	mov	sp, r7
 8010218:	bdb0      	pop	{r4, r5, r7, pc}
 801021a:	bf00      	nop
 801021c:	200028b0 	.word	0x200028b0

08010220 <psa_finish_key_creation>:
 */
static psa_status_t psa_finish_key_creation(
    psa_key_slot_t *slot,
    psa_se_drv_table_entry_t *driver,
    mbedtls_svc_key_id_t *key)
{
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b08b      	sub	sp, #44	; 0x2c
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
    psa_status_t status = PSA_SUCCESS;
 801022c:	2300      	movs	r3, #0
 801022e:	627b      	str	r3, [r7, #36]	; 0x24
    (void) slot;
    (void) driver;

#if defined(MBEDTLS_PSA_CRYPTO_STORAGE_C)
    if( ! PSA_KEY_LIFETIME_IS_VOLATILE( slot->attr.lifetime ) )
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	b2db      	uxtb	r3, r3
 8010236:	2b00      	cmp	r3, #0
 8010238:	d023      	beq.n	8010282 <psa_finish_key_creation+0x62>
    {
#if defined(MBEDTLS_PSA_CRYPTO_SE_C)
        if( driver != NULL )
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d017      	beq.n	8010270 <psa_finish_key_creation+0x50>
        {
            psa_se_key_data_storage_t data;
            psa_key_slot_number_t slot_number =
                psa_key_slot_get_slot_number( slot ) ;
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f7fe fe52 	bl	800eeea <psa_key_slot_get_slot_number>
 8010246:	4603      	mov	r3, r0
 8010248:	460c      	mov	r4, r1
            psa_key_slot_number_t slot_number =
 801024a:	e9c7 3404 	strd	r3, r4, [r7, #16]
#if defined(static_assert)
            static_assert( sizeof( slot_number ) ==
                           sizeof( data.slot_number ),
                           "Slot number size does not match psa_se_key_data_storage_t" );
#endif
            memcpy( &data.slot_number, &slot_number, sizeof( slot_number ) );
 801024e:	f107 031c 	add.w	r3, r7, #28
 8010252:	f107 0210 	add.w	r2, r7, #16
 8010256:	e892 0003 	ldmia.w	r2, {r0, r1}
 801025a:	e883 0003 	stmia.w	r3, {r0, r1}
            status = psa_save_persistent_key( &slot->attr,
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f107 011c 	add.w	r1, r7, #28
 8010264:	2208      	movs	r2, #8
 8010266:	4618      	mov	r0, r3
 8010268:	f001 fe9f 	bl	8011faa <psa_save_persistent_key>
 801026c:	6278      	str	r0, [r7, #36]	; 0x24
 801026e:	e008      	b.n	8010282 <psa_finish_key_creation+0x62>
        else
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */
        {
            /* Key material is saved in export representation in the slot, so
             * just pass the slot buffer for storage. */
            status = psa_save_persistent_key( &slot->attr,
 8010270:	68f8      	ldr	r0, [r7, #12]
                                              slot->key.data,
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	6a19      	ldr	r1, [r3, #32]
            status = psa_save_persistent_key( &slot->attr,
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801027a:	461a      	mov	r2, r3
 801027c:	f001 fe95 	bl	8011faa <psa_save_persistent_key>
 8010280:	6278      	str	r0, [r7, #36]	; 0x24
    /* Finish the transaction for a key creation. This does not
     * happen when registering an existing key. Detect this case
     * by checking whether a transaction is in progress (actual
     * creation of a persistent key in a secure element requires a transaction,
     * but registration or volatile key creation doesn't use one). */
    if( driver != NULL &&
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d014      	beq.n	80102b2 <psa_finish_key_creation+0x92>
        psa_crypto_transaction.unknown.type == PSA_CRYPTO_TRANSACTION_CREATE_KEY )
 8010288:	4b15      	ldr	r3, [pc, #84]	; (80102e0 <psa_finish_key_creation+0xc0>)
 801028a:	881b      	ldrh	r3, [r3, #0]
    if( driver != NULL &&
 801028c:	2b01      	cmp	r3, #1
 801028e:	d110      	bne.n	80102b2 <psa_finish_key_creation+0x92>
    {
        status = psa_save_se_persistent_data( driver );
 8010290:	68b8      	ldr	r0, [r7, #8]
 8010292:	f001 f8d0 	bl	8011436 <psa_save_se_persistent_data>
 8010296:	6278      	str	r0, [r7, #36]	; 0x24
        if( status != PSA_SUCCESS )
 8010298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029a:	2b00      	cmp	r3, #0
 801029c:	d006      	beq.n	80102ac <psa_finish_key_creation+0x8c>
        {
            psa_destroy_persistent_key( slot->attr.id );
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	689b      	ldr	r3, [r3, #8]
 80102a2:	4618      	mov	r0, r3
 80102a4:	f001 fc8d 	bl	8011bc2 <psa_destroy_persistent_key>
            return( status );
 80102a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102aa:	e014      	b.n	80102d6 <psa_finish_key_creation+0xb6>
        }
        status = psa_crypto_stop_transaction( );
 80102ac:	f001 ff48 	bl	8012140 <psa_crypto_stop_transaction>
 80102b0:	6278      	str	r0, [r7, #36]	; 0x24
    }
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */

    if( status == PSA_SUCCESS )
 80102b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10d      	bne.n	80102d4 <psa_finish_key_creation+0xb4>
    {
        *key = slot->attr.id;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	689a      	ldr	r2, [r3, #8]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	601a      	str	r2, [r3, #0]
        status = psa_unlock_key_slot( slot );
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f001 fb8f 	bl	80119e4 <psa_unlock_key_slot>
 80102c6:	6278      	str	r0, [r7, #36]	; 0x24
        if( status != PSA_SUCCESS )
 80102c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d002      	beq.n	80102d4 <psa_finish_key_creation+0xb4>
            *key = MBEDTLS_SVC_KEY_ID_INIT;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	601a      	str	r2, [r3, #0]
    }

    return( status );
 80102d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	372c      	adds	r7, #44	; 0x2c
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd90      	pop	{r4, r7, pc}
 80102de:	bf00      	nop
 80102e0:	200028b0 	.word	0x200028b0

080102e4 <psa_fail_key_creation>:
 * \param[in] driver    The secure element driver for the key,
 *                      or NULL for a transparent key.
 */
static void psa_fail_key_creation( psa_key_slot_t *slot,
                                   psa_se_drv_table_entry_t *driver )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
    (void) driver;

    if( slot == NULL )
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d005      	beq.n	8010300 <psa_fail_key_creation+0x1c>
     * the creation process failed before starting one, or if the
     * key creation is a registration of a key in a secure element).
     * Earlier functions must already have done what it takes to undo any
     * partial creation. All that's left is to update the transaction data
     * itself. */
    (void) psa_crypto_stop_transaction( );
 80102f4:	f001 ff24 	bl	8012140 <psa_crypto_stop_transaction>
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */

    psa_wipe_key_slot( slot );
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff fdca 	bl	800fe92 <psa_wipe_key_slot>
 80102fe:	e000      	b.n	8010302 <psa_fail_key_creation+0x1e>
        return;
 8010300:	bf00      	nop
}
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <psa_validate_optional_attributes>:
 * the slot in memory is fully populated but before saving persistent data.
 */
static psa_status_t psa_validate_optional_attributes(
    const psa_key_slot_t *slot,
    const psa_key_attributes_t *attributes )
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
    if( attributes->core.type != 0 )
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	881b      	ldrh	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d008      	beq.n	801032c <psa_validate_optional_attributes+0x24>
    {
        if( attributes->core.type != slot->attr.type )
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	881a      	ldrh	r2, [r3, #0]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	881b      	ldrh	r3, [r3, #0]
 8010322:	429a      	cmp	r2, r3
 8010324:	d002      	beq.n	801032c <psa_validate_optional_attributes+0x24>
            return( PSA_ERROR_INVALID_ARGUMENT );
 8010326:	f06f 0386 	mvn.w	r3, #134	; 0x86
 801032a:	e014      	b.n	8010356 <psa_validate_optional_attributes+0x4e>
    }

    if( attributes->domain_parameters_size != 0 )
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010330:	2b00      	cmp	r3, #0
 8010332:	d002      	beq.n	801033a <psa_validate_optional_attributes+0x32>
        }
        else
#endif /* defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_RSA_KEY_PAIR) ||
        * defined(MBEDTLS_PSA_BUILTIN_KEY_TYPE_RSA_PUBLIC_KEY) */
        {
            return( PSA_ERROR_INVALID_ARGUMENT );
 8010334:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8010338:	e00d      	b.n	8010356 <psa_validate_optional_attributes+0x4e>
        }
    }

    if( attributes->core.bits != 0 )
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	885b      	ldrh	r3, [r3, #2]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d008      	beq.n	8010354 <psa_validate_optional_attributes+0x4c>
    {
        if( attributes->core.bits != slot->attr.bits )
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	885a      	ldrh	r2, [r3, #2]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	885b      	ldrh	r3, [r3, #2]
 801034a:	429a      	cmp	r2, r3
 801034c:	d002      	beq.n	8010354 <psa_validate_optional_attributes+0x4c>
            return( PSA_ERROR_INVALID_ARGUMENT );
 801034e:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8010352:	e000      	b.n	8010356 <psa_validate_optional_attributes+0x4e>
    }

    return( PSA_SUCCESS );
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	370c      	adds	r7, #12
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr

08010362 <psa_import_key>:

psa_status_t psa_import_key( const psa_key_attributes_t *attributes,
                             const uint8_t *data,
                             size_t data_length,
                             mbedtls_svc_key_id_t *key )
{
 8010362:	b580      	push	{r7, lr}
 8010364:	b08c      	sub	sp, #48	; 0x30
 8010366:	af04      	add	r7, sp, #16
 8010368:	60f8      	str	r0, [r7, #12]
 801036a:	60b9      	str	r1, [r7, #8]
 801036c:	607a      	str	r2, [r7, #4]
 801036e:	603b      	str	r3, [r7, #0]
    psa_status_t status;
    psa_key_slot_t *slot = NULL;
 8010370:	2300      	movs	r3, #0
 8010372:	61bb      	str	r3, [r7, #24]
    psa_se_drv_table_entry_t *driver = NULL;
 8010374:	2300      	movs	r3, #0
 8010376:	617b      	str	r3, [r7, #20]
    size_t bits;

    *key = MBEDTLS_SVC_KEY_ID_INIT;
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	2200      	movs	r2, #0
 801037c:	601a      	str	r2, [r3, #0]

    /* Reject zero-length symmetric keys (including raw data key objects).
     * This also rejects any key which might be encoded as an empty string,
     * which is never valid. */
    if( data_length == 0 )
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d102      	bne.n	801038a <psa_import_key+0x28>
        return( PSA_ERROR_INVALID_ARGUMENT );
 8010384:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8010388:	e065      	b.n	8010456 <psa_import_key+0xf4>

    status = psa_start_key_creation( PSA_KEY_CREATION_IMPORT, attributes,
 801038a:	f107 0314 	add.w	r3, r7, #20
 801038e:	f107 0218 	add.w	r2, r7, #24
 8010392:	68f9      	ldr	r1, [r7, #12]
 8010394:	2000      	movs	r0, #0
 8010396:	f7ff febb 	bl	8010110 <psa_start_key_creation>
 801039a:	61f8      	str	r0, [r7, #28]
                                     &slot, &driver );
    if( status != PSA_SUCCESS )
 801039c:	69fb      	ldr	r3, [r7, #28]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d148      	bne.n	8010434 <psa_import_key+0xd2>

    /* In the case of a transparent key or an opaque key stored in local
     * storage (thus not in the case of generating a key in a secure element
     * or cryptoprocessor with storage), we have to allocate a buffer to
     * hold the generated key material. */
    if( slot->key.data == NULL )
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	6a1b      	ldr	r3, [r3, #32]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d108      	bne.n	80103bc <psa_import_key+0x5a>
    {
        status = psa_allocate_buffer_to_slot( slot, data_length );
 80103aa:	69bb      	ldr	r3, [r7, #24]
 80103ac:	6879      	ldr	r1, [r7, #4]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7ff f91c 	bl	800f5ec <psa_allocate_buffer_to_slot>
 80103b4:	61f8      	str	r0, [r7, #28]
        if( status != PSA_SUCCESS )
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d13d      	bne.n	8010438 <psa_import_key+0xd6>
            goto exit;
    }

    bits = slot->attr.bits;
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	885b      	ldrh	r3, [r3, #2]
 80103c0:	613b      	str	r3, [r7, #16]
    status = psa_driver_wrapper_import_key( attributes,
                                            data, data_length,
                                            slot->key.data,
 80103c2:	69bb      	ldr	r3, [r7, #24]
    status = psa_driver_wrapper_import_key( attributes,
 80103c4:	6a18      	ldr	r0, [r3, #32]
                                            slot->key.bytes,
 80103c6:	69bb      	ldr	r3, [r7, #24]
    status = psa_driver_wrapper_import_key( attributes,
 80103c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            &slot->key.bytes, &bits );
 80103ca:	69ba      	ldr	r2, [r7, #24]
    status = psa_driver_wrapper_import_key( attributes,
 80103cc:	3224      	adds	r2, #36	; 0x24
 80103ce:	f107 0110 	add.w	r1, r7, #16
 80103d2:	9102      	str	r1, [sp, #8]
 80103d4:	9201      	str	r2, [sp, #4]
 80103d6:	9300      	str	r3, [sp, #0]
 80103d8:	4603      	mov	r3, r0
 80103da:	687a      	ldr	r2, [r7, #4]
 80103dc:	68b9      	ldr	r1, [r7, #8]
 80103de:	68f8      	ldr	r0, [r7, #12]
 80103e0:	f000 fedb 	bl	801119a <psa_driver_wrapper_import_key>
 80103e4:	61f8      	str	r0, [r7, #28]
    if( status != PSA_SUCCESS )
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d127      	bne.n	801043c <psa_import_key+0xda>
        goto exit;

    if( slot->attr.bits == 0 )
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	885b      	ldrh	r3, [r3, #2]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d104      	bne.n	80103fe <psa_import_key+0x9c>
        slot->attr.bits = (psa_key_bits_t) bits;
 80103f4:	693a      	ldr	r2, [r7, #16]
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	b292      	uxth	r2, r2
 80103fa:	805a      	strh	r2, [r3, #2]
 80103fc:	e009      	b.n	8010412 <psa_import_key+0xb0>
    else if( bits != slot->attr.bits )
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	885b      	ldrh	r3, [r3, #2]
 8010402:	461a      	mov	r2, r3
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	429a      	cmp	r2, r3
 8010408:	d003      	beq.n	8010412 <psa_import_key+0xb0>
    {
        status = PSA_ERROR_INVALID_ARGUMENT;
 801040a:	f06f 0386 	mvn.w	r3, #134	; 0x86
 801040e:	61fb      	str	r3, [r7, #28]
        goto exit;
 8010410:	e017      	b.n	8010442 <psa_import_key+0xe0>
    }

    status = psa_validate_optional_attributes( slot, attributes );
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	68f9      	ldr	r1, [r7, #12]
 8010416:	4618      	mov	r0, r3
 8010418:	f7ff ff76 	bl	8010308 <psa_validate_optional_attributes>
 801041c:	61f8      	str	r0, [r7, #28]
    if( status != PSA_SUCCESS )
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d10d      	bne.n	8010440 <psa_import_key+0xde>
        goto exit;

    status = psa_finish_key_creation( slot, driver, key );
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	6979      	ldr	r1, [r7, #20]
 8010428:	683a      	ldr	r2, [r7, #0]
 801042a:	4618      	mov	r0, r3
 801042c:	f7ff fef8 	bl	8010220 <psa_finish_key_creation>
 8010430:	61f8      	str	r0, [r7, #28]
 8010432:	e006      	b.n	8010442 <psa_import_key+0xe0>
        goto exit;
 8010434:	bf00      	nop
 8010436:	e004      	b.n	8010442 <psa_import_key+0xe0>
            goto exit;
 8010438:	bf00      	nop
 801043a:	e002      	b.n	8010442 <psa_import_key+0xe0>
        goto exit;
 801043c:	bf00      	nop
 801043e:	e000      	b.n	8010442 <psa_import_key+0xe0>
        goto exit;
 8010440:	bf00      	nop
exit:
    if( status != PSA_SUCCESS )
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d005      	beq.n	8010454 <psa_import_key+0xf2>
        psa_fail_key_creation( slot, driver );
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	697a      	ldr	r2, [r7, #20]
 801044c:	4611      	mov	r1, r2
 801044e:	4618      	mov	r0, r3
 8010450:	f7ff ff48 	bl	80102e4 <psa_fail_key_creation>

    return( status );
 8010454:	69fb      	ldr	r3, [r7, #28]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3720      	adds	r7, #32
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
	...

08010460 <psa_aead_encrypt>:
                               const uint8_t *plaintext,
                               size_t plaintext_length,
                               uint8_t *ciphertext,
                               size_t ciphertext_size,
                               size_t *ciphertext_length )
{
 8010460:	b5b0      	push	{r4, r5, r7, lr}
 8010462:	b09c      	sub	sp, #112	; 0x70
 8010464:	af0a      	add	r7, sp, #40	; 0x28
 8010466:	60f8      	str	r0, [r7, #12]
 8010468:	60b9      	str	r1, [r7, #8]
 801046a:	607a      	str	r2, [r7, #4]
 801046c:	603b      	str	r3, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 801046e:	f06f 0396 	mvn.w	r3, #150	; 0x96
 8010472:	647b      	str	r3, [r7, #68]	; 0x44
    psa_key_slot_t *slot;

    *ciphertext_length = 0;
 8010474:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010476:	2200      	movs	r2, #0
 8010478:	601a      	str	r2, [r3, #0]

    if( !PSA_ALG_IS_AEAD( alg ) || PSA_ALG_IS_WILDCARD( alg ) )
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010480:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8010484:	d173      	bne.n	801056e <psa_aead_encrypt+0x10e>
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801048c:	4a61      	ldr	r2, [pc, #388]	; (8010614 <psa_aead_encrypt+0x1b4>)
 801048e:	4293      	cmp	r3, r2
 8010490:	d01b      	beq.n	80104ca <psa_aead_encrypt+0x6a>
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010498:	4a5f      	ldr	r2, [pc, #380]	; (8010618 <psa_aead_encrypt+0x1b8>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d015      	beq.n	80104ca <psa_aead_encrypt+0x6a>
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80104a4:	f023 0301 	bic.w	r3, r3, #1
 80104a8:	f1b3 2f06 	cmp.w	r3, #100664832	; 0x6000600
 80104ac:	d00d      	beq.n	80104ca <psa_aead_encrypt+0x6a>
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80104b4:	4a59      	ldr	r2, [pc, #356]	; (801061c <psa_aead_encrypt+0x1bc>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d007      	beq.n	80104ca <psa_aead_encrypt+0x6a>
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80104c0:	f023 0301 	bic.w	r3, r3, #1
 80104c4:	4a56      	ldr	r2, [pc, #344]	; (8010620 <psa_aead_encrypt+0x1c0>)
 80104c6:	4293      	cmp	r3, r2
 80104c8:	d135      	bne.n	8010536 <psa_aead_encrypt+0xd6>
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80104d0:	4a50      	ldr	r2, [pc, #320]	; (8010614 <psa_aead_encrypt+0x1b4>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d01b      	beq.n	801050e <psa_aead_encrypt+0xae>
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80104dc:	4a4e      	ldr	r2, [pc, #312]	; (8010618 <psa_aead_encrypt+0x1b8>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d015      	beq.n	801050e <psa_aead_encrypt+0xae>
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80104e8:	f023 0301 	bic.w	r3, r3, #1
 80104ec:	f1b3 2f06 	cmp.w	r3, #100664832	; 0x6000600
 80104f0:	d00d      	beq.n	801050e <psa_aead_encrypt+0xae>
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80104f8:	4a48      	ldr	r2, [pc, #288]	; (801061c <psa_aead_encrypt+0x1bc>)
 80104fa:	4293      	cmp	r3, r2
 80104fc:	d007      	beq.n	801050e <psa_aead_encrypt+0xae>
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8010504:	f023 0301 	bic.w	r3, r3, #1
 8010508:	4a45      	ldr	r2, [pc, #276]	; (8010620 <psa_aead_encrypt+0x1c0>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d10c      	bne.n	8010528 <psa_aead_encrypt+0xc8>
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	b2db      	uxtb	r3, r3
 8010512:	2b00      	cmp	r3, #0
 8010514:	d008      	beq.n	8010528 <psa_aead_encrypt+0xc8>
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	b2db      	uxtb	r3, r3
 801051a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801051e:	4a41      	ldr	r2, [pc, #260]	; (8010624 <psa_aead_encrypt+0x1c4>)
 8010520:	4293      	cmp	r3, r2
 8010522:	d101      	bne.n	8010528 <psa_aead_encrypt+0xc8>
 8010524:	2301      	movs	r3, #1
 8010526:	e000      	b.n	801052a <psa_aead_encrypt+0xca>
 8010528:	2300      	movs	r3, #0
 801052a:	f003 0301 	and.w	r3, r3, #1
 801052e:	b2db      	uxtb	r3, r3
 8010530:	2b00      	cmp	r3, #0
 8010532:	d11c      	bne.n	801056e <psa_aead_encrypt+0x10e>
 8010534:	e01e      	b.n	8010574 <psa_aead_encrypt+0x114>
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801053c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010540:	d105      	bne.n	801054e <psa_aead_encrypt+0xee>
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010548:	2b00      	cmp	r3, #0
 801054a:	d110      	bne.n	801056e <psa_aead_encrypt+0x10e>
 801054c:	e012      	b.n	8010574 <psa_aead_encrypt+0x114>
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010554:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8010558:	d105      	bne.n	8010566 <psa_aead_encrypt+0x106>
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010560:	2b00      	cmp	r3, #0
 8010562:	d104      	bne.n	801056e <psa_aead_encrypt+0x10e>
 8010564:	e006      	b.n	8010574 <psa_aead_encrypt+0x114>
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	4a2e      	ldr	r2, [pc, #184]	; (8010624 <psa_aead_encrypt+0x1c4>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d102      	bne.n	8010574 <psa_aead_encrypt+0x114>
        return( PSA_ERROR_NOT_SUPPORTED );
 801056e:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8010572:	e04a      	b.n	801060a <psa_aead_encrypt+0x1aa>

    status = psa_get_and_lock_key_slot_with_policy(
 8010574:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	f7ff fc1c 	bl	800fdbc <psa_get_and_lock_key_slot_with_policy>
 8010584:	6478      	str	r0, [r7, #68]	; 0x44
                 key, &slot, PSA_KEY_USAGE_ENCRYPT, alg );
    if( status != PSA_SUCCESS )
 8010586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010588:	2b00      	cmp	r3, #0
 801058a:	d001      	beq.n	8010590 <psa_aead_encrypt+0x130>
        return( status );
 801058c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801058e:	e03c      	b.n	801060a <psa_aead_encrypt+0x1aa>

    psa_key_attributes_t attributes = {
 8010590:	f107 0310 	add.w	r3, r7, #16
 8010594:	2230      	movs	r2, #48	; 0x30
 8010596:	2100      	movs	r1, #0
 8010598:	4618      	mov	r0, r3
 801059a:	f004 fde2 	bl	8015162 <memset>
      .core = slot->attr
 801059e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    psa_key_attributes_t attributes = {
 80105a0:	f107 0410 	add.w	r4, r7, #16
 80105a4:	461d      	mov	r5, r3
 80105a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80105ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    };

    status = psa_driver_wrapper_aead_encrypt(
        &attributes, slot->key.data, slot->key.bytes,
 80105b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105b4:	6a19      	ldr	r1, [r3, #32]
 80105b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    status = psa_driver_wrapper_aead_encrypt(
 80105b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105ba:	f107 0010 	add.w	r0, r7, #16
 80105be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105c0:	9308      	str	r3, [sp, #32]
 80105c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105c4:	9307      	str	r3, [sp, #28]
 80105c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105c8:	9306      	str	r3, [sp, #24]
 80105ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105cc:	9305      	str	r3, [sp, #20]
 80105ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105d0:	9304      	str	r3, [sp, #16]
 80105d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105d4:	9303      	str	r3, [sp, #12]
 80105d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105d8:	9302      	str	r3, [sp, #8]
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	9301      	str	r3, [sp, #4]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	9300      	str	r3, [sp, #0]
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	f000 fe3f 	bl	8011266 <psa_driver_wrapper_aead_encrypt>
 80105e8:	6478      	str	r0, [r7, #68]	; 0x44
        nonce, nonce_length,
        additional_data, additional_data_length,
        plaintext, plaintext_length,
        ciphertext, ciphertext_size, ciphertext_length );

    if( status != PSA_SUCCESS && ciphertext_size != 0 )
 80105ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d007      	beq.n	8010600 <psa_aead_encrypt+0x1a0>
 80105f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d004      	beq.n	8010600 <psa_aead_encrypt+0x1a0>
        memset( ciphertext, 0, ciphertext_size );
 80105f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80105f8:	2100      	movs	r1, #0
 80105fa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80105fc:	f004 fdb1 	bl	8015162 <memset>

    psa_unlock_key_slot( slot );
 8010600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010602:	4618      	mov	r0, r3
 8010604:	f001 f9ee 	bl	80119e4 <psa_unlock_key_slot>

    return( status );
 8010608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 801060a:	4618      	mov	r0, r3
 801060c:	3748      	adds	r7, #72	; 0x48
 801060e:	46bd      	mov	sp, r7
 8010610:	bdb0      	pop	{r4, r5, r7, pc}
 8010612:	bf00      	nop
 8010614:	06000300 	.word	0x06000300
 8010618:	06000200 	.word	0x06000200
 801061c:	06000900 	.word	0x06000900
 8010620:	06000400 	.word	0x06000400
 8010624:	020000ff 	.word	0x020000ff

08010628 <psa_aead_decrypt>:
                               const uint8_t *ciphertext,
                               size_t ciphertext_length,
                               uint8_t *plaintext,
                               size_t plaintext_size,
                               size_t *plaintext_length )
{
 8010628:	b5b0      	push	{r4, r5, r7, lr}
 801062a:	b09c      	sub	sp, #112	; 0x70
 801062c:	af0a      	add	r7, sp, #40	; 0x28
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	607a      	str	r2, [r7, #4]
 8010634:	603b      	str	r3, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 8010636:	f06f 0396 	mvn.w	r3, #150	; 0x96
 801063a:	647b      	str	r3, [r7, #68]	; 0x44
    psa_key_slot_t *slot;

    *plaintext_length = 0;
 801063c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801063e:	2200      	movs	r2, #0
 8010640:	601a      	str	r2, [r3, #0]

    if( !PSA_ALG_IS_AEAD( alg ) || PSA_ALG_IS_WILDCARD( alg ) )
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010648:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801064c:	d173      	bne.n	8010736 <psa_aead_decrypt+0x10e>
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010654:	4a61      	ldr	r2, [pc, #388]	; (80107dc <psa_aead_decrypt+0x1b4>)
 8010656:	4293      	cmp	r3, r2
 8010658:	d01b      	beq.n	8010692 <psa_aead_decrypt+0x6a>
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010660:	4a5f      	ldr	r2, [pc, #380]	; (80107e0 <psa_aead_decrypt+0x1b8>)
 8010662:	4293      	cmp	r3, r2
 8010664:	d015      	beq.n	8010692 <psa_aead_decrypt+0x6a>
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 801066c:	f023 0301 	bic.w	r3, r3, #1
 8010670:	f1b3 2f06 	cmp.w	r3, #100664832	; 0x6000600
 8010674:	d00d      	beq.n	8010692 <psa_aead_decrypt+0x6a>
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801067c:	4a59      	ldr	r2, [pc, #356]	; (80107e4 <psa_aead_decrypt+0x1bc>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d007      	beq.n	8010692 <psa_aead_decrypt+0x6a>
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8010688:	f023 0301 	bic.w	r3, r3, #1
 801068c:	4a56      	ldr	r2, [pc, #344]	; (80107e8 <psa_aead_decrypt+0x1c0>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d135      	bne.n	80106fe <psa_aead_decrypt+0xd6>
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010698:	4a50      	ldr	r2, [pc, #320]	; (80107dc <psa_aead_decrypt+0x1b4>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d01b      	beq.n	80106d6 <psa_aead_decrypt+0xae>
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80106a4:	4a4e      	ldr	r2, [pc, #312]	; (80107e0 <psa_aead_decrypt+0x1b8>)
 80106a6:	4293      	cmp	r3, r2
 80106a8:	d015      	beq.n	80106d6 <psa_aead_decrypt+0xae>
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80106b0:	f023 0301 	bic.w	r3, r3, #1
 80106b4:	f1b3 2f06 	cmp.w	r3, #100664832	; 0x6000600
 80106b8:	d00d      	beq.n	80106d6 <psa_aead_decrypt+0xae>
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80106c0:	4a48      	ldr	r2, [pc, #288]	; (80107e4 <psa_aead_decrypt+0x1bc>)
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d007      	beq.n	80106d6 <psa_aead_decrypt+0xae>
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80106cc:	f023 0301 	bic.w	r3, r3, #1
 80106d0:	4a45      	ldr	r2, [pc, #276]	; (80107e8 <psa_aead_decrypt+0x1c0>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d10c      	bne.n	80106f0 <psa_aead_decrypt+0xc8>
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d008      	beq.n	80106f0 <psa_aead_decrypt+0xc8>
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80106e6:	4a41      	ldr	r2, [pc, #260]	; (80107ec <psa_aead_decrypt+0x1c4>)
 80106e8:	4293      	cmp	r3, r2
 80106ea:	d101      	bne.n	80106f0 <psa_aead_decrypt+0xc8>
 80106ec:	2301      	movs	r3, #1
 80106ee:	e000      	b.n	80106f2 <psa_aead_decrypt+0xca>
 80106f0:	2300      	movs	r3, #0
 80106f2:	f003 0301 	and.w	r3, r3, #1
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d11c      	bne.n	8010736 <psa_aead_decrypt+0x10e>
 80106fc:	e01e      	b.n	801073c <psa_aead_decrypt+0x114>
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010704:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010708:	d105      	bne.n	8010716 <psa_aead_decrypt+0xee>
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010710:	2b00      	cmp	r3, #0
 8010712:	d110      	bne.n	8010736 <psa_aead_decrypt+0x10e>
 8010714:	e012      	b.n	801073c <psa_aead_decrypt+0x114>
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801071c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8010720:	d105      	bne.n	801072e <psa_aead_decrypt+0x106>
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010728:	2b00      	cmp	r3, #0
 801072a:	d104      	bne.n	8010736 <psa_aead_decrypt+0x10e>
 801072c:	e006      	b.n	801073c <psa_aead_decrypt+0x114>
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	4a2e      	ldr	r2, [pc, #184]	; (80107ec <psa_aead_decrypt+0x1c4>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d102      	bne.n	801073c <psa_aead_decrypt+0x114>
        return( PSA_ERROR_NOT_SUPPORTED );
 8010736:	f06f 0385 	mvn.w	r3, #133	; 0x85
 801073a:	e04a      	b.n	80107d2 <psa_aead_decrypt+0x1aa>

    status = psa_get_and_lock_key_slot_with_policy(
 801073c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f7ff fb38 	bl	800fdbc <psa_get_and_lock_key_slot_with_policy>
 801074c:	6478      	str	r0, [r7, #68]	; 0x44
                 key, &slot, PSA_KEY_USAGE_DECRYPT, alg );
    if( status != PSA_SUCCESS )
 801074e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010750:	2b00      	cmp	r3, #0
 8010752:	d001      	beq.n	8010758 <psa_aead_decrypt+0x130>
        return( status );
 8010754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010756:	e03c      	b.n	80107d2 <psa_aead_decrypt+0x1aa>

    psa_key_attributes_t attributes = {
 8010758:	f107 0310 	add.w	r3, r7, #16
 801075c:	2230      	movs	r2, #48	; 0x30
 801075e:	2100      	movs	r1, #0
 8010760:	4618      	mov	r0, r3
 8010762:	f004 fcfe 	bl	8015162 <memset>
      .core = slot->attr
 8010766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    psa_key_attributes_t attributes = {
 8010768:	f107 0410 	add.w	r4, r7, #16
 801076c:	461d      	mov	r5, r3
 801076e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010772:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    };

    status = psa_driver_wrapper_aead_decrypt(
        &attributes, slot->key.data, slot->key.bytes,
 801077a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801077c:	6a19      	ldr	r1, [r3, #32]
 801077e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    status = psa_driver_wrapper_aead_decrypt(
 8010780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010782:	f107 0010 	add.w	r0, r7, #16
 8010786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010788:	9308      	str	r3, [sp, #32]
 801078a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801078c:	9307      	str	r3, [sp, #28]
 801078e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010790:	9306      	str	r3, [sp, #24]
 8010792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010794:	9305      	str	r3, [sp, #20]
 8010796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010798:	9304      	str	r3, [sp, #16]
 801079a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801079c:	9303      	str	r3, [sp, #12]
 801079e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107a0:	9302      	str	r3, [sp, #8]
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	9301      	str	r3, [sp, #4]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	f000 fd8c 	bl	80112c8 <psa_driver_wrapper_aead_decrypt>
 80107b0:	6478      	str	r0, [r7, #68]	; 0x44
        nonce, nonce_length,
        additional_data, additional_data_length,
        ciphertext, ciphertext_length,
        plaintext, plaintext_size, plaintext_length );

    if( status != PSA_SUCCESS && plaintext_size != 0 )
 80107b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d007      	beq.n	80107c8 <psa_aead_decrypt+0x1a0>
 80107b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d004      	beq.n	80107c8 <psa_aead_decrypt+0x1a0>
        memset( plaintext, 0, plaintext_size );
 80107be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80107c0:	2100      	movs	r1, #0
 80107c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80107c4:	f004 fccd 	bl	8015162 <memset>

    psa_unlock_key_slot( slot );
 80107c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ca:	4618      	mov	r0, r3
 80107cc:	f001 f90a 	bl	80119e4 <psa_unlock_key_slot>

    return( status );
 80107d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3748      	adds	r7, #72	; 0x48
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bdb0      	pop	{r4, r5, r7, pc}
 80107da:	bf00      	nop
 80107dc:	06000300 	.word	0x06000300
 80107e0:	06000200 	.word	0x06000200
 80107e4:	06000900 	.word	0x06000900
 80107e8:	06000400 	.word	0x06000400
 80107ec:	020000ff 	.word	0x020000ff

080107f0 <psa_aead_abort_internal>:
} aead_operation_t;

#define AEAD_OPERATION_INIT {{0}, 0, 0}

static void psa_aead_abort_internal( aead_operation_t *operation )
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
    switch( operation->core_alg )
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80107fe:	4a0e      	ldr	r2, [pc, #56]	; (8010838 <psa_aead_abort_internal+0x48>)
 8010800:	4293      	cmp	r3, r2
 8010802:	d006      	beq.n	8010812 <psa_aead_abort_internal+0x22>
 8010804:	4a0d      	ldr	r2, [pc, #52]	; (801083c <psa_aead_abort_internal+0x4c>)
 8010806:	4293      	cmp	r3, r2
 8010808:	d008      	beq.n	801081c <psa_aead_abort_internal+0x2c>
 801080a:	4a0d      	ldr	r2, [pc, #52]	; (8010840 <psa_aead_abort_internal+0x50>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d00a      	beq.n	8010826 <psa_aead_abort_internal+0x36>
        case PSA_ALG_CHACHA20_POLY1305:
            mbedtls_chachapoly_free( &operation->ctx.chachapoly );
            break;
#endif /* MBEDTLS_PSA_BUILTIN_ALG_CHACHA20_POLY1305 */
    }
}
 8010810:	e00e      	b.n	8010830 <psa_aead_abort_internal+0x40>
            mbedtls_ccm_free( &operation->ctx.ccm );
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4618      	mov	r0, r3
 8010816:	f7f7 fa2a 	bl	8007c6e <mbedtls_ccm_free>
            break;
 801081a:	e009      	b.n	8010830 <psa_aead_abort_internal+0x40>
            mbedtls_gcm_free( &operation->ctx.gcm );
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	4618      	mov	r0, r3
 8010820:	f7fd fc72 	bl	800e108 <mbedtls_gcm_free>
            break;
 8010824:	e004      	b.n	8010830 <psa_aead_abort_internal+0x40>
            mbedtls_chachapoly_free( &operation->ctx.chachapoly );
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4618      	mov	r0, r3
 801082a:	f7f8 faa2 	bl	8008d72 <mbedtls_chachapoly_free>
            break;
 801082e:	bf00      	nop
}
 8010830:	bf00      	nop
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	05500100 	.word	0x05500100
 801083c:	05500200 	.word	0x05500200
 8010840:	05100500 	.word	0x05100500

08010844 <psa_aead_setup>:
static psa_status_t psa_aead_setup(
    aead_operation_t *operation,
    const psa_key_attributes_t *attributes,
    const uint8_t *key_buffer,
    psa_algorithm_t alg )
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b08a      	sub	sp, #40	; 0x28
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
 8010850:	603b      	str	r3, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 8010852:	f06f 0396 	mvn.w	r3, #150	; 0x96
 8010856:	623b      	str	r3, [r7, #32]
    size_t key_bits;
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_id_t cipher_id;
    size_t full_tag_length = 0;
 8010858:	2300      	movs	r3, #0
 801085a:	627b      	str	r3, [r7, #36]	; 0x24

    key_bits = attributes->core.bits;
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	885b      	ldrh	r3, [r3, #2]
 8010860:	61fb      	str	r3, [r7, #28]

    cipher_info = mbedtls_cipher_info_from_psa( alg,
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	8819      	ldrh	r1, [r3, #0]
 8010866:	f107 0317 	add.w	r3, r7, #23
 801086a:	69fa      	ldr	r2, [r7, #28]
 801086c:	6838      	ldr	r0, [r7, #0]
 801086e:	f000 fb7d 	bl	8010f6c <mbedtls_cipher_info_from_psa>
 8010872:	61b8      	str	r0, [r7, #24]
                                                attributes->core.type, key_bits,
                                                &cipher_id );
    if( cipher_info == NULL )
 8010874:	69bb      	ldr	r3, [r7, #24]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d102      	bne.n	8010880 <psa_aead_setup+0x3c>
        return( PSA_ERROR_NOT_SUPPORTED );
 801087a:	f06f 0385 	mvn.w	r3, #133	; 0x85
 801087e:	e122      	b.n	8010ac6 <psa_aead_setup+0x282>

    switch( PSA_ALG_AEAD_WITH_SHORTENED_TAG( alg, 0 ) )
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
 8010886:	4a92      	ldr	r2, [pc, #584]	; (8010ad0 <psa_aead_setup+0x28c>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d006      	beq.n	801089a <psa_aead_setup+0x56>
 801088c:	4a91      	ldr	r2, [pc, #580]	; (8010ad4 <psa_aead_setup+0x290>)
 801088e:	4293      	cmp	r3, r2
 8010890:	d02f      	beq.n	80108f2 <psa_aead_setup+0xae>
 8010892:	f1b3 2f05 	cmp.w	r3, #83887360	; 0x5000500
 8010896:	d058      	beq.n	801094a <psa_aead_setup+0x106>
 8010898:	e077      	b.n	801098a <psa_aead_setup+0x146>
    {
#if defined(MBEDTLS_PSA_BUILTIN_ALG_CCM)
        case PSA_ALG_AEAD_WITH_SHORTENED_TAG( PSA_ALG_CCM, 0 ):
            operation->core_alg = PSA_ALG_CCM;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	4a8e      	ldr	r2, [pc, #568]	; (8010ad8 <psa_aead_setup+0x294>)
 801089e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            full_tag_length = 16;
 80108a2:	2310      	movs	r3, #16
 80108a4:	627b      	str	r3, [r7, #36]	; 0x24
            /* CCM allows the following tag lengths: 4, 6, 8, 10, 12, 14, 16.
             * The call to mbedtls_ccm_encrypt_and_tag or
             * mbedtls_ccm_auth_decrypt will validate the tag length. */
            if( PSA_BLOCK_CIPHER_BLOCK_LENGTH( attributes->core.type ) != 16 )
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	881b      	ldrh	r3, [r3, #0]
 80108aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80108ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80108b2:	d107      	bne.n	80108c4 <psa_aead_setup+0x80>
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	881b      	ldrh	r3, [r3, #0]
 80108b8:	0a1b      	lsrs	r3, r3, #8
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	f003 0307 	and.w	r3, r3, #7
 80108c0:	2b04      	cmp	r3, #4
 80108c2:	d002      	beq.n	80108ca <psa_aead_setup+0x86>
                return( PSA_ERROR_INVALID_ARGUMENT );
 80108c4:	f06f 0386 	mvn.w	r3, #134	; 0x86
 80108c8:	e0fd      	b.n	8010ac6 <psa_aead_setup+0x282>

            mbedtls_ccm_init( &operation->ctx.ccm );
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7f7 f982 	bl	8007bd6 <mbedtls_ccm_init>
            status = mbedtls_to_psa_error(
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	7df9      	ldrb	r1, [r7, #23]
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	f7f7 f989 	bl	8007bf0 <mbedtls_ccm_setkey>
 80108de:	4603      	mov	r3, r0
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fe fb3b 	bl	800ef5c <mbedtls_to_psa_error>
 80108e6:	6238      	str	r0, [r7, #32]
                mbedtls_ccm_setkey( &operation->ctx.ccm, cipher_id,
                                    key_buffer, (unsigned int) key_bits ) );
            if( status != PSA_SUCCESS )
 80108e8:	6a3b      	ldr	r3, [r7, #32]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d050      	beq.n	8010990 <psa_aead_setup+0x14c>
                return( status );
 80108ee:	6a3b      	ldr	r3, [r7, #32]
 80108f0:	e0e9      	b.n	8010ac6 <psa_aead_setup+0x282>
            break;
#endif /* MBEDTLS_PSA_BUILTIN_ALG_CCM */

#if defined(MBEDTLS_PSA_BUILTIN_ALG_GCM)
        case PSA_ALG_AEAD_WITH_SHORTENED_TAG( PSA_ALG_GCM, 0 ):
            operation->core_alg = PSA_ALG_GCM;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	4a79      	ldr	r2, [pc, #484]	; (8010adc <psa_aead_setup+0x298>)
 80108f6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            full_tag_length = 16;
 80108fa:	2310      	movs	r3, #16
 80108fc:	627b      	str	r3, [r7, #36]	; 0x24
            /* GCM allows the following tag lengths: 4, 8, 12, 13, 14, 15, 16.
             * The call to mbedtls_gcm_crypt_and_tag or
             * mbedtls_gcm_auth_decrypt will validate the tag length. */
            if( PSA_BLOCK_CIPHER_BLOCK_LENGTH( attributes->core.type ) != 16 )
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	881b      	ldrh	r3, [r3, #0]
 8010902:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801090a:	d107      	bne.n	801091c <psa_aead_setup+0xd8>
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	881b      	ldrh	r3, [r3, #0]
 8010910:	0a1b      	lsrs	r3, r3, #8
 8010912:	b29b      	uxth	r3, r3
 8010914:	f003 0307 	and.w	r3, r3, #7
 8010918:	2b04      	cmp	r3, #4
 801091a:	d002      	beq.n	8010922 <psa_aead_setup+0xde>
                return( PSA_ERROR_INVALID_ARGUMENT );
 801091c:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8010920:	e0d1      	b.n	8010ac6 <psa_aead_setup+0x282>

            mbedtls_gcm_init( &operation->ctx.gcm );
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	4618      	mov	r0, r3
 8010926:	f7fc fcc6 	bl	800d2b6 <mbedtls_gcm_init>
            status = mbedtls_to_psa_error(
 801092a:	68f8      	ldr	r0, [r7, #12]
 801092c:	7df9      	ldrb	r1, [r7, #23]
 801092e:	69fb      	ldr	r3, [r7, #28]
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	f7fc fe03 	bl	800d53c <mbedtls_gcm_setkey>
 8010936:	4603      	mov	r3, r0
 8010938:	4618      	mov	r0, r3
 801093a:	f7fe fb0f 	bl	800ef5c <mbedtls_to_psa_error>
 801093e:	6238      	str	r0, [r7, #32]
                mbedtls_gcm_setkey( &operation->ctx.gcm, cipher_id,
                                    key_buffer, (unsigned int) key_bits ) );
            if( status != PSA_SUCCESS )
 8010940:	6a3b      	ldr	r3, [r7, #32]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d026      	beq.n	8010994 <psa_aead_setup+0x150>
                return( status );
 8010946:	6a3b      	ldr	r3, [r7, #32]
 8010948:	e0bd      	b.n	8010ac6 <psa_aead_setup+0x282>
            break;
#endif /* MBEDTLS_PSA_BUILTIN_ALG_GCM */

#if defined(MBEDTLS_PSA_BUILTIN_ALG_CHACHA20_POLY1305)
        case PSA_ALG_AEAD_WITH_SHORTENED_TAG( PSA_ALG_CHACHA20_POLY1305, 0 ):
            operation->core_alg = PSA_ALG_CHACHA20_POLY1305;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	4a64      	ldr	r2, [pc, #400]	; (8010ae0 <psa_aead_setup+0x29c>)
 801094e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
            full_tag_length = 16;
 8010952:	2310      	movs	r3, #16
 8010954:	627b      	str	r3, [r7, #36]	; 0x24
            /* We only support the default tag length. */
            if( alg != PSA_ALG_CHACHA20_POLY1305 )
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	4a61      	ldr	r2, [pc, #388]	; (8010ae0 <psa_aead_setup+0x29c>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d002      	beq.n	8010964 <psa_aead_setup+0x120>
                return( PSA_ERROR_NOT_SUPPORTED );
 801095e:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8010962:	e0b0      	b.n	8010ac6 <psa_aead_setup+0x282>

            mbedtls_chachapoly_init( &operation->ctx.chachapoly );
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	4618      	mov	r0, r3
 8010968:	f7f8 f9dc 	bl	8008d24 <mbedtls_chachapoly_init>
            status = mbedtls_to_psa_error(
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6879      	ldr	r1, [r7, #4]
 8010970:	4618      	mov	r0, r3
 8010972:	f7f8 fa29 	bl	8008dc8 <mbedtls_chachapoly_setkey>
 8010976:	4603      	mov	r3, r0
 8010978:	4618      	mov	r0, r3
 801097a:	f7fe faef 	bl	800ef5c <mbedtls_to_psa_error>
 801097e:	6238      	str	r0, [r7, #32]
                mbedtls_chachapoly_setkey( &operation->ctx.chachapoly,
                                           key_buffer ) );
            if( status != PSA_SUCCESS )
 8010980:	6a3b      	ldr	r3, [r7, #32]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d008      	beq.n	8010998 <psa_aead_setup+0x154>
                return( status );
 8010986:	6a3b      	ldr	r3, [r7, #32]
 8010988:	e09d      	b.n	8010ac6 <psa_aead_setup+0x282>
            break;
#endif /* MBEDTLS_PSA_BUILTIN_ALG_CHACHA20_POLY1305 */

        default:
            return( PSA_ERROR_NOT_SUPPORTED );
 801098a:	f06f 0385 	mvn.w	r3, #133	; 0x85
 801098e:	e09a      	b.n	8010ac6 <psa_aead_setup+0x282>
            break;
 8010990:	bf00      	nop
 8010992:	e002      	b.n	801099a <psa_aead_setup+0x156>
            break;
 8010994:	bf00      	nop
 8010996:	e000      	b.n	801099a <psa_aead_setup+0x156>
            break;
 8010998:	bf00      	nop
    }

    if( PSA_AEAD_TAG_LENGTH( attributes->core.type,
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	881b      	ldrh	r3, [r3, #0]
 801099e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80109a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109a6:	d120      	bne.n	80109ea <psa_aead_setup+0x1a6>
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	881b      	ldrh	r3, [r3, #0]
 80109ac:	0a1b      	lsrs	r3, r3, #8
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	f003 0307 	and.w	r3, r3, #7
 80109b4:	2b04      	cmp	r3, #4
 80109b6:	d118      	bne.n	80109ea <psa_aead_setup+0x1a6>
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	f083 63aa 	eor.w	r3, r3, #89128960	; 0x5500000
 80109be:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 80109c2:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d008      	beq.n	80109dc <psa_aead_setup+0x198>
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	f083 63aa 	eor.w	r3, r3, #89128960	; 0x5500000
 80109d0:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 80109d4:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d101      	bne.n	80109e0 <psa_aead_setup+0x19c>
 80109dc:	2301      	movs	r3, #1
 80109de:	e000      	b.n	80109e2 <psa_aead_setup+0x19e>
 80109e0:	2300      	movs	r3, #0
 80109e2:	f003 0301 	and.w	r3, r3, #1
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	e014      	b.n	8010a14 <psa_aead_setup+0x1d0>
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	881b      	ldrh	r3, [r3, #0]
 80109ee:	f242 0204 	movw	r2, #8196	; 0x2004
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d10a      	bne.n	8010a0c <psa_aead_setup+0x1c8>
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	f083 2305 	eor.w	r3, r3, #83887360	; 0x5000500
 80109fc:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010a00:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d101      	bne.n	8010a0c <psa_aead_setup+0x1c8>
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e000      	b.n	8010a0e <psa_aead_setup+0x1ca>
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	f003 0301 	and.w	r3, r3, #1
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d004      	beq.n	8010a22 <psa_aead_setup+0x1de>
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	0c1b      	lsrs	r3, r3, #16
 8010a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a20:	e000      	b.n	8010a24 <psa_aead_setup+0x1e0>
 8010a22:	2300      	movs	r3, #0
 8010a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d902      	bls.n	8010a30 <psa_aead_setup+0x1ec>
                             key_bits, alg )
        > full_tag_length )
        return( PSA_ERROR_INVALID_ARGUMENT );
 8010a2a:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8010a2e:	e04a      	b.n	8010ac6 <psa_aead_setup+0x282>

    operation->tag_length = PSA_AEAD_TAG_LENGTH( attributes->core.type,
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	881b      	ldrh	r3, [r3, #0]
 8010a34:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a3c:	d120      	bne.n	8010a80 <psa_aead_setup+0x23c>
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	881b      	ldrh	r3, [r3, #0]
 8010a42:	0a1b      	lsrs	r3, r3, #8
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	f003 0307 	and.w	r3, r3, #7
 8010a4a:	2b04      	cmp	r3, #4
 8010a4c:	d118      	bne.n	8010a80 <psa_aead_setup+0x23c>
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	f083 63aa 	eor.w	r3, r3, #89128960	; 0x5500000
 8010a54:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8010a58:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d008      	beq.n	8010a72 <psa_aead_setup+0x22e>
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	f083 63aa 	eor.w	r3, r3, #89128960	; 0x5500000
 8010a66:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8010a6a:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d101      	bne.n	8010a76 <psa_aead_setup+0x232>
 8010a72:	2301      	movs	r3, #1
 8010a74:	e000      	b.n	8010a78 <psa_aead_setup+0x234>
 8010a76:	2300      	movs	r3, #0
 8010a78:	f003 0301 	and.w	r3, r3, #1
 8010a7c:	b2db      	uxtb	r3, r3
 8010a7e:	e014      	b.n	8010aaa <psa_aead_setup+0x266>
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	881b      	ldrh	r3, [r3, #0]
 8010a84:	f242 0204 	movw	r2, #8196	; 0x2004
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d10a      	bne.n	8010aa2 <psa_aead_setup+0x25e>
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	f083 2305 	eor.w	r3, r3, #83887360	; 0x5000500
 8010a92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010a96:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d101      	bne.n	8010aa2 <psa_aead_setup+0x25e>
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	e000      	b.n	8010aa4 <psa_aead_setup+0x260>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	f003 0301 	and.w	r3, r3, #1
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d006      	beq.n	8010abc <psa_aead_setup+0x278>
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	0c1b      	lsrs	r3, r3, #16
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	e000      	b.n	8010abe <psa_aead_setup+0x27a>
 8010abc:	2200      	movs	r2, #0
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
                                                 key_bits,
                                                 alg );

    return( PSA_SUCCESS );
 8010ac4:	2300      	movs	r3, #0
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3728      	adds	r7, #40	; 0x28
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	05400100 	.word	0x05400100
 8010ad4:	05400200 	.word	0x05400200
 8010ad8:	05500100 	.word	0x05500100
 8010adc:	05500200 	.word	0x05500200
 8010ae0:	05100500 	.word	0x05100500

08010ae4 <mbedtls_psa_aead_encrypt>:
    psa_algorithm_t alg,
    const uint8_t *nonce, size_t nonce_length,
    const uint8_t *additional_data, size_t additional_data_length,
    const uint8_t *plaintext, size_t plaintext_length,
    uint8_t *ciphertext, size_t ciphertext_size, size_t *ciphertext_length )
{
 8010ae4:	b590      	push	{r4, r7, lr}
 8010ae6:	b0f5      	sub	sp, #468	; 0x1d4
 8010ae8:	af08      	add	r7, sp, #32
 8010aea:	f107 040c 	add.w	r4, r7, #12
 8010aee:	6020      	str	r0, [r4, #0]
 8010af0:	f107 0008 	add.w	r0, r7, #8
 8010af4:	6001      	str	r1, [r0, #0]
 8010af6:	1d39      	adds	r1, r7, #4
 8010af8:	600a      	str	r2, [r1, #0]
 8010afa:	463a      	mov	r2, r7
 8010afc:	6013      	str	r3, [r2, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 8010afe:	f06f 0396 	mvn.w	r3, #150	; 0x96
 8010b02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    aead_operation_t operation = AEAD_OPERATION_INIT;
 8010b06:	f107 0310 	add.w	r3, r7, #16
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8010b10:	461a      	mov	r2, r3
 8010b12:	2100      	movs	r1, #0
 8010b14:	f004 fb25 	bl	8015162 <memset>
    uint8_t *tag;
    (void) key_buffer_size;

    status = psa_aead_setup( &operation, attributes, key_buffer, alg );
 8010b18:	463b      	mov	r3, r7
 8010b1a:	f107 0208 	add.w	r2, r7, #8
 8010b1e:	f107 010c 	add.w	r1, r7, #12
 8010b22:	f107 0010 	add.w	r0, r7, #16
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	6812      	ldr	r2, [r2, #0]
 8010b2a:	6809      	ldr	r1, [r1, #0]
 8010b2c:	f7ff fe8a 	bl	8010844 <psa_aead_setup>
 8010b30:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
    if( status != PSA_SUCCESS )
 8010b34:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	f040 80b9 	bne.w	8010cb0 <mbedtls_psa_aead_encrypt+0x1cc>
        goto exit;

    /* For all currently supported modes, the tag is at the end of the
     * ciphertext. */
    if( ciphertext_size < ( plaintext_length + operation.tag_length ) )
 8010b3e:	f107 0310 	add.w	r3, r7, #16
 8010b42:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010b46:	461a      	mov	r2, r3
 8010b48:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8010b4c:	4413      	add	r3, r2
 8010b4e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d204      	bcs.n	8010b60 <mbedtls_psa_aead_encrypt+0x7c>
    {
        status = PSA_ERROR_BUFFER_TOO_SMALL;
 8010b56:	f06f 0389 	mvn.w	r3, #137	; 0x89
 8010b5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
        goto exit;
 8010b5e:	e0aa      	b.n	8010cb6 <mbedtls_psa_aead_encrypt+0x1d2>
    }
    tag = ciphertext + plaintext_length;
 8010b60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8010b64:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8010b68:	4413      	add	r3, r2
 8010b6a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

#if defined(MBEDTLS_PSA_BUILTIN_ALG_CCM)
    if( operation.core_alg == PSA_ALG_CCM )
 8010b6e:	f107 0310 	add.w	r3, r7, #16
 8010b72:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010b76:	4a56      	ldr	r2, [pc, #344]	; (8010cd0 <mbedtls_psa_aead_encrypt+0x1ec>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d124      	bne.n	8010bc6 <mbedtls_psa_aead_encrypt+0xe2>
                                         plaintext_length,
                                         nonce, nonce_length,
                                         additional_data,
                                         additional_data_length,
                                         plaintext, ciphertext,
                                         tag, operation.tag_length ) );
 8010b7c:	f107 0310 	add.w	r3, r7, #16
 8010b80:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
        status = mbedtls_to_psa_error(
 8010b84:	f107 0010 	add.w	r0, r7, #16
 8010b88:	9305      	str	r3, [sp, #20]
 8010b8a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8010b8e:	9304      	str	r3, [sp, #16]
 8010b90:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8010b94:	9303      	str	r3, [sp, #12]
 8010b96:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010b9a:	9302      	str	r3, [sp, #8]
 8010b9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8010ba0:	9301      	str	r3, [sp, #4]
 8010ba2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8010ba6:	9300      	str	r3, [sp, #0]
 8010ba8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8010bac:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8010bb0:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8010bb4:	f7f7 fb89 	bl	80082ca <mbedtls_ccm_encrypt_and_tag>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fe f9ce 	bl	800ef5c <mbedtls_to_psa_error>
 8010bc0:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8010bc4:	e064      	b.n	8010c90 <mbedtls_psa_aead_encrypt+0x1ac>
    }
    else
#endif /* MBEDTLS_PSA_BUILTIN_ALG_CCM */
#if defined(MBEDTLS_PSA_BUILTIN_ALG_GCM)
    if( operation.core_alg == PSA_ALG_GCM )
 8010bc6:	f107 0310 	add.w	r3, r7, #16
 8010bca:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010bce:	4a41      	ldr	r2, [pc, #260]	; (8010cd4 <mbedtls_psa_aead_encrypt+0x1f0>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d127      	bne.n	8010c24 <mbedtls_psa_aead_encrypt+0x140>
                                       MBEDTLS_GCM_ENCRYPT,
                                       plaintext_length,
                                       nonce, nonce_length,
                                       additional_data, additional_data_length,
                                       plaintext, ciphertext,
                                       operation.tag_length, tag ) );
 8010bd4:	f107 0310 	add.w	r3, r7, #16
 8010bd8:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
        status = mbedtls_to_psa_error(
 8010bdc:	461a      	mov	r2, r3
 8010bde:	f107 0010 	add.w	r0, r7, #16
 8010be2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8010be6:	9306      	str	r3, [sp, #24]
 8010be8:	9205      	str	r2, [sp, #20]
 8010bea:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8010bee:	9304      	str	r3, [sp, #16]
 8010bf0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010bf4:	9303      	str	r3, [sp, #12]
 8010bf6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8010bfa:	9302      	str	r3, [sp, #8]
 8010bfc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8010c00:	9301      	str	r3, [sp, #4]
 8010c02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8010c06:	9300      	str	r3, [sp, #0]
 8010c08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8010c0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8010c10:	2101      	movs	r1, #1
 8010c12:	f7fd f9f4 	bl	800dffe <mbedtls_gcm_crypt_and_tag>
 8010c16:	4603      	mov	r3, r0
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fe f99f 	bl	800ef5c <mbedtls_to_psa_error>
 8010c1e:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8010c22:	e035      	b.n	8010c90 <mbedtls_psa_aead_encrypt+0x1ac>
    }
    else
#endif /* MBEDTLS_PSA_BUILTIN_ALG_GCM */
#if defined(MBEDTLS_PSA_BUILTIN_ALG_CHACHA20_POLY1305)
    if( operation.core_alg == PSA_ALG_CHACHA20_POLY1305 )
 8010c24:	f107 0310 	add.w	r3, r7, #16
 8010c28:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010c2c:	4a2a      	ldr	r2, [pc, #168]	; (8010cd8 <mbedtls_psa_aead_encrypt+0x1f4>)
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d12b      	bne.n	8010c8a <mbedtls_psa_aead_encrypt+0x1a6>
    {
        if( nonce_length != 12 || operation.tag_length != 16 )
 8010c32:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8010c36:	2b0c      	cmp	r3, #12
 8010c38:	d105      	bne.n	8010c46 <mbedtls_psa_aead_encrypt+0x162>
 8010c3a:	f107 0310 	add.w	r3, r7, #16
 8010c3e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010c42:	2b10      	cmp	r3, #16
 8010c44:	d004      	beq.n	8010c50 <mbedtls_psa_aead_encrypt+0x16c>
        {
            status = PSA_ERROR_NOT_SUPPORTED;
 8010c46:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8010c4a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            goto exit;
 8010c4e:	e032      	b.n	8010cb6 <mbedtls_psa_aead_encrypt+0x1d2>
        }
        status = mbedtls_to_psa_error(
 8010c50:	f107 0010 	add.w	r0, r7, #16
 8010c54:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8010c58:	9303      	str	r3, [sp, #12]
 8010c5a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8010c5e:	9302      	str	r3, [sp, #8]
 8010c60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010c64:	9301      	str	r3, [sp, #4]
 8010c66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8010c70:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8010c74:	f8d7 11d4 	ldr.w	r1, [r7, #468]	; 0x1d4
 8010c78:	f7f8 fae4 	bl	8009244 <mbedtls_chachapoly_encrypt_and_tag>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7fe f96c 	bl	800ef5c <mbedtls_to_psa_error>
 8010c84:	f8c7 01ac 	str.w	r0, [r7, #428]	; 0x1ac
 8010c88:	e002      	b.n	8010c90 <mbedtls_psa_aead_encrypt+0x1ac>
    }
    else
#endif /* MBEDTLS_PSA_BUILTIN_ALG_CHACHA20_POLY1305 */
    {
        (void) tag;
        return( PSA_ERROR_NOT_SUPPORTED );
 8010c8a:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8010c8e:	e019      	b.n	8010cc4 <mbedtls_psa_aead_encrypt+0x1e0>
    }

    if( status == PSA_SUCCESS )
 8010c90:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d10d      	bne.n	8010cb4 <mbedtls_psa_aead_encrypt+0x1d0>
        *ciphertext_length = plaintext_length + operation.tag_length;
 8010c98:	f107 0310 	add.w	r3, r7, #16
 8010c9c:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8010ca6:	441a      	add	r2, r3
 8010ca8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8010cac:	601a      	str	r2, [r3, #0]
 8010cae:	e002      	b.n	8010cb6 <mbedtls_psa_aead_encrypt+0x1d2>
        goto exit;
 8010cb0:	bf00      	nop
 8010cb2:	e000      	b.n	8010cb6 <mbedtls_psa_aead_encrypt+0x1d2>

exit:
 8010cb4:	bf00      	nop
    psa_aead_abort_internal( &operation );
 8010cb6:	f107 0310 	add.w	r3, r7, #16
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7ff fd98 	bl	80107f0 <psa_aead_abort_internal>

    return( status );
 8010cc0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd90      	pop	{r4, r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	05500100 	.word	0x05500100
 8010cd4:	05500200 	.word	0x05500200
 8010cd8:	05100500 	.word	0x05100500

08010cdc <psa_aead_unpadded_locate_tag>:
static psa_status_t psa_aead_unpadded_locate_tag( size_t tag_length,
                                                  const uint8_t *ciphertext,
                                                  size_t ciphertext_length,
                                                  size_t plaintext_size,
                                                  const uint8_t **p_tag )
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b087      	sub	sp, #28
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
 8010ce8:	603b      	str	r3, [r7, #0]
    size_t payload_length;
    if( tag_length > ciphertext_length )
 8010cea:	68fa      	ldr	r2, [r7, #12]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d902      	bls.n	8010cf8 <psa_aead_unpadded_locate_tag+0x1c>
        return( PSA_ERROR_INVALID_ARGUMENT );
 8010cf2:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8010cf6:	e010      	b.n	8010d1a <psa_aead_unpadded_locate_tag+0x3e>
    payload_length = ciphertext_length - tag_length;
 8010cf8:	687a      	ldr	r2, [r7, #4]
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	1ad3      	subs	r3, r2, r3
 8010cfe:	617b      	str	r3, [r7, #20]
    if( payload_length > plaintext_size )
 8010d00:	697a      	ldr	r2, [r7, #20]
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d902      	bls.n	8010d0e <psa_aead_unpadded_locate_tag+0x32>
        return( PSA_ERROR_BUFFER_TOO_SMALL );
 8010d08:	f06f 0389 	mvn.w	r3, #137	; 0x89
 8010d0c:	e005      	b.n	8010d1a <psa_aead_unpadded_locate_tag+0x3e>
    *p_tag = ciphertext + payload_length;
 8010d0e:	68ba      	ldr	r2, [r7, #8]
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	441a      	add	r2, r3
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	601a      	str	r2, [r3, #0]
    return( PSA_SUCCESS );
 8010d18:	2300      	movs	r3, #0
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	371c      	adds	r7, #28
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d24:	4770      	bx	lr
	...

08010d28 <mbedtls_psa_aead_decrypt>:
    psa_algorithm_t alg,
    const uint8_t *nonce, size_t nonce_length,
    const uint8_t *additional_data, size_t additional_data_length,
    const uint8_t *ciphertext, size_t ciphertext_length,
    uint8_t *plaintext, size_t plaintext_size, size_t *plaintext_length )
{
 8010d28:	b590      	push	{r4, r7, lr}
 8010d2a:	b0f5      	sub	sp, #468	; 0x1d4
 8010d2c:	af06      	add	r7, sp, #24
 8010d2e:	f107 040c 	add.w	r4, r7, #12
 8010d32:	6020      	str	r0, [r4, #0]
 8010d34:	f107 0008 	add.w	r0, r7, #8
 8010d38:	6001      	str	r1, [r0, #0]
 8010d3a:	1d39      	adds	r1, r7, #4
 8010d3c:	600a      	str	r2, [r1, #0]
 8010d3e:	463a      	mov	r2, r7
 8010d40:	6013      	str	r3, [r2, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 8010d42:	f06f 0396 	mvn.w	r3, #150	; 0x96
 8010d46:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    aead_operation_t operation = AEAD_OPERATION_INIT;
 8010d4a:	f107 0318 	add.w	r3, r7, #24
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8010d54:	461a      	mov	r2, r3
 8010d56:	2100      	movs	r1, #0
 8010d58:	f004 fa03 	bl	8015162 <memset>
    const uint8_t *tag = NULL;
 8010d5c:	f107 0314 	add.w	r3, r7, #20
 8010d60:	2200      	movs	r2, #0
 8010d62:	601a      	str	r2, [r3, #0]
    (void) key_buffer_size;

    status = psa_aead_setup( &operation, attributes, key_buffer, alg );
 8010d64:	463b      	mov	r3, r7
 8010d66:	f107 0208 	add.w	r2, r7, #8
 8010d6a:	f107 010c 	add.w	r1, r7, #12
 8010d6e:	f107 0018 	add.w	r0, r7, #24
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	6812      	ldr	r2, [r2, #0]
 8010d76:	6809      	ldr	r1, [r1, #0]
 8010d78:	f7ff fd64 	bl	8010844 <psa_aead_setup>
 8010d7c:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
    if( status != PSA_SUCCESS )
 8010d80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f040 80cb 	bne.w	8010f20 <mbedtls_psa_aead_decrypt+0x1f8>
        goto exit;

    status = psa_aead_unpadded_locate_tag( operation.tag_length,
 8010d8a:	f107 0318 	add.w	r3, r7, #24
 8010d8e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010d92:	4618      	mov	r0, r3
 8010d94:	f107 0314 	add.w	r3, r7, #20
 8010d98:	9300      	str	r3, [sp, #0]
 8010d9a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8010d9e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8010da2:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8010da6:	f7ff ff99 	bl	8010cdc <psa_aead_unpadded_locate_tag>
 8010daa:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
                                           ciphertext, ciphertext_length,
                                           plaintext_size, &tag );
    if( status != PSA_SUCCESS )
 8010dae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f040 80b6 	bne.w	8010f24 <mbedtls_psa_aead_decrypt+0x1fc>
        goto exit;

#if defined(MBEDTLS_PSA_BUILTIN_ALG_CCM)
    if( operation.core_alg == PSA_ALG_CCM )
 8010db8:	f107 0318 	add.w	r3, r7, #24
 8010dbc:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010dc0:	4a67      	ldr	r2, [pc, #412]	; (8010f60 <mbedtls_psa_aead_decrypt+0x238>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d12b      	bne.n	8010e1e <mbedtls_psa_aead_decrypt+0xf6>
    {
        status = mbedtls_to_psa_error(
            mbedtls_ccm_auth_decrypt( &operation.ctx.ccm,
                                      ciphertext_length - operation.tag_length,
 8010dc6:	f107 0318 	add.w	r3, r7, #24
 8010dca:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010dce:	461a      	mov	r2, r3
        status = mbedtls_to_psa_error(
 8010dd0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8010dd4:	1a99      	subs	r1, r3, r2
 8010dd6:	f107 0314 	add.w	r3, r7, #20
 8010dda:	681b      	ldr	r3, [r3, #0]
                                      nonce, nonce_length,
                                      additional_data,
                                      additional_data_length,
                                      ciphertext, plaintext,
                                      tag, operation.tag_length ) );
 8010ddc:	f107 0218 	add.w	r2, r7, #24
 8010de0:	f892 2194 	ldrb.w	r2, [r2, #404]	; 0x194
        status = mbedtls_to_psa_error(
 8010de4:	f107 0018 	add.w	r0, r7, #24
 8010de8:	9205      	str	r2, [sp, #20]
 8010dea:	9304      	str	r3, [sp, #16]
 8010dec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8010df0:	9303      	str	r3, [sp, #12]
 8010df2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8010df6:	9302      	str	r3, [sp, #8]
 8010df8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8010dfc:	9301      	str	r3, [sp, #4]
 8010dfe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010e02:	9300      	str	r3, [sp, #0]
 8010e04:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8010e08:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8010e0c:	f7f7 fad7 	bl	80083be <mbedtls_ccm_auth_decrypt>
 8010e10:	4603      	mov	r3, r0
 8010e12:	4618      	mov	r0, r3
 8010e14:	f7fe f8a2 	bl	800ef5c <mbedtls_to_psa_error>
 8010e18:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 8010e1c:	e070      	b.n	8010f00 <mbedtls_psa_aead_decrypt+0x1d8>
    }
    else
#endif /* MBEDTLS_PSA_BUILTIN_ALG_CCM */
#if defined(MBEDTLS_PSA_BUILTIN_ALG_GCM)
    if( operation.core_alg == PSA_ALG_GCM )
 8010e1e:	f107 0318 	add.w	r3, r7, #24
 8010e22:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010e26:	4a4f      	ldr	r2, [pc, #316]	; (8010f64 <mbedtls_psa_aead_decrypt+0x23c>)
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d12c      	bne.n	8010e86 <mbedtls_psa_aead_decrypt+0x15e>
    {
        status = mbedtls_to_psa_error(
            mbedtls_gcm_auth_decrypt( &operation.ctx.gcm,
                                      ciphertext_length - operation.tag_length,
 8010e2c:	f107 0318 	add.w	r3, r7, #24
 8010e30:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010e34:	461a      	mov	r2, r3
        status = mbedtls_to_psa_error(
 8010e36:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8010e3a:	1a99      	subs	r1, r3, r2
 8010e3c:	f107 0314 	add.w	r3, r7, #20
 8010e40:	681b      	ldr	r3, [r3, #0]
                                      nonce, nonce_length,
                                      additional_data,
                                      additional_data_length,
                                      tag, operation.tag_length,
 8010e42:	f107 0218 	add.w	r2, r7, #24
 8010e46:	f892 2194 	ldrb.w	r2, [r2, #404]	; 0x194
        status = mbedtls_to_psa_error(
 8010e4a:	4614      	mov	r4, r2
 8010e4c:	f107 0018 	add.w	r0, r7, #24
 8010e50:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8010e54:	9205      	str	r2, [sp, #20]
 8010e56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8010e5a:	9204      	str	r2, [sp, #16]
 8010e5c:	9403      	str	r4, [sp, #12]
 8010e5e:	9302      	str	r3, [sp, #8]
 8010e60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8010e64:	9301      	str	r3, [sp, #4]
 8010e66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8010e70:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8010e74:	f7fd f8f9 	bl	800e06a <mbedtls_gcm_auth_decrypt>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fe f86e 	bl	800ef5c <mbedtls_to_psa_error>
 8010e80:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 8010e84:	e03c      	b.n	8010f00 <mbedtls_psa_aead_decrypt+0x1d8>
                                      ciphertext, plaintext ) );
    }
    else
#endif /* MBEDTLS_PSA_BUILTIN_ALG_GCM */
#if defined(MBEDTLS_PSA_BUILTIN_ALG_CHACHA20_POLY1305)
    if( operation.core_alg == PSA_ALG_CHACHA20_POLY1305 )
 8010e86:	f107 0318 	add.w	r3, r7, #24
 8010e8a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8010e8e:	4a36      	ldr	r2, [pc, #216]	; (8010f68 <mbedtls_psa_aead_decrypt+0x240>)
 8010e90:	4293      	cmp	r3, r2
 8010e92:	d132      	bne.n	8010efa <mbedtls_psa_aead_decrypt+0x1d2>
    {
        if( nonce_length != 12 || operation.tag_length != 16 )
 8010e94:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8010e98:	2b0c      	cmp	r3, #12
 8010e9a:	d105      	bne.n	8010ea8 <mbedtls_psa_aead_decrypt+0x180>
 8010e9c:	f107 0318 	add.w	r3, r7, #24
 8010ea0:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010ea4:	2b10      	cmp	r3, #16
 8010ea6:	d004      	beq.n	8010eb2 <mbedtls_psa_aead_decrypt+0x18a>
        {
            status = PSA_ERROR_NOT_SUPPORTED;
 8010ea8:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8010eac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
            goto exit;
 8010eb0:	e03b      	b.n	8010f2a <mbedtls_psa_aead_decrypt+0x202>
        }
        status = mbedtls_to_psa_error(
            mbedtls_chachapoly_auth_decrypt( &operation.ctx.chachapoly,
                                             ciphertext_length - operation.tag_length,
 8010eb2:	f107 0318 	add.w	r3, r7, #24
 8010eb6:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010eba:	461a      	mov	r2, r3
        status = mbedtls_to_psa_error(
 8010ebc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8010ec0:	1a99      	subs	r1, r3, r2
 8010ec2:	f107 0314 	add.w	r3, r7, #20
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f107 0018 	add.w	r0, r7, #24
 8010ecc:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8010ed0:	9203      	str	r2, [sp, #12]
 8010ed2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8010ed6:	9202      	str	r2, [sp, #8]
 8010ed8:	9301      	str	r3, [sp, #4]
 8010eda:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8010ede:	9300      	str	r3, [sp, #0]
 8010ee0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010ee4:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8010ee8:	f7f8 f9c8 	bl	800927c <mbedtls_chachapoly_auth_decrypt>
 8010eec:	4603      	mov	r3, r0
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fe f834 	bl	800ef5c <mbedtls_to_psa_error>
 8010ef4:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
 8010ef8:	e002      	b.n	8010f00 <mbedtls_psa_aead_decrypt+0x1d8>
                                             plaintext ) );
    }
    else
#endif /* MBEDTLS_PSA_BUILTIN_ALG_CHACHA20_POLY1305 */
    {
        return( PSA_ERROR_NOT_SUPPORTED );
 8010efa:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8010efe:	e02a      	b.n	8010f56 <mbedtls_psa_aead_decrypt+0x22e>
    }

    if( status == PSA_SUCCESS )
 8010f00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d10f      	bne.n	8010f28 <mbedtls_psa_aead_decrypt+0x200>
        *plaintext_length = ciphertext_length - operation.tag_length;
 8010f08:	f107 0318 	add.w	r3, r7, #24
 8010f0c:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010f10:	461a      	mov	r2, r3
 8010f12:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8010f16:	1a9a      	subs	r2, r3, r2
 8010f18:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8010f1c:	601a      	str	r2, [r3, #0]
 8010f1e:	e004      	b.n	8010f2a <mbedtls_psa_aead_decrypt+0x202>
        goto exit;
 8010f20:	bf00      	nop
 8010f22:	e002      	b.n	8010f2a <mbedtls_psa_aead_decrypt+0x202>
        goto exit;
 8010f24:	bf00      	nop
 8010f26:	e000      	b.n	8010f2a <mbedtls_psa_aead_decrypt+0x202>

exit:
 8010f28:	bf00      	nop
    psa_aead_abort_internal( &operation );
 8010f2a:	f107 0318 	add.w	r3, r7, #24
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7ff fc5e 	bl	80107f0 <psa_aead_abort_internal>

    if( status == PSA_SUCCESS )
 8010f34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d10a      	bne.n	8010f52 <mbedtls_psa_aead_decrypt+0x22a>
        *plaintext_length = ciphertext_length - operation.tag_length;
 8010f3c:	f107 0318 	add.w	r3, r7, #24
 8010f40:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8010f44:	461a      	mov	r2, r3
 8010f46:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8010f4a:	1a9a      	subs	r2, r3, r2
 8010f4c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8010f50:	601a      	str	r2, [r3, #0]
    return( status );
 8010f52:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	f507 77de 	add.w	r7, r7, #444	; 0x1bc
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd90      	pop	{r4, r7, pc}
 8010f60:	05500100 	.word	0x05500100
 8010f64:	05500200 	.word	0x05500200
 8010f68:	05100500 	.word	0x05100500

08010f6c <mbedtls_cipher_info_from_psa>:
const mbedtls_cipher_info_t *mbedtls_cipher_info_from_psa(
    psa_algorithm_t alg,
    psa_key_type_t key_type,
    size_t key_bits,
    mbedtls_cipher_id_t* cipher_id )
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b086      	sub	sp, #24
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	60f8      	str	r0, [r7, #12]
 8010f74:	607a      	str	r2, [r7, #4]
 8010f76:	603b      	str	r3, [r7, #0]
 8010f78:	460b      	mov	r3, r1
 8010f7a:	817b      	strh	r3, [r7, #10]
    mbedtls_cipher_mode_t mode;
    mbedtls_cipher_id_t cipher_id_tmp;

    if( PSA_ALG_IS_AEAD( alg ) )
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010f82:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8010f86:	d103      	bne.n	8010f90 <mbedtls_cipher_info_from_psa+0x24>
        alg = PSA_ALG_AEAD_WITH_SHORTENED_TAG( alg, 0 );
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f423 137e 	bic.w	r3, r3, #4161536	; 0x3f8000
 8010f8e:	60fb      	str	r3, [r7, #12]

    if( PSA_ALG_IS_CIPHER( alg ) || PSA_ALG_IS_AEAD( alg ) )
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010f96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010f9a:	d005      	beq.n	8010fa8 <mbedtls_cipher_info_from_psa+0x3c>
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010fa2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8010fa6:	d14c      	bne.n	8011042 <mbedtls_cipher_info_from_psa+0xd6>
    {
        switch( alg )
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	4a4e      	ldr	r2, [pc, #312]	; (80110e4 <mbedtls_cipher_info_from_psa+0x178>)
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d02a      	beq.n	8011006 <mbedtls_cipher_info_from_psa+0x9a>
 8010fb0:	4a4c      	ldr	r2, [pc, #304]	; (80110e4 <mbedtls_cipher_info_from_psa+0x178>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d810      	bhi.n	8010fd8 <mbedtls_cipher_info_from_psa+0x6c>
 8010fb6:	4a4c      	ldr	r2, [pc, #304]	; (80110e8 <mbedtls_cipher_info_from_psa+0x17c>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d033      	beq.n	8011024 <mbedtls_cipher_info_from_psa+0xb8>
 8010fbc:	4a4a      	ldr	r2, [pc, #296]	; (80110e8 <mbedtls_cipher_info_from_psa+0x17c>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d803      	bhi.n	8010fca <mbedtls_cipher_info_from_psa+0x5e>
 8010fc2:	4a4a      	ldr	r2, [pc, #296]	; (80110ec <mbedtls_cipher_info_from_psa+0x180>)
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	d02a      	beq.n	801101e <mbedtls_cipher_info_from_psa+0xb2>
 8010fc8:	e038      	b.n	801103c <mbedtls_cipher_info_from_psa+0xd0>
 8010fca:	4a49      	ldr	r2, [pc, #292]	; (80110f0 <mbedtls_cipher_info_from_psa+0x184>)
 8010fcc:	4293      	cmp	r3, r2
 8010fce:	d023      	beq.n	8011018 <mbedtls_cipher_info_from_psa+0xac>
 8010fd0:	4a48      	ldr	r2, [pc, #288]	; (80110f4 <mbedtls_cipher_info_from_psa+0x188>)
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d014      	beq.n	8011000 <mbedtls_cipher_info_from_psa+0x94>
 8010fd6:	e031      	b.n	801103c <mbedtls_cipher_info_from_psa+0xd0>
 8010fd8:	f1b3 2f05 	cmp.w	r3, #83887360	; 0x5000500
 8010fdc:	d02b      	beq.n	8011036 <mbedtls_cipher_info_from_psa+0xca>
 8010fde:	f1b3 2f05 	cmp.w	r3, #83887360	; 0x5000500
 8010fe2:	d806      	bhi.n	8010ff2 <mbedtls_cipher_info_from_psa+0x86>
 8010fe4:	4a44      	ldr	r2, [pc, #272]	; (80110f8 <mbedtls_cipher_info_from_psa+0x18c>)
 8010fe6:	4293      	cmp	r3, r2
 8010fe8:	d010      	beq.n	801100c <mbedtls_cipher_info_from_psa+0xa0>
 8010fea:	4a44      	ldr	r2, [pc, #272]	; (80110fc <mbedtls_cipher_info_from_psa+0x190>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d010      	beq.n	8011012 <mbedtls_cipher_info_from_psa+0xa6>
 8010ff0:	e024      	b.n	801103c <mbedtls_cipher_info_from_psa+0xd0>
 8010ff2:	4a43      	ldr	r2, [pc, #268]	; (8011100 <mbedtls_cipher_info_from_psa+0x194>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d018      	beq.n	801102a <mbedtls_cipher_info_from_psa+0xbe>
 8010ff8:	4a42      	ldr	r2, [pc, #264]	; (8011104 <mbedtls_cipher_info_from_psa+0x198>)
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d018      	beq.n	8011030 <mbedtls_cipher_info_from_psa+0xc4>
 8010ffe:	e01d      	b.n	801103c <mbedtls_cipher_info_from_psa+0xd0>
        {
            case PSA_ALG_STREAM_CIPHER:
                mode = MBEDTLS_MODE_STREAM;
 8011000:	2307      	movs	r3, #7
 8011002:	75fb      	strb	r3, [r7, #23]
                break;
 8011004:	e01c      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            case PSA_ALG_CTR:
                mode = MBEDTLS_MODE_CTR;
 8011006:	2305      	movs	r3, #5
 8011008:	75fb      	strb	r3, [r7, #23]
                break;
 801100a:	e019      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            case PSA_ALG_CFB:
                mode = MBEDTLS_MODE_CFB;
 801100c:	2303      	movs	r3, #3
 801100e:	75fb      	strb	r3, [r7, #23]
                break;
 8011010:	e016      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            case PSA_ALG_OFB:
                mode = MBEDTLS_MODE_OFB;
 8011012:	2304      	movs	r3, #4
 8011014:	75fb      	strb	r3, [r7, #23]
                break;
 8011016:	e013      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            case PSA_ALG_ECB_NO_PADDING:
                mode = MBEDTLS_MODE_ECB;
 8011018:	2301      	movs	r3, #1
 801101a:	75fb      	strb	r3, [r7, #23]
                break;
 801101c:	e010      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            case PSA_ALG_CBC_NO_PADDING:
                mode = MBEDTLS_MODE_CBC;
 801101e:	2302      	movs	r3, #2
 8011020:	75fb      	strb	r3, [r7, #23]
                break;
 8011022:	e00d      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            case PSA_ALG_CBC_PKCS7:
                mode = MBEDTLS_MODE_CBC;
 8011024:	2302      	movs	r3, #2
 8011026:	75fb      	strb	r3, [r7, #23]
                break;
 8011028:	e00a      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            case PSA_ALG_AEAD_WITH_SHORTENED_TAG( PSA_ALG_CCM, 0 ):
                mode = MBEDTLS_MODE_CCM;
 801102a:	2308      	movs	r3, #8
 801102c:	75fb      	strb	r3, [r7, #23]
                break;
 801102e:	e007      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            case PSA_ALG_AEAD_WITH_SHORTENED_TAG( PSA_ALG_GCM, 0 ):
                mode = MBEDTLS_MODE_GCM;
 8011030:	2306      	movs	r3, #6
 8011032:	75fb      	strb	r3, [r7, #23]
                break;
 8011034:	e004      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            case PSA_ALG_AEAD_WITH_SHORTENED_TAG( PSA_ALG_CHACHA20_POLY1305, 0 ):
                mode = MBEDTLS_MODE_CHACHAPOLY;
 8011036:	230a      	movs	r3, #10
 8011038:	75fb      	strb	r3, [r7, #23]
                break;
 801103a:	e001      	b.n	8011040 <mbedtls_cipher_info_from_psa+0xd4>
            default:
                return( NULL );
 801103c:	2300      	movs	r3, #0
 801103e:	e04d      	b.n	80110dc <mbedtls_cipher_info_from_psa+0x170>
        }
    }
 8011040:	e008      	b.n	8011054 <mbedtls_cipher_info_from_psa+0xe8>
    else if( alg == PSA_ALG_CMAC )
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	4a30      	ldr	r2, [pc, #192]	; (8011108 <mbedtls_cipher_info_from_psa+0x19c>)
 8011046:	4293      	cmp	r3, r2
 8011048:	d102      	bne.n	8011050 <mbedtls_cipher_info_from_psa+0xe4>
        mode = MBEDTLS_MODE_ECB;
 801104a:	2301      	movs	r3, #1
 801104c:	75fb      	strb	r3, [r7, #23]
 801104e:	e001      	b.n	8011054 <mbedtls_cipher_info_from_psa+0xe8>
    else
        return( NULL );
 8011050:	2300      	movs	r3, #0
 8011052:	e043      	b.n	80110dc <mbedtls_cipher_info_from_psa+0x170>

    switch( key_type )
 8011054:	897b      	ldrh	r3, [r7, #10]
 8011056:	f242 3201 	movw	r2, #8961	; 0x2301
 801105a:	4293      	cmp	r3, r2
 801105c:	d017      	beq.n	801108e <mbedtls_cipher_info_from_psa+0x122>
 801105e:	f242 3201 	movw	r2, #8961	; 0x2301
 8011062:	4293      	cmp	r3, r2
 8011064:	dc08      	bgt.n	8011078 <mbedtls_cipher_info_from_psa+0x10c>
 8011066:	f242 0202 	movw	r2, #8194	; 0x2002
 801106a:	4293      	cmp	r3, r2
 801106c:	d020      	beq.n	80110b0 <mbedtls_cipher_info_from_psa+0x144>
 801106e:	f242 0204 	movw	r2, #8196	; 0x2004
 8011072:	4293      	cmp	r3, r2
 8011074:	d01f      	beq.n	80110b6 <mbedtls_cipher_info_from_psa+0x14a>
 8011076:	e021      	b.n	80110bc <mbedtls_cipher_info_from_psa+0x150>
 8011078:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 801107c:	d004      	beq.n	8011088 <mbedtls_cipher_info_from_psa+0x11c>
 801107e:	f242 4203 	movw	r2, #9219	; 0x2403
 8011082:	4293      	cmp	r3, r2
 8011084:	d011      	beq.n	80110aa <mbedtls_cipher_info_from_psa+0x13e>
 8011086:	e019      	b.n	80110bc <mbedtls_cipher_info_from_psa+0x150>
    {
        case PSA_KEY_TYPE_AES:
            cipher_id_tmp = MBEDTLS_CIPHER_ID_AES;
 8011088:	2302      	movs	r3, #2
 801108a:	75bb      	strb	r3, [r7, #22]
            break;
 801108c:	e019      	b.n	80110c2 <mbedtls_cipher_info_from_psa+0x156>
        case PSA_KEY_TYPE_DES:
            /* key_bits is 64 for Single-DES, 128 for two-key Triple-DES,
             * and 192 for three-key Triple-DES. */
            if( key_bits == 64 )
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2b40      	cmp	r3, #64	; 0x40
 8011092:	d102      	bne.n	801109a <mbedtls_cipher_info_from_psa+0x12e>
                cipher_id_tmp = MBEDTLS_CIPHER_ID_DES;
 8011094:	2303      	movs	r3, #3
 8011096:	75bb      	strb	r3, [r7, #22]
 8011098:	e001      	b.n	801109e <mbedtls_cipher_info_from_psa+0x132>
            else
                cipher_id_tmp = MBEDTLS_CIPHER_ID_3DES;
 801109a:	2304      	movs	r3, #4
 801109c:	75bb      	strb	r3, [r7, #22]
            /* mbedtls doesn't recognize two-key Triple-DES as an algorithm,
             * but two-key Triple-DES is functionally three-key Triple-DES
             * with K1=K3, so that's how we present it to mbedtls. */
            if( key_bits == 128 )
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2b80      	cmp	r3, #128	; 0x80
 80110a2:	d10d      	bne.n	80110c0 <mbedtls_cipher_info_from_psa+0x154>
                key_bits = 192;
 80110a4:	23c0      	movs	r3, #192	; 0xc0
 80110a6:	607b      	str	r3, [r7, #4]
            break;
 80110a8:	e00a      	b.n	80110c0 <mbedtls_cipher_info_from_psa+0x154>
        case PSA_KEY_TYPE_CAMELLIA:
            cipher_id_tmp = MBEDTLS_CIPHER_ID_CAMELLIA;
 80110aa:	2305      	movs	r3, #5
 80110ac:	75bb      	strb	r3, [r7, #22]
            break;
 80110ae:	e008      	b.n	80110c2 <mbedtls_cipher_info_from_psa+0x156>
        case PSA_KEY_TYPE_ARC4:
            cipher_id_tmp = MBEDTLS_CIPHER_ID_ARC4;
 80110b0:	2307      	movs	r3, #7
 80110b2:	75bb      	strb	r3, [r7, #22]
            break;
 80110b4:	e005      	b.n	80110c2 <mbedtls_cipher_info_from_psa+0x156>
        case PSA_KEY_TYPE_CHACHA20:
            cipher_id_tmp = MBEDTLS_CIPHER_ID_CHACHA20;
 80110b6:	2309      	movs	r3, #9
 80110b8:	75bb      	strb	r3, [r7, #22]
            break;
 80110ba:	e002      	b.n	80110c2 <mbedtls_cipher_info_from_psa+0x156>
        default:
            return( NULL );
 80110bc:	2300      	movs	r3, #0
 80110be:	e00d      	b.n	80110dc <mbedtls_cipher_info_from_psa+0x170>
            break;
 80110c0:	bf00      	nop
    }
    if( cipher_id != NULL )
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d002      	beq.n	80110ce <mbedtls_cipher_info_from_psa+0x162>
        *cipher_id = cipher_id_tmp;
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	7dba      	ldrb	r2, [r7, #22]
 80110cc:	701a      	strb	r2, [r3, #0]

    return( mbedtls_cipher_info_from_values( cipher_id_tmp,
 80110ce:	6879      	ldr	r1, [r7, #4]
 80110d0:	7dfa      	ldrb	r2, [r7, #23]
 80110d2:	7dbb      	ldrb	r3, [r7, #22]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7f8 f9eb 	bl	80094b0 <mbedtls_cipher_info_from_values>
 80110da:	4603      	mov	r3, r0
                                             (int) key_bits, mode ) );
}
 80110dc:	4618      	mov	r0, r3
 80110de:	3718      	adds	r7, #24
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}
 80110e4:	04c01000 	.word	0x04c01000
 80110e8:	04404100 	.word	0x04404100
 80110ec:	04404000 	.word	0x04404000
 80110f0:	04404400 	.word	0x04404400
 80110f4:	04800100 	.word	0x04800100
 80110f8:	04c01100 	.word	0x04c01100
 80110fc:	04c01200 	.word	0x04c01200
 8011100:	05400100 	.word	0x05400100
 8011104:	05400200 	.word	0x05400200
 8011108:	03c00200 	.word	0x03c00200

0801110c <psa_set_key_domain_parameters>:

psa_status_t psa_set_key_domain_parameters( psa_key_attributes_t *attributes,
                                            psa_key_type_t type,
                                            const uint8_t *data,
                                            size_t data_length )
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	607a      	str	r2, [r7, #4]
 8011116:	603b      	str	r3, [r7, #0]
 8011118:	460b      	mov	r3, r1
 801111a:	817b      	strh	r3, [r7, #10]
    uint8_t *copy = NULL;
 801111c:	2300      	movs	r3, #0
 801111e:	617b      	str	r3, [r7, #20]

    if( data_length != 0 )
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d010      	beq.n	8011148 <psa_set_key_domain_parameters+0x3c>
    {
        copy = mbedtls_calloc( 1, data_length );
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	2001      	movs	r0, #1
 801112a:	f003 fb9f 	bl	801486c <calloc>
 801112e:	4603      	mov	r3, r0
 8011130:	617b      	str	r3, [r7, #20]
        if( copy == NULL )
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d102      	bne.n	801113e <psa_set_key_domain_parameters+0x32>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 8011138:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 801113c:	e01d      	b.n	801117a <psa_set_key_domain_parameters+0x6e>
        memcpy( copy, data, data_length );
 801113e:	683a      	ldr	r2, [r7, #0]
 8011140:	6879      	ldr	r1, [r7, #4]
 8011142:	6978      	ldr	r0, [r7, #20]
 8011144:	f003 ffe9 	bl	801511a <memcpy>
    }
    /* After this point, this function is guaranteed to succeed, so it
     * can start modifying `*attributes`. */

    if( attributes->domain_parameters != NULL )
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00a      	beq.n	8011166 <psa_set_key_domain_parameters+0x5a>
    {
        mbedtls_free( attributes->domain_parameters );
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011154:	4618      	mov	r0, r3
 8011156:	f003 ffc9 	bl	80150ec <free>
        attributes->domain_parameters = NULL;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2200      	movs	r2, #0
 801115e:	629a      	str	r2, [r3, #40]	; 0x28
        attributes->domain_parameters_size = 0;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2200      	movs	r2, #0
 8011164:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    attributes->domain_parameters = copy;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	697a      	ldr	r2, [r7, #20]
 801116a:	629a      	str	r2, [r3, #40]	; 0x28
    attributes->domain_parameters_size = data_length;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	683a      	ldr	r2, [r7, #0]
 8011170:	62da      	str	r2, [r3, #44]	; 0x2c
    attributes->core.type = type;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	897a      	ldrh	r2, [r7, #10]
 8011176:	801a      	strh	r2, [r3, #0]
    return( PSA_SUCCESS );
 8011178:	2300      	movs	r3, #0
}
 801117a:	4618      	mov	r0, r3
 801117c:	3718      	adds	r7, #24
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <psa_get_key_lifetime>:
{
 8011182:	b480      	push	{r7}
 8011184:	b083      	sub	sp, #12
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
    return( attributes->core.lifetime );
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	685b      	ldr	r3, [r3, #4]
}
 801118e:	4618      	mov	r0, r3
 8011190:	370c      	adds	r7, #12
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr

0801119a <psa_driver_wrapper_import_key>:
    size_t data_length,
    uint8_t *key_buffer,
    size_t key_buffer_size,
    size_t *key_buffer_length,
    size_t *bits )
{
 801119a:	b590      	push	{r4, r7, lr}
 801119c:	b08d      	sub	sp, #52	; 0x34
 801119e:	af04      	add	r7, sp, #16
 80111a0:	60f8      	str	r0, [r7, #12]
 80111a2:	60b9      	str	r1, [r7, #8]
 80111a4:	607a      	str	r2, [r7, #4]
 80111a6:	603b      	str	r3, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 80111a8:	f06f 0396 	mvn.w	r3, #150	; 0x96
 80111ac:	61fb      	str	r3, [r7, #28]
    psa_key_location_t location = PSA_KEY_LIFETIME_GET_LOCATION(
 80111ae:	68f8      	ldr	r0, [r7, #12]
 80111b0:	f7ff ffe7 	bl	8011182 <psa_get_key_lifetime>
 80111b4:	4603      	mov	r3, r0
 80111b6:	0a1b      	lsrs	r3, r3, #8
 80111b8:	61bb      	str	r3, [r7, #24]
    /* Try dynamically-registered SE interface first */
#if defined(MBEDTLS_PSA_CRYPTO_SE_C)
    const psa_drv_se_t *drv;
    psa_drv_se_context_t *drv_context;

    if( psa_get_se_driver( attributes->core.lifetime, &drv, &drv_context ) )
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	f107 0210 	add.w	r2, r7, #16
 80111c2:	f107 0114 	add.w	r1, r7, #20
 80111c6:	4618      	mov	r0, r3
 80111c8:	f000 f8ee 	bl	80113a8 <psa_get_se_driver>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d032      	beq.n	8011238 <psa_driver_wrapper_import_key+0x9e>
    {
        if( drv->key_management == NULL ||
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d004      	beq.n	80111e4 <psa_driver_wrapper_import_key+0x4a>
            drv->key_management->p_import == NULL )
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	68db      	ldr	r3, [r3, #12]
 80111de:	689b      	ldr	r3, [r3, #8]
        if( drv->key_management == NULL ||
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d102      	bne.n	80111ea <psa_driver_wrapper_import_key+0x50>
            return( PSA_ERROR_NOT_SUPPORTED );
 80111e4:	f06f 0385 	mvn.w	r3, #133	; 0x85
 80111e8:	e039      	b.n	801125e <psa_driver_wrapper_import_key+0xc4>

        /* The driver should set the number of key bits, however in
         * case it doesn't, we initialize bits to an invalid value. */
        *bits = PSA_MAX_KEY_BITS + 1;
 80111ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ec:	f64f 72f9 	movw	r2, #65529	; 0xfff9
 80111f0:	601a      	str	r2, [r3, #0]
        status = drv->key_management->p_import(
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	6899      	ldr	r1, [r3, #8]
 80111f8:	6938      	ldr	r0, [r7, #16]
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011202:	9203      	str	r2, [sp, #12]
 8011204:	687a      	ldr	r2, [r7, #4]
 8011206:	9202      	str	r2, [sp, #8]
 8011208:	68ba      	ldr	r2, [r7, #8]
 801120a:	9201      	str	r2, [sp, #4]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	9200      	str	r2, [sp, #0]
 8011210:	461a      	mov	r2, r3
 8011212:	4623      	mov	r3, r4
 8011214:	4788      	blx	r1
 8011216:	61f8      	str	r0, [r7, #28]
            drv_context,
            *( (psa_key_slot_number_t *)key_buffer ),
            attributes, data, data_length, bits );

        if( status != PSA_SUCCESS )
 8011218:	69fb      	ldr	r3, [r7, #28]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d001      	beq.n	8011222 <psa_driver_wrapper_import_key+0x88>
            return( status );
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	e01d      	b.n	801125e <psa_driver_wrapper_import_key+0xc4>

        if( (*bits) > PSA_MAX_KEY_BITS )
 8011222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 801122a:	4293      	cmp	r3, r2
 801122c:	d902      	bls.n	8011234 <psa_driver_wrapper_import_key+0x9a>
            return( PSA_ERROR_NOT_SUPPORTED );
 801122e:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8011232:	e014      	b.n	801125e <psa_driver_wrapper_import_key+0xc4>

        return( PSA_SUCCESS );
 8011234:	2300      	movs	r3, #0
 8011236:	e012      	b.n	801125e <psa_driver_wrapper_import_key+0xc4>
    }
#endif /* PSA_CRYPTO_SE_C */

    switch( location )
 8011238:	69bb      	ldr	r3, [r7, #24]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d10d      	bne.n	801125a <psa_driver_wrapper_import_key+0xc0>
            if( status != PSA_ERROR_NOT_SUPPORTED )
                return( status );
#endif /* PSA_CRYPTO_DRIVER_TEST */
#endif /* PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT */
            /* Fell through, meaning no accelerator supports this operation */
            return( psa_import_key_into_slot( attributes,
 801123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011240:	9302      	str	r3, [sp, #8]
 8011242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011244:	9301      	str	r3, [sp, #4]
 8011246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011248:	9300      	str	r3, [sp, #0]
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	687a      	ldr	r2, [r7, #4]
 801124e:	68b9      	ldr	r1, [r7, #8]
 8011250:	68f8      	ldr	r0, [r7, #12]
 8011252:	f7fe fa0a 	bl	800f66a <psa_import_key_into_slot>
 8011256:	4603      	mov	r3, r0
 8011258:	e001      	b.n	801125e <psa_driver_wrapper_import_key+0xc4>

        default:
            /* Importing a key with external storage in not yet supported.
             * Return in error indicating that the lifetime is not valid. */
            (void)status;
            return( PSA_ERROR_INVALID_ARGUMENT );
 801125a:	f06f 0386 	mvn.w	r3, #134	; 0x86
    }

}
 801125e:	4618      	mov	r0, r3
 8011260:	3724      	adds	r7, #36	; 0x24
 8011262:	46bd      	mov	sp, r7
 8011264:	bd90      	pop	{r4, r7, pc}

08011266 <psa_driver_wrapper_aead_encrypt>:
    psa_algorithm_t alg,
    const uint8_t *nonce, size_t nonce_length,
    const uint8_t *additional_data, size_t additional_data_length,
    const uint8_t *plaintext, size_t plaintext_length,
    uint8_t *ciphertext, size_t ciphertext_size, size_t *ciphertext_length )
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b090      	sub	sp, #64	; 0x40
 801126a:	af0a      	add	r7, sp, #40	; 0x28
 801126c:	60f8      	str	r0, [r7, #12]
 801126e:	60b9      	str	r1, [r7, #8]
 8011270:	607a      	str	r2, [r7, #4]
 8011272:	603b      	str	r3, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 8011274:	f06f 0396 	mvn.w	r3, #150	; 0x96
 8011278:	617b      	str	r3, [r7, #20]
    psa_key_location_t location =
        PSA_KEY_LIFETIME_GET_LOCATION( attributes->core.lifetime );
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	685b      	ldr	r3, [r3, #4]
    psa_key_location_t location =
 801127e:	0a1b      	lsrs	r3, r3, #8
 8011280:	613b      	str	r3, [r7, #16]

    switch( location )
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d119      	bne.n	80112bc <psa_driver_wrapper_aead_encrypt+0x56>
                return( status );
#endif /* PSA_CRYPTO_DRIVER_TEST */
#endif /* PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT */

            /* Fell through, meaning no accelerator supports this operation */
            return( mbedtls_psa_aead_encrypt(
 8011288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801128a:	9308      	str	r3, [sp, #32]
 801128c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801128e:	9307      	str	r3, [sp, #28]
 8011290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011292:	9306      	str	r3, [sp, #24]
 8011294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011296:	9305      	str	r3, [sp, #20]
 8011298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801129a:	9304      	str	r3, [sp, #16]
 801129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129e:	9303      	str	r3, [sp, #12]
 80112a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a2:	9302      	str	r3, [sp, #8]
 80112a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a6:	9301      	str	r3, [sp, #4]
 80112a8:	6a3b      	ldr	r3, [r7, #32]
 80112aa:	9300      	str	r3, [sp, #0]
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	68b9      	ldr	r1, [r7, #8]
 80112b2:	68f8      	ldr	r0, [r7, #12]
 80112b4:	f7ff fc16 	bl	8010ae4 <mbedtls_psa_aead_encrypt>
 80112b8:	4603      	mov	r3, r0
 80112ba:	e001      	b.n	80112c0 <psa_driver_wrapper_aead_encrypt+0x5a>
        /* Add cases for opaque driver here */

        default:
            /* Key is declared with a lifetime not known to us */
            (void)status;
            return( PSA_ERROR_INVALID_ARGUMENT );
 80112bc:	f06f 0386 	mvn.w	r3, #134	; 0x86
    }
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3718      	adds	r7, #24
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <psa_driver_wrapper_aead_decrypt>:
    psa_algorithm_t alg,
    const uint8_t *nonce, size_t nonce_length,
    const uint8_t *additional_data, size_t additional_data_length,
    const uint8_t *ciphertext, size_t ciphertext_length,
    uint8_t *plaintext, size_t plaintext_size, size_t *plaintext_length )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b090      	sub	sp, #64	; 0x40
 80112cc:	af0a      	add	r7, sp, #40	; 0x28
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
 80112d4:	603b      	str	r3, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 80112d6:	f06f 0396 	mvn.w	r3, #150	; 0x96
 80112da:	617b      	str	r3, [r7, #20]
    psa_key_location_t location =
        PSA_KEY_LIFETIME_GET_LOCATION( attributes->core.lifetime );
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	685b      	ldr	r3, [r3, #4]
    psa_key_location_t location =
 80112e0:	0a1b      	lsrs	r3, r3, #8
 80112e2:	613b      	str	r3, [r7, #16]

    switch( location )
 80112e4:	693b      	ldr	r3, [r7, #16]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d119      	bne.n	801131e <psa_driver_wrapper_aead_decrypt+0x56>
                return( status );
#endif /* PSA_CRYPTO_DRIVER_TEST */
#endif /* PSA_CRYPTO_ACCELERATOR_DRIVER_PRESENT */

            /* Fell through, meaning no accelerator supports this operation */
            return( mbedtls_psa_aead_decrypt(
 80112ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80112ec:	9308      	str	r3, [sp, #32]
 80112ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112f0:	9307      	str	r3, [sp, #28]
 80112f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f4:	9306      	str	r3, [sp, #24]
 80112f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112f8:	9305      	str	r3, [sp, #20]
 80112fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fc:	9304      	str	r3, [sp, #16]
 80112fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011300:	9303      	str	r3, [sp, #12]
 8011302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011304:	9302      	str	r3, [sp, #8]
 8011306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011308:	9301      	str	r3, [sp, #4]
 801130a:	6a3b      	ldr	r3, [r7, #32]
 801130c:	9300      	str	r3, [sp, #0]
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	687a      	ldr	r2, [r7, #4]
 8011312:	68b9      	ldr	r1, [r7, #8]
 8011314:	68f8      	ldr	r0, [r7, #12]
 8011316:	f7ff fd07 	bl	8010d28 <mbedtls_psa_aead_decrypt>
 801131a:	4603      	mov	r3, r0
 801131c:	e001      	b.n	8011322 <psa_driver_wrapper_aead_decrypt+0x5a>
        /* Add cases for opaque driver here */

        default:
            /* Key is declared with a lifetime not known to us */
            (void)status;
            return( PSA_ERROR_INVALID_ARGUMENT );
 801131e:	f06f 0386 	mvn.w	r3, #134	; 0x86
    }
}
 8011322:	4618      	mov	r0, r3
 8011324:	3718      	adds	r7, #24
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <psa_get_key_lifetime>:
{
 801132a:	b480      	push	{r7}
 801132c:	b083      	sub	sp, #12
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
    return( attributes->core.lifetime );
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	685b      	ldr	r3, [r3, #4]
}
 8011336:	4618      	mov	r0, r3
 8011338:	370c      	adds	r7, #12
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
	...

08011344 <psa_get_se_driver_entry>:

static psa_se_drv_table_entry_t driver_table[PSA_MAX_SE_DRIVERS];

psa_se_drv_table_entry_t *psa_get_se_driver_entry(
    psa_key_lifetime_t lifetime )
{
 8011344:	b480      	push	{r7}
 8011346:	b085      	sub	sp, #20
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
    size_t i;
    psa_key_location_t location = PSA_KEY_LIFETIME_GET_LOCATION( lifetime );
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	0a1b      	lsrs	r3, r3, #8
 8011350:	60bb      	str	r3, [r7, #8]
    /* In the driver table, location=0 means an entry that isn't used.
     * No driver has a location of 0 because it's a reserved value
     * (which designates transparent keys). Make sure we never return
     * a driver entry for location 0. */
    if( location == 0 )
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d101      	bne.n	801135c <psa_get_se_driver_entry+0x18>
        return( NULL );
 8011358:	2300      	movs	r3, #0
 801135a:	e01c      	b.n	8011396 <psa_get_se_driver_entry+0x52>
    for( i = 0; i < PSA_MAX_SE_DRIVERS; i++ )
 801135c:	2300      	movs	r3, #0
 801135e:	60fb      	str	r3, [r7, #12]
 8011360:	e015      	b.n	801138e <psa_get_se_driver_entry+0x4a>
    {
        if( driver_table[i].location == location )
 8011362:	4910      	ldr	r1, [pc, #64]	; (80113a4 <psa_get_se_driver_entry+0x60>)
 8011364:	68fa      	ldr	r2, [r7, #12]
 8011366:	4613      	mov	r3, r2
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4413      	add	r3, r2
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	440b      	add	r3, r1
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	429a      	cmp	r2, r3
 8011376:	d107      	bne.n	8011388 <psa_get_se_driver_entry+0x44>
            return( &driver_table[i] );
 8011378:	68fa      	ldr	r2, [r7, #12]
 801137a:	4613      	mov	r3, r2
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	4a08      	ldr	r2, [pc, #32]	; (80113a4 <psa_get_se_driver_entry+0x60>)
 8011384:	4413      	add	r3, r2
 8011386:	e006      	b.n	8011396 <psa_get_se_driver_entry+0x52>
    for( i = 0; i < PSA_MAX_SE_DRIVERS; i++ )
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	3301      	adds	r3, #1
 801138c:	60fb      	str	r3, [r7, #12]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2b03      	cmp	r3, #3
 8011392:	d9e6      	bls.n	8011362 <psa_get_se_driver_entry+0x1e>
    }
    return( NULL );
 8011394:	2300      	movs	r3, #0
}
 8011396:	4618      	mov	r0, r3
 8011398:	3714      	adds	r7, #20
 801139a:	46bd      	mov	sp, r7
 801139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop
 80113a4:	20002348 	.word	0x20002348

080113a8 <psa_get_se_driver>:
}

int psa_get_se_driver( psa_key_lifetime_t lifetime,
                       const psa_drv_se_t **p_methods,
                       psa_drv_se_context_t **p_drv_context)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	607a      	str	r2, [r7, #4]
    psa_se_drv_table_entry_t *driver = psa_get_se_driver_entry( lifetime );
 80113b4:	68f8      	ldr	r0, [r7, #12]
 80113b6:	f7ff ffc5 	bl	8011344 <psa_get_se_driver_entry>
 80113ba:	6178      	str	r0, [r7, #20]
    if( p_methods != NULL )
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d008      	beq.n	80113d4 <psa_get_se_driver+0x2c>
        *p_methods = ( driver ? driver->methods : NULL );
 80113c2:	697b      	ldr	r3, [r7, #20]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d002      	beq.n	80113ce <psa_get_se_driver+0x26>
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	e000      	b.n	80113d0 <psa_get_se_driver+0x28>
 80113ce:	2300      	movs	r3, #0
 80113d0:	68ba      	ldr	r2, [r7, #8]
 80113d2:	6013      	str	r3, [r2, #0]
    if( p_drv_context != NULL )
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d008      	beq.n	80113ec <psa_get_se_driver+0x44>
        *p_drv_context = ( driver ? &driver->u.context : NULL );
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d002      	beq.n	80113e6 <psa_get_se_driver+0x3e>
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	3308      	adds	r3, #8
 80113e4:	e000      	b.n	80113e8 <psa_get_se_driver+0x40>
 80113e6:	2300      	movs	r3, #0
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	6013      	str	r3, [r2, #0]
    return( driver != NULL );
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	bf14      	ite	ne
 80113f2:	2301      	movne	r3, #1
 80113f4:	2300      	moveq	r3, #0
 80113f6:	b2db      	uxtb	r3, r3
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3718      	adds	r7, #24
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <psa_get_se_driver_its_file_uid>:
/****************************************************************/

static psa_status_t psa_get_se_driver_its_file_uid(
    const psa_se_drv_table_entry_t *driver,
    psa_storage_uid_t *uid )
{
 8011400:	b490      	push	{r4, r7}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
    if( driver->location > PSA_MAX_SE_LOCATION )
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2bff      	cmp	r3, #255	; 0xff
 8011410:	d902      	bls.n	8011418 <psa_get_se_driver_its_file_uid+0x18>
        return( PSA_ERROR_NOT_SUPPORTED );
 8011412:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8011416:	e009      	b.n	801142c <psa_get_se_driver_its_file_uid+0x2c>
    if( driver->u.internal.persistent_data_size > UINT32_MAX )
        return( PSA_ERROR_NOT_SUPPORTED );
#endif

    /* See the documentation of PSA_CRYPTO_SE_DRIVER_ITS_UID_BASE. */
    *uid = PSA_CRYPTO_SE_DRIVER_ITS_UID_BASE + driver->location;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8011420:	f04f 0400 	mov.w	r4, #0
 8011424:	683a      	ldr	r2, [r7, #0]
 8011426:	e9c2 3400 	strd	r3, r4, [r2]
    return( PSA_SUCCESS );
 801142a:	2300      	movs	r3, #0
}
 801142c:	4618      	mov	r0, r3
 801142e:	3708      	adds	r7, #8
 8011430:	46bd      	mov	sp, r7
 8011432:	bc90      	pop	{r4, r7}
 8011434:	4770      	bx	lr

08011436 <psa_save_se_persistent_data>:
                         &length ) );
}

psa_status_t psa_save_se_persistent_data(
    const psa_se_drv_table_entry_t *driver )
{
 8011436:	b590      	push	{r4, r7, lr}
 8011438:	b089      	sub	sp, #36	; 0x24
 801143a:	af02      	add	r7, sp, #8
 801143c:	6078      	str	r0, [r7, #4]
    psa_status_t status;
    psa_storage_uid_t uid;

    status = psa_get_se_driver_its_file_uid( driver, &uid );
 801143e:	f107 0308 	add.w	r3, r7, #8
 8011442:	4619      	mov	r1, r3
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f7ff ffdb 	bl	8011400 <psa_get_se_driver_its_file_uid>
 801144a:	6178      	str	r0, [r7, #20]
    if( status != PSA_SUCCESS )
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d001      	beq.n	8011456 <psa_save_se_persistent_data+0x20>
        return( status );
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	e00b      	b.n	801146e <psa_save_se_persistent_data+0x38>

    /* psa_get_se_driver_its_file_uid ensures that the size_t
     * persistent_data_size is in range, but compilers don't know that,
     * so cast to reassure them. */
    return( psa_its_set( uid,
 8011456:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
                         (uint32_t) driver->u.internal.persistent_data_size,
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	68da      	ldr	r2, [r3, #12]
                         driver->u.internal.persistent_data,
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	689c      	ldr	r4, [r3, #8]
    return( psa_its_set( uid,
 8011462:	2300      	movs	r3, #0
 8011464:	9300      	str	r3, [sp, #0]
 8011466:	4623      	mov	r3, r4
 8011468:	f000 ff92 	bl	8012390 <psa_its_set>
 801146c:	4603      	mov	r3, r0
                         0 ) );
}
 801146e:	4618      	mov	r0, r3
 8011470:	371c      	adds	r7, #28
 8011472:	46bd      	mov	sp, r7
 8011474:	bd90      	pop	{r4, r7, pc}

08011476 <psa_find_se_slot_for_key>:
psa_status_t psa_find_se_slot_for_key(
    const psa_key_attributes_t *attributes,
    psa_key_creation_method_t method,
    psa_se_drv_table_entry_t *driver,
    psa_key_slot_number_t *slot_number )
{
 8011476:	b590      	push	{r4, r7, lr}
 8011478:	b08b      	sub	sp, #44	; 0x2c
 801147a:	af02      	add	r7, sp, #8
 801147c:	60f8      	str	r0, [r7, #12]
 801147e:	607a      	str	r2, [r7, #4]
 8011480:	603b      	str	r3, [r7, #0]
 8011482:	460b      	mov	r3, r1
 8011484:	72fb      	strb	r3, [r7, #11]
    psa_status_t status;
    psa_key_location_t key_location =
        PSA_KEY_LIFETIME_GET_LOCATION( psa_get_key_lifetime( attributes ) );
 8011486:	68f8      	ldr	r0, [r7, #12]
 8011488:	f7ff ff4f 	bl	801132a <psa_get_key_lifetime>
 801148c:	4603      	mov	r3, r0
    psa_key_location_t key_location =
 801148e:	0a1b      	lsrs	r3, r3, #8
 8011490:	61bb      	str	r3, [r7, #24]

    /* If the location is wrong, it's a bug in the library. */
    if( driver->location != key_location )
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	69ba      	ldr	r2, [r7, #24]
 8011498:	429a      	cmp	r2, r3
 801149a:	d002      	beq.n	80114a2 <psa_find_se_slot_for_key+0x2c>
        return( PSA_ERROR_CORRUPTION_DETECTED );
 801149c:	f06f 0396 	mvn.w	r3, #150	; 0x96
 80114a0:	e049      	b.n	8011536 <psa_find_se_slot_for_key+0xc0>

    /* If the driver doesn't support key creation in any way, give up now. */
    if( driver->methods->key_management == NULL )
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d102      	bne.n	80114b2 <psa_find_se_slot_for_key+0x3c>
        return( PSA_ERROR_NOT_SUPPORTED );
 80114ac:	f06f 0385 	mvn.w	r3, #133	; 0x85
 80114b0:	e041      	b.n	8011536 <psa_find_se_slot_for_key+0xc0>

    if( psa_get_key_slot_number( attributes, slot_number ) == PSA_SUCCESS )
 80114b2:	6839      	ldr	r1, [r7, #0]
 80114b4:	68f8      	ldr	r0, [r7, #12]
 80114b6:	f7fe fd9b 	bl	800fff0 <psa_get_key_slot_number>
 80114ba:	4603      	mov	r3, r0
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d11b      	bne.n	80114f8 <psa_find_se_slot_for_key+0x82>
        /* The application wants to use a specific slot. Allow it if
         * the driver supports it. On a system with isolation,
         * the crypto service must check that the application is
         * permitted to request this slot. */
        psa_drv_se_validate_slot_number_t p_validate_slot_number =
            driver->methods->key_management->p_validate_slot_number;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	68db      	ldr	r3, [r3, #12]
        psa_drv_se_validate_slot_number_t p_validate_slot_number =
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	613b      	str	r3, [r7, #16]
        if( p_validate_slot_number == NULL )
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d102      	bne.n	80114d6 <psa_find_se_slot_for_key+0x60>
            return( PSA_ERROR_NOT_SUPPORTED );
 80114d0:	f06f 0385 	mvn.w	r3, #133	; 0x85
 80114d4:	e02f      	b.n	8011536 <psa_find_se_slot_for_key+0xc0>
        status = p_validate_slot_number( &driver->u.context,
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f103 0008 	add.w	r0, r3, #8
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6899      	ldr	r1, [r3, #8]
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80114e6:	7afa      	ldrb	r2, [r7, #11]
 80114e8:	e9cd 3400 	strd	r3, r4, [sp]
 80114ec:	693c      	ldr	r4, [r7, #16]
 80114ee:	4613      	mov	r3, r2
 80114f0:	68fa      	ldr	r2, [r7, #12]
 80114f2:	47a0      	blx	r4
 80114f4:	61f8      	str	r0, [r7, #28]
 80114f6:	e01d      	b.n	8011534 <psa_find_se_slot_for_key+0xbe>
                                         driver->u.internal.persistent_data,
                                         attributes, method,
                                         *slot_number );
    }
    else if( method == PSA_KEY_CREATION_REGISTER )
 80114f8:	7afb      	ldrb	r3, [r7, #11]
 80114fa:	2b04      	cmp	r3, #4
 80114fc:	d102      	bne.n	8011504 <psa_find_se_slot_for_key+0x8e>
    {
        /* The application didn't specify a slot number. This doesn't
         * make sense when registering a slot. */
        return( PSA_ERROR_INVALID_ARGUMENT );
 80114fe:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8011502:	e018      	b.n	8011536 <psa_find_se_slot_for_key+0xc0>
    else
    {
        /* The application didn't tell us which slot to use. Let the driver
         * choose. This is the normal case. */
        psa_drv_se_allocate_key_t p_allocate =
            driver->methods->key_management->p_allocate;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	68db      	ldr	r3, [r3, #12]
        psa_drv_se_allocate_key_t p_allocate =
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	617b      	str	r3, [r7, #20]
        if( p_allocate == NULL )
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d102      	bne.n	801151a <psa_find_se_slot_for_key+0xa4>
            return( PSA_ERROR_NOT_SUPPORTED );
 8011514:	f06f 0385 	mvn.w	r3, #133	; 0x85
 8011518:	e00d      	b.n	8011536 <psa_find_se_slot_for_key+0xc0>
        status = p_allocate( &driver->u.context,
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f103 0008 	add.w	r0, r3, #8
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6899      	ldr	r1, [r3, #8]
 8011524:	7afa      	ldrb	r2, [r7, #11]
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	697c      	ldr	r4, [r7, #20]
 801152c:	4613      	mov	r3, r2
 801152e:	68fa      	ldr	r2, [r7, #12]
 8011530:	47a0      	blx	r4
 8011532:	61f8      	str	r0, [r7, #28]
                             driver->u.internal.persistent_data,
                             attributes, method,
                             slot_number );
    }
    return( status );
 8011534:	69fb      	ldr	r3, [r7, #28]
}
 8011536:	4618      	mov	r0, r3
 8011538:	3724      	adds	r7, #36	; 0x24
 801153a:	46bd      	mov	sp, r7
 801153c:	bd90      	pop	{r4, r7, pc}

0801153e <psa_destroy_se_key>:

psa_status_t psa_destroy_se_key( psa_se_drv_table_entry_t *driver,
                                 psa_key_slot_number_t slot_number )
{
 801153e:	b590      	push	{r4, r7, lr}
 8011540:	b087      	sub	sp, #28
 8011542:	af00      	add	r7, sp, #0
 8011544:	60f8      	str	r0, [r7, #12]
 8011546:	e9c7 2300 	strd	r2, r3, [r7]
     * be able to destroy it. The only use case for a driver that
     * does not have a way to destroy keys at all is if the keys are
     * locked in a read-only state: we can use the keys but not
     * destroy them. Hence, if the driver doesn't support destroying
     * keys, it's really a lack of permission. */
    if( driver->methods->key_management == NULL ||
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d005      	beq.n	8011560 <psa_destroy_se_key+0x22>
        driver->methods->key_management->p_destroy == NULL )
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	691b      	ldr	r3, [r3, #16]
    if( driver->methods->key_management == NULL ||
 801155c:	2b00      	cmp	r3, #0
 801155e:	d102      	bne.n	8011566 <psa_destroy_se_key+0x28>
        return( PSA_ERROR_NOT_PERMITTED );
 8011560:	f06f 0384 	mvn.w	r3, #132	; 0x84
 8011564:	e016      	b.n	8011594 <psa_destroy_se_key+0x56>
    status = driver->methods->key_management->p_destroy(
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	691c      	ldr	r4, [r3, #16]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f103 0008 	add.w	r0, r3, #8
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	6899      	ldr	r1, [r3, #8]
 8011578:	e9d7 2300 	ldrd	r2, r3, [r7]
 801157c:	47a0      	blx	r4
 801157e:	6178      	str	r0, [r7, #20]
        &driver->u.context,
        driver->u.internal.persistent_data,
        slot_number );
    storage_status = psa_save_se_persistent_data( driver );
 8011580:	68f8      	ldr	r0, [r7, #12]
 8011582:	f7ff ff58 	bl	8011436 <psa_save_se_persistent_data>
 8011586:	6138      	str	r0, [r7, #16]
    return( status == PSA_SUCCESS ? storage_status : status );
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <psa_destroy_se_key+0x54>
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	e000      	b.n	8011594 <psa_destroy_se_key+0x56>
 8011592:	697b      	ldr	r3, [r7, #20]
}
 8011594:	4618      	mov	r0, r3
 8011596:	371c      	adds	r7, #28
 8011598:	46bd      	mov	sp, r7
 801159a:	bd90      	pop	{r4, r7, pc}

0801159c <mbedtls_svc_key_id_equal>:
{
 801159c:	b480      	push	{r7}
 801159e:	b083      	sub	sp, #12
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	6039      	str	r1, [r7, #0]
    return( id1 == id2 );
 80115a6:	687a      	ldr	r2, [r7, #4]
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	bf0c      	ite	eq
 80115ae:	2301      	moveq	r3, #1
 80115b0:	2300      	movne	r3, #0
 80115b2:	b2db      	uxtb	r3, r3
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	370c      	adds	r7, #12
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr

080115c0 <psa_is_key_slot_occupied>:
{
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
    return( slot->attr.type != 0 );
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	881b      	ldrh	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	bf14      	ite	ne
 80115d0:	2301      	movne	r3, #1
 80115d2:	2300      	moveq	r3, #0
 80115d4:	b2db      	uxtb	r3, r3
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	370c      	adds	r7, #12
 80115da:	46bd      	mov	sp, r7
 80115dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e0:	4770      	bx	lr

080115e2 <psa_is_key_slot_locked>:
{
 80115e2:	b480      	push	{r7}
 80115e4:	b083      	sub	sp, #12
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
    return( slot->lock_count > 0 );
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	69db      	ldr	r3, [r3, #28]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	bf14      	ite	ne
 80115f2:	2301      	movne	r3, #1
 80115f4:	2300      	moveq	r3, #0
 80115f6:	b2db      	uxtb	r3, r3
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	370c      	adds	r7, #12
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr

08011604 <psa_key_id_is_volatile>:
 *         The key identifier is a volatile key identifier.
 * \retval 0
 *         The key identifier is not a volatile key identifier.
 */
static inline int psa_key_id_is_volatile( psa_key_id_t key_id )
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
    return( ( key_id >= PSA_KEY_ID_VOLATILE_MIN ) &&
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	4a07      	ldr	r2, [pc, #28]	; (801162c <psa_key_id_is_volatile+0x28>)
 8011610:	4293      	cmp	r3, r2
 8011612:	d904      	bls.n	801161e <psa_key_id_is_volatile+0x1a>
            ( key_id <= PSA_KEY_ID_VOLATILE_MAX ) );
 8011614:	687b      	ldr	r3, [r7, #4]
    return( ( key_id >= PSA_KEY_ID_VOLATILE_MIN ) &&
 8011616:	2b00      	cmp	r3, #0
 8011618:	db01      	blt.n	801161e <psa_key_id_is_volatile+0x1a>
 801161a:	2301      	movs	r3, #1
 801161c:	e000      	b.n	8011620 <psa_key_id_is_volatile+0x1c>
 801161e:	2300      	movs	r3, #0
}
 8011620:	4618      	mov	r0, r3
 8011622:	370c      	adds	r7, #12
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr
 801162c:	7fffffdf 	.word	0x7fffffdf

08011630 <psa_lock_key_slot>:
 * \retval #PSA_ERROR_CORRUPTION_DETECTED
 *             The lock counter already reached its maximum value and was not
 *             increased.
 */
static inline psa_status_t psa_lock_key_slot( psa_key_slot_t *slot )
{
 8011630:	b480      	push	{r7}
 8011632:	b083      	sub	sp, #12
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
    if( slot->lock_count >= SIZE_MAX )
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	69db      	ldr	r3, [r3, #28]
 801163c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011640:	d102      	bne.n	8011648 <psa_lock_key_slot+0x18>
        return( PSA_ERROR_CORRUPTION_DETECTED );
 8011642:	f06f 0396 	mvn.w	r3, #150	; 0x96
 8011646:	e005      	b.n	8011654 <psa_lock_key_slot+0x24>

    slot->lock_count++;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	69db      	ldr	r3, [r3, #28]
 801164c:	1c5a      	adds	r2, r3, #1
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	61da      	str	r2, [r3, #28]

    return( PSA_SUCCESS );
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	370c      	adds	r7, #12
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <psa_key_lifetime_is_external>:
 * \retval 0
 *         The lifetime designates a key that is volatile or in internal
 *         storage.
 */
static inline int psa_key_lifetime_is_external( psa_key_lifetime_t lifetime )
{
 8011660:	b480      	push	{r7}
 8011662:	b083      	sub	sp, #12
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
    return( PSA_KEY_LIFETIME_GET_LOCATION( lifetime )
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	0a1b      	lsrs	r3, r3, #8
                != PSA_KEY_LOCATION_LOCAL_STORAGE );
 801166c:	2b00      	cmp	r3, #0
 801166e:	bf14      	ite	ne
 8011670:	2301      	movne	r3, #1
 8011672:	2300      	moveq	r3, #0
 8011674:	b2db      	uxtb	r3, r3
}
 8011676:	4618      	mov	r0, r3
 8011678:	370c      	adds	r7, #12
 801167a:	46bd      	mov	sp, r7
 801167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011680:	4770      	bx	lr

08011682 <psa_is_valid_key_id>:
} psa_global_data_t;

static psa_global_data_t global_data;

int psa_is_valid_key_id( mbedtls_svc_key_id_t key, int vendor_ok )
{
 8011682:	b480      	push	{r7}
 8011684:	b085      	sub	sp, #20
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
 801168a:	6039      	str	r1, [r7, #0]
    psa_key_id_t key_id = MBEDTLS_SVC_KEY_ID_GET_KEY_ID( key );
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	60fb      	str	r3, [r7, #12]

    if( ( PSA_KEY_ID_USER_MIN <= key_id ) &&
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d005      	beq.n	80116a2 <psa_is_valid_key_id+0x20>
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801169c:	d201      	bcs.n	80116a2 <psa_is_valid_key_id+0x20>
        ( key_id <= PSA_KEY_ID_USER_MAX ) )
        return( 1 );
 801169e:	2301      	movs	r3, #1
 80116a0:	e00c      	b.n	80116bc <psa_is_valid_key_id+0x3a>

    if( vendor_ok &&
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d008      	beq.n	80116ba <psa_is_valid_key_id+0x38>
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80116ae:	d304      	bcc.n	80116ba <psa_is_valid_key_id+0x38>
        ( PSA_KEY_ID_VENDOR_MIN <= key_id ) &&
        ( key_id <= PSA_KEY_ID_VENDOR_MAX ) )
 80116b0:	68fb      	ldr	r3, [r7, #12]
        ( PSA_KEY_ID_VENDOR_MIN <= key_id ) &&
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	db01      	blt.n	80116ba <psa_is_valid_key_id+0x38>
        return( 1 );
 80116b6:	2301      	movs	r3, #1
 80116b8:	e000      	b.n	80116bc <psa_is_valid_key_id+0x3a>

    return( 0 );
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3714      	adds	r7, #20
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr

080116c8 <psa_get_and_lock_key_slot_in_memory>:
 * \retval #PSA_ERROR_DOES_NOT_EXIST
 *         There is no key with key identifier \p key in the key slots.
 */
static psa_status_t psa_get_and_lock_key_slot_in_memory(
    mbedtls_svc_key_id_t key, psa_key_slot_t **p_slot )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b086      	sub	sp, #24
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 80116d2:	f06f 0396 	mvn.w	r3, #150	; 0x96
 80116d6:	617b      	str	r3, [r7, #20]
    psa_key_id_t key_id = MBEDTLS_SVC_KEY_ID_GET_KEY_ID( key );
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	60bb      	str	r3, [r7, #8]
    size_t slot_idx;
    psa_key_slot_t *slot = NULL;
 80116dc:	2300      	movs	r3, #0
 80116de:	60fb      	str	r3, [r7, #12]

    if( psa_key_id_is_volatile( key_id ) )
 80116e0:	68b8      	ldr	r0, [r7, #8]
 80116e2:	f7ff ff8f 	bl	8011604 <psa_key_id_is_volatile>
 80116e6:	4603      	mov	r3, r0
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d019      	beq.n	8011720 <psa_get_and_lock_key_slot_in_memory+0x58>
    {
        slot = &global_data.key_slots[ key_id - PSA_KEY_ID_VOLATILE_MIN ];
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 80116f2:	3220      	adds	r2, #32
 80116f4:	4613      	mov	r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	4413      	add	r3, r2
 80116fa:	00db      	lsls	r3, r3, #3
 80116fc:	4a28      	ldr	r2, [pc, #160]	; (80117a0 <psa_get_and_lock_key_slot_in_memory+0xd8>)
 80116fe:	4413      	add	r3, r2
 8011700:	60fb      	str	r3, [r7, #12]
         *
         * Note that, if the key slot is not occupied, its PSA key identifier
         * is equal to zero. This is an invalid value for a PSA key identifier
         * and thus cannot be equal to the valid PSA key identifier key_id.
         */
        status = mbedtls_svc_key_id_equal( key, slot->attr.id ) ?
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	689b      	ldr	r3, [r3, #8]
 8011706:	4619      	mov	r1, r3
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f7ff ff47 	bl	801159c <mbedtls_svc_key_id_equal>
 801170e:	4603      	mov	r3, r0
                 PSA_SUCCESS : PSA_ERROR_DOES_NOT_EXIST;
 8011710:	2b00      	cmp	r3, #0
 8011712:	d001      	beq.n	8011718 <psa_get_and_lock_key_slot_in_memory+0x50>
 8011714:	2300      	movs	r3, #0
 8011716:	e001      	b.n	801171c <psa_get_and_lock_key_slot_in_memory+0x54>
 8011718:	f06f 038b 	mvn.w	r3, #139	; 0x8b
        status = mbedtls_svc_key_id_equal( key, slot->attr.id ) ?
 801171c:	617b      	str	r3, [r7, #20]
 801171e:	e02d      	b.n	801177c <psa_get_and_lock_key_slot_in_memory+0xb4>
    }
    else
    {
        if ( !psa_is_valid_key_id( key, 1 ) )
 8011720:	2101      	movs	r1, #1
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f7ff ffad 	bl	8011682 <psa_is_valid_key_id>
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	d102      	bne.n	8011734 <psa_get_and_lock_key_slot_in_memory+0x6c>
            return( PSA_ERROR_INVALID_HANDLE );
 801172e:	f06f 0387 	mvn.w	r3, #135	; 0x87
 8011732:	e031      	b.n	8011798 <psa_get_and_lock_key_slot_in_memory+0xd0>

        for( slot_idx = 0; slot_idx < MBEDTLS_PSA_KEY_SLOT_COUNT; slot_idx++ )
 8011734:	2300      	movs	r3, #0
 8011736:	613b      	str	r3, [r7, #16]
 8011738:	e013      	b.n	8011762 <psa_get_and_lock_key_slot_in_memory+0x9a>
        {
            slot = &global_data.key_slots[ slot_idx ];
 801173a:	693a      	ldr	r2, [r7, #16]
 801173c:	4613      	mov	r3, r2
 801173e:	009b      	lsls	r3, r3, #2
 8011740:	4413      	add	r3, r2
 8011742:	00db      	lsls	r3, r3, #3
 8011744:	4a16      	ldr	r2, [pc, #88]	; (80117a0 <psa_get_and_lock_key_slot_in_memory+0xd8>)
 8011746:	4413      	add	r3, r2
 8011748:	60fb      	str	r3, [r7, #12]
            if( mbedtls_svc_key_id_equal( key, slot->attr.id ) )
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	4619      	mov	r1, r3
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7ff ff23 	bl	801159c <mbedtls_svc_key_id_equal>
 8011756:	4603      	mov	r3, r0
 8011758:	2b00      	cmp	r3, #0
 801175a:	d106      	bne.n	801176a <psa_get_and_lock_key_slot_in_memory+0xa2>
        for( slot_idx = 0; slot_idx < MBEDTLS_PSA_KEY_SLOT_COUNT; slot_idx++ )
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	3301      	adds	r3, #1
 8011760:	613b      	str	r3, [r7, #16]
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	2b1f      	cmp	r3, #31
 8011766:	d9e8      	bls.n	801173a <psa_get_and_lock_key_slot_in_memory+0x72>
 8011768:	e000      	b.n	801176c <psa_get_and_lock_key_slot_in_memory+0xa4>
                break;
 801176a:	bf00      	nop
        }
        status = ( slot_idx < MBEDTLS_PSA_KEY_SLOT_COUNT ) ?
                 PSA_SUCCESS : PSA_ERROR_DOES_NOT_EXIST;
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	2b1f      	cmp	r3, #31
 8011770:	d801      	bhi.n	8011776 <psa_get_and_lock_key_slot_in_memory+0xae>
 8011772:	2300      	movs	r3, #0
 8011774:	e001      	b.n	801177a <psa_get_and_lock_key_slot_in_memory+0xb2>
 8011776:	f06f 038b 	mvn.w	r3, #139	; 0x8b
        status = ( slot_idx < MBEDTLS_PSA_KEY_SLOT_COUNT ) ?
 801177a:	617b      	str	r3, [r7, #20]
    }

    if( status == PSA_SUCCESS )
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d109      	bne.n	8011796 <psa_get_and_lock_key_slot_in_memory+0xce>
    {
        status = psa_lock_key_slot( slot );
 8011782:	68f8      	ldr	r0, [r7, #12]
 8011784:	f7ff ff54 	bl	8011630 <psa_lock_key_slot>
 8011788:	6178      	str	r0, [r7, #20]
        if( status == PSA_SUCCESS )
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d102      	bne.n	8011796 <psa_get_and_lock_key_slot_in_memory+0xce>
            *p_slot = slot;
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	68fa      	ldr	r2, [r7, #12]
 8011794:	601a      	str	r2, [r3, #0]
    }

    return( status );
 8011796:	697b      	ldr	r3, [r7, #20]
}
 8011798:	4618      	mov	r0, r3
 801179a:	3718      	adds	r7, #24
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	20002398 	.word	0x20002398

080117a4 <psa_get_empty_key_slot>:
    global_data.key_slots_initialized = 0;
}

psa_status_t psa_get_empty_key_slot( psa_key_id_t *volatile_key_id,
                                     psa_key_slot_t **p_slot )
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b088      	sub	sp, #32
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 80117ae:	f06f 0396 	mvn.w	r3, #150	; 0x96
 80117b2:	61fb      	str	r3, [r7, #28]
    size_t slot_idx;
    psa_key_slot_t *selected_slot, *unlocked_persistent_key_slot;

    if( ! global_data.key_slots_initialized )
 80117b4:	4b39      	ldr	r3, [pc, #228]	; (801189c <psa_get_empty_key_slot+0xf8>)
 80117b6:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80117ba:	f003 0301 	and.w	r3, r3, #1
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d103      	bne.n	80117cc <psa_get_empty_key_slot+0x28>
    {
        status = PSA_ERROR_BAD_STATE;
 80117c4:	f06f 0388 	mvn.w	r3, #136	; 0x88
 80117c8:	61fb      	str	r3, [r7, #28]
        goto error;
 80117ca:	e05b      	b.n	8011884 <psa_get_empty_key_slot+0xe0>
    }

    selected_slot = unlocked_persistent_key_slot = NULL;
 80117cc:	2300      	movs	r3, #0
 80117ce:	613b      	str	r3, [r7, #16]
 80117d0:	693b      	ldr	r3, [r7, #16]
 80117d2:	617b      	str	r3, [r7, #20]
    for( slot_idx = 0; slot_idx < MBEDTLS_PSA_KEY_SLOT_COUNT; slot_idx++ )
 80117d4:	2300      	movs	r3, #0
 80117d6:	61bb      	str	r3, [r7, #24]
 80117d8:	e023      	b.n	8011822 <psa_get_empty_key_slot+0x7e>
    {
        psa_key_slot_t *slot = &global_data.key_slots[ slot_idx ];
 80117da:	69ba      	ldr	r2, [r7, #24]
 80117dc:	4613      	mov	r3, r2
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	4413      	add	r3, r2
 80117e2:	00db      	lsls	r3, r3, #3
 80117e4:	4a2d      	ldr	r2, [pc, #180]	; (801189c <psa_get_empty_key_slot+0xf8>)
 80117e6:	4413      	add	r3, r2
 80117e8:	60fb      	str	r3, [r7, #12]
        if( ! psa_is_key_slot_occupied( slot ) )
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	f7ff fee8 	bl	80115c0 <psa_is_key_slot_occupied>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d102      	bne.n	80117fc <psa_get_empty_key_slot+0x58>
        {
            selected_slot = slot;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	617b      	str	r3, [r7, #20]
            break;
 80117fa:	e015      	b.n	8011828 <psa_get_empty_key_slot+0x84>
        }

        if( ( unlocked_persistent_key_slot == NULL ) &&
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d10c      	bne.n	801181c <psa_get_empty_key_slot+0x78>
            ( ! PSA_KEY_LIFETIME_IS_VOLATILE( slot->attr.lifetime ) ) &&
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	b2db      	uxtb	r3, r3
        if( ( unlocked_persistent_key_slot == NULL ) &&
 8011808:	2b00      	cmp	r3, #0
 801180a:	d007      	beq.n	801181c <psa_get_empty_key_slot+0x78>
            ( ! psa_is_key_slot_locked( slot ) ) )
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	f7ff fee8 	bl	80115e2 <psa_is_key_slot_locked>
 8011812:	4603      	mov	r3, r0
            ( ! PSA_KEY_LIFETIME_IS_VOLATILE( slot->attr.lifetime ) ) &&
 8011814:	2b00      	cmp	r3, #0
 8011816:	d101      	bne.n	801181c <psa_get_empty_key_slot+0x78>
            unlocked_persistent_key_slot = slot;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	613b      	str	r3, [r7, #16]
    for( slot_idx = 0; slot_idx < MBEDTLS_PSA_KEY_SLOT_COUNT; slot_idx++ )
 801181c:	69bb      	ldr	r3, [r7, #24]
 801181e:	3301      	adds	r3, #1
 8011820:	61bb      	str	r3, [r7, #24]
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	2b1f      	cmp	r3, #31
 8011826:	d9d8      	bls.n	80117da <psa_get_empty_key_slot+0x36>
     * slot containing the description of a persistent key, recycle the first
     * such key slot we encountered. If we later need to operate on the
     * persistent key we are evicting now, we will reload its description from
     * storage.
     */
    if( ( selected_slot == NULL ) &&
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d10a      	bne.n	8011844 <psa_get_empty_key_slot+0xa0>
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d007      	beq.n	8011844 <psa_get_empty_key_slot+0xa0>
        ( unlocked_persistent_key_slot != NULL ) )
    {
        selected_slot = unlocked_persistent_key_slot;
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	617b      	str	r3, [r7, #20]
        selected_slot->lock_count = 1;
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	2201      	movs	r2, #1
 801183c:	61da      	str	r2, [r3, #28]
        psa_wipe_key_slot( selected_slot );
 801183e:	6978      	ldr	r0, [r7, #20]
 8011840:	f7fe fb27 	bl	800fe92 <psa_wipe_key_slot>
    }

    if( selected_slot != NULL )
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d017      	beq.n	801187a <psa_get_empty_key_slot+0xd6>
    {
       status = psa_lock_key_slot( selected_slot );
 801184a:	6978      	ldr	r0, [r7, #20]
 801184c:	f7ff fef0 	bl	8011630 <psa_lock_key_slot>
 8011850:	61f8      	str	r0, [r7, #28]
       if( status != PSA_SUCCESS )
 8011852:	69fb      	ldr	r3, [r7, #28]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d114      	bne.n	8011882 <psa_get_empty_key_slot+0xde>
           goto error;

        *volatile_key_id = PSA_KEY_ID_VOLATILE_MIN +
            ( (psa_key_id_t)( selected_slot - global_data.key_slots ) );
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	4a10      	ldr	r2, [pc, #64]	; (801189c <psa_get_empty_key_slot+0xf8>)
 801185c:	1a9b      	subs	r3, r3, r2
 801185e:	10db      	asrs	r3, r3, #3
 8011860:	4a0f      	ldr	r2, [pc, #60]	; (80118a0 <psa_get_empty_key_slot+0xfc>)
 8011862:	fb02 f303 	mul.w	r3, r2, r3
        *volatile_key_id = PSA_KEY_ID_VOLATILE_MIN +
 8011866:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801186a:	3b20      	subs	r3, #32
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	6013      	str	r3, [r2, #0]
        *p_slot = selected_slot;
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	697a      	ldr	r2, [r7, #20]
 8011874:	601a      	str	r2, [r3, #0]

        return( PSA_SUCCESS );
 8011876:	2300      	movs	r3, #0
 8011878:	e00b      	b.n	8011892 <psa_get_empty_key_slot+0xee>
    }
    status = PSA_ERROR_INSUFFICIENT_MEMORY;
 801187a:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 801187e:	61fb      	str	r3, [r7, #28]
 8011880:	e000      	b.n	8011884 <psa_get_empty_key_slot+0xe0>
           goto error;
 8011882:	bf00      	nop

error:
    *p_slot = NULL;
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	2200      	movs	r2, #0
 8011888:	601a      	str	r2, [r3, #0]
    *volatile_key_id = 0;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2200      	movs	r2, #0
 801188e:	601a      	str	r2, [r3, #0]

    return( status );
 8011890:	69fb      	ldr	r3, [r7, #28]
}
 8011892:	4618      	mov	r0, r3
 8011894:	3720      	adds	r7, #32
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	20002398 	.word	0x20002398
 80118a0:	cccccccd 	.word	0xcccccccd

080118a4 <psa_load_persistent_key_into_slot>:

#if defined(MBEDTLS_PSA_CRYPTO_STORAGE_C)
static psa_status_t psa_load_persistent_key_into_slot( psa_key_slot_t *slot )
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b088      	sub	sp, #32
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
    psa_status_t status = PSA_SUCCESS;
 80118ac:	2300      	movs	r3, #0
 80118ae:	61fb      	str	r3, [r7, #28]
    uint8_t *key_data = NULL;
 80118b0:	2300      	movs	r3, #0
 80118b2:	617b      	str	r3, [r7, #20]
    size_t key_data_length = 0;
 80118b4:	2300      	movs	r3, #0
 80118b6:	613b      	str	r3, [r7, #16]

    status = psa_load_persistent_key( &slot->attr,
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f107 0210 	add.w	r2, r7, #16
 80118be:	f107 0114 	add.w	r1, r7, #20
 80118c2:	4618      	mov	r0, r3
 80118c4:	f000 fbbf 	bl	8012046 <psa_load_persistent_key>
 80118c8:	61f8      	str	r0, [r7, #28]
                                      &key_data, &key_data_length );
    if( status != PSA_SUCCESS )
 80118ca:	69fb      	ldr	r3, [r7, #28]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d124      	bne.n	801191a <psa_load_persistent_key_into_slot+0x76>
#if defined(MBEDTLS_PSA_CRYPTO_SE_C)
    /* Special handling is required for loading keys associated with a
     * dynamically registered SE interface. */
    const psa_drv_se_t *drv;
    psa_drv_se_context_t *drv_context;
    if( psa_get_se_driver( slot->attr.lifetime, &drv, &drv_context ) )
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	f107 0208 	add.w	r2, r7, #8
 80118d8:	f107 010c 	add.w	r1, r7, #12
 80118dc:	4618      	mov	r0, r3
 80118de:	f7ff fd63 	bl	80113a8 <psa_get_se_driver>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d010      	beq.n	801190a <psa_load_persistent_key_into_slot+0x66>
    {
        psa_se_key_data_storage_t *data;

        if( key_data_length != sizeof( *data ) )
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	2b08      	cmp	r3, #8
 80118ec:	d003      	beq.n	80118f6 <psa_load_persistent_key_into_slot+0x52>
        {
            status = PSA_ERROR_DATA_INVALID;
 80118ee:	f06f 0398 	mvn.w	r3, #152	; 0x98
 80118f2:	61fb      	str	r3, [r7, #28]
            goto exit;
 80118f4:	e012      	b.n	801191c <psa_load_persistent_key_into_slot+0x78>
        }
        data = (psa_se_key_data_storage_t *) key_data;
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	61bb      	str	r3, [r7, #24]
        status = psa_copy_key_material_into_slot(
                     slot, data->slot_number, sizeof( data->slot_number ) );
 80118fa:	69bb      	ldr	r3, [r7, #24]
        status = psa_copy_key_material_into_slot(
 80118fc:	2208      	movs	r2, #8
 80118fe:	4619      	mov	r1, r3
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7fd fe96 	bl	800f632 <psa_copy_key_material_into_slot>
 8011906:	61f8      	str	r0, [r7, #28]
        goto exit;
 8011908:	e008      	b.n	801191c <psa_load_persistent_key_into_slot+0x78>
    }
#endif /* MBEDTLS_PSA_CRYPTO_SE_C */

    status = psa_copy_key_material_into_slot( slot, key_data, key_data_length );
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	693a      	ldr	r2, [r7, #16]
 801190e:	4619      	mov	r1, r3
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f7fd fe8e 	bl	800f632 <psa_copy_key_material_into_slot>
 8011916:	61f8      	str	r0, [r7, #28]
 8011918:	e000      	b.n	801191c <psa_load_persistent_key_into_slot+0x78>
        goto exit;
 801191a:	bf00      	nop

exit:
    psa_free_persistent_key_data( key_data, key_data_length );
 801191c:	697b      	ldr	r3, [r7, #20]
 801191e:	693a      	ldr	r2, [r7, #16]
 8011920:	4611      	mov	r1, r2
 8011922:	4618      	mov	r0, r3
 8011924:	f000 fb7c 	bl	8012020 <psa_free_persistent_key_data>
    return( status );
 8011928:	69fb      	ldr	r3, [r7, #28]
}
 801192a:	4618      	mov	r0, r3
 801192c:	3720      	adds	r7, #32
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
	...

08011934 <psa_get_and_lock_key_slot>:
}
#endif /* MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS */

psa_status_t psa_get_and_lock_key_slot( mbedtls_svc_key_id_t key,
                                        psa_key_slot_t **p_slot )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
    psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;
 801193e:	f06f 0396 	mvn.w	r3, #150	; 0x96
 8011942:	60fb      	str	r3, [r7, #12]

    *p_slot = NULL;
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	2200      	movs	r2, #0
 8011948:	601a      	str	r2, [r3, #0]
    if( ! global_data.key_slots_initialized )
 801194a:	4b25      	ldr	r3, [pc, #148]	; (80119e0 <psa_get_and_lock_key_slot+0xac>)
 801194c:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8011950:	f003 0301 	and.w	r3, r3, #1
 8011954:	b2db      	uxtb	r3, r3
 8011956:	2b00      	cmp	r3, #0
 8011958:	d102      	bne.n	8011960 <psa_get_and_lock_key_slot+0x2c>
        return( PSA_ERROR_BAD_STATE );
 801195a:	f06f 0388 	mvn.w	r3, #136	; 0x88
 801195e:	e03b      	b.n	80119d8 <psa_get_and_lock_key_slot+0xa4>

    /*
     * On success, the pointer to the slot is passed directly to the caller
     * thus no need to unlock the key slot here.
     */
    status = psa_get_and_lock_key_slot_in_memory( key, p_slot );
 8011960:	6839      	ldr	r1, [r7, #0]
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f7ff feb0 	bl	80116c8 <psa_get_and_lock_key_slot_in_memory>
 8011968:	60f8      	str	r0, [r7, #12]
    if( status != PSA_ERROR_DOES_NOT_EXIST )
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 8011970:	d001      	beq.n	8011976 <psa_get_and_lock_key_slot+0x42>
        return( status );
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	e030      	b.n	80119d8 <psa_get_and_lock_key_slot+0xa4>
    /* Loading keys from storage requires support for such a mechanism */
#if defined(MBEDTLS_PSA_CRYPTO_STORAGE_C) || \
    defined(MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS)
    psa_key_id_t volatile_key_id;

    status = psa_get_empty_key_slot( &volatile_key_id, p_slot );
 8011976:	f107 0308 	add.w	r3, r7, #8
 801197a:	6839      	ldr	r1, [r7, #0]
 801197c:	4618      	mov	r0, r3
 801197e:	f7ff ff11 	bl	80117a4 <psa_get_empty_key_slot>
 8011982:	60f8      	str	r0, [r7, #12]
    if( status != PSA_SUCCESS )
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d001      	beq.n	801198e <psa_get_and_lock_key_slot+0x5a>
        return( status );
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	e024      	b.n	80119d8 <psa_get_and_lock_key_slot+0xa4>

    (*p_slot)->attr.id = key;
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	609a      	str	r2, [r3, #8]
    (*p_slot)->attr.lifetime = PSA_KEY_LIFETIME_PERSISTENT;
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	2201      	movs	r2, #1
 801199c:	605a      	str	r2, [r3, #4]

    status = PSA_ERROR_DOES_NOT_EXIST;
 801199e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80119a2:	60fb      	str	r3, [r7, #12]
    /* Load keys in the 'builtin' range through their own interface */
    status = psa_load_builtin_key_into_slot( *p_slot );
#endif /* MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS */

#if defined(MBEDTLS_PSA_CRYPTO_STORAGE_C)
    if( status == PSA_ERROR_DOES_NOT_EXIST )
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 80119aa:	d105      	bne.n	80119b8 <psa_get_and_lock_key_slot+0x84>
        status = psa_load_persistent_key_into_slot( *p_slot );
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7ff ff77 	bl	80118a4 <psa_load_persistent_key_into_slot>
 80119b6:	60f8      	str	r0, [r7, #12]
#endif /* defined(MBEDTLS_PSA_CRYPTO_STORAGE_C) */

    if( status != PSA_SUCCESS )
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d00b      	beq.n	80119d6 <psa_get_and_lock_key_slot+0xa2>
    {
        psa_wipe_key_slot( *p_slot );
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fe fa65 	bl	800fe92 <psa_wipe_key_slot>
        if( status == PSA_ERROR_DOES_NOT_EXIST )
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 80119ce:	d102      	bne.n	80119d6 <psa_get_and_lock_key_slot+0xa2>
            status = PSA_ERROR_INVALID_HANDLE;
 80119d0:	f06f 0387 	mvn.w	r3, #135	; 0x87
 80119d4:	60fb      	str	r3, [r7, #12]
    }
    return( status );
 80119d6:	68fb      	ldr	r3, [r7, #12]
#else /* MBEDTLS_PSA_CRYPTO_STORAGE_C || MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS */
    return( PSA_ERROR_INVALID_HANDLE );
#endif /* MBEDTLS_PSA_CRYPTO_STORAGE_C || MBEDTLS_PSA_CRYPTO_BUILTIN_KEYS */
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	20002398 	.word	0x20002398

080119e4 <psa_unlock_key_slot>:

psa_status_t psa_unlock_key_slot( psa_key_slot_t *slot )
{
 80119e4:	b480      	push	{r7}
 80119e6:	b083      	sub	sp, #12
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d101      	bne.n	80119f6 <psa_unlock_key_slot+0x12>
        return( PSA_SUCCESS );
 80119f2:	2300      	movs	r3, #0
 80119f4:	e00c      	b.n	8011a10 <psa_unlock_key_slot+0x2c>

    if( slot->lock_count > 0 )
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	69db      	ldr	r3, [r3, #28]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d006      	beq.n	8011a0c <psa_unlock_key_slot+0x28>
    {
        slot->lock_count--;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	69db      	ldr	r3, [r3, #28]
 8011a02:	1e5a      	subs	r2, r3, #1
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	61da      	str	r2, [r3, #28]
        return( PSA_SUCCESS );
 8011a08:	2300      	movs	r3, #0
 8011a0a:	e001      	b.n	8011a10 <psa_unlock_key_slot+0x2c>
     */
#ifdef MBEDTLS_CHECK_PARAMS
    MBEDTLS_PARAM_FAILED( slot->lock_count > 0 );
#endif

    return( PSA_ERROR_CORRUPTION_DETECTED );
 8011a0c:	f06f 0396 	mvn.w	r3, #150	; 0x96
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	370c      	adds	r7, #12
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr

08011a1c <psa_validate_key_location>:

psa_status_t psa_validate_key_location( psa_key_lifetime_t lifetime,
                                        psa_se_drv_table_entry_t **p_drv )
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
    if ( psa_key_lifetime_is_external( lifetime ) )
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7ff fe1a 	bl	8011660 <psa_key_lifetime_is_external>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d011      	beq.n	8011a56 <psa_validate_key_location+0x3a>
    {
#if defined(MBEDTLS_PSA_CRYPTO_SE_C)
        /* Check whether a driver is registered against this lifetime */
        psa_se_drv_table_entry_t *driver = psa_get_se_driver_entry( lifetime );
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f7ff fc86 	bl	8011344 <psa_get_se_driver_entry>
 8011a38:	60f8      	str	r0, [r7, #12]
        if( driver != NULL )
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d007      	beq.n	8011a50 <psa_validate_key_location+0x34>
        {
            if (p_drv != NULL)
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d002      	beq.n	8011a4c <psa_validate_key_location+0x30>
                *p_drv = driver;
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	601a      	str	r2, [r3, #0]
            return( PSA_SUCCESS );
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	e003      	b.n	8011a58 <psa_validate_key_location+0x3c>
        /* Key location for external keys gets checked by the wrapper */
        return( PSA_SUCCESS );
#else /* MBEDTLS_PSA_CRYPTO_DRIVERS */
        /* No support for external lifetimes at all, or dynamic interface
         * did not find driver for requested lifetime. */
        return( PSA_ERROR_INVALID_ARGUMENT );
 8011a50:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8011a54:	e000      	b.n	8011a58 <psa_validate_key_location+0x3c>
#endif /* MBEDTLS_PSA_CRYPTO_DRIVERS */
    }
    else
        /* Local/internal keys are always valid */
        return( PSA_SUCCESS );
 8011a56:	2300      	movs	r3, #0
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <psa_validate_key_persistence>:

psa_status_t psa_validate_key_persistence( psa_key_lifetime_t lifetime )
{
 8011a60:	b480      	push	{r7}
 8011a62:	b083      	sub	sp, #12
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
    if ( PSA_KEY_LIFETIME_IS_VOLATILE( lifetime ) )
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	b2db      	uxtb	r3, r3
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d101      	bne.n	8011a74 <psa_validate_key_persistence+0x14>
    {
        /* Volatile keys are always supported */
        return( PSA_SUCCESS );
 8011a70:	2300      	movs	r3, #0
 8011a72:	e000      	b.n	8011a76 <psa_validate_key_persistence+0x16>
    }
    else
    {
        /* Persistent keys require storage support */
#if defined(MBEDTLS_PSA_CRYPTO_STORAGE_C)
        return( PSA_SUCCESS );
 8011a74:	2300      	movs	r3, #0
#else /* MBEDTLS_PSA_CRYPTO_STORAGE_C */
        return( PSA_ERROR_NOT_SUPPORTED );
#endif /* !MBEDTLS_PSA_CRYPTO_STORAGE_C */
    }
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	370c      	adds	r7, #12
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a80:	4770      	bx	lr

08011a82 <psa_its_identifier_of_slot>:
 * The file name must be distinct from any file that is used for a purpose
 * other than storing a key. Currently, the only such file is the random seed
 * file whose name is PSA_CRYPTO_ITS_RANDOM_SEED_UID and whose value is
 * 0xFFFFFF52. */
static psa_storage_uid_t psa_its_identifier_of_slot( mbedtls_svc_key_id_t key )
{
 8011a82:	b490      	push	{r4, r7}
 8011a84:	b082      	sub	sp, #8
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	6078      	str	r0, [r7, #4]
#else
    /* Use the key id directly as a file name.
     * psa_is_key_id_valid() in psa_crypto_slot_management.c
     * is responsible for ensuring that key identifiers do not have a
     * value that is reserved for non-key files. */
    return( key );
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f04f 0400 	mov.w	r4, #0
#endif
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	4621      	mov	r1, r4
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bc90      	pop	{r4, r7}
 8011a9a:	4770      	bx	lr

08011a9c <psa_crypto_storage_load>:
 * \retval #PSA_ERROR_STORAGE_FAILURE
 * \retval #PSA_ERROR_DOES_NOT_EXIST
 */
static psa_status_t psa_crypto_storage_load(
    const mbedtls_svc_key_id_t key, uint8_t *data, size_t data_size )
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b08c      	sub	sp, #48	; 0x30
 8011aa0:	af02      	add	r7, sp, #8
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]
    psa_status_t status;
    psa_storage_uid_t data_identifier = psa_its_identifier_of_slot( key );
 8011aa8:	68f8      	ldr	r0, [r7, #12]
 8011aaa:	f7ff ffea 	bl	8011a82 <psa_its_identifier_of_slot>
 8011aae:	e9c7 0108 	strd	r0, r1, [r7, #32]
    struct psa_storage_info_t data_identifier_info;
    size_t data_length = 0;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	613b      	str	r3, [r7, #16]

    status = psa_its_get_info( data_identifier, &data_identifier_info );
 8011ab6:	f107 0314 	add.w	r3, r7, #20
 8011aba:	461a      	mov	r2, r3
 8011abc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011ac0:	f000 fbda 	bl	8012278 <psa_its_get_info>
 8011ac4:	61f8      	str	r0, [r7, #28]
    if( status  != PSA_SUCCESS )
 8011ac6:	69fb      	ldr	r3, [r7, #28]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d001      	beq.n	8011ad0 <psa_crypto_storage_load+0x34>
        return( status );
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	e013      	b.n	8011af8 <psa_crypto_storage_load+0x5c>

    status = psa_its_get( data_identifier, 0, (uint32_t) data_size, data, &data_length );
 8011ad0:	f107 0310 	add.w	r3, r7, #16
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2200      	movs	r2, #0
 8011ade:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011ae2:	f000 fbe5 	bl	80122b0 <psa_its_get>
 8011ae6:	61f8      	str	r0, [r7, #28]
    if( data_size  != data_length )
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	687a      	ldr	r2, [r7, #4]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d002      	beq.n	8011af6 <psa_crypto_storage_load+0x5a>
        return( PSA_ERROR_DATA_INVALID );
 8011af0:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8011af4:	e000      	b.n	8011af8 <psa_crypto_storage_load+0x5c>

    return( status );
 8011af6:	69fb      	ldr	r3, [r7, #28]
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3728      	adds	r7, #40	; 0x28
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <psa_is_key_present_in_storage>:

int psa_is_key_present_in_storage( const mbedtls_svc_key_id_t key )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b088      	sub	sp, #32
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
    psa_status_t ret;
    psa_storage_uid_t data_identifier = psa_its_identifier_of_slot( key );
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f7ff ffba 	bl	8011a82 <psa_its_identifier_of_slot>
 8011b0e:	e9c7 0106 	strd	r0, r1, [r7, #24]
    struct psa_storage_info_t data_identifier_info;

    ret = psa_its_get_info( data_identifier, &data_identifier_info );
 8011b12:	f107 030c 	add.w	r3, r7, #12
 8011b16:	461a      	mov	r2, r3
 8011b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011b1c:	f000 fbac 	bl	8012278 <psa_its_get_info>
 8011b20:	6178      	str	r0, [r7, #20]

    if( ret == PSA_ERROR_DOES_NOT_EXIST )
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 8011b28:	d101      	bne.n	8011b2e <psa_is_key_present_in_storage+0x2e>
        return( 0 );
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	e000      	b.n	8011b30 <psa_is_key_present_in_storage+0x30>
    return( 1 );
 8011b2e:	2301      	movs	r3, #1
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3720      	adds	r7, #32
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <psa_crypto_storage_store>:
 * \retval #PSA_ERROR_DATA_INVALID
 */
static psa_status_t psa_crypto_storage_store( const mbedtls_svc_key_id_t key,
                                              const uint8_t *data,
                                              size_t data_length )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b08c      	sub	sp, #48	; 0x30
 8011b3c:	af02      	add	r7, sp, #8
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
    psa_status_t status;
    psa_storage_uid_t data_identifier = psa_its_identifier_of_slot( key );
 8011b44:	68f8      	ldr	r0, [r7, #12]
 8011b46:	f7ff ff9c 	bl	8011a82 <psa_its_identifier_of_slot>
 8011b4a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    struct psa_storage_info_t data_identifier_info;

    if( psa_is_key_present_in_storage( key ) == 1 )
 8011b4e:	68f8      	ldr	r0, [r7, #12]
 8011b50:	f7ff ffd6 	bl	8011b00 <psa_is_key_present_in_storage>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d102      	bne.n	8011b60 <psa_crypto_storage_store+0x28>
        return( PSA_ERROR_ALREADY_EXISTS );
 8011b5a:	f06f 038a 	mvn.w	r3, #138	; 0x8a
 8011b5e:	e02c      	b.n	8011bba <psa_crypto_storage_store+0x82>

    status = psa_its_set( data_identifier, (uint32_t) data_length, data, 0 );
 8011b60:	2300      	movs	r3, #0
 8011b62:	9300      	str	r3, [sp, #0]
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	687a      	ldr	r2, [r7, #4]
 8011b68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011b6c:	f000 fc10 	bl	8012390 <psa_its_set>
 8011b70:	6278      	str	r0, [r7, #36]	; 0x24
    if( status != PSA_SUCCESS )
 8011b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d002      	beq.n	8011b7e <psa_crypto_storage_store+0x46>
    {
        return( PSA_ERROR_DATA_INVALID );
 8011b78:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8011b7c:	e01d      	b.n	8011bba <psa_crypto_storage_store+0x82>
    }

    status = psa_its_get_info( data_identifier, &data_identifier_info );
 8011b7e:	f107 0310 	add.w	r3, r7, #16
 8011b82:	461a      	mov	r2, r3
 8011b84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011b88:	f000 fb76 	bl	8012278 <psa_its_get_info>
 8011b8c:	6278      	str	r0, [r7, #36]	; 0x24
    if( status != PSA_SUCCESS )
 8011b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d107      	bne.n	8011ba4 <psa_crypto_storage_store+0x6c>
    {
        goto exit;
    }

    if( data_identifier_info.size != data_length )
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d005      	beq.n	8011ba8 <psa_crypto_storage_store+0x70>
    {
        status = PSA_ERROR_DATA_INVALID;
 8011b9c:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8011ba0:	627b      	str	r3, [r7, #36]	; 0x24
        goto exit;
 8011ba2:	e002      	b.n	8011baa <psa_crypto_storage_store+0x72>
        goto exit;
 8011ba4:	bf00      	nop
 8011ba6:	e000      	b.n	8011baa <psa_crypto_storage_store+0x72>
    }

exit:
 8011ba8:	bf00      	nop
    if( status != PSA_SUCCESS )
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d003      	beq.n	8011bb8 <psa_crypto_storage_store+0x80>
    {
        /* Remove the file in case we managed to create it but something
         * went wrong. It's ok if the file doesn't exist. If the file exists
         * but the removal fails, we're already reporting an error so there's
         * nothing else we can do. */
        (void) psa_its_remove( data_identifier );
 8011bb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011bb4:	f000 fc82 	bl	80124bc <psa_its_remove>
    }
    return( status );
 8011bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3728      	adds	r7, #40	; 0x28
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <psa_destroy_persistent_key>:

psa_status_t psa_destroy_persistent_key( const mbedtls_svc_key_id_t key )
{
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b088      	sub	sp, #32
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
    psa_status_t ret;
    psa_storage_uid_t data_identifier = psa_its_identifier_of_slot( key );
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f7ff ff59 	bl	8011a82 <psa_its_identifier_of_slot>
 8011bd0:	e9c7 0106 	strd	r0, r1, [r7, #24]
    struct psa_storage_info_t data_identifier_info;

    ret = psa_its_get_info( data_identifier, &data_identifier_info );
 8011bd4:	f107 030c 	add.w	r3, r7, #12
 8011bd8:	461a      	mov	r2, r3
 8011bda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011bde:	f000 fb4b 	bl	8012278 <psa_its_get_info>
 8011be2:	6178      	str	r0, [r7, #20]
    if( ret == PSA_ERROR_DOES_NOT_EXIST )
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 8011bea:	d101      	bne.n	8011bf0 <psa_destroy_persistent_key+0x2e>
        return( PSA_SUCCESS );
 8011bec:	2300      	movs	r3, #0
 8011bee:	e019      	b.n	8011c24 <psa_destroy_persistent_key+0x62>

    if( psa_its_remove( data_identifier ) != PSA_SUCCESS )
 8011bf0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011bf4:	f000 fc62 	bl	80124bc <psa_its_remove>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d002      	beq.n	8011c04 <psa_destroy_persistent_key+0x42>
        return( PSA_ERROR_DATA_INVALID );
 8011bfe:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8011c02:	e00f      	b.n	8011c24 <psa_destroy_persistent_key+0x62>

    ret = psa_its_get_info( data_identifier, &data_identifier_info );
 8011c04:	f107 030c 	add.w	r3, r7, #12
 8011c08:	461a      	mov	r2, r3
 8011c0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011c0e:	f000 fb33 	bl	8012278 <psa_its_get_info>
 8011c12:	6178      	str	r0, [r7, #20]
    if( ret != PSA_ERROR_DOES_NOT_EXIST )
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 8011c1a:	d002      	beq.n	8011c22 <psa_destroy_persistent_key+0x60>
        return( PSA_ERROR_DATA_INVALID );
 8011c1c:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8011c20:	e000      	b.n	8011c24 <psa_destroy_persistent_key+0x62>

    return( PSA_SUCCESS );
 8011c22:	2300      	movs	r3, #0
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3720      	adds	r7, #32
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}

08011c2c <psa_crypto_storage_get_data_length>:
 * \retval #PSA_ERROR_DATA_CORRUPT
 */
static psa_status_t psa_crypto_storage_get_data_length(
    const mbedtls_svc_key_id_t key,
    size_t *data_length )
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b088      	sub	sp, #32
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
    psa_status_t status;
    psa_storage_uid_t data_identifier = psa_its_identifier_of_slot( key );
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7ff ff23 	bl	8011a82 <psa_its_identifier_of_slot>
 8011c3c:	e9c7 0106 	strd	r0, r1, [r7, #24]
    struct psa_storage_info_t data_identifier_info;

    status = psa_its_get_info( data_identifier, &data_identifier_info );
 8011c40:	f107 030c 	add.w	r3, r7, #12
 8011c44:	461a      	mov	r2, r3
 8011c46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011c4a:	f000 fb15 	bl	8012278 <psa_its_get_info>
 8011c4e:	6178      	str	r0, [r7, #20]
    if( status != PSA_SUCCESS )
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d001      	beq.n	8011c5a <psa_crypto_storage_get_data_length+0x2e>
        return( status );
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	e003      	b.n	8011c62 <psa_crypto_storage_get_data_length+0x36>

    *data_length = (size_t) data_identifier_info.size;
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	601a      	str	r2, [r3, #0]

    return( PSA_SUCCESS );
 8011c60:	2300      	movs	r3, #0
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	3720      	adds	r7, #32
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
	...

08011c6c <psa_format_key_data_for_storage>:

void psa_format_key_data_for_storage( const uint8_t *data,
                                      const size_t data_length,
                                      const psa_core_key_attributes_t *attr,
                                      uint8_t *storage_data )
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	607a      	str	r2, [r7, #4]
 8011c78:	603b      	str	r3, [r7, #0]
    psa_persistent_key_storage_format *storage_format =
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	617b      	str	r3, [r7, #20]
        (psa_persistent_key_storage_format *) storage_data;

    memcpy( storage_format->magic, PSA_KEY_STORAGE_MAGIC_HEADER, PSA_KEY_STORAGE_MAGIC_HEADER_LENGTH );
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	2208      	movs	r2, #8
 8011c82:	4953      	ldr	r1, [pc, #332]	; (8011dd0 <psa_format_key_data_for_storage+0x164>)
 8011c84:	4618      	mov	r0, r3
 8011c86:	f003 fa48 	bl	801511a <memcpy>
    PUT_UINT32_LE( 0, storage_format->version, 0 );
 8011c8a:	697b      	ldr	r3, [r7, #20]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	721a      	strb	r2, [r3, #8]
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	2200      	movs	r2, #0
 8011c94:	725a      	strb	r2, [r3, #9]
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	729a      	strb	r2, [r3, #10]
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	72da      	strb	r2, [r3, #11]
    PUT_UINT32_LE( attr->lifetime, storage_format->lifetime, 0 );
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	b2da      	uxtb	r2, r3
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	731a      	strb	r2, [r3, #12]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	0a1b      	lsrs	r3, r3, #8
 8011cb2:	b2da      	uxtb	r2, r3
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	735a      	strb	r2, [r3, #13]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	0c1b      	lsrs	r3, r3, #16
 8011cbe:	b2da      	uxtb	r2, r3
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	739a      	strb	r2, [r3, #14]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	0e1b      	lsrs	r3, r3, #24
 8011cca:	b2da      	uxtb	r2, r3
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	73da      	strb	r2, [r3, #15]
    PUT_UINT16_LE( (uint16_t) attr->type, storage_format->type, 0 );
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	881b      	ldrh	r3, [r3, #0]
 8011cd4:	b2da      	uxtb	r2, r3
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	741a      	strb	r2, [r3, #16]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	881b      	ldrh	r3, [r3, #0]
 8011cde:	0a1b      	lsrs	r3, r3, #8
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	b2da      	uxtb	r2, r3
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	745a      	strb	r2, [r3, #17]
    PUT_UINT16_LE( (uint16_t) attr->bits, storage_format->bits, 0 );
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	885b      	ldrh	r3, [r3, #2]
 8011cec:	b2da      	uxtb	r2, r3
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	749a      	strb	r2, [r3, #18]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	885b      	ldrh	r3, [r3, #2]
 8011cf6:	0a1b      	lsrs	r3, r3, #8
 8011cf8:	b29b      	uxth	r3, r3
 8011cfa:	b2da      	uxtb	r2, r3
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	74da      	strb	r2, [r3, #19]
    PUT_UINT32_LE( attr->policy.usage, storage_format->policy, 0 );
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	b2da      	uxtb	r2, r3
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	751a      	strb	r2, [r3, #20]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	0a1b      	lsrs	r3, r3, #8
 8011d10:	b2da      	uxtb	r2, r3
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	755a      	strb	r2, [r3, #21]
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	0c1b      	lsrs	r3, r3, #16
 8011d1c:	b2da      	uxtb	r2, r3
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	759a      	strb	r2, [r3, #22]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	68db      	ldr	r3, [r3, #12]
 8011d26:	0e1b      	lsrs	r3, r3, #24
 8011d28:	b2da      	uxtb	r2, r3
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	75da      	strb	r2, [r3, #23]
    PUT_UINT32_LE( attr->policy.alg, storage_format->policy, sizeof( uint32_t ) );
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	691b      	ldr	r3, [r3, #16]
 8011d32:	b2da      	uxtb	r2, r3
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	761a      	strb	r2, [r3, #24]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	691b      	ldr	r3, [r3, #16]
 8011d3c:	0a1b      	lsrs	r3, r3, #8
 8011d3e:	b2da      	uxtb	r2, r3
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	765a      	strb	r2, [r3, #25]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	691b      	ldr	r3, [r3, #16]
 8011d48:	0c1b      	lsrs	r3, r3, #16
 8011d4a:	b2da      	uxtb	r2, r3
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	769a      	strb	r2, [r3, #26]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	691b      	ldr	r3, [r3, #16]
 8011d54:	0e1b      	lsrs	r3, r3, #24
 8011d56:	b2da      	uxtb	r2, r3
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	76da      	strb	r2, [r3, #27]
    PUT_UINT32_LE( attr->policy.alg2, storage_format->policy, 2 * sizeof( uint32_t ) );
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	695b      	ldr	r3, [r3, #20]
 8011d60:	b2da      	uxtb	r2, r3
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	771a      	strb	r2, [r3, #28]
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	695b      	ldr	r3, [r3, #20]
 8011d6a:	0a1b      	lsrs	r3, r3, #8
 8011d6c:	b2da      	uxtb	r2, r3
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	775a      	strb	r2, [r3, #29]
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	695b      	ldr	r3, [r3, #20]
 8011d76:	0c1b      	lsrs	r3, r3, #16
 8011d78:	b2da      	uxtb	r2, r3
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	779a      	strb	r2, [r3, #30]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	695b      	ldr	r3, [r3, #20]
 8011d82:	0e1b      	lsrs	r3, r3, #24
 8011d84:	b2da      	uxtb	r2, r3
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	77da      	strb	r2, [r3, #31]
    PUT_UINT32_LE( data_length, storage_format->data_len, 0 );
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	b2da      	uxtb	r2, r3
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	f883 2020 	strb.w	r2, [r3, #32]
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	0a1b      	lsrs	r3, r3, #8
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	0c1b      	lsrs	r3, r3, #16
 8011da4:	b2da      	uxtb	r2, r3
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	0e1b      	lsrs	r3, r3, #24
 8011db0:	b2da      	uxtb	r2, r3
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    memcpy( storage_format->key_data, data, data_length );
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	3324      	adds	r3, #36	; 0x24
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	68f9      	ldr	r1, [r7, #12]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f003 f9aa 	bl	801511a <memcpy>
}
 8011dc6:	bf00      	nop
 8011dc8:	3718      	adds	r7, #24
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}
 8011dce:	bf00      	nop
 8011dd0:	08016ac0 	.word	0x08016ac0

08011dd4 <check_magic_header>:

static psa_status_t check_magic_header( const uint8_t *data )
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
    if( memcmp( data, PSA_KEY_STORAGE_MAGIC_HEADER,
 8011ddc:	2208      	movs	r2, #8
 8011dde:	4907      	ldr	r1, [pc, #28]	; (8011dfc <check_magic_header+0x28>)
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f003 f98b 	bl	80150fc <memcmp>
 8011de6:	4603      	mov	r3, r0
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d002      	beq.n	8011df2 <check_magic_header+0x1e>
                PSA_KEY_STORAGE_MAGIC_HEADER_LENGTH ) != 0 )
        return( PSA_ERROR_DATA_INVALID );
 8011dec:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8011df0:	e000      	b.n	8011df4 <check_magic_header+0x20>
    return( PSA_SUCCESS );
 8011df2:	2300      	movs	r3, #0
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3708      	adds	r7, #8
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	08016ac0 	.word	0x08016ac0

08011e00 <psa_parse_key_data_from_storage>:
psa_status_t psa_parse_key_data_from_storage( const uint8_t *storage_data,
                                              size_t storage_data_length,
                                              uint8_t **key_data,
                                              size_t *key_data_length,
                                              psa_core_key_attributes_t *attr )
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b088      	sub	sp, #32
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
 8011e0c:	603b      	str	r3, [r7, #0]
    psa_status_t status;
    const psa_persistent_key_storage_format *storage_format =
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	61fb      	str	r3, [r7, #28]
        (const psa_persistent_key_storage_format *)storage_data;
    uint32_t version;

    if( storage_data_length < sizeof(*storage_format) )
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	2b23      	cmp	r3, #35	; 0x23
 8011e16:	d802      	bhi.n	8011e1e <psa_parse_key_data_from_storage+0x1e>
        return( PSA_ERROR_DATA_INVALID );
 8011e18:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8011e1c:	e0c1      	b.n	8011fa2 <psa_parse_key_data_from_storage+0x1a2>

    status = check_magic_header( storage_data );
 8011e1e:	68f8      	ldr	r0, [r7, #12]
 8011e20:	f7ff ffd8 	bl	8011dd4 <check_magic_header>
 8011e24:	61b8      	str	r0, [r7, #24]
    if( status != PSA_SUCCESS )
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d001      	beq.n	8011e30 <psa_parse_key_data_from_storage+0x30>
        return( status );
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	e0b8      	b.n	8011fa2 <psa_parse_key_data_from_storage+0x1a2>

    GET_UINT32_LE( version, storage_format->version, 0 );
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	7a1b      	ldrb	r3, [r3, #8]
 8011e34:	461a      	mov	r2, r3
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	7a5b      	ldrb	r3, [r3, #9]
 8011e3a:	021b      	lsls	r3, r3, #8
 8011e3c:	431a      	orrs	r2, r3
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	7a9b      	ldrb	r3, [r3, #10]
 8011e42:	041b      	lsls	r3, r3, #16
 8011e44:	431a      	orrs	r2, r3
 8011e46:	69fb      	ldr	r3, [r7, #28]
 8011e48:	7adb      	ldrb	r3, [r3, #11]
 8011e4a:	061b      	lsls	r3, r3, #24
 8011e4c:	4313      	orrs	r3, r2
 8011e4e:	617b      	str	r3, [r7, #20]
    if( version != 0 )
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d002      	beq.n	8011e5c <psa_parse_key_data_from_storage+0x5c>
        return( PSA_ERROR_DATA_INVALID );
 8011e56:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8011e5a:	e0a2      	b.n	8011fa2 <psa_parse_key_data_from_storage+0x1a2>

    GET_UINT32_LE( *key_data_length, storage_format->data_len, 0 );
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011e62:	461a      	mov	r2, r3
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011e6a:	021b      	lsls	r3, r3, #8
 8011e6c:	431a      	orrs	r2, r3
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011e74:	041b      	lsls	r3, r3, #16
 8011e76:	431a      	orrs	r2, r3
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011e7e:	061b      	lsls	r3, r3, #24
 8011e80:	431a      	orrs	r2, r3
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	601a      	str	r2, [r3, #0]
    if( *key_data_length > ( storage_data_length - sizeof(*storage_format) ) ||
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	3b24      	subs	r3, #36	; 0x24
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	d804      	bhi.n	8011e9c <psa_parse_key_data_from_storage+0x9c>
        *key_data_length > PSA_CRYPTO_MAX_STORAGE_SIZE )
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	681b      	ldr	r3, [r3, #0]
    if( *key_data_length > ( storage_data_length - sizeof(*storage_format) ) ||
 8011e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011e9a:	d302      	bcc.n	8011ea2 <psa_parse_key_data_from_storage+0xa2>
        return( PSA_ERROR_DATA_INVALID );
 8011e9c:	f06f 0398 	mvn.w	r3, #152	; 0x98
 8011ea0:	e07f      	b.n	8011fa2 <psa_parse_key_data_from_storage+0x1a2>

    if( *key_data_length == 0 )
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d103      	bne.n	8011eb2 <psa_parse_key_data_from_storage+0xb2>
    {
        *key_data = NULL;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2200      	movs	r2, #0
 8011eae:	601a      	str	r2, [r3, #0]
 8011eb0:	e01a      	b.n	8011ee8 <psa_parse_key_data_from_storage+0xe8>
    }
    else
    {
        *key_data = mbedtls_calloc( 1, *key_data_length );
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	2001      	movs	r0, #1
 8011eba:	f002 fcd7 	bl	801486c <calloc>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	601a      	str	r2, [r3, #0]
        if( *key_data == NULL )
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d102      	bne.n	8011ed4 <psa_parse_key_data_from_storage+0xd4>
            return( PSA_ERROR_INSUFFICIENT_MEMORY );
 8011ece:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 8011ed2:	e066      	b.n	8011fa2 <psa_parse_key_data_from_storage+0x1a2>
        memcpy( *key_data, storage_format->key_data, *key_data_length );
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6818      	ldr	r0, [r3, #0]
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	f003 f919 	bl	801511a <memcpy>
    }

    GET_UINT32_LE( attr->lifetime, storage_format->lifetime, 0 );
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	7b1b      	ldrb	r3, [r3, #12]
 8011eec:	461a      	mov	r2, r3
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	7b5b      	ldrb	r3, [r3, #13]
 8011ef2:	021b      	lsls	r3, r3, #8
 8011ef4:	431a      	orrs	r2, r3
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	7b9b      	ldrb	r3, [r3, #14]
 8011efa:	041b      	lsls	r3, r3, #16
 8011efc:	431a      	orrs	r2, r3
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	7bdb      	ldrb	r3, [r3, #15]
 8011f02:	061b      	lsls	r3, r3, #24
 8011f04:	431a      	orrs	r2, r3
 8011f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f08:	605a      	str	r2, [r3, #4]
    GET_UINT16_LE( attr->type, storage_format->type, 0 );
 8011f0a:	69fb      	ldr	r3, [r7, #28]
 8011f0c:	7c1b      	ldrb	r3, [r3, #16]
 8011f0e:	b21a      	sxth	r2, r3
 8011f10:	69fb      	ldr	r3, [r7, #28]
 8011f12:	7c5b      	ldrb	r3, [r3, #17]
 8011f14:	021b      	lsls	r3, r3, #8
 8011f16:	b21b      	sxth	r3, r3
 8011f18:	4313      	orrs	r3, r2
 8011f1a:	b21b      	sxth	r3, r3
 8011f1c:	b29a      	uxth	r2, r3
 8011f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f20:	801a      	strh	r2, [r3, #0]
    GET_UINT16_LE( attr->bits, storage_format->bits, 0 );
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	7c9b      	ldrb	r3, [r3, #18]
 8011f26:	b21a      	sxth	r2, r3
 8011f28:	69fb      	ldr	r3, [r7, #28]
 8011f2a:	7cdb      	ldrb	r3, [r3, #19]
 8011f2c:	021b      	lsls	r3, r3, #8
 8011f2e:	b21b      	sxth	r3, r3
 8011f30:	4313      	orrs	r3, r2
 8011f32:	b21b      	sxth	r3, r3
 8011f34:	b29a      	uxth	r2, r3
 8011f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f38:	805a      	strh	r2, [r3, #2]
    GET_UINT32_LE( attr->policy.usage, storage_format->policy, 0 );
 8011f3a:	69fb      	ldr	r3, [r7, #28]
 8011f3c:	7d1b      	ldrb	r3, [r3, #20]
 8011f3e:	461a      	mov	r2, r3
 8011f40:	69fb      	ldr	r3, [r7, #28]
 8011f42:	7d5b      	ldrb	r3, [r3, #21]
 8011f44:	021b      	lsls	r3, r3, #8
 8011f46:	431a      	orrs	r2, r3
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	7d9b      	ldrb	r3, [r3, #22]
 8011f4c:	041b      	lsls	r3, r3, #16
 8011f4e:	431a      	orrs	r2, r3
 8011f50:	69fb      	ldr	r3, [r7, #28]
 8011f52:	7ddb      	ldrb	r3, [r3, #23]
 8011f54:	061b      	lsls	r3, r3, #24
 8011f56:	431a      	orrs	r2, r3
 8011f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f5a:	60da      	str	r2, [r3, #12]
    GET_UINT32_LE( attr->policy.alg, storage_format->policy, sizeof( uint32_t ) );
 8011f5c:	69fb      	ldr	r3, [r7, #28]
 8011f5e:	7e1b      	ldrb	r3, [r3, #24]
 8011f60:	461a      	mov	r2, r3
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	7e5b      	ldrb	r3, [r3, #25]
 8011f66:	021b      	lsls	r3, r3, #8
 8011f68:	431a      	orrs	r2, r3
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	7e9b      	ldrb	r3, [r3, #26]
 8011f6e:	041b      	lsls	r3, r3, #16
 8011f70:	431a      	orrs	r2, r3
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	7edb      	ldrb	r3, [r3, #27]
 8011f76:	061b      	lsls	r3, r3, #24
 8011f78:	431a      	orrs	r2, r3
 8011f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f7c:	611a      	str	r2, [r3, #16]
    GET_UINT32_LE( attr->policy.alg2, storage_format->policy, 2 * sizeof( uint32_t ) );
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	7f1b      	ldrb	r3, [r3, #28]
 8011f82:	461a      	mov	r2, r3
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	7f5b      	ldrb	r3, [r3, #29]
 8011f88:	021b      	lsls	r3, r3, #8
 8011f8a:	431a      	orrs	r2, r3
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	7f9b      	ldrb	r3, [r3, #30]
 8011f90:	041b      	lsls	r3, r3, #16
 8011f92:	431a      	orrs	r2, r3
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	7fdb      	ldrb	r3, [r3, #31]
 8011f98:	061b      	lsls	r3, r3, #24
 8011f9a:	431a      	orrs	r2, r3
 8011f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f9e:	615a      	str	r2, [r3, #20]

    return( PSA_SUCCESS );
 8011fa0:	2300      	movs	r3, #0
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3720      	adds	r7, #32
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}

08011faa <psa_save_persistent_key>:

psa_status_t psa_save_persistent_key( const psa_core_key_attributes_t *attr,
                                      const uint8_t *data,
                                      const size_t data_length )
{
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b088      	sub	sp, #32
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	60f8      	str	r0, [r7, #12]
 8011fb2:	60b9      	str	r1, [r7, #8]
 8011fb4:	607a      	str	r2, [r7, #4]
    size_t storage_data_length;
    uint8_t *storage_data;
    psa_status_t status;

    /* All keys saved to persistent storage always have a key context */
    if( data == NULL || data_length == 0 )
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d002      	beq.n	8011fc2 <psa_save_persistent_key+0x18>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d102      	bne.n	8011fc8 <psa_save_persistent_key+0x1e>
        return( PSA_ERROR_INVALID_ARGUMENT );
 8011fc2:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8011fc6:	e027      	b.n	8012018 <psa_save_persistent_key+0x6e>

    if( data_length > PSA_CRYPTO_MAX_STORAGE_SIZE )
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011fce:	d302      	bcc.n	8011fd6 <psa_save_persistent_key+0x2c>
        return( PSA_ERROR_INSUFFICIENT_STORAGE );
 8011fd0:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 8011fd4:	e020      	b.n	8012018 <psa_save_persistent_key+0x6e>
    storage_data_length = data_length + sizeof( psa_persistent_key_storage_format );
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	3324      	adds	r3, #36	; 0x24
 8011fda:	61fb      	str	r3, [r7, #28]

    storage_data = mbedtls_calloc( 1, storage_data_length );
 8011fdc:	69f9      	ldr	r1, [r7, #28]
 8011fde:	2001      	movs	r0, #1
 8011fe0:	f002 fc44 	bl	801486c <calloc>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	61bb      	str	r3, [r7, #24]
    if( storage_data == NULL )
 8011fe8:	69bb      	ldr	r3, [r7, #24]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d102      	bne.n	8011ff4 <psa_save_persistent_key+0x4a>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 8011fee:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 8011ff2:	e011      	b.n	8012018 <psa_save_persistent_key+0x6e>

    psa_format_key_data_for_storage( data, data_length, attr, storage_data );
 8011ff4:	69bb      	ldr	r3, [r7, #24]
 8011ff6:	68fa      	ldr	r2, [r7, #12]
 8011ff8:	6879      	ldr	r1, [r7, #4]
 8011ffa:	68b8      	ldr	r0, [r7, #8]
 8011ffc:	f7ff fe36 	bl	8011c6c <psa_format_key_data_for_storage>

    status = psa_crypto_storage_store( attr->id,
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	69fa      	ldr	r2, [r7, #28]
 8012006:	69b9      	ldr	r1, [r7, #24]
 8012008:	4618      	mov	r0, r3
 801200a:	f7ff fd95 	bl	8011b38 <psa_crypto_storage_store>
 801200e:	6178      	str	r0, [r7, #20]
                                       storage_data, storage_data_length );

    mbedtls_free( storage_data );
 8012010:	69b8      	ldr	r0, [r7, #24]
 8012012:	f003 f86b 	bl	80150ec <free>

    return( status );
 8012016:	697b      	ldr	r3, [r7, #20]
}
 8012018:	4618      	mov	r0, r3
 801201a:	3720      	adds	r7, #32
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}

08012020 <psa_free_persistent_key_data>:

void psa_free_persistent_key_data( uint8_t *key_data, size_t key_data_length )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]
    if( key_data != NULL )
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d003      	beq.n	8012038 <psa_free_persistent_key_data+0x18>
    {
        mbedtls_platform_zeroize( key_data, key_data_length );
 8012030:	6839      	ldr	r1, [r7, #0]
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7fc f95c 	bl	800e2f0 <mbedtls_platform_zeroize>
    }
    mbedtls_free( key_data );
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f003 f857 	bl	80150ec <free>
}
 801203e:	bf00      	nop
 8012040:	3708      	adds	r7, #8
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}

08012046 <psa_load_persistent_key>:

psa_status_t psa_load_persistent_key( psa_core_key_attributes_t *attr,
                                      uint8_t **data,
                                      size_t *data_length )
{
 8012046:	b580      	push	{r7, lr}
 8012048:	b08a      	sub	sp, #40	; 0x28
 801204a:	af02      	add	r7, sp, #8
 801204c:	60f8      	str	r0, [r7, #12]
 801204e:	60b9      	str	r1, [r7, #8]
 8012050:	607a      	str	r2, [r7, #4]
    psa_status_t status = PSA_SUCCESS;
 8012052:	2300      	movs	r3, #0
 8012054:	61fb      	str	r3, [r7, #28]
    uint8_t *loaded_data;
    size_t storage_data_length = 0;
 8012056:	2300      	movs	r3, #0
 8012058:	613b      	str	r3, [r7, #16]
    mbedtls_svc_key_id_t key = attr->id;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	689b      	ldr	r3, [r3, #8]
 801205e:	61bb      	str	r3, [r7, #24]

    status = psa_crypto_storage_get_data_length( key, &storage_data_length );
 8012060:	f107 0310 	add.w	r3, r7, #16
 8012064:	4619      	mov	r1, r3
 8012066:	69b8      	ldr	r0, [r7, #24]
 8012068:	f7ff fde0 	bl	8011c2c <psa_crypto_storage_get_data_length>
 801206c:	61f8      	str	r0, [r7, #28]
    if( status != PSA_SUCCESS )
 801206e:	69fb      	ldr	r3, [r7, #28]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d001      	beq.n	8012078 <psa_load_persistent_key+0x32>
        return( status );
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	e035      	b.n	80120e4 <psa_load_persistent_key+0x9e>

    loaded_data = mbedtls_calloc( 1, storage_data_length );
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	4619      	mov	r1, r3
 801207c:	2001      	movs	r0, #1
 801207e:	f002 fbf5 	bl	801486c <calloc>
 8012082:	4603      	mov	r3, r0
 8012084:	617b      	str	r3, [r7, #20]

    if( loaded_data == NULL )
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d102      	bne.n	8012092 <psa_load_persistent_key+0x4c>
        return( PSA_ERROR_INSUFFICIENT_MEMORY );
 801208c:	f06f 038c 	mvn.w	r3, #140	; 0x8c
 8012090:	e028      	b.n	80120e4 <psa_load_persistent_key+0x9e>

    status = psa_crypto_storage_load( key, loaded_data, storage_data_length );
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	461a      	mov	r2, r3
 8012096:	6979      	ldr	r1, [r7, #20]
 8012098:	69b8      	ldr	r0, [r7, #24]
 801209a:	f7ff fcff 	bl	8011a9c <psa_crypto_storage_load>
 801209e:	61f8      	str	r0, [r7, #28]
    if( status != PSA_SUCCESS )
 80120a0:	69fb      	ldr	r3, [r7, #28]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d117      	bne.n	80120d6 <psa_load_persistent_key+0x90>
        goto exit;

    status = psa_parse_key_data_from_storage( loaded_data, storage_data_length,
 80120a6:	6939      	ldr	r1, [r7, #16]
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	68ba      	ldr	r2, [r7, #8]
 80120b0:	6978      	ldr	r0, [r7, #20]
 80120b2:	f7ff fea5 	bl	8011e00 <psa_parse_key_data_from_storage>
 80120b6:	61f8      	str	r0, [r7, #28]
                                              data, data_length, attr );

    /* All keys saved to persistent storage always have a key context */
    if( status == PSA_SUCCESS &&
 80120b8:	69fb      	ldr	r3, [r7, #28]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d10d      	bne.n	80120da <psa_load_persistent_key+0x94>
        ( *data == NULL || *data_length == 0 ) )
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	681b      	ldr	r3, [r3, #0]
    if( status == PSA_SUCCESS &&
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d003      	beq.n	80120ce <psa_load_persistent_key+0x88>
        ( *data == NULL || *data_length == 0 ) )
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d105      	bne.n	80120da <psa_load_persistent_key+0x94>
        status = PSA_ERROR_STORAGE_FAILURE;
 80120ce:	f06f 0391 	mvn.w	r3, #145	; 0x91
 80120d2:	61fb      	str	r3, [r7, #28]
 80120d4:	e002      	b.n	80120dc <psa_load_persistent_key+0x96>
        goto exit;
 80120d6:	bf00      	nop
 80120d8:	e000      	b.n	80120dc <psa_load_persistent_key+0x96>

exit:
 80120da:	bf00      	nop
    mbedtls_free( loaded_data );
 80120dc:	6978      	ldr	r0, [r7, #20]
 80120de:	f003 f805 	bl	80150ec <free>
    return( status );
 80120e2:	69fb      	ldr	r3, [r7, #28]
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3720      	adds	r7, #32
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}

080120ec <psa_crypto_save_transaction>:
#if defined(PSA_CRYPTO_STORAGE_HAS_TRANSACTIONS)

psa_crypto_transaction_t psa_crypto_transaction;

psa_status_t psa_crypto_save_transaction( void )
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b086      	sub	sp, #24
 80120f0:	af02      	add	r7, sp, #8
    struct psa_storage_info_t p_info;
    psa_status_t status;
    status = psa_its_get_info( PSA_CRYPTO_ITS_TRANSACTION_UID, &p_info );
 80120f2:	1d3b      	adds	r3, r7, #4
 80120f4:	461a      	mov	r2, r3
 80120f6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 80120fa:	f04f 0100 	mov.w	r1, #0
 80120fe:	f000 f8bb 	bl	8012278 <psa_its_get_info>
 8012102:	60f8      	str	r0, [r7, #12]
    if( status == PSA_SUCCESS )
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d102      	bne.n	8012110 <psa_crypto_save_transaction+0x24>
    {
        /* This shouldn't happen: we're trying to start a transaction while
         * there is still a transaction that hasn't been replayed. */
        return( PSA_ERROR_CORRUPTION_DETECTED );
 801210a:	f06f 0396 	mvn.w	r3, #150	; 0x96
 801210e:	e010      	b.n	8012132 <psa_crypto_save_transaction+0x46>
    }
    else if( status != PSA_ERROR_DOES_NOT_EXIST )
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 8012116:	d001      	beq.n	801211c <psa_crypto_save_transaction+0x30>
        return( status );
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	e00a      	b.n	8012132 <psa_crypto_save_transaction+0x46>
    return( psa_its_set( PSA_CRYPTO_ITS_TRANSACTION_UID,
 801211c:	2300      	movs	r3, #0
 801211e:	9300      	str	r3, [sp, #0]
 8012120:	4b06      	ldr	r3, [pc, #24]	; (801213c <psa_crypto_save_transaction+0x50>)
 8012122:	2218      	movs	r2, #24
 8012124:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 8012128:	f04f 0100 	mov.w	r1, #0
 801212c:	f000 f930 	bl	8012390 <psa_its_set>
 8012130:	4603      	mov	r3, r0
                         sizeof( psa_crypto_transaction ),
                         &psa_crypto_transaction,
                         0 ) );
}
 8012132:	4618      	mov	r0, r3
 8012134:	3710      	adds	r7, #16
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	200028b0 	.word	0x200028b0

08012140 <psa_crypto_stop_transaction>:
        return( PSA_ERROR_DATA_INVALID );
    return( PSA_SUCCESS );
}

psa_status_t psa_crypto_stop_transaction( void )
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
    psa_status_t status = psa_its_remove( PSA_CRYPTO_ITS_TRANSACTION_UID );
 8012146:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 801214a:	f04f 0100 	mov.w	r1, #0
 801214e:	f000 f9b5 	bl	80124bc <psa_its_remove>
 8012152:	6078      	str	r0, [r7, #4]
    /* Whether or not updating the storage succeeded, the transaction is
     * finished now. It's too late to go back, so zero out the in-memory
     * data. */
    memset( &psa_crypto_transaction, 0, sizeof( psa_crypto_transaction ) );
 8012154:	2218      	movs	r2, #24
 8012156:	2100      	movs	r1, #0
 8012158:	4803      	ldr	r0, [pc, #12]	; (8012168 <psa_crypto_stop_transaction+0x28>)
 801215a:	f003 f802 	bl	8015162 <memset>
    return( status );
 801215e:	687b      	ldr	r3, [r7, #4]
}
 8012160:	4618      	mov	r0, r3
 8012162:	3708      	adds	r7, #8
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	200028b0 	.word	0x200028b0

0801216c <psa_its_fill_filename>:
    uint8_t size[sizeof( uint32_t )];
    uint8_t flags[sizeof( psa_storage_create_flags_t )];
} psa_its_file_header_t;

static void psa_its_fill_filename( psa_storage_uid_t uid, char *filename )
{
 801216c:	b590      	push	{r4, r7, lr}
 801216e:	b089      	sub	sp, #36	; 0x24
 8012170:	af04      	add	r7, sp, #16
 8012172:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
    /* Break up the UID into two 32-bit pieces so as not to rely on
     * long long support in snprintf. */
    mbedtls_snprintf( filename, PSA_ITS_STORAGE_FILENAME_LENGTH,
                      "%s" PSA_ITS_STORAGE_FILENAME_PATTERN "%s",
                      PSA_ITS_STORAGE_PREFIX,
                      (unsigned) ( uid >> 32 ),
 8012178:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801217c:	f04f 0300 	mov.w	r3, #0
 8012180:	f04f 0400 	mov.w	r4, #0
 8012184:	0013      	movs	r3, r2
 8012186:	2400      	movs	r4, #0
    mbedtls_snprintf( filename, PSA_ITS_STORAGE_FILENAME_LENGTH,
 8012188:	4619      	mov	r1, r3
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	4a06      	ldr	r2, [pc, #24]	; (80121a8 <psa_its_fill_filename+0x3c>)
 801218e:	9202      	str	r2, [sp, #8]
 8012190:	9301      	str	r3, [sp, #4]
 8012192:	9100      	str	r1, [sp, #0]
 8012194:	4b05      	ldr	r3, [pc, #20]	; (80121ac <psa_its_fill_filename+0x40>)
 8012196:	4a06      	ldr	r2, [pc, #24]	; (80121b0 <psa_its_fill_filename+0x44>)
 8012198:	2119      	movs	r1, #25
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f003 fa58 	bl	8015650 <sniprintf>
                      (unsigned) ( uid & 0xffffffff ),
                      PSA_ITS_STORAGE_SUFFIX );
}
 80121a0:	bf00      	nop
 80121a2:	3714      	adds	r7, #20
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd90      	pop	{r4, r7, pc}
 80121a8:	08016adc 	.word	0x08016adc
 80121ac:	08016ac8 	.word	0x08016ac8
 80121b0:	08016acc 	.word	0x08016acc

080121b4 <psa_its_read_file>:

static psa_status_t psa_its_read_file( psa_storage_uid_t uid,
                                       struct psa_storage_info_t *p_info,
                                       FILE **p_stream )
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b090      	sub	sp, #64	; 0x40
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80121be:	607a      	str	r2, [r7, #4]
 80121c0:	603b      	str	r3, [r7, #0]
    char filename[PSA_ITS_STORAGE_FILENAME_LENGTH];
    psa_its_file_header_t header;
    size_t n;

    *p_stream = NULL;
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	2200      	movs	r2, #0
 80121c6:	601a      	str	r2, [r3, #0]
    psa_its_fill_filename( uid, filename );
 80121c8:	f107 0320 	add.w	r3, r7, #32
 80121cc:	461a      	mov	r2, r3
 80121ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80121d2:	f7ff ffcb 	bl	801216c <psa_its_fill_filename>
    *p_stream = fopen( filename, "rb" );
 80121d6:	f107 0320 	add.w	r3, r7, #32
 80121da:	4925      	ldr	r1, [pc, #148]	; (8012270 <psa_its_read_file+0xbc>)
 80121dc:	4618      	mov	r0, r3
 80121de:	f002 fd5d 	bl	8014c9c <fopen>
 80121e2:	4602      	mov	r2, r0
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	601a      	str	r2, [r3, #0]
    if( *p_stream == NULL )
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d102      	bne.n	80121f6 <psa_its_read_file+0x42>
        return( PSA_ERROR_DOES_NOT_EXIST );
 80121f0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80121f4:	e038      	b.n	8012268 <psa_its_read_file+0xb4>

    n = fread( &header, 1, sizeof( header ), *p_stream );
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	f107 0010 	add.w	r0, r7, #16
 80121fe:	2210      	movs	r2, #16
 8012200:	2101      	movs	r1, #1
 8012202:	f002 fda3 	bl	8014d4c <fread>
 8012206:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( n != sizeof( header ) )
 8012208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801220a:	2b10      	cmp	r3, #16
 801220c:	d002      	beq.n	8012214 <psa_its_read_file+0x60>
        return( PSA_ERROR_DATA_CORRUPT );
 801220e:	f06f 0397 	mvn.w	r3, #151	; 0x97
 8012212:	e029      	b.n	8012268 <psa_its_read_file+0xb4>
    if( memcmp( header.magic, PSA_ITS_MAGIC_STRING,
 8012214:	f107 0310 	add.w	r3, r7, #16
 8012218:	2208      	movs	r2, #8
 801221a:	4916      	ldr	r1, [pc, #88]	; (8012274 <psa_its_read_file+0xc0>)
 801221c:	4618      	mov	r0, r3
 801221e:	f002 ff6d 	bl	80150fc <memcmp>
 8012222:	4603      	mov	r3, r0
 8012224:	2b00      	cmp	r3, #0
 8012226:	d002      	beq.n	801222e <psa_its_read_file+0x7a>
                PSA_ITS_MAGIC_LENGTH ) != 0 )
        return( PSA_ERROR_DATA_CORRUPT );
 8012228:	f06f 0397 	mvn.w	r3, #151	; 0x97
 801222c:	e01c      	b.n	8012268 <psa_its_read_file+0xb4>

    p_info->size = ( header.size[0] |
 801222e:	7e3b      	ldrb	r3, [r7, #24]
 8012230:	461a      	mov	r2, r3
                     header.size[1] << 8 |
 8012232:	7e7b      	ldrb	r3, [r7, #25]
 8012234:	021b      	lsls	r3, r3, #8
    p_info->size = ( header.size[0] |
 8012236:	431a      	orrs	r2, r3
                     header.size[2] << 16 |
 8012238:	7ebb      	ldrb	r3, [r7, #26]
 801223a:	041b      	lsls	r3, r3, #16
                     header.size[1] << 8 |
 801223c:	431a      	orrs	r2, r3
                     header.size[3] << 24 );
 801223e:	7efb      	ldrb	r3, [r7, #27]
 8012240:	061b      	lsls	r3, r3, #24
                     header.size[2] << 16 |
 8012242:	4313      	orrs	r3, r2
 8012244:	461a      	mov	r2, r3
    p_info->size = ( header.size[0] |
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	601a      	str	r2, [r3, #0]
    p_info->flags = ( header.flags[0] |
 801224a:	7f3b      	ldrb	r3, [r7, #28]
 801224c:	461a      	mov	r2, r3
                      header.flags[1] << 8 |
 801224e:	7f7b      	ldrb	r3, [r7, #29]
 8012250:	021b      	lsls	r3, r3, #8
    p_info->flags = ( header.flags[0] |
 8012252:	431a      	orrs	r2, r3
                      header.flags[2] << 16 |
 8012254:	7fbb      	ldrb	r3, [r7, #30]
 8012256:	041b      	lsls	r3, r3, #16
                      header.flags[1] << 8 |
 8012258:	431a      	orrs	r2, r3
                      header.flags[3] << 24 );
 801225a:	7ffb      	ldrb	r3, [r7, #31]
 801225c:	061b      	lsls	r3, r3, #24
                      header.flags[2] << 16 |
 801225e:	4313      	orrs	r3, r2
 8012260:	461a      	mov	r2, r3
    p_info->flags = ( header.flags[0] |
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	605a      	str	r2, [r3, #4]
    return( PSA_SUCCESS );
 8012266:	2300      	movs	r3, #0
}
 8012268:	4618      	mov	r0, r3
 801226a:	3740      	adds	r7, #64	; 0x40
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	08016ae8 	.word	0x08016ae8
 8012274:	08016aec 	.word	0x08016aec

08012278 <psa_its_get_info>:

psa_status_t psa_its_get_info( psa_storage_uid_t uid,
                               struct psa_storage_info_t *p_info )
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b086      	sub	sp, #24
 801227c:	af00      	add	r7, sp, #0
 801227e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
    psa_status_t status;
    FILE *stream = NULL;
 8012284:	2300      	movs	r3, #0
 8012286:	613b      	str	r3, [r7, #16]
    status = psa_its_read_file( uid, p_info, &stream );
 8012288:	f107 0310 	add.w	r3, r7, #16
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012292:	f7ff ff8f 	bl	80121b4 <psa_its_read_file>
 8012296:	6178      	str	r0, [r7, #20]
    if( stream != NULL )
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d003      	beq.n	80122a6 <psa_its_get_info+0x2e>
        fclose( stream );
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f002 fb43 	bl	801492c <fclose>
    return( status );
 80122a6:	697b      	ldr	r3, [r7, #20]
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3718      	adds	r7, #24
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <psa_its_get>:
psa_status_t psa_its_get( psa_storage_uid_t uid,
                          uint32_t data_offset,
                          uint32_t data_length,
                          void *p_data,
                          size_t *p_data_length )
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b08a      	sub	sp, #40	; 0x28
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80122ba:	607a      	str	r2, [r7, #4]
 80122bc:	603b      	str	r3, [r7, #0]
    psa_status_t status;
    FILE *stream = NULL;
 80122be:	2300      	movs	r3, #0
 80122c0:	61fb      	str	r3, [r7, #28]
    size_t n;
    struct psa_storage_info_t info;

    status = psa_its_read_file( uid, &info, &stream );
 80122c2:	f107 031c 	add.w	r3, r7, #28
 80122c6:	f107 0214 	add.w	r2, r7, #20
 80122ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80122ce:	f7ff ff71 	bl	80121b4 <psa_its_read_file>
 80122d2:	6278      	str	r0, [r7, #36]	; 0x24
    if( status != PSA_SUCCESS )
 80122d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d141      	bne.n	801235e <psa_its_get+0xae>
        goto exit;
    status = PSA_ERROR_INVALID_ARGUMENT;
 80122da:	f06f 0386 	mvn.w	r3, #134	; 0x86
 80122de:	627b      	str	r3, [r7, #36]	; 0x24
    if( data_offset + data_length < data_offset )
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	4413      	add	r3, r2
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d83a      	bhi.n	8012362 <psa_its_get+0xb2>
        goto exit;
#if SIZE_MAX < 0xffffffff
    if( data_offset + data_length > SIZE_MAX )
        goto exit;
#endif
    if( data_offset + data_length > info.size )
 80122ec:	687a      	ldr	r2, [r7, #4]
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	441a      	add	r2, r3
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d836      	bhi.n	8012366 <psa_its_get+0xb6>
        goto exit;

    status = PSA_ERROR_STORAGE_FAILURE;
 80122f8:	f06f 0391 	mvn.w	r3, #145	; 0x91
 80122fc:	627b      	str	r3, [r7, #36]	; 0x24
#if LONG_MAX < 0xffffffff
    while( data_offset > LONG_MAX )
 80122fe:	e00e      	b.n	801231e <psa_its_get+0x6e>
    {
        if( fseek( stream, LONG_MAX, SEEK_CUR ) != 0 )
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	2201      	movs	r2, #1
 8012304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012308:	4618      	mov	r0, r3
 801230a:	f002 fd2f 	bl	8014d6c <fseek>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d12a      	bne.n	801236a <psa_its_get+0xba>
            goto exit;
        data_offset -= LONG_MAX;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801231a:	3301      	adds	r3, #1
 801231c:	607b      	str	r3, [r7, #4]
    while( data_offset > LONG_MAX )
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2b00      	cmp	r3, #0
 8012322:	dbed      	blt.n	8012300 <psa_its_get+0x50>
    }
#endif
    if( fseek( stream, data_offset, SEEK_CUR ) != 0 )
 8012324:	69fb      	ldr	r3, [r7, #28]
 8012326:	6879      	ldr	r1, [r7, #4]
 8012328:	2201      	movs	r2, #1
 801232a:	4618      	mov	r0, r3
 801232c:	f002 fd1e 	bl	8014d6c <fseek>
 8012330:	4603      	mov	r3, r0
 8012332:	2b00      	cmp	r3, #0
 8012334:	d11b      	bne.n	801236e <psa_its_get+0xbe>
        goto exit;
    n = fread( p_data, 1, data_length, stream );
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	683a      	ldr	r2, [r7, #0]
 801233a:	2101      	movs	r1, #1
 801233c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801233e:	f002 fd05 	bl	8014d4c <fread>
 8012342:	6238      	str	r0, [r7, #32]
    if( n != data_length )
 8012344:	6a3a      	ldr	r2, [r7, #32]
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	429a      	cmp	r2, r3
 801234a:	d112      	bne.n	8012372 <psa_its_get+0xc2>
        goto exit;
    status = PSA_SUCCESS;
 801234c:	2300      	movs	r3, #0
 801234e:	627b      	str	r3, [r7, #36]	; 0x24
    if( p_data_length != NULL )
 8012350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012352:	2b00      	cmp	r3, #0
 8012354:	d00f      	beq.n	8012376 <psa_its_get+0xc6>
        *p_data_length = n;
 8012356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012358:	6a3a      	ldr	r2, [r7, #32]
 801235a:	601a      	str	r2, [r3, #0]
 801235c:	e00c      	b.n	8012378 <psa_its_get+0xc8>
        goto exit;
 801235e:	bf00      	nop
 8012360:	e00a      	b.n	8012378 <psa_its_get+0xc8>
        goto exit;
 8012362:	bf00      	nop
 8012364:	e008      	b.n	8012378 <psa_its_get+0xc8>
        goto exit;
 8012366:	bf00      	nop
 8012368:	e006      	b.n	8012378 <psa_its_get+0xc8>
            goto exit;
 801236a:	bf00      	nop
 801236c:	e004      	b.n	8012378 <psa_its_get+0xc8>
        goto exit;
 801236e:	bf00      	nop
 8012370:	e002      	b.n	8012378 <psa_its_get+0xc8>
        goto exit;
 8012372:	bf00      	nop
 8012374:	e000      	b.n	8012378 <psa_its_get+0xc8>

exit:
 8012376:	bf00      	nop
    if( stream != NULL )
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d003      	beq.n	8012386 <psa_its_get+0xd6>
        fclose( stream );
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	4618      	mov	r0, r3
 8012382:	f002 fad3 	bl	801492c <fclose>
    return( status );
 8012386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012388:	4618      	mov	r0, r3
 801238a:	3728      	adds	r7, #40	; 0x28
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <psa_its_set>:

psa_status_t psa_its_set( psa_storage_uid_t uid,
                          uint32_t data_length,
                          const void *p_data,
                          psa_storage_create_flags_t create_flags )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b094      	sub	sp, #80	; 0x50
 8012394:	af00      	add	r7, sp, #0
 8012396:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
 801239c:	603b      	str	r3, [r7, #0]
    psa_status_t status = PSA_ERROR_STORAGE_FAILURE;
 801239e:	f06f 0391 	mvn.w	r3, #145	; 0x91
 80123a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    char filename[PSA_ITS_STORAGE_FILENAME_LENGTH];
    FILE *stream = NULL;
 80123a4:	2300      	movs	r3, #0
 80123a6:	64bb      	str	r3, [r7, #72]	; 0x48
    psa_its_file_header_t header;
    size_t n;

    memcpy( header.magic, PSA_ITS_MAGIC_STRING, PSA_ITS_MAGIC_LENGTH );
 80123a8:	4a41      	ldr	r2, [pc, #260]	; (80124b0 <psa_its_set+0x120>)
 80123aa:	f107 0314 	add.w	r3, r7, #20
 80123ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123b2:	e883 0003 	stmia.w	r3, {r0, r1}
    header.size[0] = data_length & 0xff;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	773b      	strb	r3, [r7, #28]
    header.size[1] = ( data_length >> 8 ) & 0xff;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	0a1b      	lsrs	r3, r3, #8
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	777b      	strb	r3, [r7, #29]
    header.size[2] = ( data_length >> 16 ) & 0xff;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	0c1b      	lsrs	r3, r3, #16
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	77bb      	strb	r3, [r7, #30]
    header.size[3] = ( data_length >> 24 ) & 0xff;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	0e1b      	lsrs	r3, r3, #24
 80123d0:	b2db      	uxtb	r3, r3
 80123d2:	77fb      	strb	r3, [r7, #31]
    header.flags[0] = create_flags & 0xff;
 80123d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	f887 3020 	strb.w	r3, [r7, #32]
    header.flags[1] = ( create_flags >> 8 ) & 0xff;
 80123dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123de:	0a1b      	lsrs	r3, r3, #8
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    header.flags[2] = ( create_flags >> 16 ) & 0xff;
 80123e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123e8:	0c1b      	lsrs	r3, r3, #16
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    header.flags[3] = ( create_flags >> 24 ) & 0xff;
 80123f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123f2:	0e1b      	lsrs	r3, r3, #24
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    psa_its_fill_filename( uid, filename );
 80123fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123fe:	461a      	mov	r2, r3
 8012400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012404:	f7ff feb2 	bl	801216c <psa_its_fill_filename>
    stream = fopen( PSA_ITS_STORAGE_TEMP, "wb" );
 8012408:	492a      	ldr	r1, [pc, #168]	; (80124b4 <psa_its_set+0x124>)
 801240a:	482b      	ldr	r0, [pc, #172]	; (80124b8 <psa_its_set+0x128>)
 801240c:	f002 fc46 	bl	8014c9c <fopen>
 8012410:	64b8      	str	r0, [r7, #72]	; 0x48
    if( stream == NULL )
 8012412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012414:	2b00      	cmp	r3, #0
 8012416:	d01e      	beq.n	8012456 <psa_its_set+0xc6>
        goto exit;

    status = PSA_ERROR_INSUFFICIENT_STORAGE;
 8012418:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 801241c:	64fb      	str	r3, [r7, #76]	; 0x4c
    n = fwrite( &header, 1, sizeof( header ), stream );
 801241e:	f107 0014 	add.w	r0, r7, #20
 8012422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012424:	2210      	movs	r2, #16
 8012426:	2101      	movs	r1, #1
 8012428:	f002 fdc2 	bl	8014fb0 <fwrite>
 801242c:	6478      	str	r0, [r7, #68]	; 0x44
    if( n != sizeof( header ) )
 801242e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012430:	2b10      	cmp	r3, #16
 8012432:	d112      	bne.n	801245a <psa_its_set+0xca>
        goto exit;
    if( data_length != 0 )
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d00a      	beq.n	8012450 <psa_its_set+0xc0>
    {
        n = fwrite( p_data, 1, data_length, stream );
 801243a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	2101      	movs	r1, #1
 8012440:	6838      	ldr	r0, [r7, #0]
 8012442:	f002 fdb5 	bl	8014fb0 <fwrite>
 8012446:	6478      	str	r0, [r7, #68]	; 0x44
        if( n != data_length )
 8012448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	429a      	cmp	r2, r3
 801244e:	d106      	bne.n	801245e <psa_its_set+0xce>
            goto exit;
    }
    status = PSA_SUCCESS;
 8012450:	2300      	movs	r3, #0
 8012452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012454:	e004      	b.n	8012460 <psa_its_set+0xd0>
        goto exit;
 8012456:	bf00      	nop
 8012458:	e002      	b.n	8012460 <psa_its_set+0xd0>
        goto exit;
 801245a:	bf00      	nop
 801245c:	e000      	b.n	8012460 <psa_its_set+0xd0>
            goto exit;
 801245e:	bf00      	nop

exit:
    if( stream != NULL )
 8012460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012462:	2b00      	cmp	r3, #0
 8012464:	d00c      	beq.n	8012480 <psa_its_set+0xf0>
    {
        int ret = fclose( stream );
 8012466:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012468:	f002 fa60 	bl	801492c <fclose>
 801246c:	6438      	str	r0, [r7, #64]	; 0x40
        if( status == PSA_SUCCESS && ret != 0 )
 801246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012470:	2b00      	cmp	r3, #0
 8012472:	d105      	bne.n	8012480 <psa_its_set+0xf0>
 8012474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012476:	2b00      	cmp	r3, #0
 8012478:	d002      	beq.n	8012480 <psa_its_set+0xf0>
            status = PSA_ERROR_INSUFFICIENT_STORAGE;
 801247a:	f06f 038d 	mvn.w	r3, #141	; 0x8d
 801247e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if( status == PSA_SUCCESS )
 8012480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012482:	2b00      	cmp	r3, #0
 8012484:	d10b      	bne.n	801249e <psa_its_set+0x10e>
    {
        if( rename_replace_existing( PSA_ITS_STORAGE_TEMP, filename ) != 0 )
 8012486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801248a:	4619      	mov	r1, r3
 801248c:	480a      	ldr	r0, [pc, #40]	; (80124b8 <psa_its_set+0x128>)
 801248e:	f003 f871 	bl	8015574 <rename>
 8012492:	4603      	mov	r3, r0
 8012494:	2b00      	cmp	r3, #0
 8012496:	d002      	beq.n	801249e <psa_its_set+0x10e>
            status = PSA_ERROR_STORAGE_FAILURE;
 8012498:	f06f 0391 	mvn.w	r3, #145	; 0x91
 801249c:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* The temporary file may still exist, but only in failure cases where
     * we're already reporting an error. So there's nothing we can do on
     * failure. If the function succeeded, and in some error cases, the
     * temporary file doesn't exist and so remove() is expected to fail.
     * Thus we just ignore the return status of remove(). */
    (void) remove( PSA_ITS_STORAGE_TEMP );
 801249e:	4806      	ldr	r0, [pc, #24]	; (80124b8 <psa_its_set+0x128>)
 80124a0:	f003 f860 	bl	8015564 <remove>
    return( status );
 80124a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3750      	adds	r7, #80	; 0x50
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	08016aec 	.word	0x08016aec
 80124b4:	08016af8 	.word	0x08016af8
 80124b8:	08016afc 	.word	0x08016afc

080124bc <psa_its_remove>:

psa_status_t psa_its_remove( psa_storage_uid_t uid )
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b08a      	sub	sp, #40	; 0x28
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	e9c7 0100 	strd	r0, r1, [r7]
    char filename[PSA_ITS_STORAGE_FILENAME_LENGTH];
    FILE *stream;
    psa_its_fill_filename( uid, filename );
 80124c6:	f107 0308 	add.w	r3, r7, #8
 80124ca:	461a      	mov	r2, r3
 80124cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80124d0:	f7ff fe4c 	bl	801216c <psa_its_fill_filename>
    stream = fopen( filename, "rb" );
 80124d4:	f107 0308 	add.w	r3, r7, #8
 80124d8:	490e      	ldr	r1, [pc, #56]	; (8012514 <psa_its_remove+0x58>)
 80124da:	4618      	mov	r0, r3
 80124dc:	f002 fbde 	bl	8014c9c <fopen>
 80124e0:	6278      	str	r0, [r7, #36]	; 0x24
    if( stream == NULL )
 80124e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d102      	bne.n	80124ee <psa_its_remove+0x32>
        return( PSA_ERROR_DOES_NOT_EXIST );
 80124e8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
 80124ec:	e00e      	b.n	801250c <psa_its_remove+0x50>
    fclose( stream );
 80124ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124f0:	f002 fa1c 	bl	801492c <fclose>
    if( remove( filename ) != 0 )
 80124f4:	f107 0308 	add.w	r3, r7, #8
 80124f8:	4618      	mov	r0, r3
 80124fa:	f003 f833 	bl	8015564 <remove>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d002      	beq.n	801250a <psa_its_remove+0x4e>
        return( PSA_ERROR_STORAGE_FAILURE );
 8012504:	f06f 0391 	mvn.w	r3, #145	; 0x91
 8012508:	e000      	b.n	801250c <psa_its_remove+0x50>
    return( PSA_SUCCESS );
 801250a:	2300      	movs	r3, #0
}
 801250c:	4618      	mov	r0, r3
 801250e:	3728      	adds	r7, #40	; 0x28
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}
 8012514:	08016ae8 	.word	0x08016ae8

08012518 <mbedtls_sha512_init>:
#else
#define sha512_put_uint64_be    PUT_UINT64_BE
#endif /* MBEDTLS_SHA512_SMALLER */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b082      	sub	sp, #8
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 8012520:	22d8      	movs	r2, #216	; 0xd8
 8012522:	2100      	movs	r1, #0
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f002 fe1c 	bl	8015162 <memset>
}
 801252a:	bf00      	nop
 801252c:	3708      	adds	r7, #8
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <mbedtls_sha512_free>:

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
 8012532:	b580      	push	{r7, lr}
 8012534:	b082      	sub	sp, #8
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d004      	beq.n	801254a <mbedtls_sha512_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 8012540:	21d8      	movs	r1, #216	; 0xd8
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f7fb fed4 	bl	800e2f0 <mbedtls_platform_zeroize>
 8012548:	e000      	b.n	801254c <mbedtls_sha512_free+0x1a>
        return;
 801254a:	bf00      	nop
}
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
 8012552:	0000      	movs	r0, r0
 8012554:	0000      	movs	r0, r0
	...

08012558 <mbedtls_sha512_starts_ret>:

/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
 8012558:	b490      	push	{r4, r7}
 801255a:	b082      	sub	sp, #8
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
#else
    SHA512_VALIDATE_RET( is384 == 0 );
#endif

    ctx->total[0] = 0;
 8012562:	687a      	ldr	r2, [r7, #4]
 8012564:	f04f 0300 	mov.w	r3, #0
 8012568:	f04f 0400 	mov.w	r4, #0
 801256c:	e9c2 3400 	strd	r3, r4, [r2]
    ctx->total[1] = 0;
 8012570:	687a      	ldr	r2, [r7, #4]
 8012572:	f04f 0300 	mov.w	r3, #0
 8012576:	f04f 0400 	mov.w	r4, #0
 801257a:	e9c2 3402 	strd	r3, r4, [r2, #8]

    if( is384 == 0 )
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d130      	bne.n	80125e6 <mbedtls_sha512_starts_ret+0x8e>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 8012584:	687a      	ldr	r2, [r7, #4]
 8012586:	a436      	add	r4, pc, #216	; (adr r4, 8012660 <mbedtls_sha512_starts_ret+0x108>)
 8012588:	e9d4 3400 	ldrd	r3, r4, [r4]
 801258c:	e9c2 3404 	strd	r3, r4, [r2, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	a435      	add	r4, pc, #212	; (adr r4, 8012668 <mbedtls_sha512_starts_ret+0x110>)
 8012594:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012598:	e9c2 3406 	strd	r3, r4, [r2, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	a434      	add	r4, pc, #208	; (adr r4, 8012670 <mbedtls_sha512_starts_ret+0x118>)
 80125a0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80125a4:	e9c2 3408 	strd	r3, r4, [r2, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	a433      	add	r4, pc, #204	; (adr r4, 8012678 <mbedtls_sha512_starts_ret+0x120>)
 80125ac:	e9d4 3400 	ldrd	r3, r4, [r4]
 80125b0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	a432      	add	r4, pc, #200	; (adr r4, 8012680 <mbedtls_sha512_starts_ret+0x128>)
 80125b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80125bc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 80125c0:	687a      	ldr	r2, [r7, #4]
 80125c2:	a431      	add	r4, pc, #196	; (adr r4, 8012688 <mbedtls_sha512_starts_ret+0x130>)
 80125c4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80125c8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	a430      	add	r4, pc, #192	; (adr r4, 8012690 <mbedtls_sha512_starts_ret+0x138>)
 80125d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80125d4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	a42f      	add	r4, pc, #188	; (adr r4, 8012698 <mbedtls_sha512_starts_ret+0x140>)
 80125dc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80125e0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 80125e4:	e02f      	b.n	8012646 <mbedtls_sha512_starts_ret+0xee>
    {
#if defined(MBEDTLS_SHA512_NO_SHA384)
        return( MBEDTLS_ERR_SHA512_BAD_INPUT_DATA );
#else
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	a42d      	add	r4, pc, #180	; (adr r4, 80126a0 <mbedtls_sha512_starts_ret+0x148>)
 80125ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80125ee:	e9c2 3404 	strd	r3, r4, [r2, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 80125f2:	687a      	ldr	r2, [r7, #4]
 80125f4:	a42c      	add	r4, pc, #176	; (adr r4, 80126a8 <mbedtls_sha512_starts_ret+0x150>)
 80125f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80125fa:	e9c2 3406 	strd	r3, r4, [r2, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	a42b      	add	r4, pc, #172	; (adr r4, 80126b0 <mbedtls_sha512_starts_ret+0x158>)
 8012602:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012606:	e9c2 3408 	strd	r3, r4, [r2, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	a42a      	add	r4, pc, #168	; (adr r4, 80126b8 <mbedtls_sha512_starts_ret+0x160>)
 801260e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012612:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	a429      	add	r4, pc, #164	; (adr r4, 80126c0 <mbedtls_sha512_starts_ret+0x168>)
 801261a:	e9d4 3400 	ldrd	r3, r4, [r4]
 801261e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 8012622:	687a      	ldr	r2, [r7, #4]
 8012624:	a428      	add	r4, pc, #160	; (adr r4, 80126c8 <mbedtls_sha512_starts_ret+0x170>)
 8012626:	e9d4 3400 	ldrd	r3, r4, [r4]
 801262a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	a427      	add	r4, pc, #156	; (adr r4, 80126d0 <mbedtls_sha512_starts_ret+0x178>)
 8012632:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012636:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 801263a:	687a      	ldr	r2, [r7, #4]
 801263c:	a426      	add	r4, pc, #152	; (adr r4, 80126d8 <mbedtls_sha512_starts_ret+0x180>)
 801263e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8012642:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
#endif /* MBEDTLS_SHA512_NO_SHA384 */
    }

#if !defined(MBEDTLS_SHA512_NO_SHA384)
    ctx->is384 = is384;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	683a      	ldr	r2, [r7, #0]
 801264a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif

    return( 0 );
 801264e:	2300      	movs	r3, #0
}
 8012650:	4618      	mov	r0, r3
 8012652:	3708      	adds	r7, #8
 8012654:	46bd      	mov	sp, r7
 8012656:	bc90      	pop	{r4, r7}
 8012658:	4770      	bx	lr
 801265a:	bf00      	nop
 801265c:	f3af 8000 	nop.w
 8012660:	f3bcc908 	.word	0xf3bcc908
 8012664:	6a09e667 	.word	0x6a09e667
 8012668:	84caa73b 	.word	0x84caa73b
 801266c:	bb67ae85 	.word	0xbb67ae85
 8012670:	fe94f82b 	.word	0xfe94f82b
 8012674:	3c6ef372 	.word	0x3c6ef372
 8012678:	5f1d36f1 	.word	0x5f1d36f1
 801267c:	a54ff53a 	.word	0xa54ff53a
 8012680:	ade682d1 	.word	0xade682d1
 8012684:	510e527f 	.word	0x510e527f
 8012688:	2b3e6c1f 	.word	0x2b3e6c1f
 801268c:	9b05688c 	.word	0x9b05688c
 8012690:	fb41bd6b 	.word	0xfb41bd6b
 8012694:	1f83d9ab 	.word	0x1f83d9ab
 8012698:	137e2179 	.word	0x137e2179
 801269c:	5be0cd19 	.word	0x5be0cd19
 80126a0:	c1059ed8 	.word	0xc1059ed8
 80126a4:	cbbb9d5d 	.word	0xcbbb9d5d
 80126a8:	367cd507 	.word	0x367cd507
 80126ac:	629a292a 	.word	0x629a292a
 80126b0:	3070dd17 	.word	0x3070dd17
 80126b4:	9159015a 	.word	0x9159015a
 80126b8:	f70e5939 	.word	0xf70e5939
 80126bc:	152fecd8 	.word	0x152fecd8
 80126c0:	ffc00b31 	.word	0xffc00b31
 80126c4:	67332667 	.word	0x67332667
 80126c8:	68581511 	.word	0x68581511
 80126cc:	8eb44a87 	.word	0x8eb44a87
 80126d0:	64f98fa7 	.word	0x64f98fa7
 80126d4:	db0c2e0d 	.word	0xdb0c2e0d
 80126d8:	befa4fa4 	.word	0xbefa4fa4
 80126dc:	47b5481d 	.word	0x47b5481d

080126e0 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80126ee:	6018      	str	r0, [r3, #0]
 80126f0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80126f4:	6019      	str	r1, [r3, #0]
        local.temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);    \
        local.temp2 = S2(a) + F0((a),(b),(c));                      \
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

    for( i = 0; i < 8; i++ )
 80126f6:	2300      	movs	r3, #0
 80126f8:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80126fc:	e017      	b.n	801272e <mbedtls_internal_sha512_process+0x4e>
        local.A[i] = ctx->state[i];
 80126fe:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012708:	3302      	adds	r3, #2
 801270a:	00db      	lsls	r3, r3, #3
 801270c:	4413      	add	r3, r2
 801270e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012712:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8012716:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801271a:	3352      	adds	r3, #82	; 0x52
 801271c:	00db      	lsls	r3, r3, #3
 801271e:	4403      	add	r3, r0
 8012720:	e9c3 1200 	strd	r1, r2, [r3]
    for( i = 0; i < 8; i++ )
 8012724:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012728:	3301      	adds	r3, #1
 801272a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 801272e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012732:	2b07      	cmp	r3, #7
 8012734:	dde3      	ble.n	80126fe <mbedtls_internal_sha512_process+0x1e>
        local.A[4] = local.A[3]; local.A[3] = local.A[2];
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
        local.A[0] = local.temp1;
    }
#else /* MBEDTLS_SHA512_SMALLER */
    for( i = 0; i < 16; i++ )
 8012736:	2300      	movs	r3, #0
 8012738:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 801273c:	e0bd      	b.n	80128ba <mbedtls_internal_sha512_process+0x1da>
    {
        GET_UINT64_BE( local.W[i], data, i << 3 );
 801273e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012742:	00db      	lsls	r3, r3, #3
 8012744:	461a      	mov	r2, r3
 8012746:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	4413      	add	r3, r2
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	b2db      	uxtb	r3, r3
 8012752:	f04f 0400 	mov.w	r4, #0
 8012756:	f04f 0500 	mov.w	r5, #0
 801275a:	f04f 0600 	mov.w	r6, #0
 801275e:	061e      	lsls	r6, r3, #24
 8012760:	2500      	movs	r5, #0
 8012762:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012766:	00db      	lsls	r3, r3, #3
 8012768:	1c5a      	adds	r2, r3, #1
 801276a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4413      	add	r3, r2
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	b2db      	uxtb	r3, r3
 8012776:	f04f 0400 	mov.w	r4, #0
 801277a:	f04f 0100 	mov.w	r1, #0
 801277e:	f04f 0200 	mov.w	r2, #0
 8012782:	041a      	lsls	r2, r3, #16
 8012784:	2100      	movs	r1, #0
 8012786:	ea45 0301 	orr.w	r3, r5, r1
 801278a:	ea46 0402 	orr.w	r4, r6, r2
 801278e:	461d      	mov	r5, r3
 8012790:	4626      	mov	r6, r4
 8012792:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	1c9a      	adds	r2, r3, #2
 801279a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	4413      	add	r3, r2
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	b2db      	uxtb	r3, r3
 80127a6:	f04f 0400 	mov.w	r4, #0
 80127aa:	f04f 0100 	mov.w	r1, #0
 80127ae:	f04f 0200 	mov.w	r2, #0
 80127b2:	021a      	lsls	r2, r3, #8
 80127b4:	2100      	movs	r1, #0
 80127b6:	ea45 0501 	orr.w	r5, r5, r1
 80127ba:	ea46 0602 	orr.w	r6, r6, r2
 80127be:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80127c2:	00db      	lsls	r3, r3, #3
 80127c4:	1cda      	adds	r2, r3, #3
 80127c6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4413      	add	r3, r2
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	f04f 0400 	mov.w	r4, #0
 80127d6:	f04f 0100 	mov.w	r1, #0
 80127da:	f04f 0200 	mov.w	r2, #0
 80127de:	001a      	movs	r2, r3
 80127e0:	2100      	movs	r1, #0
 80127e2:	ea45 0301 	orr.w	r3, r5, r1
 80127e6:	ea46 0402 	orr.w	r4, r6, r2
 80127ea:	4618      	mov	r0, r3
 80127ec:	4621      	mov	r1, r4
 80127ee:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80127f2:	00db      	lsls	r3, r3, #3
 80127f4:	1d1a      	adds	r2, r3, #4
 80127f6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4413      	add	r3, r2
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	b2db      	uxtb	r3, r3
 8012802:	f04f 0400 	mov.w	r4, #0
 8012806:	ea4f 2913 	mov.w	r9, r3, lsr #8
 801280a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 801280e:	ea40 0508 	orr.w	r5, r0, r8
 8012812:	ea41 0609 	orr.w	r6, r1, r9
 8012816:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801281a:	00db      	lsls	r3, r3, #3
 801281c:	1d5a      	adds	r2, r3, #5
 801281e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4413      	add	r3, r2
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	b2db      	uxtb	r3, r3
 801282a:	f04f 0400 	mov.w	r4, #0
 801282e:	f04f 0100 	mov.w	r1, #0
 8012832:	f04f 0200 	mov.w	r2, #0
 8012836:	0422      	lsls	r2, r4, #16
 8012838:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 801283c:	0419      	lsls	r1, r3, #16
 801283e:	ea45 0501 	orr.w	r5, r5, r1
 8012842:	ea46 0602 	orr.w	r6, r6, r2
 8012846:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801284a:	00db      	lsls	r3, r3, #3
 801284c:	1d9a      	adds	r2, r3, #6
 801284e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4413      	add	r3, r2
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	b2db      	uxtb	r3, r3
 801285a:	f04f 0400 	mov.w	r4, #0
 801285e:	f04f 0100 	mov.w	r1, #0
 8012862:	f04f 0200 	mov.w	r2, #0
 8012866:	0222      	lsls	r2, r4, #8
 8012868:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 801286c:	0219      	lsls	r1, r3, #8
 801286e:	ea45 0301 	orr.w	r3, r5, r1
 8012872:	ea46 0402 	orr.w	r4, r6, r2
 8012876:	4618      	mov	r0, r3
 8012878:	4621      	mov	r1, r4
 801287a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801287e:	00db      	lsls	r3, r3, #3
 8012880:	1dda      	adds	r2, r3, #7
 8012882:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4413      	add	r3, r2
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	b2db      	uxtb	r3, r3
 801288e:	f04f 0400 	mov.w	r4, #0
 8012892:	ea40 0503 	orr.w	r5, r0, r3
 8012896:	ea41 0604 	orr.w	r6, r1, r4
 801289a:	4629      	mov	r1, r5
 801289c:	4632      	mov	r2, r6
 801289e:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 80128a2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80128a6:	3302      	adds	r3, #2
 80128a8:	00db      	lsls	r3, r3, #3
 80128aa:	4403      	add	r3, r0
 80128ac:	e9c3 1200 	strd	r1, r2, [r3]
    for( i = 0; i < 16; i++ )
 80128b0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80128b4:	3301      	adds	r3, #1
 80128b6:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80128ba:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80128be:	2b0f      	cmp	r3, #15
 80128c0:	f77f af3d 	ble.w	801273e <mbedtls_internal_sha512_process+0x5e>
    }

    for( ; i < 80; i++ )
 80128c4:	e0be      	b.n	8012a44 <mbedtls_internal_sha512_process+0x364>
    {
        local.W[i] = S1(local.W[i -  2]) + local.W[i -  7] +
 80128c6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80128ca:	3b02      	subs	r3, #2
 80128cc:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80128d0:	3302      	adds	r3, #2
 80128d2:	00db      	lsls	r3, r3, #3
 80128d4:	4413      	add	r3, r2
 80128d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80128da:	0361      	lsls	r1, r4, #13
 80128dc:	0cda      	lsrs	r2, r3, #19
 80128de:	430a      	orrs	r2, r1
 80128e0:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 80128e4:	035a      	lsls	r2, r3, #13
 80128e6:	0ce3      	lsrs	r3, r4, #19
 80128e8:	4313      	orrs	r3, r2
 80128ea:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80128ee:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80128f2:	3b02      	subs	r3, #2
 80128f4:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80128f8:	3302      	adds	r3, #2
 80128fa:	00db      	lsls	r3, r3, #3
 80128fc:	4413      	add	r3, r2
 80128fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012902:	0f59      	lsrs	r1, r3, #29
 8012904:	00e2      	lsls	r2, r4, #3
 8012906:	430a      	orrs	r2, r1
 8012908:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 801290c:	0f62      	lsrs	r2, r4, #29
 801290e:	00db      	lsls	r3, r3, #3
 8012910:	4313      	orrs	r3, r2
 8012912:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8012916:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801291a:	e9d3 5600 	ldrd	r5, r6, [r3]
 801291e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8012922:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012926:	ea85 0503 	eor.w	r5, r5, r3
 801292a:	ea86 0604 	eor.w	r6, r6, r4
 801292e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012932:	3b02      	subs	r3, #2
 8012934:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012938:	3302      	adds	r3, #2
 801293a:	00db      	lsls	r3, r3, #3
 801293c:	4413      	add	r3, r2
 801293e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012942:	f04f 0100 	mov.w	r1, #0
 8012946:	f04f 0200 	mov.w	r2, #0
 801294a:	0999      	lsrs	r1, r3, #6
 801294c:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8012950:	09a2      	lsrs	r2, r4, #6
 8012952:	ea85 0301 	eor.w	r3, r5, r1
 8012956:	ea86 0402 	eor.w	r4, r6, r2
 801295a:	4618      	mov	r0, r3
 801295c:	4621      	mov	r1, r4
 801295e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012962:	3b07      	subs	r3, #7
 8012964:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012968:	3302      	adds	r3, #2
 801296a:	00db      	lsls	r3, r3, #3
 801296c:	4413      	add	r3, r2
 801296e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012972:	eb10 0803 	adds.w	r8, r0, r3
 8012976:	eb41 0904 	adc.w	r9, r1, r4
               S0(local.W[i - 15]) + local.W[i - 16];
 801297a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801297e:	3b0f      	subs	r3, #15
 8012980:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012984:	3302      	adds	r3, #2
 8012986:	00db      	lsls	r3, r3, #3
 8012988:	4413      	add	r3, r2
 801298a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801298e:	07e1      	lsls	r1, r4, #31
 8012990:	085a      	lsrs	r2, r3, #1
 8012992:	430a      	orrs	r2, r1
 8012994:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8012998:	07da      	lsls	r2, r3, #31
 801299a:	0863      	lsrs	r3, r4, #1
 801299c:	4313      	orrs	r3, r2
 801299e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80129a2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80129a6:	3b0f      	subs	r3, #15
 80129a8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80129ac:	3302      	adds	r3, #2
 80129ae:	00db      	lsls	r3, r3, #3
 80129b0:	4413      	add	r3, r2
 80129b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80129b6:	0621      	lsls	r1, r4, #24
 80129b8:	0a1a      	lsrs	r2, r3, #8
 80129ba:	ea41 0a02 	orr.w	sl, r1, r2
 80129be:	061a      	lsls	r2, r3, #24
 80129c0:	0a23      	lsrs	r3, r4, #8
 80129c2:	ea42 0b03 	orr.w	fp, r2, r3
 80129c6:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80129ca:	e9d3 5600 	ldrd	r5, r6, [r3]
 80129ce:	ea85 050a 	eor.w	r5, r5, sl
 80129d2:	ea86 060b 	eor.w	r6, r6, fp
 80129d6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80129da:	3b0f      	subs	r3, #15
 80129dc:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80129e0:	3302      	adds	r3, #2
 80129e2:	00db      	lsls	r3, r3, #3
 80129e4:	4413      	add	r3, r2
 80129e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80129ea:	f04f 0100 	mov.w	r1, #0
 80129ee:	f04f 0200 	mov.w	r2, #0
 80129f2:	09d9      	lsrs	r1, r3, #7
 80129f4:	ea41 6144 	orr.w	r1, r1, r4, lsl #25
 80129f8:	09e2      	lsrs	r2, r4, #7
 80129fa:	ea85 0301 	eor.w	r3, r5, r1
 80129fe:	ea86 0402 	eor.w	r4, r6, r2
        local.W[i] = S1(local.W[i -  2]) + local.W[i -  7] +
 8012a02:	eb18 0003 	adds.w	r0, r8, r3
 8012a06:	eb49 0104 	adc.w	r1, r9, r4
               S0(local.W[i - 15]) + local.W[i - 16];
 8012a0a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012a0e:	3b10      	subs	r3, #16
 8012a10:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012a14:	3302      	adds	r3, #2
 8012a16:	00db      	lsls	r3, r3, #3
 8012a18:	4413      	add	r3, r2
 8012a1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012a1e:	18c5      	adds	r5, r0, r3
 8012a20:	eb41 0604 	adc.w	r6, r1, r4
 8012a24:	4629      	mov	r1, r5
 8012a26:	4632      	mov	r2, r6
        local.W[i] = S1(local.W[i -  2]) + local.W[i -  7] +
 8012a28:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8012a2c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012a30:	3302      	adds	r3, #2
 8012a32:	00db      	lsls	r3, r3, #3
 8012a34:	4403      	add	r3, r0
 8012a36:	e9c3 1200 	strd	r1, r2, [r3]
    for( ; i < 80; i++ )
 8012a3a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012a3e:	3301      	adds	r3, #1
 8012a40:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8012a44:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012a48:	2b4f      	cmp	r3, #79	; 0x4f
 8012a4a:	f77f af3c 	ble.w	80128c6 <mbedtls_internal_sha512_process+0x1e6>
    }

    i = 0;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
    do
    {
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
 8012a54:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012a58:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8012a5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a60:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012a64:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012a68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012a6c:	04a1      	lsls	r1, r4, #18
 8012a6e:	0b9a      	lsrs	r2, r3, #14
 8012a70:	430a      	orrs	r2, r1
 8012a72:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8012a76:	049a      	lsls	r2, r3, #18
 8012a78:	0ba3      	lsrs	r3, r4, #14
 8012a7a:	4313      	orrs	r3, r2
 8012a7c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8012a80:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012a84:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012a88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012a8c:	03a1      	lsls	r1, r4, #14
 8012a8e:	0c9a      	lsrs	r2, r3, #18
 8012a90:	430a      	orrs	r2, r1
 8012a92:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8012a96:	039a      	lsls	r2, r3, #14
 8012a98:	0ca3      	lsrs	r3, r4, #18
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8012aa0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8012aa4:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012aa8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8012aac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ab0:	ea85 0503 	eor.w	r5, r5, r3
 8012ab4:	ea86 0604 	eor.w	r6, r6, r4
 8012ab8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012abc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012ac0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ac4:	0a59      	lsrs	r1, r3, #9
 8012ac6:	05e2      	lsls	r2, r4, #23
 8012ac8:	430a      	orrs	r2, r1
 8012aca:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8012ace:	0a62      	lsrs	r2, r4, #9
 8012ad0:	05db      	lsls	r3, r3, #23
 8012ad2:	4313      	orrs	r3, r2
 8012ad4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8012ad8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8012adc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ae0:	ea83 0305 	eor.w	r3, r3, r5
 8012ae4:	ea84 0406 	eor.w	r4, r4, r6
 8012ae8:	eb18 0a03 	adds.w	sl, r8, r3
 8012aec:	eb49 0b04 	adc.w	fp, r9, r4
 8012af0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012af4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8012af8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012afc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012b00:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012b04:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012b08:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012b0c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012b10:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012b14:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012b18:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8012b1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b20:	ea83 0301 	eor.w	r3, r3, r1
 8012b24:	ea84 0402 	eor.w	r4, r4, r2
 8012b28:	ea03 0105 	and.w	r1, r3, r5
 8012b2c:	ea04 0206 	and.w	r2, r4, r6
 8012b30:	ea81 0308 	eor.w	r3, r1, r8
 8012b34:	ea82 0409 	eor.w	r4, r2, r9
 8012b38:	eb1a 0503 	adds.w	r5, sl, r3
 8012b3c:	eb4b 0604 	adc.w	r6, fp, r4
 8012b40:	4acf      	ldr	r2, [pc, #828]	; (8012e80 <mbedtls_internal_sha512_process+0x7a0>)
 8012b42:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012b46:	00db      	lsls	r3, r3, #3
 8012b48:	4413      	add	r3, r2
 8012b4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b4e:	18e8      	adds	r0, r5, r3
 8012b50:	eb46 0104 	adc.w	r1, r6, r4
 8012b54:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012b58:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012b5c:	3302      	adds	r3, #2
 8012b5e:	00db      	lsls	r3, r3, #3
 8012b60:	4413      	add	r3, r2
 8012b62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b66:	18c5      	adds	r5, r0, r3
 8012b68:	eb41 0604 	adc.w	r6, r1, r4
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	4632      	mov	r2, r6
 8012b70:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012b74:	e9c3 1200 	strd	r1, r2, [r3]
 8012b78:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012b7c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8012b80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012b84:	0121      	lsls	r1, r4, #4
 8012b86:	0f1a      	lsrs	r2, r3, #28
 8012b88:	430a      	orrs	r2, r1
 8012b8a:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8012b8e:	011a      	lsls	r2, r3, #4
 8012b90:	0f23      	lsrs	r3, r4, #28
 8012b92:	4313      	orrs	r3, r2
 8012b94:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8012b98:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012b9c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8012ba0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ba4:	0899      	lsrs	r1, r3, #2
 8012ba6:	07a2      	lsls	r2, r4, #30
 8012ba8:	430a      	orrs	r2, r1
 8012baa:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8012bae:	08a2      	lsrs	r2, r4, #2
 8012bb0:	079b      	lsls	r3, r3, #30
 8012bb2:	4313      	orrs	r3, r2
 8012bb4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8012bb8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8012bbc:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012bc0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012bc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012bc8:	ea85 0503 	eor.w	r5, r5, r3
 8012bcc:	ea86 0604 	eor.w	r6, r6, r4
 8012bd0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012bd4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8012bd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012bdc:	09d9      	lsrs	r1, r3, #7
 8012bde:	0662      	lsls	r2, r4, #25
 8012be0:	430a      	orrs	r2, r1
 8012be2:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8012be6:	09e2      	lsrs	r2, r4, #7
 8012be8:	065b      	lsls	r3, r3, #25
 8012bea:	4313      	orrs	r3, r2
 8012bec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8012bf0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8012bf4:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8012bf8:	ea8a 0a05 	eor.w	sl, sl, r5
 8012bfc:	ea8b 0b06 	eor.w	fp, fp, r6
 8012c00:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c04:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8012c08:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012c0c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c10:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8012c14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012c18:	ea01 0803 	and.w	r8, r1, r3
 8012c1c:	ea02 0904 	and.w	r9, r2, r4
 8012c20:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c24:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8012c28:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012c2c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c30:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8012c34:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012c38:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c3c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8012c40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012c44:	ea43 0301 	orr.w	r3, r3, r1
 8012c48:	ea44 0402 	orr.w	r4, r4, r2
 8012c4c:	ea03 0105 	and.w	r1, r3, r5
 8012c50:	ea04 0206 	and.w	r2, r4, r6
 8012c54:	ea41 0308 	orr.w	r3, r1, r8
 8012c58:	ea42 0409 	orr.w	r4, r2, r9
 8012c5c:	eb1a 0103 	adds.w	r1, sl, r3
 8012c60:	eb4b 0204 	adc.w	r2, fp, r4
 8012c64:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c68:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8012c6c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012c74:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012c78:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012c80:	18e9      	adds	r1, r5, r3
 8012c82:	eb46 0204 	adc.w	r2, r6, r4
 8012c86:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c8a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012c8e:	e9c3 1200 	strd	r1, r2, [r3]
 8012c92:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c96:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012c9a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012c9e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8012ca2:	18e9      	adds	r1, r5, r3
 8012ca4:	eb46 0204 	adc.w	r2, r6, r4
 8012ca8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012cac:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8012cb0:	e9c3 1200 	strd	r1, r2, [r3]
           local.A[5], local.A[6], local.A[7], local.W[i], K[i] ); i++;
 8012cb4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012cb8:	3301      	adds	r3, #1
 8012cba:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( local.A[7], local.A[0], local.A[1], local.A[2], local.A[3],
 8012cbe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012cc2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8012cc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012cca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012cce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012cd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012cd6:	04a1      	lsls	r1, r4, #18
 8012cd8:	0b9a      	lsrs	r2, r3, #14
 8012cda:	430a      	orrs	r2, r1
 8012cdc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8012ce0:	049a      	lsls	r2, r3, #18
 8012ce2:	0ba3      	lsrs	r3, r4, #14
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8012cea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012cee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012cf2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012cf6:	03a1      	lsls	r1, r4, #14
 8012cf8:	0c9a      	lsrs	r2, r3, #18
 8012cfa:	430a      	orrs	r2, r1
 8012cfc:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8012d00:	039a      	lsls	r2, r3, #14
 8012d02:	0ca3      	lsrs	r3, r4, #18
 8012d04:	4313      	orrs	r3, r2
 8012d06:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8012d0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8012d0e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012d12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8012d16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012d1a:	ea85 0503 	eor.w	r5, r5, r3
 8012d1e:	ea86 0604 	eor.w	r6, r6, r4
 8012d22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012d26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012d2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012d2e:	0a59      	lsrs	r1, r3, #9
 8012d30:	05e2      	lsls	r2, r4, #23
 8012d32:	430a      	orrs	r2, r1
 8012d34:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8012d38:	0a62      	lsrs	r2, r4, #9
 8012d3a:	05db      	lsls	r3, r3, #23
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8012d42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012d46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012d4a:	ea83 0305 	eor.w	r3, r3, r5
 8012d4e:	ea84 0406 	eor.w	r4, r4, r6
 8012d52:	eb18 0a03 	adds.w	sl, r8, r3
 8012d56:	eb49 0b04 	adc.w	fp, r9, r4
 8012d5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012d5e:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012d62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012d66:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012d6a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012d6e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012d72:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012d76:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012d7a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012d7e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012d82:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012d86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012d8a:	ea83 0301 	eor.w	r3, r3, r1
 8012d8e:	ea84 0402 	eor.w	r4, r4, r2
 8012d92:	ea03 0105 	and.w	r1, r3, r5
 8012d96:	ea04 0206 	and.w	r2, r4, r6
 8012d9a:	ea81 0308 	eor.w	r3, r1, r8
 8012d9e:	ea82 0409 	eor.w	r4, r2, r9
 8012da2:	eb1a 0503 	adds.w	r5, sl, r3
 8012da6:	eb4b 0604 	adc.w	r6, fp, r4
 8012daa:	4a35      	ldr	r2, [pc, #212]	; (8012e80 <mbedtls_internal_sha512_process+0x7a0>)
 8012dac:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012db0:	00db      	lsls	r3, r3, #3
 8012db2:	4413      	add	r3, r2
 8012db4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012db8:	18e8      	adds	r0, r5, r3
 8012dba:	eb46 0104 	adc.w	r1, r6, r4
 8012dbe:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8012dc2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012dc6:	3302      	adds	r3, #2
 8012dc8:	00db      	lsls	r3, r3, #3
 8012dca:	4413      	add	r3, r2
 8012dcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012dd0:	18c5      	adds	r5, r0, r3
 8012dd2:	eb41 0604 	adc.w	r6, r1, r4
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	4632      	mov	r2, r6
 8012dda:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012dde:	e9c3 1200 	strd	r1, r2, [r3]
 8012de2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012de6:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8012dea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012dee:	0121      	lsls	r1, r4, #4
 8012df0:	0f1a      	lsrs	r2, r3, #28
 8012df2:	430a      	orrs	r2, r1
 8012df4:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8012df8:	011a      	lsls	r2, r3, #4
 8012dfa:	0f23      	lsrs	r3, r4, #28
 8012dfc:	4313      	orrs	r3, r2
 8012dfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8012e02:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012e06:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8012e0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012e0e:	0899      	lsrs	r1, r3, #2
 8012e10:	07a2      	lsls	r2, r4, #30
 8012e12:	430a      	orrs	r2, r1
 8012e14:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8012e18:	08a2      	lsrs	r2, r4, #2
 8012e1a:	079b      	lsls	r3, r3, #30
 8012e1c:	4313      	orrs	r3, r2
 8012e1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e26:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012e2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012e2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012e32:	ea85 0503 	eor.w	r5, r5, r3
 8012e36:	ea86 0604 	eor.w	r6, r6, r4
 8012e3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012e3e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8012e42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012e46:	09d9      	lsrs	r1, r3, #7
 8012e48:	0662      	lsls	r2, r4, #25
 8012e4a:	430a      	orrs	r2, r1
 8012e4c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8012e50:	09e2      	lsrs	r2, r4, #7
 8012e52:	065b      	lsls	r3, r3, #25
 8012e54:	4313      	orrs	r3, r2
 8012e56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8012e5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012e5e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8012e62:	ea8a 0a05 	eor.w	sl, sl, r5
 8012e66:	ea8b 0b06 	eor.w	fp, fp, r6
 8012e6a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012e6e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8012e72:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012e76:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012e7a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8012e7e:	e001      	b.n	8012e84 <mbedtls_internal_sha512_process+0x7a4>
 8012e80:	08019c60 	.word	0x08019c60
 8012e84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012e88:	ea01 0803 	and.w	r8, r1, r3
 8012e8c:	ea02 0904 	and.w	r9, r2, r4
 8012e90:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012e94:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8012e98:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012e9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012ea0:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8012ea4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012ea8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012eac:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8012eb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012eb4:	ea43 0301 	orr.w	r3, r3, r1
 8012eb8:	ea44 0402 	orr.w	r4, r4, r2
 8012ebc:	ea03 0105 	and.w	r1, r3, r5
 8012ec0:	ea04 0206 	and.w	r2, r4, r6
 8012ec4:	ea41 0308 	orr.w	r3, r1, r8
 8012ec8:	ea42 0409 	orr.w	r4, r2, r9
 8012ecc:	eb1a 0103 	adds.w	r1, sl, r3
 8012ed0:	eb4b 0204 	adc.w	r2, fp, r4
 8012ed4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012ed8:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8012edc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012ee0:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8012ee4:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012ee8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012eec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ef0:	18e9      	adds	r1, r5, r3
 8012ef2:	eb46 0204 	adc.w	r2, r6, r4
 8012ef6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012efa:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8012efe:	e9c3 1200 	strd	r1, r2, [r3]
 8012f02:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012f06:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012f0a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012f0e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8012f12:	18e9      	adds	r1, r5, r3
 8012f14:	eb46 0204 	adc.w	r2, r6, r4
 8012f18:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012f1c:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8012f20:	e9c3 1200 	strd	r1, r2, [r3]
           local.A[4], local.A[5], local.A[6], local.W[i], K[i] ); i++;
 8012f24:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8012f28:	3301      	adds	r3, #1
 8012f2a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( local.A[6], local.A[7], local.A[0], local.A[1], local.A[2],
 8012f2e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012f32:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8012f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012f3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012f3e:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8012f42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f46:	04a1      	lsls	r1, r4, #18
 8012f48:	0b9a      	lsrs	r2, r3, #14
 8012f4a:	430a      	orrs	r2, r1
 8012f4c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8012f50:	049a      	lsls	r2, r3, #18
 8012f52:	0ba3      	lsrs	r3, r4, #14
 8012f54:	4313      	orrs	r3, r2
 8012f56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8012f5a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012f5e:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8012f62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f66:	03a1      	lsls	r1, r4, #14
 8012f68:	0c9a      	lsrs	r2, r3, #18
 8012f6a:	430a      	orrs	r2, r1
 8012f6c:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8012f70:	039a      	lsls	r2, r3, #14
 8012f72:	0ca3      	lsrs	r3, r4, #18
 8012f74:	4313      	orrs	r3, r2
 8012f76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012f7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012f7e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012f82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012f86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f8a:	ea85 0503 	eor.w	r5, r5, r3
 8012f8e:	ea86 0604 	eor.w	r6, r6, r4
 8012f92:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012f96:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8012f9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012f9e:	0a59      	lsrs	r1, r3, #9
 8012fa0:	05e2      	lsls	r2, r4, #23
 8012fa2:	430a      	orrs	r2, r1
 8012fa4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8012fa8:	0a62      	lsrs	r2, r4, #9
 8012faa:	05db      	lsls	r3, r3, #23
 8012fac:	4313      	orrs	r3, r2
 8012fae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8012fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012fba:	ea83 0305 	eor.w	r3, r3, r5
 8012fbe:	ea84 0406 	eor.w	r4, r4, r6
 8012fc2:	eb18 0a03 	adds.w	sl, r8, r3
 8012fc6:	eb49 0b04 	adc.w	fp, r9, r4
 8012fca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012fce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012fd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012fd6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012fda:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8012fde:	e9d3 5600 	ldrd	r5, r6, [r3]
 8012fe2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012fe6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8012fea:	e9d3 1200 	ldrd	r1, r2, [r3]
 8012fee:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8012ff2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012ff6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012ffa:	ea83 0301 	eor.w	r3, r3, r1
 8012ffe:	ea84 0402 	eor.w	r4, r4, r2
 8013002:	ea03 0105 	and.w	r1, r3, r5
 8013006:	ea04 0206 	and.w	r2, r4, r6
 801300a:	ea81 0308 	eor.w	r3, r1, r8
 801300e:	ea82 0409 	eor.w	r4, r2, r9
 8013012:	eb1a 0503 	adds.w	r5, sl, r3
 8013016:	eb4b 0604 	adc.w	r6, fp, r4
 801301a:	4ace      	ldr	r2, [pc, #824]	; (8013354 <mbedtls_internal_sha512_process+0xc74>)
 801301c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013020:	00db      	lsls	r3, r3, #3
 8013022:	4413      	add	r3, r2
 8013024:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013028:	18e8      	adds	r0, r5, r3
 801302a:	eb46 0104 	adc.w	r1, r6, r4
 801302e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8013032:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013036:	3302      	adds	r3, #2
 8013038:	00db      	lsls	r3, r3, #3
 801303a:	4413      	add	r3, r2
 801303c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013040:	18c5      	adds	r5, r0, r3
 8013042:	eb41 0604 	adc.w	r6, r1, r4
 8013046:	4629      	mov	r1, r5
 8013048:	4632      	mov	r2, r6
 801304a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801304e:	e9c3 1200 	strd	r1, r2, [r3]
 8013052:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013056:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 801305a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801305e:	0121      	lsls	r1, r4, #4
 8013060:	0f1a      	lsrs	r2, r3, #28
 8013062:	430a      	orrs	r2, r1
 8013064:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8013068:	011a      	lsls	r2, r3, #4
 801306a:	0f23      	lsrs	r3, r4, #28
 801306c:	4313      	orrs	r3, r2
 801306e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8013072:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013076:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 801307a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801307e:	0899      	lsrs	r1, r3, #2
 8013080:	07a2      	lsls	r2, r4, #30
 8013082:	430a      	orrs	r2, r1
 8013084:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8013088:	08a2      	lsrs	r2, r4, #2
 801308a:	079b      	lsls	r3, r3, #30
 801308c:	4313      	orrs	r3, r2
 801308e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013092:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8013096:	e9d3 5600 	ldrd	r5, r6, [r3]
 801309a:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 801309e:	ea85 0503 	eor.w	r5, r5, r3
 80130a2:	ea86 0604 	eor.w	r6, r6, r4
 80130a6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80130aa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80130ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80130b2:	09d9      	lsrs	r1, r3, #7
 80130b4:	0662      	lsls	r2, r4, #25
 80130b6:	430a      	orrs	r2, r1
 80130b8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80130bc:	09e2      	lsrs	r2, r4, #7
 80130be:	065b      	lsls	r3, r3, #25
 80130c0:	4313      	orrs	r3, r2
 80130c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80130c6:	e9d7 ab3c 	ldrd	sl, fp, [r7, #240]	; 0xf0
 80130ca:	ea8a 0a05 	eor.w	sl, sl, r5
 80130ce:	ea8b 0b06 	eor.w	fp, fp, r6
 80130d2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80130d6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80130da:	e9d3 1200 	ldrd	r1, r2, [r3]
 80130de:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80130e2:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80130e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80130ea:	ea01 0803 	and.w	r8, r1, r3
 80130ee:	ea02 0904 	and.w	r9, r2, r4
 80130f2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80130f6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80130fa:	e9d3 5600 	ldrd	r5, r6, [r3]
 80130fe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013102:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8013106:	e9d3 1200 	ldrd	r1, r2, [r3]
 801310a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801310e:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8013112:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013116:	ea43 0301 	orr.w	r3, r3, r1
 801311a:	ea44 0402 	orr.w	r4, r4, r2
 801311e:	ea03 0105 	and.w	r1, r3, r5
 8013122:	ea04 0206 	and.w	r2, r4, r6
 8013126:	ea41 0308 	orr.w	r3, r1, r8
 801312a:	ea42 0409 	orr.w	r4, r2, r9
 801312e:	eb1a 0103 	adds.w	r1, sl, r3
 8013132:	eb4b 0204 	adc.w	r2, fp, r4
 8013136:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801313a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 801313e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013142:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013146:	e9d3 5600 	ldrd	r5, r6, [r3]
 801314a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801314e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013152:	18e9      	adds	r1, r5, r3
 8013154:	eb46 0204 	adc.w	r2, r6, r4
 8013158:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801315c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013160:	e9c3 1200 	strd	r1, r2, [r3]
 8013164:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013168:	e9d3 5600 	ldrd	r5, r6, [r3]
 801316c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013170:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8013174:	18e9      	adds	r1, r5, r3
 8013176:	eb46 0204 	adc.w	r2, r6, r4
 801317a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801317e:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013182:	e9c3 1200 	strd	r1, r2, [r3]
           local.A[3], local.A[4], local.A[5], local.W[i], K[i] ); i++;
 8013186:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801318a:	3301      	adds	r3, #1
 801318c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( local.A[5], local.A[6], local.A[7], local.A[0], local.A[1],
 8013190:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013194:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013198:	e9d3 8900 	ldrd	r8, r9, [r3]
 801319c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80131a0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80131a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80131a8:	04a1      	lsls	r1, r4, #18
 80131aa:	0b9a      	lsrs	r2, r3, #14
 80131ac:	430a      	orrs	r2, r1
 80131ae:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80131b2:	049a      	lsls	r2, r3, #18
 80131b4:	0ba3      	lsrs	r3, r4, #14
 80131b6:	4313      	orrs	r3, r2
 80131b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80131bc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80131c0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80131c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80131c8:	03a1      	lsls	r1, r4, #14
 80131ca:	0c9a      	lsrs	r2, r3, #18
 80131cc:	430a      	orrs	r2, r1
 80131ce:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80131d2:	039a      	lsls	r2, r3, #14
 80131d4:	0ca3      	lsrs	r3, r4, #18
 80131d6:	4313      	orrs	r3, r2
 80131d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80131dc:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 80131e0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80131e4:	ea85 0503 	eor.w	r5, r5, r3
 80131e8:	ea86 0604 	eor.w	r6, r6, r4
 80131ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80131f0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80131f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80131f8:	0a59      	lsrs	r1, r3, #9
 80131fa:	05e2      	lsls	r2, r4, #23
 80131fc:	430a      	orrs	r2, r1
 80131fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8013202:	0a62      	lsrs	r2, r4, #9
 8013204:	05db      	lsls	r3, r3, #23
 8013206:	4313      	orrs	r3, r2
 8013208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801320c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8013210:	ea83 0305 	eor.w	r3, r3, r5
 8013214:	ea84 0406 	eor.w	r4, r4, r6
 8013218:	eb18 0a03 	adds.w	sl, r8, r3
 801321c:	eb49 0b04 	adc.w	fp, r9, r4
 8013220:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013224:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013228:	e9d3 8900 	ldrd	r8, r9, [r3]
 801322c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013230:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013234:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013238:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801323c:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8013240:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013244:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013248:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801324c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013250:	ea83 0301 	eor.w	r3, r3, r1
 8013254:	ea84 0402 	eor.w	r4, r4, r2
 8013258:	ea03 0105 	and.w	r1, r3, r5
 801325c:	ea04 0206 	and.w	r2, r4, r6
 8013260:	ea81 0308 	eor.w	r3, r1, r8
 8013264:	ea82 0409 	eor.w	r4, r2, r9
 8013268:	eb1a 0503 	adds.w	r5, sl, r3
 801326c:	eb4b 0604 	adc.w	r6, fp, r4
 8013270:	4a38      	ldr	r2, [pc, #224]	; (8013354 <mbedtls_internal_sha512_process+0xc74>)
 8013272:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013276:	00db      	lsls	r3, r3, #3
 8013278:	4413      	add	r3, r2
 801327a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801327e:	18e8      	adds	r0, r5, r3
 8013280:	eb46 0104 	adc.w	r1, r6, r4
 8013284:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8013288:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801328c:	3302      	adds	r3, #2
 801328e:	00db      	lsls	r3, r3, #3
 8013290:	4413      	add	r3, r2
 8013292:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013296:	18c5      	adds	r5, r0, r3
 8013298:	eb41 0604 	adc.w	r6, r1, r4
 801329c:	4629      	mov	r1, r5
 801329e:	4632      	mov	r2, r6
 80132a0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80132a4:	e9c3 1200 	strd	r1, r2, [r3]
 80132a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80132ac:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80132b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80132b4:	0121      	lsls	r1, r4, #4
 80132b6:	0f1a      	lsrs	r2, r3, #28
 80132b8:	430a      	orrs	r2, r1
 80132ba:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80132be:	011a      	lsls	r2, r3, #4
 80132c0:	0f23      	lsrs	r3, r4, #28
 80132c2:	4313      	orrs	r3, r2
 80132c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80132c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80132cc:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80132d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80132d4:	0899      	lsrs	r1, r3, #2
 80132d6:	07a2      	lsls	r2, r4, #30
 80132d8:	430a      	orrs	r2, r1
 80132da:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80132de:	08a2      	lsrs	r2, r4, #2
 80132e0:	079b      	lsls	r3, r3, #30
 80132e2:	4313      	orrs	r3, r2
 80132e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80132e8:	e9d7 5634 	ldrd	r5, r6, [r7, #208]	; 0xd0
 80132ec:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80132f0:	ea85 0503 	eor.w	r5, r5, r3
 80132f4:	ea86 0604 	eor.w	r6, r6, r4
 80132f8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80132fc:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013300:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013304:	09d9      	lsrs	r1, r3, #7
 8013306:	0662      	lsls	r2, r4, #25
 8013308:	430a      	orrs	r2, r1
 801330a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 801330e:	09e2      	lsrs	r2, r4, #7
 8013310:	065b      	lsls	r3, r3, #25
 8013312:	4313      	orrs	r3, r2
 8013314:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013318:	e9d7 ab30 	ldrd	sl, fp, [r7, #192]	; 0xc0
 801331c:	ea8a 0a05 	eor.w	sl, sl, r5
 8013320:	ea8b 0b06 	eor.w	fp, fp, r6
 8013324:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013328:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 801332c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013330:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013334:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8013338:	e9d3 3400 	ldrd	r3, r4, [r3]
 801333c:	ea01 0803 	and.w	r8, r1, r3
 8013340:	ea02 0904 	and.w	r9, r2, r4
 8013344:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013348:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801334c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013350:	e002      	b.n	8013358 <mbedtls_internal_sha512_process+0xc78>
 8013352:	bf00      	nop
 8013354:	08019c60 	.word	0x08019c60
 8013358:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801335c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013360:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013364:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013368:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 801336c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013370:	ea43 0301 	orr.w	r3, r3, r1
 8013374:	ea44 0402 	orr.w	r4, r4, r2
 8013378:	ea03 0105 	and.w	r1, r3, r5
 801337c:	ea04 0206 	and.w	r2, r4, r6
 8013380:	ea41 0308 	orr.w	r3, r1, r8
 8013384:	ea42 0409 	orr.w	r4, r2, r9
 8013388:	eb1a 0103 	adds.w	r1, sl, r3
 801338c:	eb4b 0204 	adc.w	r2, fp, r4
 8013390:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013394:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8013398:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801339c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80133a0:	e9d3 5600 	ldrd	r5, r6, [r3]
 80133a4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80133a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80133ac:	18e9      	adds	r1, r5, r3
 80133ae:	eb46 0204 	adc.w	r2, r6, r4
 80133b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80133b6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80133ba:	e9c3 1200 	strd	r1, r2, [r3]
 80133be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80133c2:	e9d3 5600 	ldrd	r5, r6, [r3]
 80133c6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80133ca:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80133ce:	18e9      	adds	r1, r5, r3
 80133d0:	eb46 0204 	adc.w	r2, r6, r4
 80133d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80133d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80133dc:	e9c3 1200 	strd	r1, r2, [r3]
           local.A[2], local.A[3], local.A[4], local.W[i], K[i] ); i++;
 80133e0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80133e4:	3301      	adds	r3, #1
 80133e6:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( local.A[4], local.A[5], local.A[6], local.A[7], local.A[0],
 80133ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80133ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80133f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80133f6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80133fa:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80133fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013402:	04a1      	lsls	r1, r4, #18
 8013404:	0b9a      	lsrs	r2, r3, #14
 8013406:	430a      	orrs	r2, r1
 8013408:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 801340c:	049a      	lsls	r2, r3, #18
 801340e:	0ba3      	lsrs	r3, r4, #14
 8013410:	4313      	orrs	r3, r2
 8013412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013416:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801341a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 801341e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013422:	03a1      	lsls	r1, r4, #14
 8013424:	0c9a      	lsrs	r2, r3, #18
 8013426:	430a      	orrs	r2, r1
 8013428:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801342c:	039a      	lsls	r2, r3, #14
 801342e:	0ca3      	lsrs	r3, r4, #18
 8013430:	4313      	orrs	r3, r2
 8013432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013436:	e9d7 562e 	ldrd	r5, r6, [r7, #184]	; 0xb8
 801343a:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 801343e:	ea85 0503 	eor.w	r5, r5, r3
 8013442:	ea86 0604 	eor.w	r6, r6, r4
 8013446:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801344a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 801344e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013452:	0a59      	lsrs	r1, r3, #9
 8013454:	05e2      	lsls	r2, r4, #23
 8013456:	430a      	orrs	r2, r1
 8013458:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801345c:	0a62      	lsrs	r2, r4, #9
 801345e:	05db      	lsls	r3, r3, #23
 8013460:	4313      	orrs	r3, r2
 8013462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013466:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 801346a:	ea83 0305 	eor.w	r3, r3, r5
 801346e:	ea84 0406 	eor.w	r4, r4, r6
 8013472:	eb18 0a03 	adds.w	sl, r8, r3
 8013476:	eb49 0b04 	adc.w	fp, r9, r4
 801347a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801347e:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8013482:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013486:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801348a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 801348e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013492:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013496:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801349a:	e9d3 1200 	ldrd	r1, r2, [r3]
 801349e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80134a2:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80134a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80134aa:	ea83 0301 	eor.w	r3, r3, r1
 80134ae:	ea84 0402 	eor.w	r4, r4, r2
 80134b2:	ea03 0105 	and.w	r1, r3, r5
 80134b6:	ea04 0206 	and.w	r2, r4, r6
 80134ba:	ea81 0308 	eor.w	r3, r1, r8
 80134be:	ea82 0409 	eor.w	r4, r2, r9
 80134c2:	eb1a 0503 	adds.w	r5, sl, r3
 80134c6:	eb4b 0604 	adc.w	r6, fp, r4
 80134ca:	4aca      	ldr	r2, [pc, #808]	; (80137f4 <mbedtls_internal_sha512_process+0x1114>)
 80134cc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80134d0:	00db      	lsls	r3, r3, #3
 80134d2:	4413      	add	r3, r2
 80134d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80134d8:	18e8      	adds	r0, r5, r3
 80134da:	eb46 0104 	adc.w	r1, r6, r4
 80134de:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80134e2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80134e6:	3302      	adds	r3, #2
 80134e8:	00db      	lsls	r3, r3, #3
 80134ea:	4413      	add	r3, r2
 80134ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80134f0:	18c5      	adds	r5, r0, r3
 80134f2:	eb41 0604 	adc.w	r6, r1, r4
 80134f6:	4629      	mov	r1, r5
 80134f8:	4632      	mov	r2, r6
 80134fa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80134fe:	e9c3 1200 	strd	r1, r2, [r3]
 8013502:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013506:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801350a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801350e:	0121      	lsls	r1, r4, #4
 8013510:	0f1a      	lsrs	r2, r3, #28
 8013512:	430a      	orrs	r2, r1
 8013514:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8013518:	011a      	lsls	r2, r3, #4
 801351a:	0f23      	lsrs	r3, r4, #28
 801351c:	4313      	orrs	r3, r2
 801351e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013522:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013526:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801352a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801352e:	0899      	lsrs	r1, r3, #2
 8013530:	07a2      	lsls	r2, r4, #30
 8013532:	430a      	orrs	r2, r1
 8013534:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8013538:	08a2      	lsrs	r2, r4, #2
 801353a:	079b      	lsls	r3, r3, #30
 801353c:	4313      	orrs	r3, r2
 801353e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013542:	e9d7 5628 	ldrd	r5, r6, [r7, #160]	; 0xa0
 8013546:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 801354a:	ea85 0503 	eor.w	r5, r5, r3
 801354e:	ea86 0604 	eor.w	r6, r6, r4
 8013552:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013556:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801355a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801355e:	09d9      	lsrs	r1, r3, #7
 8013560:	0662      	lsls	r2, r4, #25
 8013562:	430a      	orrs	r2, r1
 8013564:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013568:	09e2      	lsrs	r2, r4, #7
 801356a:	065b      	lsls	r3, r3, #25
 801356c:	4313      	orrs	r3, r2
 801356e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013572:	e9d7 ab24 	ldrd	sl, fp, [r7, #144]	; 0x90
 8013576:	ea8a 0a05 	eor.w	sl, sl, r5
 801357a:	ea8b 0b06 	eor.w	fp, fp, r6
 801357e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013582:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013586:	e9d3 1200 	ldrd	r1, r2, [r3]
 801358a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801358e:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013596:	ea01 0803 	and.w	r8, r1, r3
 801359a:	ea02 0904 	and.w	r9, r2, r4
 801359e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80135a2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80135a6:	e9d3 5600 	ldrd	r5, r6, [r3]
 80135aa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80135ae:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80135b2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80135b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80135ba:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80135be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80135c2:	ea43 0301 	orr.w	r3, r3, r1
 80135c6:	ea44 0402 	orr.w	r4, r4, r2
 80135ca:	ea03 0105 	and.w	r1, r3, r5
 80135ce:	ea04 0206 	and.w	r2, r4, r6
 80135d2:	ea41 0308 	orr.w	r3, r1, r8
 80135d6:	ea42 0409 	orr.w	r4, r2, r9
 80135da:	eb1a 0103 	adds.w	r1, sl, r3
 80135de:	eb4b 0204 	adc.w	r2, fp, r4
 80135e2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80135e6:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80135ea:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80135ee:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80135f2:	e9d3 5600 	ldrd	r5, r6, [r3]
 80135f6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80135fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80135fe:	18e9      	adds	r1, r5, r3
 8013600:	eb46 0204 	adc.w	r2, r6, r4
 8013604:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013608:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801360c:	e9c3 1200 	strd	r1, r2, [r3]
 8013610:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013614:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013618:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801361c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8013620:	18e9      	adds	r1, r5, r3
 8013622:	eb46 0204 	adc.w	r2, r6, r4
 8013626:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801362a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801362e:	e9c3 1200 	strd	r1, r2, [r3]
           local.A[1], local.A[2], local.A[3], local.W[i], K[i] ); i++;
 8013632:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013636:	3301      	adds	r3, #1
 8013638:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( local.A[3], local.A[4], local.A[5], local.A[6], local.A[7],
 801363c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013640:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8013644:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013648:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801364c:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8013650:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013654:	04a1      	lsls	r1, r4, #18
 8013656:	0b9a      	lsrs	r2, r3, #14
 8013658:	430a      	orrs	r2, r1
 801365a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 801365e:	049a      	lsls	r2, r3, #18
 8013660:	0ba3      	lsrs	r3, r4, #14
 8013662:	4313      	orrs	r3, r2
 8013664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013668:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801366c:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8013670:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013674:	03a1      	lsls	r1, r4, #14
 8013676:	0c9a      	lsrs	r2, r3, #18
 8013678:	430a      	orrs	r2, r1
 801367a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801367e:	039a      	lsls	r2, r3, #14
 8013680:	0ca3      	lsrs	r3, r4, #18
 8013682:	4313      	orrs	r3, r2
 8013684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013688:	e9d7 5622 	ldrd	r5, r6, [r7, #136]	; 0x88
 801368c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8013690:	ea85 0503 	eor.w	r5, r5, r3
 8013694:	ea86 0604 	eor.w	r6, r6, r4
 8013698:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801369c:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80136a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80136a4:	0a59      	lsrs	r1, r3, #9
 80136a6:	05e2      	lsls	r2, r4, #23
 80136a8:	430a      	orrs	r2, r1
 80136aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80136ac:	0a62      	lsrs	r2, r4, #9
 80136ae:	05db      	lsls	r3, r3, #23
 80136b0:	4313      	orrs	r3, r2
 80136b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80136b4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80136b8:	ea83 0305 	eor.w	r3, r3, r5
 80136bc:	ea84 0406 	eor.w	r4, r4, r6
 80136c0:	eb18 0a03 	adds.w	sl, r8, r3
 80136c4:	eb49 0b04 	adc.w	fp, r9, r4
 80136c8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80136cc:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80136d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80136d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80136d8:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80136dc:	e9d3 5600 	ldrd	r5, r6, [r3]
 80136e0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80136e4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80136e8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80136ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80136f0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80136f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80136f8:	ea83 0301 	eor.w	r3, r3, r1
 80136fc:	ea84 0402 	eor.w	r4, r4, r2
 8013700:	ea03 0105 	and.w	r1, r3, r5
 8013704:	ea04 0206 	and.w	r2, r4, r6
 8013708:	ea81 0308 	eor.w	r3, r1, r8
 801370c:	ea82 0409 	eor.w	r4, r2, r9
 8013710:	eb1a 0503 	adds.w	r5, sl, r3
 8013714:	eb4b 0604 	adc.w	r6, fp, r4
 8013718:	4a36      	ldr	r2, [pc, #216]	; (80137f4 <mbedtls_internal_sha512_process+0x1114>)
 801371a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801371e:	00db      	lsls	r3, r3, #3
 8013720:	4413      	add	r3, r2
 8013722:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013726:	18e8      	adds	r0, r5, r3
 8013728:	eb46 0104 	adc.w	r1, r6, r4
 801372c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8013730:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013734:	3302      	adds	r3, #2
 8013736:	00db      	lsls	r3, r3, #3
 8013738:	4413      	add	r3, r2
 801373a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801373e:	18c5      	adds	r5, r0, r3
 8013740:	eb41 0604 	adc.w	r6, r1, r4
 8013744:	4629      	mov	r1, r5
 8013746:	4632      	mov	r2, r6
 8013748:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801374c:	e9c3 1200 	strd	r1, r2, [r3]
 8013750:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013754:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013758:	e9d3 3400 	ldrd	r3, r4, [r3]
 801375c:	0121      	lsls	r1, r4, #4
 801375e:	0f1a      	lsrs	r2, r3, #28
 8013760:	430a      	orrs	r2, r1
 8013762:	673a      	str	r2, [r7, #112]	; 0x70
 8013764:	011a      	lsls	r2, r3, #4
 8013766:	0f23      	lsrs	r3, r4, #28
 8013768:	4313      	orrs	r3, r2
 801376a:	677b      	str	r3, [r7, #116]	; 0x74
 801376c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013770:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013774:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013778:	0899      	lsrs	r1, r3, #2
 801377a:	07a2      	lsls	r2, r4, #30
 801377c:	430a      	orrs	r2, r1
 801377e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013780:	08a2      	lsrs	r2, r4, #2
 8013782:	079b      	lsls	r3, r3, #30
 8013784:	4313      	orrs	r3, r2
 8013786:	66bb      	str	r3, [r7, #104]	; 0x68
 8013788:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
 801378c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8013790:	ea85 0503 	eor.w	r5, r5, r3
 8013794:	ea86 0604 	eor.w	r6, r6, r4
 8013798:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801379c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80137a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137a4:	09d9      	lsrs	r1, r3, #7
 80137a6:	0662      	lsls	r2, r4, #25
 80137a8:	430a      	orrs	r2, r1
 80137aa:	667a      	str	r2, [r7, #100]	; 0x64
 80137ac:	09e2      	lsrs	r2, r4, #7
 80137ae:	065b      	lsls	r3, r3, #25
 80137b0:	4313      	orrs	r3, r2
 80137b2:	663b      	str	r3, [r7, #96]	; 0x60
 80137b4:	e9d7 ab18 	ldrd	sl, fp, [r7, #96]	; 0x60
 80137b8:	ea8a 0a05 	eor.w	sl, sl, r5
 80137bc:	ea8b 0b06 	eor.w	fp, fp, r6
 80137c0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80137c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80137c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80137cc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80137d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80137d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80137d8:	ea01 0803 	and.w	r8, r1, r3
 80137dc:	ea02 0904 	and.w	r9, r2, r4
 80137e0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80137e4:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80137e8:	e9d3 5600 	ldrd	r5, r6, [r3]
 80137ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80137f0:	e002      	b.n	80137f8 <mbedtls_internal_sha512_process+0x1118>
 80137f2:	bf00      	nop
 80137f4:	08019c60 	.word	0x08019c60
 80137f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80137fc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013800:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013804:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013808:	e9d3 3400 	ldrd	r3, r4, [r3]
 801380c:	ea43 0301 	orr.w	r3, r3, r1
 8013810:	ea44 0402 	orr.w	r4, r4, r2
 8013814:	ea03 0105 	and.w	r1, r3, r5
 8013818:	ea04 0206 	and.w	r2, r4, r6
 801381c:	ea41 0308 	orr.w	r3, r1, r8
 8013820:	ea42 0409 	orr.w	r4, r2, r9
 8013824:	eb1a 0103 	adds.w	r1, sl, r3
 8013828:	eb4b 0204 	adc.w	r2, fp, r4
 801382c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013830:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8013834:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013838:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 801383c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013840:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013844:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013848:	18e9      	adds	r1, r5, r3
 801384a:	eb46 0204 	adc.w	r2, r6, r4
 801384e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013852:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8013856:	e9c3 1200 	strd	r1, r2, [r3]
 801385a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801385e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013862:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013866:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 801386a:	18e9      	adds	r1, r5, r3
 801386c:	eb46 0204 	adc.w	r2, r6, r4
 8013870:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013874:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8013878:	e9c3 1200 	strd	r1, r2, [r3]
           local.A[0], local.A[1], local.A[2], local.W[i], K[i] ); i++;
 801387c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013880:	3301      	adds	r3, #1
 8013882:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( local.A[2], local.A[3], local.A[4], local.A[5], local.A[6],
 8013886:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801388a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 801388e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013892:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013896:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 801389a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801389e:	04a1      	lsls	r1, r4, #18
 80138a0:	0b9a      	lsrs	r2, r3, #14
 80138a2:	430a      	orrs	r2, r1
 80138a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80138a6:	049a      	lsls	r2, r3, #18
 80138a8:	0ba3      	lsrs	r3, r4, #14
 80138aa:	4313      	orrs	r3, r2
 80138ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80138ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80138b2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80138b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80138ba:	03a1      	lsls	r1, r4, #14
 80138bc:	0c9a      	lsrs	r2, r3, #18
 80138be:	430a      	orrs	r2, r1
 80138c0:	653a      	str	r2, [r7, #80]	; 0x50
 80138c2:	039a      	lsls	r2, r3, #14
 80138c4:	0ca3      	lsrs	r3, r4, #18
 80138c6:	4313      	orrs	r3, r2
 80138c8:	657b      	str	r3, [r7, #84]	; 0x54
 80138ca:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80138ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80138d2:	ea85 0503 	eor.w	r5, r5, r3
 80138d6:	ea86 0604 	eor.w	r6, r6, r4
 80138da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80138de:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80138e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80138e6:	0a59      	lsrs	r1, r3, #9
 80138e8:	05e2      	lsls	r2, r4, #23
 80138ea:	430a      	orrs	r2, r1
 80138ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80138ee:	0a62      	lsrs	r2, r4, #9
 80138f0:	05db      	lsls	r3, r3, #23
 80138f2:	4313      	orrs	r3, r2
 80138f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80138f6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80138fa:	ea83 0305 	eor.w	r3, r3, r5
 80138fe:	ea84 0406 	eor.w	r4, r4, r6
 8013902:	eb18 0a03 	adds.w	sl, r8, r3
 8013906:	eb49 0b04 	adc.w	fp, r9, r4
 801390a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801390e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8013912:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013916:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801391a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 801391e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013922:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013926:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 801392a:	e9d3 1200 	ldrd	r1, r2, [r3]
 801392e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013932:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8013936:	e9d3 3400 	ldrd	r3, r4, [r3]
 801393a:	ea83 0301 	eor.w	r3, r3, r1
 801393e:	ea84 0402 	eor.w	r4, r4, r2
 8013942:	ea03 0105 	and.w	r1, r3, r5
 8013946:	ea04 0206 	and.w	r2, r4, r6
 801394a:	ea81 0308 	eor.w	r3, r1, r8
 801394e:	ea82 0409 	eor.w	r4, r2, r9
 8013952:	eb1a 0503 	adds.w	r5, sl, r3
 8013956:	eb4b 0604 	adc.w	r6, fp, r4
 801395a:	4ac5      	ldr	r2, [pc, #788]	; (8013c70 <mbedtls_internal_sha512_process+0x1590>)
 801395c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013960:	00db      	lsls	r3, r3, #3
 8013962:	4413      	add	r3, r2
 8013964:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013968:	18e8      	adds	r0, r5, r3
 801396a:	eb46 0104 	adc.w	r1, r6, r4
 801396e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8013972:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013976:	3302      	adds	r3, #2
 8013978:	00db      	lsls	r3, r3, #3
 801397a:	4413      	add	r3, r2
 801397c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013980:	18c5      	adds	r5, r0, r3
 8013982:	eb41 0604 	adc.w	r6, r1, r4
 8013986:	4629      	mov	r1, r5
 8013988:	4632      	mov	r2, r6
 801398a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801398e:	e9c3 1200 	strd	r1, r2, [r3]
 8013992:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013996:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 801399a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801399e:	0121      	lsls	r1, r4, #4
 80139a0:	0f1a      	lsrs	r2, r3, #28
 80139a2:	430a      	orrs	r2, r1
 80139a4:	643a      	str	r2, [r7, #64]	; 0x40
 80139a6:	011a      	lsls	r2, r3, #4
 80139a8:	0f23      	lsrs	r3, r4, #28
 80139aa:	4313      	orrs	r3, r2
 80139ac:	647b      	str	r3, [r7, #68]	; 0x44
 80139ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80139b2:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80139b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80139ba:	0899      	lsrs	r1, r3, #2
 80139bc:	07a2      	lsls	r2, r4, #30
 80139be:	430a      	orrs	r2, r1
 80139c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80139c2:	08a2      	lsrs	r2, r4, #2
 80139c4:	079b      	lsls	r3, r3, #30
 80139c6:	4313      	orrs	r3, r2
 80139c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80139ca:	e9d7 5610 	ldrd	r5, r6, [r7, #64]	; 0x40
 80139ce:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80139d2:	ea85 0503 	eor.w	r5, r5, r3
 80139d6:	ea86 0604 	eor.w	r6, r6, r4
 80139da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80139de:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80139e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80139e6:	09d9      	lsrs	r1, r3, #7
 80139e8:	0662      	lsls	r2, r4, #25
 80139ea:	430a      	orrs	r2, r1
 80139ec:	637a      	str	r2, [r7, #52]	; 0x34
 80139ee:	09e2      	lsrs	r2, r4, #7
 80139f0:	065b      	lsls	r3, r3, #25
 80139f2:	4313      	orrs	r3, r2
 80139f4:	633b      	str	r3, [r7, #48]	; 0x30
 80139f6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80139fa:	ea8a 0a05 	eor.w	sl, sl, r5
 80139fe:	ea8b 0b06 	eor.w	fp, fp, r6
 8013a02:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a06:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8013a0a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013a0e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a12:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013a16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013a1a:	ea01 0803 	and.w	r8, r1, r3
 8013a1e:	ea02 0904 	and.w	r9, r2, r4
 8013a22:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a26:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013a2a:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013a2e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a32:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8013a36:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013a3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013a42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013a46:	ea43 0301 	orr.w	r3, r3, r1
 8013a4a:	ea44 0402 	orr.w	r4, r4, r2
 8013a4e:	ea03 0105 	and.w	r1, r3, r5
 8013a52:	ea04 0206 	and.w	r2, r4, r6
 8013a56:	ea41 0308 	orr.w	r3, r1, r8
 8013a5a:	ea42 0409 	orr.w	r4, r2, r9
 8013a5e:	eb1a 0103 	adds.w	r1, sl, r3
 8013a62:	eb4b 0204 	adc.w	r2, fp, r4
 8013a66:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a6a:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8013a6e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a72:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013a76:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013a7a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013a82:	18e9      	adds	r1, r5, r3
 8013a84:	eb46 0204 	adc.w	r2, r6, r4
 8013a88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a8c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013a90:	e9c3 1200 	strd	r1, r2, [r3]
 8013a94:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013a98:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013a9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013aa0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8013aa4:	18e9      	adds	r1, r5, r3
 8013aa6:	eb46 0204 	adc.w	r2, r6, r4
 8013aaa:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013aae:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013ab2:	e9c3 1200 	strd	r1, r2, [r3]
           local.A[7], local.A[0], local.A[1], local.W[i], K[i] ); i++;
 8013ab6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013aba:	3301      	adds	r3, #1
 8013abc:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
 8013ac0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013ac4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8013ac8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013acc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013ad0:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013ad4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013ad8:	04a1      	lsls	r1, r4, #18
 8013ada:	0b9a      	lsrs	r2, r3, #14
 8013adc:	430a      	orrs	r2, r1
 8013ade:	62ba      	str	r2, [r7, #40]	; 0x28
 8013ae0:	049a      	lsls	r2, r3, #18
 8013ae2:	0ba3      	lsrs	r3, r4, #14
 8013ae4:	4313      	orrs	r3, r2
 8013ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ae8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013aec:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013af0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013af4:	03a1      	lsls	r1, r4, #14
 8013af6:	0c9a      	lsrs	r2, r3, #18
 8013af8:	430a      	orrs	r2, r1
 8013afa:	623a      	str	r2, [r7, #32]
 8013afc:	039a      	lsls	r2, r3, #14
 8013afe:	0ca3      	lsrs	r3, r4, #18
 8013b00:	4313      	orrs	r3, r2
 8013b02:	627b      	str	r3, [r7, #36]	; 0x24
 8013b04:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8013b08:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013b0c:	ea85 0503 	eor.w	r5, r5, r3
 8013b10:	ea86 0604 	eor.w	r6, r6, r4
 8013b14:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013b18:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013b1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013b20:	0a59      	lsrs	r1, r3, #9
 8013b22:	05e2      	lsls	r2, r4, #23
 8013b24:	430a      	orrs	r2, r1
 8013b26:	61fa      	str	r2, [r7, #28]
 8013b28:	0a62      	lsrs	r2, r4, #9
 8013b2a:	05db      	lsls	r3, r3, #23
 8013b2c:	4313      	orrs	r3, r2
 8013b2e:	61bb      	str	r3, [r7, #24]
 8013b30:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013b34:	ea83 0305 	eor.w	r3, r3, r5
 8013b38:	ea84 0406 	eor.w	r4, r4, r6
 8013b3c:	eb18 0a03 	adds.w	sl, r8, r3
 8013b40:	eb49 0b04 	adc.w	fp, r9, r4
 8013b44:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013b48:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8013b4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b50:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013b54:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8013b58:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013b5c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013b60:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8013b64:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013b68:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013b6c:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8013b70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013b74:	ea83 0301 	eor.w	r3, r3, r1
 8013b78:	ea84 0402 	eor.w	r4, r4, r2
 8013b7c:	ea03 0105 	and.w	r1, r3, r5
 8013b80:	ea04 0206 	and.w	r2, r4, r6
 8013b84:	ea81 0308 	eor.w	r3, r1, r8
 8013b88:	ea82 0409 	eor.w	r4, r2, r9
 8013b8c:	eb1a 0503 	adds.w	r5, sl, r3
 8013b90:	eb4b 0604 	adc.w	r6, fp, r4
 8013b94:	4a36      	ldr	r2, [pc, #216]	; (8013c70 <mbedtls_internal_sha512_process+0x1590>)
 8013b96:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013b9a:	00db      	lsls	r3, r3, #3
 8013b9c:	4413      	add	r3, r2
 8013b9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013ba2:	18e8      	adds	r0, r5, r3
 8013ba4:	eb46 0104 	adc.w	r1, r6, r4
 8013ba8:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8013bac:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013bb0:	3302      	adds	r3, #2
 8013bb2:	00db      	lsls	r3, r3, #3
 8013bb4:	4413      	add	r3, r2
 8013bb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013bba:	18c5      	adds	r5, r0, r3
 8013bbc:	eb41 0604 	adc.w	r6, r1, r4
 8013bc0:	4629      	mov	r1, r5
 8013bc2:	4632      	mov	r2, r6
 8013bc4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013bc8:	e9c3 1200 	strd	r1, r2, [r3]
 8013bcc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013bd0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013bd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013bd8:	0121      	lsls	r1, r4, #4
 8013bda:	0f1a      	lsrs	r2, r3, #28
 8013bdc:	430a      	orrs	r2, r1
 8013bde:	613a      	str	r2, [r7, #16]
 8013be0:	011a      	lsls	r2, r3, #4
 8013be2:	0f23      	lsrs	r3, r4, #28
 8013be4:	4313      	orrs	r3, r2
 8013be6:	617b      	str	r3, [r7, #20]
 8013be8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013bec:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013bf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013bf4:	0899      	lsrs	r1, r3, #2
 8013bf6:	07a2      	lsls	r2, r4, #30
 8013bf8:	430a      	orrs	r2, r1
 8013bfa:	60fa      	str	r2, [r7, #12]
 8013bfc:	08a2      	lsrs	r2, r4, #2
 8013bfe:	079b      	lsls	r3, r3, #30
 8013c00:	4313      	orrs	r3, r2
 8013c02:	60bb      	str	r3, [r7, #8]
 8013c04:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8013c08:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013c0c:	ea85 0503 	eor.w	r5, r5, r3
 8013c10:	ea86 0604 	eor.w	r6, r6, r4
 8013c14:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013c18:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013c1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013c20:	09d9      	lsrs	r1, r3, #7
 8013c22:	0662      	lsls	r2, r4, #25
 8013c24:	430a      	orrs	r2, r1
 8013c26:	607a      	str	r2, [r7, #4]
 8013c28:	09e2      	lsrs	r2, r4, #7
 8013c2a:	065b      	lsls	r3, r3, #25
 8013c2c:	4313      	orrs	r3, r2
 8013c2e:	603b      	str	r3, [r7, #0]
 8013c30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013c34:	ea8a 0a05 	eor.w	sl, sl, r5
 8013c38:	ea8b 0b06 	eor.w	fp, fp, r6
 8013c3c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013c40:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013c44:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013c48:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013c4c:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8013c50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013c54:	ea01 0803 	and.w	r8, r1, r3
 8013c58:	ea02 0904 	and.w	r9, r2, r4
 8013c5c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013c60:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8013c64:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013c68:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013c6c:	e002      	b.n	8013c74 <mbedtls_internal_sha512_process+0x1594>
 8013c6e:	bf00      	nop
 8013c70:	08019c60 	.word	0x08019c60
 8013c74:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8013c78:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013c7c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013c80:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8013c84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013c88:	ea43 0301 	orr.w	r3, r3, r1
 8013c8c:	ea44 0402 	orr.w	r4, r4, r2
 8013c90:	ea03 0105 	and.w	r1, r3, r5
 8013c94:	ea04 0206 	and.w	r2, r4, r6
 8013c98:	ea41 0308 	orr.w	r3, r1, r8
 8013c9c:	ea42 0409 	orr.w	r4, r2, r9
 8013ca0:	eb1a 0103 	adds.w	r1, sl, r3
 8013ca4:	eb4b 0204 	adc.w	r2, fp, r4
 8013ca8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013cac:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8013cb0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013cb4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013cb8:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013cbc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013cc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013cc4:	18e9      	adds	r1, r5, r3
 8013cc6:	eb46 0204 	adc.w	r2, r6, r4
 8013cca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013cce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013cd2:	e9c3 1200 	strd	r1, r2, [r3]
 8013cd6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013cda:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013cde:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013ce2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8013ce6:	18e9      	adds	r1, r5, r3
 8013ce8:	eb46 0204 	adc.w	r2, r6, r4
 8013cec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013cf0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8013cf4:	e9c3 1200 	strd	r1, r2, [r3]
           local.A[6], local.A[7], local.A[0], local.W[i], K[i] ); i++;
 8013cf8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013cfc:	3301      	adds	r3, #1
 8013cfe:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
    }
    while( i < 80 );
 8013d02:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013d06:	2b4f      	cmp	r3, #79	; 0x4f
 8013d08:	f77e aea4 	ble.w	8012a54 <mbedtls_internal_sha512_process+0x374>
#endif /* MBEDTLS_SHA512_SMALLER */

    for( i = 0; i < 8; i++ )
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8013d12:	e024      	b.n	8013d5e <mbedtls_internal_sha512_process+0x167e>
        ctx->state[i] += local.A[i];
 8013d14:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013d1e:	3302      	adds	r3, #2
 8013d20:	00db      	lsls	r3, r3, #3
 8013d22:	4413      	add	r3, r2
 8013d24:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013d28:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8013d2c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013d30:	3352      	adds	r3, #82	; 0x52
 8013d32:	00db      	lsls	r3, r3, #3
 8013d34:	4403      	add	r3, r0
 8013d36:	e9d3 5600 	ldrd	r5, r6, [r3]
 8013d3a:	186b      	adds	r3, r5, r1
 8013d3c:	eb46 0402 	adc.w	r4, r6, r2
 8013d40:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8013d44:	6811      	ldr	r1, [r2, #0]
 8013d46:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8013d4a:	3202      	adds	r2, #2
 8013d4c:	00d2      	lsls	r2, r2, #3
 8013d4e:	440a      	add	r2, r1
 8013d50:	e9c2 3400 	strd	r3, r4, [r2]
    for( i = 0; i < 8; i++ )
 8013d54:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013d58:	3301      	adds	r3, #1
 8013d5a:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8013d5e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8013d62:	2b07      	cmp	r3, #7
 8013d64:	ddd6      	ble.n	8013d14 <mbedtls_internal_sha512_process+0x1634>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
 8013d66:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013d6a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7fa fabe 	bl	800e2f0 <mbedtls_platform_zeroize>

    return( 0 );
 8013d74:	2300      	movs	r3, #0
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	f207 477c 	addw	r7, r7, #1148	; 0x47c
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d82:	bf00      	nop

08013d84 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8013d84:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8013d88:	b088      	sub	sp, #32
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	60f8      	str	r0, [r7, #12]
 8013d8e:	60b9      	str	r1, [r7, #8]
 8013d90:	607a      	str	r2, [r7, #4]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8013d92:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8013d96:	61bb      	str	r3, [r7, #24]
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d101      	bne.n	8013da2 <mbedtls_sha512_update_ret+0x1e>
        return( 0 );
 8013d9e:	2300      	movs	r3, #0
 8013da0:	e073      	b.n	8013e8a <mbedtls_sha512_update_ret+0x106>

    left = (unsigned int) (ctx->total[0] & 0x7F);
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013dac:	61fb      	str	r3, [r7, #28]
    fill = 128 - left;
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8013db4:	617b      	str	r3, [r7, #20]

    ctx->total[0] += (uint64_t) ilen;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	469b      	mov	fp, r3
 8013dc0:	f04f 0c00 	mov.w	ip, #0
 8013dc4:	eb1b 0301 	adds.w	r3, fp, r1
 8013dc8:	eb4c 0402 	adc.w	r4, ip, r2
 8013dcc:	68fa      	ldr	r2, [r7, #12]
 8013dce:	e9c2 3400 	strd	r3, r4, [r2]

    if( ctx->total[0] < (uint64_t) ilen )
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	f04f 0400 	mov.w	r4, #0
 8013dde:	42a2      	cmp	r2, r4
 8013de0:	bf08      	it	eq
 8013de2:	4299      	cmpeq	r1, r3
 8013de4:	d208      	bcs.n	8013df8 <mbedtls_sha512_update_ret+0x74>
        ctx->total[1]++;
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8013dec:	1c4b      	adds	r3, r1, #1
 8013dee:	f142 0400 	adc.w	r4, r2, #0
 8013df2:	68fa      	ldr	r2, [r7, #12]
 8013df4:	e9c2 3402 	strd	r3, r4, [r2, #8]

    if( left && ilen >= fill )
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d034      	beq.n	8013e68 <mbedtls_sha512_update_ret+0xe4>
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	d330      	bcc.n	8013e68 <mbedtls_sha512_update_ret+0xe4>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	4413      	add	r3, r2
 8013e10:	697a      	ldr	r2, [r7, #20]
 8013e12:	68b9      	ldr	r1, [r7, #8]
 8013e14:	4618      	mov	r0, r3
 8013e16:	f001 f980 	bl	801511a <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	3350      	adds	r3, #80	; 0x50
 8013e1e:	4619      	mov	r1, r3
 8013e20:	68f8      	ldr	r0, [r7, #12]
 8013e22:	f7fe fc5d 	bl	80126e0 <mbedtls_internal_sha512_process>
 8013e26:	61b8      	str	r0, [r7, #24]
 8013e28:	69bb      	ldr	r3, [r7, #24]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d001      	beq.n	8013e32 <mbedtls_sha512_update_ret+0xae>
            return( ret );
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	e02b      	b.n	8013e8a <mbedtls_sha512_update_ret+0x106>

        input += fill;
 8013e32:	68ba      	ldr	r2, [r7, #8]
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	4413      	add	r3, r2
 8013e38:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	1ad3      	subs	r3, r2, r3
 8013e40:	607b      	str	r3, [r7, #4]
        left = 0;
 8013e42:	2300      	movs	r3, #0
 8013e44:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 128 )
 8013e46:	e00f      	b.n	8013e68 <mbedtls_sha512_update_ret+0xe4>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 8013e48:	68b9      	ldr	r1, [r7, #8]
 8013e4a:	68f8      	ldr	r0, [r7, #12]
 8013e4c:	f7fe fc48 	bl	80126e0 <mbedtls_internal_sha512_process>
 8013e50:	61b8      	str	r0, [r7, #24]
 8013e52:	69bb      	ldr	r3, [r7, #24]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d001      	beq.n	8013e5c <mbedtls_sha512_update_ret+0xd8>
            return( ret );
 8013e58:	69bb      	ldr	r3, [r7, #24]
 8013e5a:	e016      	b.n	8013e8a <mbedtls_sha512_update_ret+0x106>

        input += 128;
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	3380      	adds	r3, #128	; 0x80
 8013e60:	60bb      	str	r3, [r7, #8]
        ilen  -= 128;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	3b80      	subs	r3, #128	; 0x80
 8013e66:	607b      	str	r3, [r7, #4]
    while( ilen >= 128 )
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8013e6c:	d8ec      	bhi.n	8013e48 <mbedtls_sha512_update_ret+0xc4>
    }

    if( ilen > 0 )
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d009      	beq.n	8013e88 <mbedtls_sha512_update_ret+0x104>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8013e7a:	69fb      	ldr	r3, [r7, #28]
 8013e7c:	4413      	add	r3, r2
 8013e7e:	687a      	ldr	r2, [r7, #4]
 8013e80:	68b9      	ldr	r1, [r7, #8]
 8013e82:	4618      	mov	r0, r3
 8013e84:	f001 f949 	bl	801511a <memcpy>

    return( 0 );
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3720      	adds	r7, #32
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08013e94 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 8013e94:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8013e98:	b088      	sub	sp, #32
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	6078      	str	r0, [r7, #4]
 8013e9e:	6039      	str	r1, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 8013ea0:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 8013ea4:	61fb      	str	r3, [r7, #28]
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013eb0:	61bb      	str	r3, [r7, #24]

    ctx->buffer[used++] = 0x80;
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	1c5a      	adds	r2, r3, #1
 8013eb6:	61ba      	str	r2, [r7, #24]
 8013eb8:	687a      	ldr	r2, [r7, #4]
 8013eba:	4413      	add	r3, r2
 8013ebc:	2280      	movs	r2, #128	; 0x80
 8013ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    if( used <= 112 )
 8013ec2:	69bb      	ldr	r3, [r7, #24]
 8013ec4:	2b70      	cmp	r3, #112	; 0x70
 8013ec6:	d80c      	bhi.n	8013ee2 <mbedtls_sha512_finish_ret+0x4e>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	18d0      	adds	r0, r2, r3
 8013ed2:	69bb      	ldr	r3, [r7, #24]
 8013ed4:	f1c3 0370 	rsb	r3, r3, #112	; 0x70
 8013ed8:	461a      	mov	r2, r3
 8013eda:	2100      	movs	r1, #0
 8013edc:	f001 f941 	bl	8015162 <memset>
 8013ee0:	e01f      	b.n	8013f22 <mbedtls_sha512_finish_ret+0x8e>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8013ee8:	69bb      	ldr	r3, [r7, #24]
 8013eea:	18d0      	adds	r0, r2, r3
 8013eec:	69bb      	ldr	r3, [r7, #24]
 8013eee:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	2100      	movs	r1, #0
 8013ef6:	f001 f934 	bl	8015162 <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	3350      	adds	r3, #80	; 0x50
 8013efe:	4619      	mov	r1, r3
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7fe fbed 	bl	80126e0 <mbedtls_internal_sha512_process>
 8013f06:	61f8      	str	r0, [r7, #28]
 8013f08:	69fb      	ldr	r3, [r7, #28]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d002      	beq.n	8013f14 <mbedtls_sha512_finish_ret+0x80>
            return( ret );
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	f000 bc3e 	b.w	8014790 <mbedtls_sha512_finish_ret+0x8fc>

        memset( ctx->buffer, 0, 112 );
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	3350      	adds	r3, #80	; 0x50
 8013f18:	2270      	movs	r2, #112	; 0x70
 8013f1a:	2100      	movs	r1, #0
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f001 f920 	bl	8015162 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013f28:	f04f 0500 	mov.w	r5, #0
 8013f2c:	f04f 0600 	mov.w	r6, #0
 8013f30:	0f65      	lsrs	r5, r4, #29
 8013f32:	2600      	movs	r6, #0
         | ( ctx->total[1] <<  3 );
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8013f3a:	f04f 0b00 	mov.w	fp, #0
 8013f3e:	f04f 0c00 	mov.w	ip, #0
 8013f42:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8013f46:	ea4c 7c51 	orr.w	ip, ip, r1, lsr #29
 8013f4a:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    high = ( ctx->total[0] >> 61 )
 8013f4e:	ea4b 0305 	orr.w	r3, fp, r5
 8013f52:	ea4c 0406 	orr.w	r4, ip, r6
 8013f56:	e9c7 3404 	strd	r3, r4, [r7, #16]
    low  = ( ctx->total[0] <<  3 );
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8013f60:	f04f 0300 	mov.w	r3, #0
 8013f64:	f04f 0400 	mov.w	r4, #0
 8013f68:	00d4      	lsls	r4, r2, #3
 8013f6a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8013f6e:	00cb      	lsls	r3, r1, #3
 8013f70:	e9c7 3402 	strd	r3, r4, [r7, #8]

    sha512_put_uint64_be( high, ctx->buffer, 112 );
 8013f74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013f78:	f04f 0300 	mov.w	r3, #0
 8013f7c:	f04f 0400 	mov.w	r4, #0
 8013f80:	0e13      	lsrs	r3, r2, #24
 8013f82:	2400      	movs	r4, #0
 8013f84:	b2da      	uxtb	r2, r3
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8013f8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013f90:	f04f 0300 	mov.w	r3, #0
 8013f94:	f04f 0400 	mov.w	r4, #0
 8013f98:	0c13      	lsrs	r3, r2, #16
 8013f9a:	2400      	movs	r4, #0
 8013f9c:	b2da      	uxtb	r2, r3
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8013fa4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013fa8:	f04f 0300 	mov.w	r3, #0
 8013fac:	f04f 0400 	mov.w	r4, #0
 8013fb0:	0a13      	lsrs	r3, r2, #8
 8013fb2:	2400      	movs	r4, #0
 8013fb4:	b2da      	uxtb	r2, r3
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8013fbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013fc0:	f04f 0300 	mov.w	r3, #0
 8013fc4:	f04f 0400 	mov.w	r4, #0
 8013fc8:	0013      	movs	r3, r2
 8013fca:	2400      	movs	r4, #0
 8013fcc:	b2da      	uxtb	r2, r3
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8013fd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013fd8:	f04f 0300 	mov.w	r3, #0
 8013fdc:	f04f 0400 	mov.w	r4, #0
 8013fe0:	0e0b      	lsrs	r3, r1, #24
 8013fe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013fe6:	0e14      	lsrs	r4, r2, #24
 8013fe8:	b2da      	uxtb	r2, r3
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8013ff0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013ff4:	f04f 0300 	mov.w	r3, #0
 8013ff8:	f04f 0400 	mov.w	r4, #0
 8013ffc:	0c0b      	lsrs	r3, r1, #16
 8013ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014002:	0c14      	lsrs	r4, r2, #16
 8014004:	b2da      	uxtb	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 801400c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8014010:	f04f 0300 	mov.w	r3, #0
 8014014:	f04f 0400 	mov.w	r4, #0
 8014018:	0a0b      	lsrs	r3, r1, #8
 801401a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801401e:	0a14      	lsrs	r4, r2, #8
 8014020:	b2da      	uxtb	r2, r3
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8014028:	7c3a      	ldrb	r2, [r7, #16]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
    sha512_put_uint64_be( low,  ctx->buffer, 120 );
 8014030:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014034:	f04f 0300 	mov.w	r3, #0
 8014038:	f04f 0400 	mov.w	r4, #0
 801403c:	0e13      	lsrs	r3, r2, #24
 801403e:	2400      	movs	r4, #0
 8014040:	b2da      	uxtb	r2, r3
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8014048:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801404c:	f04f 0300 	mov.w	r3, #0
 8014050:	f04f 0400 	mov.w	r4, #0
 8014054:	0c13      	lsrs	r3, r2, #16
 8014056:	2400      	movs	r4, #0
 8014058:	b2da      	uxtb	r2, r3
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8014060:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014064:	f04f 0300 	mov.w	r3, #0
 8014068:	f04f 0400 	mov.w	r4, #0
 801406c:	0a13      	lsrs	r3, r2, #8
 801406e:	2400      	movs	r4, #0
 8014070:	b2da      	uxtb	r2, r3
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8014078:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801407c:	f04f 0300 	mov.w	r3, #0
 8014080:	f04f 0400 	mov.w	r4, #0
 8014084:	0013      	movs	r3, r2
 8014086:	2400      	movs	r4, #0
 8014088:	b2da      	uxtb	r2, r3
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8014090:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8014094:	f04f 0300 	mov.w	r3, #0
 8014098:	f04f 0400 	mov.w	r4, #0
 801409c:	0e0b      	lsrs	r3, r1, #24
 801409e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80140a2:	0e14      	lsrs	r4, r2, #24
 80140a4:	b2da      	uxtb	r2, r3
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 80140ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80140b0:	f04f 0300 	mov.w	r3, #0
 80140b4:	f04f 0400 	mov.w	r4, #0
 80140b8:	0c0b      	lsrs	r3, r1, #16
 80140ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80140be:	0c14      	lsrs	r4, r2, #16
 80140c0:	b2da      	uxtb	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 80140c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80140cc:	f04f 0300 	mov.w	r3, #0
 80140d0:	f04f 0400 	mov.w	r4, #0
 80140d4:	0a0b      	lsrs	r3, r1, #8
 80140d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80140da:	0a14      	lsrs	r4, r2, #8
 80140dc:	b2da      	uxtb	r2, r3
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
 80140e4:	7a3a      	ldrb	r2, [r7, #8]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	3350      	adds	r3, #80	; 0x50
 80140f0:	4619      	mov	r1, r3
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f7fe faf4 	bl	80126e0 <mbedtls_internal_sha512_process>
 80140f8:	61f8      	str	r0, [r7, #28]
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d001      	beq.n	8014104 <mbedtls_sha512_finish_ret+0x270>
        return( ret );
 8014100:	69fb      	ldr	r3, [r7, #28]
 8014102:	e345      	b.n	8014790 <mbedtls_sha512_finish_ret+0x8fc>

    /*
     * Output final state
     */
    sha512_put_uint64_be( ctx->state[0], output,  0 );
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801410a:	f04f 0300 	mov.w	r3, #0
 801410e:	f04f 0400 	mov.w	r4, #0
 8014112:	0e13      	lsrs	r3, r2, #24
 8014114:	2400      	movs	r4, #0
 8014116:	b2da      	uxtb	r2, r3
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	701a      	strb	r2, [r3, #0]
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8014122:	f04f 0300 	mov.w	r3, #0
 8014126:	f04f 0400 	mov.w	r4, #0
 801412a:	0c13      	lsrs	r3, r2, #16
 801412c:	2400      	movs	r4, #0
 801412e:	683a      	ldr	r2, [r7, #0]
 8014130:	3201      	adds	r2, #1
 8014132:	b2db      	uxtb	r3, r3
 8014134:	7013      	strb	r3, [r2, #0]
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801413c:	f04f 0300 	mov.w	r3, #0
 8014140:	f04f 0400 	mov.w	r4, #0
 8014144:	0a13      	lsrs	r3, r2, #8
 8014146:	2400      	movs	r4, #0
 8014148:	683a      	ldr	r2, [r7, #0]
 801414a:	3202      	adds	r2, #2
 801414c:	b2db      	uxtb	r3, r3
 801414e:	7013      	strb	r3, [r2, #0]
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8014156:	f04f 0300 	mov.w	r3, #0
 801415a:	f04f 0400 	mov.w	r4, #0
 801415e:	0013      	movs	r3, r2
 8014160:	2400      	movs	r4, #0
 8014162:	683a      	ldr	r2, [r7, #0]
 8014164:	3203      	adds	r2, #3
 8014166:	b2db      	uxtb	r3, r3
 8014168:	7013      	strb	r3, [r2, #0]
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8014170:	f04f 0300 	mov.w	r3, #0
 8014174:	f04f 0400 	mov.w	r4, #0
 8014178:	0e0b      	lsrs	r3, r1, #24
 801417a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801417e:	0e14      	lsrs	r4, r2, #24
 8014180:	683a      	ldr	r2, [r7, #0]
 8014182:	3204      	adds	r2, #4
 8014184:	b2db      	uxtb	r3, r3
 8014186:	7013      	strb	r3, [r2, #0]
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 801418e:	f04f 0300 	mov.w	r3, #0
 8014192:	f04f 0400 	mov.w	r4, #0
 8014196:	0c0b      	lsrs	r3, r1, #16
 8014198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801419c:	0c14      	lsrs	r4, r2, #16
 801419e:	683a      	ldr	r2, [r7, #0]
 80141a0:	3205      	adds	r2, #5
 80141a2:	b2db      	uxtb	r3, r3
 80141a4:	7013      	strb	r3, [r2, #0]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80141ac:	f04f 0300 	mov.w	r3, #0
 80141b0:	f04f 0400 	mov.w	r4, #0
 80141b4:	0a0b      	lsrs	r3, r1, #8
 80141b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80141ba:	0a14      	lsrs	r4, r2, #8
 80141bc:	683a      	ldr	r2, [r7, #0]
 80141be:	3206      	adds	r2, #6
 80141c0:	b2db      	uxtb	r3, r3
 80141c2:	7013      	strb	r3, [r2, #0]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80141ca:	683a      	ldr	r2, [r7, #0]
 80141cc:	3207      	adds	r2, #7
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	7013      	strb	r3, [r2, #0]
    sha512_put_uint64_be( ctx->state[1], output,  8 );
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 80141d8:	f04f 0300 	mov.w	r3, #0
 80141dc:	f04f 0400 	mov.w	r4, #0
 80141e0:	0e13      	lsrs	r3, r2, #24
 80141e2:	2400      	movs	r4, #0
 80141e4:	683a      	ldr	r2, [r7, #0]
 80141e6:	3208      	adds	r2, #8
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	7013      	strb	r3, [r2, #0]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 80141f2:	f04f 0300 	mov.w	r3, #0
 80141f6:	f04f 0400 	mov.w	r4, #0
 80141fa:	0c13      	lsrs	r3, r2, #16
 80141fc:	2400      	movs	r4, #0
 80141fe:	683a      	ldr	r2, [r7, #0]
 8014200:	3209      	adds	r2, #9
 8014202:	b2db      	uxtb	r3, r3
 8014204:	7013      	strb	r3, [r2, #0]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 801420c:	f04f 0300 	mov.w	r3, #0
 8014210:	f04f 0400 	mov.w	r4, #0
 8014214:	0a13      	lsrs	r3, r2, #8
 8014216:	2400      	movs	r4, #0
 8014218:	683a      	ldr	r2, [r7, #0]
 801421a:	320a      	adds	r2, #10
 801421c:	b2db      	uxtb	r3, r3
 801421e:	7013      	strb	r3, [r2, #0]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8014226:	f04f 0300 	mov.w	r3, #0
 801422a:	f04f 0400 	mov.w	r4, #0
 801422e:	0013      	movs	r3, r2
 8014230:	2400      	movs	r4, #0
 8014232:	683a      	ldr	r2, [r7, #0]
 8014234:	320b      	adds	r2, #11
 8014236:	b2db      	uxtb	r3, r3
 8014238:	7013      	strb	r3, [r2, #0]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8014240:	f04f 0300 	mov.w	r3, #0
 8014244:	f04f 0400 	mov.w	r4, #0
 8014248:	0e0b      	lsrs	r3, r1, #24
 801424a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801424e:	0e14      	lsrs	r4, r2, #24
 8014250:	683a      	ldr	r2, [r7, #0]
 8014252:	320c      	adds	r2, #12
 8014254:	b2db      	uxtb	r3, r3
 8014256:	7013      	strb	r3, [r2, #0]
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 801425e:	f04f 0300 	mov.w	r3, #0
 8014262:	f04f 0400 	mov.w	r4, #0
 8014266:	0c0b      	lsrs	r3, r1, #16
 8014268:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801426c:	0c14      	lsrs	r4, r2, #16
 801426e:	683a      	ldr	r2, [r7, #0]
 8014270:	320d      	adds	r2, #13
 8014272:	b2db      	uxtb	r3, r3
 8014274:	7013      	strb	r3, [r2, #0]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 801427c:	f04f 0300 	mov.w	r3, #0
 8014280:	f04f 0400 	mov.w	r4, #0
 8014284:	0a0b      	lsrs	r3, r1, #8
 8014286:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801428a:	0a14      	lsrs	r4, r2, #8
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	320e      	adds	r2, #14
 8014290:	b2db      	uxtb	r3, r3
 8014292:	7013      	strb	r3, [r2, #0]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 801429a:	683a      	ldr	r2, [r7, #0]
 801429c:	320f      	adds	r2, #15
 801429e:	b2db      	uxtb	r3, r3
 80142a0:	7013      	strb	r3, [r2, #0]
    sha512_put_uint64_be( ctx->state[2], output, 16 );
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 80142a8:	f04f 0300 	mov.w	r3, #0
 80142ac:	f04f 0400 	mov.w	r4, #0
 80142b0:	0e13      	lsrs	r3, r2, #24
 80142b2:	2400      	movs	r4, #0
 80142b4:	683a      	ldr	r2, [r7, #0]
 80142b6:	3210      	adds	r2, #16
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	7013      	strb	r3, [r2, #0]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 80142c2:	f04f 0300 	mov.w	r3, #0
 80142c6:	f04f 0400 	mov.w	r4, #0
 80142ca:	0c13      	lsrs	r3, r2, #16
 80142cc:	2400      	movs	r4, #0
 80142ce:	683a      	ldr	r2, [r7, #0]
 80142d0:	3211      	adds	r2, #17
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	7013      	strb	r3, [r2, #0]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 80142dc:	f04f 0300 	mov.w	r3, #0
 80142e0:	f04f 0400 	mov.w	r4, #0
 80142e4:	0a13      	lsrs	r3, r2, #8
 80142e6:	2400      	movs	r4, #0
 80142e8:	683a      	ldr	r2, [r7, #0]
 80142ea:	3212      	adds	r2, #18
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	7013      	strb	r3, [r2, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 80142f6:	f04f 0300 	mov.w	r3, #0
 80142fa:	f04f 0400 	mov.w	r4, #0
 80142fe:	0013      	movs	r3, r2
 8014300:	2400      	movs	r4, #0
 8014302:	683a      	ldr	r2, [r7, #0]
 8014304:	3213      	adds	r2, #19
 8014306:	b2db      	uxtb	r3, r3
 8014308:	7013      	strb	r3, [r2, #0]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 8014310:	f04f 0300 	mov.w	r3, #0
 8014314:	f04f 0400 	mov.w	r4, #0
 8014318:	0e0b      	lsrs	r3, r1, #24
 801431a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801431e:	0e14      	lsrs	r4, r2, #24
 8014320:	683a      	ldr	r2, [r7, #0]
 8014322:	3214      	adds	r2, #20
 8014324:	b2db      	uxtb	r3, r3
 8014326:	7013      	strb	r3, [r2, #0]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 801432e:	f04f 0300 	mov.w	r3, #0
 8014332:	f04f 0400 	mov.w	r4, #0
 8014336:	0c0b      	lsrs	r3, r1, #16
 8014338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801433c:	0c14      	lsrs	r4, r2, #16
 801433e:	683a      	ldr	r2, [r7, #0]
 8014340:	3215      	adds	r2, #21
 8014342:	b2db      	uxtb	r3, r3
 8014344:	7013      	strb	r3, [r2, #0]
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	e9d3 1208 	ldrd	r1, r2, [r3, #32]
 801434c:	f04f 0300 	mov.w	r3, #0
 8014350:	f04f 0400 	mov.w	r4, #0
 8014354:	0a0b      	lsrs	r3, r1, #8
 8014356:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801435a:	0a14      	lsrs	r4, r2, #8
 801435c:	683a      	ldr	r2, [r7, #0]
 801435e:	3216      	adds	r2, #22
 8014360:	b2db      	uxtb	r3, r3
 8014362:	7013      	strb	r3, [r2, #0]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 801436a:	683a      	ldr	r2, [r7, #0]
 801436c:	3217      	adds	r2, #23
 801436e:	b2db      	uxtb	r3, r3
 8014370:	7013      	strb	r3, [r2, #0]
    sha512_put_uint64_be( ctx->state[3], output, 24 );
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8014378:	f04f 0300 	mov.w	r3, #0
 801437c:	f04f 0400 	mov.w	r4, #0
 8014380:	0e13      	lsrs	r3, r2, #24
 8014382:	2400      	movs	r4, #0
 8014384:	683a      	ldr	r2, [r7, #0]
 8014386:	3218      	adds	r2, #24
 8014388:	b2db      	uxtb	r3, r3
 801438a:	7013      	strb	r3, [r2, #0]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8014392:	f04f 0300 	mov.w	r3, #0
 8014396:	f04f 0400 	mov.w	r4, #0
 801439a:	0c13      	lsrs	r3, r2, #16
 801439c:	2400      	movs	r4, #0
 801439e:	683a      	ldr	r2, [r7, #0]
 80143a0:	3219      	adds	r2, #25
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	7013      	strb	r3, [r2, #0]
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80143ac:	f04f 0300 	mov.w	r3, #0
 80143b0:	f04f 0400 	mov.w	r4, #0
 80143b4:	0a13      	lsrs	r3, r2, #8
 80143b6:	2400      	movs	r4, #0
 80143b8:	683a      	ldr	r2, [r7, #0]
 80143ba:	321a      	adds	r2, #26
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	7013      	strb	r3, [r2, #0]
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80143c6:	f04f 0300 	mov.w	r3, #0
 80143ca:	f04f 0400 	mov.w	r4, #0
 80143ce:	0013      	movs	r3, r2
 80143d0:	2400      	movs	r4, #0
 80143d2:	683a      	ldr	r2, [r7, #0]
 80143d4:	321b      	adds	r2, #27
 80143d6:	b2db      	uxtb	r3, r3
 80143d8:	7013      	strb	r3, [r2, #0]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80143e0:	f04f 0300 	mov.w	r3, #0
 80143e4:	f04f 0400 	mov.w	r4, #0
 80143e8:	0e0b      	lsrs	r3, r1, #24
 80143ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80143ee:	0e14      	lsrs	r4, r2, #24
 80143f0:	683a      	ldr	r2, [r7, #0]
 80143f2:	321c      	adds	r2, #28
 80143f4:	b2db      	uxtb	r3, r3
 80143f6:	7013      	strb	r3, [r2, #0]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80143fe:	f04f 0300 	mov.w	r3, #0
 8014402:	f04f 0400 	mov.w	r4, #0
 8014406:	0c0b      	lsrs	r3, r1, #16
 8014408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801440c:	0c14      	lsrs	r4, r2, #16
 801440e:	683a      	ldr	r2, [r7, #0]
 8014410:	321d      	adds	r2, #29
 8014412:	b2db      	uxtb	r3, r3
 8014414:	7013      	strb	r3, [r2, #0]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 801441c:	f04f 0300 	mov.w	r3, #0
 8014420:	f04f 0400 	mov.w	r4, #0
 8014424:	0a0b      	lsrs	r3, r1, #8
 8014426:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801442a:	0a14      	lsrs	r4, r2, #8
 801442c:	683a      	ldr	r2, [r7, #0]
 801442e:	321e      	adds	r2, #30
 8014430:	b2db      	uxtb	r3, r3
 8014432:	7013      	strb	r3, [r2, #0]
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 801443a:	683a      	ldr	r2, [r7, #0]
 801443c:	321f      	adds	r2, #31
 801443e:	b2db      	uxtb	r3, r3
 8014440:	7013      	strb	r3, [r2, #0]
    sha512_put_uint64_be( ctx->state[4], output, 32 );
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8014448:	f04f 0300 	mov.w	r3, #0
 801444c:	f04f 0400 	mov.w	r4, #0
 8014450:	0e13      	lsrs	r3, r2, #24
 8014452:	2400      	movs	r4, #0
 8014454:	683a      	ldr	r2, [r7, #0]
 8014456:	3220      	adds	r2, #32
 8014458:	b2db      	uxtb	r3, r3
 801445a:	7013      	strb	r3, [r2, #0]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8014462:	f04f 0300 	mov.w	r3, #0
 8014466:	f04f 0400 	mov.w	r4, #0
 801446a:	0c13      	lsrs	r3, r2, #16
 801446c:	2400      	movs	r4, #0
 801446e:	683a      	ldr	r2, [r7, #0]
 8014470:	3221      	adds	r2, #33	; 0x21
 8014472:	b2db      	uxtb	r3, r3
 8014474:	7013      	strb	r3, [r2, #0]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 801447c:	f04f 0300 	mov.w	r3, #0
 8014480:	f04f 0400 	mov.w	r4, #0
 8014484:	0a13      	lsrs	r3, r2, #8
 8014486:	2400      	movs	r4, #0
 8014488:	683a      	ldr	r2, [r7, #0]
 801448a:	3222      	adds	r2, #34	; 0x22
 801448c:	b2db      	uxtb	r3, r3
 801448e:	7013      	strb	r3, [r2, #0]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8014496:	f04f 0300 	mov.w	r3, #0
 801449a:	f04f 0400 	mov.w	r4, #0
 801449e:	0013      	movs	r3, r2
 80144a0:	2400      	movs	r4, #0
 80144a2:	683a      	ldr	r2, [r7, #0]
 80144a4:	3223      	adds	r2, #35	; 0x23
 80144a6:	b2db      	uxtb	r3, r3
 80144a8:	7013      	strb	r3, [r2, #0]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 80144b0:	f04f 0300 	mov.w	r3, #0
 80144b4:	f04f 0400 	mov.w	r4, #0
 80144b8:	0e0b      	lsrs	r3, r1, #24
 80144ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80144be:	0e14      	lsrs	r4, r2, #24
 80144c0:	683a      	ldr	r2, [r7, #0]
 80144c2:	3224      	adds	r2, #36	; 0x24
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	7013      	strb	r3, [r2, #0]
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 80144ce:	f04f 0300 	mov.w	r3, #0
 80144d2:	f04f 0400 	mov.w	r4, #0
 80144d6:	0c0b      	lsrs	r3, r1, #16
 80144d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144dc:	0c14      	lsrs	r4, r2, #16
 80144de:	683a      	ldr	r2, [r7, #0]
 80144e0:	3225      	adds	r2, #37	; 0x25
 80144e2:	b2db      	uxtb	r3, r3
 80144e4:	7013      	strb	r3, [r2, #0]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 80144ec:	f04f 0300 	mov.w	r3, #0
 80144f0:	f04f 0400 	mov.w	r4, #0
 80144f4:	0a0b      	lsrs	r3, r1, #8
 80144f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80144fa:	0a14      	lsrs	r4, r2, #8
 80144fc:	683a      	ldr	r2, [r7, #0]
 80144fe:	3226      	adds	r2, #38	; 0x26
 8014500:	b2db      	uxtb	r3, r3
 8014502:	7013      	strb	r3, [r2, #0]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 801450a:	683a      	ldr	r2, [r7, #0]
 801450c:	3227      	adds	r2, #39	; 0x27
 801450e:	b2db      	uxtb	r3, r3
 8014510:	7013      	strb	r3, [r2, #0]
    sha512_put_uint64_be( ctx->state[5], output, 40 );
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014518:	f04f 0300 	mov.w	r3, #0
 801451c:	f04f 0400 	mov.w	r4, #0
 8014520:	0e13      	lsrs	r3, r2, #24
 8014522:	2400      	movs	r4, #0
 8014524:	683a      	ldr	r2, [r7, #0]
 8014526:	3228      	adds	r2, #40	; 0x28
 8014528:	b2db      	uxtb	r3, r3
 801452a:	7013      	strb	r3, [r2, #0]
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014532:	f04f 0300 	mov.w	r3, #0
 8014536:	f04f 0400 	mov.w	r4, #0
 801453a:	0c13      	lsrs	r3, r2, #16
 801453c:	2400      	movs	r4, #0
 801453e:	683a      	ldr	r2, [r7, #0]
 8014540:	3229      	adds	r2, #41	; 0x29
 8014542:	b2db      	uxtb	r3, r3
 8014544:	7013      	strb	r3, [r2, #0]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801454c:	f04f 0300 	mov.w	r3, #0
 8014550:	f04f 0400 	mov.w	r4, #0
 8014554:	0a13      	lsrs	r3, r2, #8
 8014556:	2400      	movs	r4, #0
 8014558:	683a      	ldr	r2, [r7, #0]
 801455a:	322a      	adds	r2, #42	; 0x2a
 801455c:	b2db      	uxtb	r3, r3
 801455e:	7013      	strb	r3, [r2, #0]
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014566:	f04f 0300 	mov.w	r3, #0
 801456a:	f04f 0400 	mov.w	r4, #0
 801456e:	0013      	movs	r3, r2
 8014570:	2400      	movs	r4, #0
 8014572:	683a      	ldr	r2, [r7, #0]
 8014574:	322b      	adds	r2, #43	; 0x2b
 8014576:	b2db      	uxtb	r3, r3
 8014578:	7013      	strb	r3, [r2, #0]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8014580:	f04f 0300 	mov.w	r3, #0
 8014584:	f04f 0400 	mov.w	r4, #0
 8014588:	0e0b      	lsrs	r3, r1, #24
 801458a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801458e:	0e14      	lsrs	r4, r2, #24
 8014590:	683a      	ldr	r2, [r7, #0]
 8014592:	322c      	adds	r2, #44	; 0x2c
 8014594:	b2db      	uxtb	r3, r3
 8014596:	7013      	strb	r3, [r2, #0]
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801459e:	f04f 0300 	mov.w	r3, #0
 80145a2:	f04f 0400 	mov.w	r4, #0
 80145a6:	0c0b      	lsrs	r3, r1, #16
 80145a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80145ac:	0c14      	lsrs	r4, r2, #16
 80145ae:	683a      	ldr	r2, [r7, #0]
 80145b0:	322d      	adds	r2, #45	; 0x2d
 80145b2:	b2db      	uxtb	r3, r3
 80145b4:	7013      	strb	r3, [r2, #0]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80145bc:	f04f 0300 	mov.w	r3, #0
 80145c0:	f04f 0400 	mov.w	r4, #0
 80145c4:	0a0b      	lsrs	r3, r1, #8
 80145c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80145ca:	0a14      	lsrs	r4, r2, #8
 80145cc:	683a      	ldr	r2, [r7, #0]
 80145ce:	322e      	adds	r2, #46	; 0x2e
 80145d0:	b2db      	uxtb	r3, r3
 80145d2:	7013      	strb	r3, [r2, #0]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80145da:	683a      	ldr	r2, [r7, #0]
 80145dc:	322f      	adds	r2, #47	; 0x2f
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	7013      	strb	r3, [r2, #0]

#if !defined(MBEDTLS_SHA512_NO_SHA384)
    if( ctx->is384 == 0 )
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	f040 80d0 	bne.w	801478e <mbedtls_sha512_finish_ret+0x8fa>
#endif
    {
        sha512_put_uint64_be( ctx->state[6], output, 48 );
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 80145f4:	f04f 0300 	mov.w	r3, #0
 80145f8:	f04f 0400 	mov.w	r4, #0
 80145fc:	0e13      	lsrs	r3, r2, #24
 80145fe:	2400      	movs	r4, #0
 8014600:	683a      	ldr	r2, [r7, #0]
 8014602:	3230      	adds	r2, #48	; 0x30
 8014604:	b2db      	uxtb	r3, r3
 8014606:	7013      	strb	r3, [r2, #0]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 801460e:	f04f 0300 	mov.w	r3, #0
 8014612:	f04f 0400 	mov.w	r4, #0
 8014616:	0c13      	lsrs	r3, r2, #16
 8014618:	2400      	movs	r4, #0
 801461a:	683a      	ldr	r2, [r7, #0]
 801461c:	3231      	adds	r2, #49	; 0x31
 801461e:	b2db      	uxtb	r3, r3
 8014620:	7013      	strb	r3, [r2, #0]
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 8014628:	f04f 0300 	mov.w	r3, #0
 801462c:	f04f 0400 	mov.w	r4, #0
 8014630:	0a13      	lsrs	r3, r2, #8
 8014632:	2400      	movs	r4, #0
 8014634:	683a      	ldr	r2, [r7, #0]
 8014636:	3232      	adds	r2, #50	; 0x32
 8014638:	b2db      	uxtb	r3, r3
 801463a:	7013      	strb	r3, [r2, #0]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 8014642:	f04f 0300 	mov.w	r3, #0
 8014646:	f04f 0400 	mov.w	r4, #0
 801464a:	0013      	movs	r3, r2
 801464c:	2400      	movs	r4, #0
 801464e:	683a      	ldr	r2, [r7, #0]
 8014650:	3233      	adds	r2, #51	; 0x33
 8014652:	b2db      	uxtb	r3, r3
 8014654:	7013      	strb	r3, [r2, #0]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 801465c:	f04f 0300 	mov.w	r3, #0
 8014660:	f04f 0400 	mov.w	r4, #0
 8014664:	0e0b      	lsrs	r3, r1, #24
 8014666:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801466a:	0e14      	lsrs	r4, r2, #24
 801466c:	683a      	ldr	r2, [r7, #0]
 801466e:	3234      	adds	r2, #52	; 0x34
 8014670:	b2db      	uxtb	r3, r3
 8014672:	7013      	strb	r3, [r2, #0]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 801467a:	f04f 0300 	mov.w	r3, #0
 801467e:	f04f 0400 	mov.w	r4, #0
 8014682:	0c0b      	lsrs	r3, r1, #16
 8014684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014688:	0c14      	lsrs	r4, r2, #16
 801468a:	683a      	ldr	r2, [r7, #0]
 801468c:	3235      	adds	r2, #53	; 0x35
 801468e:	b2db      	uxtb	r3, r3
 8014690:	7013      	strb	r3, [r2, #0]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	e9d3 1210 	ldrd	r1, r2, [r3, #64]	; 0x40
 8014698:	f04f 0300 	mov.w	r3, #0
 801469c:	f04f 0400 	mov.w	r4, #0
 80146a0:	0a0b      	lsrs	r3, r1, #8
 80146a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80146a6:	0a14      	lsrs	r4, r2, #8
 80146a8:	683a      	ldr	r2, [r7, #0]
 80146aa:	3236      	adds	r2, #54	; 0x36
 80146ac:	b2db      	uxtb	r3, r3
 80146ae:	7013      	strb	r3, [r2, #0]
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80146b6:	683a      	ldr	r2, [r7, #0]
 80146b8:	3237      	adds	r2, #55	; 0x37
 80146ba:	b2db      	uxtb	r3, r3
 80146bc:	7013      	strb	r3, [r2, #0]
        sha512_put_uint64_be( ctx->state[7], output, 56 );
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 80146c4:	f04f 0300 	mov.w	r3, #0
 80146c8:	f04f 0400 	mov.w	r4, #0
 80146cc:	0e13      	lsrs	r3, r2, #24
 80146ce:	2400      	movs	r4, #0
 80146d0:	683a      	ldr	r2, [r7, #0]
 80146d2:	3238      	adds	r2, #56	; 0x38
 80146d4:	b2db      	uxtb	r3, r3
 80146d6:	7013      	strb	r3, [r2, #0]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 80146de:	f04f 0300 	mov.w	r3, #0
 80146e2:	f04f 0400 	mov.w	r4, #0
 80146e6:	0c13      	lsrs	r3, r2, #16
 80146e8:	2400      	movs	r4, #0
 80146ea:	683a      	ldr	r2, [r7, #0]
 80146ec:	3239      	adds	r2, #57	; 0x39
 80146ee:	b2db      	uxtb	r3, r3
 80146f0:	7013      	strb	r3, [r2, #0]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 80146f8:	f04f 0300 	mov.w	r3, #0
 80146fc:	f04f 0400 	mov.w	r4, #0
 8014700:	0a13      	lsrs	r3, r2, #8
 8014702:	2400      	movs	r4, #0
 8014704:	683a      	ldr	r2, [r7, #0]
 8014706:	323a      	adds	r2, #58	; 0x3a
 8014708:	b2db      	uxtb	r3, r3
 801470a:	7013      	strb	r3, [r2, #0]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 8014712:	f04f 0300 	mov.w	r3, #0
 8014716:	f04f 0400 	mov.w	r4, #0
 801471a:	0013      	movs	r3, r2
 801471c:	2400      	movs	r4, #0
 801471e:	683a      	ldr	r2, [r7, #0]
 8014720:	323b      	adds	r2, #59	; 0x3b
 8014722:	b2db      	uxtb	r3, r3
 8014724:	7013      	strb	r3, [r2, #0]
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 801472c:	f04f 0300 	mov.w	r3, #0
 8014730:	f04f 0400 	mov.w	r4, #0
 8014734:	0e0b      	lsrs	r3, r1, #24
 8014736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801473a:	0e14      	lsrs	r4, r2, #24
 801473c:	683a      	ldr	r2, [r7, #0]
 801473e:	323c      	adds	r2, #60	; 0x3c
 8014740:	b2db      	uxtb	r3, r3
 8014742:	7013      	strb	r3, [r2, #0]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 801474a:	f04f 0300 	mov.w	r3, #0
 801474e:	f04f 0400 	mov.w	r4, #0
 8014752:	0c0b      	lsrs	r3, r1, #16
 8014754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014758:	0c14      	lsrs	r4, r2, #16
 801475a:	683a      	ldr	r2, [r7, #0]
 801475c:	323d      	adds	r2, #61	; 0x3d
 801475e:	b2db      	uxtb	r3, r3
 8014760:	7013      	strb	r3, [r2, #0]
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	e9d3 1212 	ldrd	r1, r2, [r3, #72]	; 0x48
 8014768:	f04f 0300 	mov.w	r3, #0
 801476c:	f04f 0400 	mov.w	r4, #0
 8014770:	0a0b      	lsrs	r3, r1, #8
 8014772:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014776:	0a14      	lsrs	r4, r2, #8
 8014778:	683a      	ldr	r2, [r7, #0]
 801477a:	323e      	adds	r2, #62	; 0x3e
 801477c:	b2db      	uxtb	r3, r3
 801477e:	7013      	strb	r3, [r2, #0]
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8014786:	683a      	ldr	r2, [r7, #0]
 8014788:	323f      	adds	r2, #63	; 0x3f
 801478a:	b2db      	uxtb	r3, r3
 801478c:	7013      	strb	r3, [r2, #0]
    }

    return( 0 );
 801478e:	2300      	movs	r3, #0
}
 8014790:	4618      	mov	r0, r3
 8014792:	3720      	adds	r7, #32
 8014794:	46bd      	mov	sp, r7
 8014796:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0801479a <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 801479a:	b580      	push	{r7, lr}
 801479c:	b0bc      	sub	sp, #240	; 0xf0
 801479e:	af00      	add	r7, sp, #0
 80147a0:	60f8      	str	r0, [r7, #12]
 80147a2:	60b9      	str	r1, [r7, #8]
 80147a4:	607a      	str	r2, [r7, #4]
 80147a6:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
 80147a8:	f06f 036d 	mvn.w	r3, #109	; 0x6d
 80147ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    SHA512_VALIDATE_RET( is384 == 0 );
#endif
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 80147b0:	f107 0310 	add.w	r3, r7, #16
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fd feaf 	bl	8012518 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 80147ba:	f107 0310 	add.w	r3, r7, #16
 80147be:	6839      	ldr	r1, [r7, #0]
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7fd fec9 	bl	8012558 <mbedtls_sha512_starts_ret>
 80147c6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80147ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d118      	bne.n	8014804 <mbedtls_sha512_ret+0x6a>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 80147d2:	f107 0310 	add.w	r3, r7, #16
 80147d6:	68ba      	ldr	r2, [r7, #8]
 80147d8:	68f9      	ldr	r1, [r7, #12]
 80147da:	4618      	mov	r0, r3
 80147dc:	f7ff fad2 	bl	8013d84 <mbedtls_sha512_update_ret>
 80147e0:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80147e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d10d      	bne.n	8014808 <mbedtls_sha512_ret+0x6e>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 80147ec:	f107 0310 	add.w	r3, r7, #16
 80147f0:	6879      	ldr	r1, [r7, #4]
 80147f2:	4618      	mov	r0, r3
 80147f4:	f7ff fb4e 	bl	8013e94 <mbedtls_sha512_finish_ret>
 80147f8:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80147fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014800:	2b00      	cmp	r3, #0
        goto exit;

exit:
 8014802:	e002      	b.n	801480a <mbedtls_sha512_ret+0x70>
        goto exit;
 8014804:	bf00      	nop
 8014806:	e000      	b.n	801480a <mbedtls_sha512_ret+0x70>
        goto exit;
 8014808:	bf00      	nop
    mbedtls_sha512_free( &ctx );
 801480a:	f107 0310 	add.w	r3, r7, #16
 801480e:	4618      	mov	r0, r3
 8014810:	f7fd fe8f 	bl	8012532 <mbedtls_sha512_free>

    return( ret );
 8014814:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
}
 8014818:	4618      	mov	r0, r3
 801481a:	37f0      	adds	r7, #240	; 0xf0
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <_ZdlPvj>:
 8014820:	f000 b81a 	b.w	8014858 <_ZdlPv>

08014824 <_Znwj>:
 8014824:	b510      	push	{r4, lr}
 8014826:	2800      	cmp	r0, #0
 8014828:	bf14      	ite	ne
 801482a:	4604      	movne	r4, r0
 801482c:	2401      	moveq	r4, #1
 801482e:	4620      	mov	r0, r4
 8014830:	f000 fc54 	bl	80150dc <malloc>
 8014834:	b930      	cbnz	r0, 8014844 <_Znwj+0x20>
 8014836:	f000 f807 	bl	8014848 <_ZSt15get_new_handlerv>
 801483a:	b908      	cbnz	r0, 8014840 <_Znwj+0x1c>
 801483c:	f000 f80e 	bl	801485c <abort>
 8014840:	4780      	blx	r0
 8014842:	e7f4      	b.n	801482e <_Znwj+0xa>
 8014844:	bd10      	pop	{r4, pc}
	...

08014848 <_ZSt15get_new_handlerv>:
 8014848:	4b02      	ldr	r3, [pc, #8]	; (8014854 <_ZSt15get_new_handlerv+0xc>)
 801484a:	6818      	ldr	r0, [r3, #0]
 801484c:	f3bf 8f5b 	dmb	ish
 8014850:	4770      	bx	lr
 8014852:	bf00      	nop
 8014854:	2000289c 	.word	0x2000289c

08014858 <_ZdlPv>:
 8014858:	f000 bc48 	b.w	80150ec <free>

0801485c <abort>:
 801485c:	b508      	push	{r3, lr}
 801485e:	2006      	movs	r0, #6
 8014860:	f000 feda 	bl	8015618 <raise>
 8014864:	2001      	movs	r0, #1
 8014866:	f7ec f891 	bl	800098c <_exit>
	...

0801486c <calloc>:
 801486c:	4b02      	ldr	r3, [pc, #8]	; (8014878 <calloc+0xc>)
 801486e:	460a      	mov	r2, r1
 8014870:	4601      	mov	r1, r0
 8014872:	6818      	ldr	r0, [r3, #0]
 8014874:	f000 bc7d 	b.w	8015172 <_calloc_r>
 8014878:	20000010 	.word	0x20000010

0801487c <__errno>:
 801487c:	4b01      	ldr	r3, [pc, #4]	; (8014884 <__errno+0x8>)
 801487e:	6818      	ldr	r0, [r3, #0]
 8014880:	4770      	bx	lr
 8014882:	bf00      	nop
 8014884:	20000010 	.word	0x20000010

08014888 <_fclose_r>:
 8014888:	b570      	push	{r4, r5, r6, lr}
 801488a:	4605      	mov	r5, r0
 801488c:	460c      	mov	r4, r1
 801488e:	b911      	cbnz	r1, 8014896 <_fclose_r+0xe>
 8014890:	2600      	movs	r6, #0
 8014892:	4630      	mov	r0, r6
 8014894:	bd70      	pop	{r4, r5, r6, pc}
 8014896:	b118      	cbz	r0, 80148a0 <_fclose_r+0x18>
 8014898:	6983      	ldr	r3, [r0, #24]
 801489a:	b90b      	cbnz	r3, 80148a0 <_fclose_r+0x18>
 801489c:	f000 f950 	bl	8014b40 <__sinit>
 80148a0:	4b1f      	ldr	r3, [pc, #124]	; (8014920 <_fclose_r+0x98>)
 80148a2:	429c      	cmp	r4, r3
 80148a4:	d132      	bne.n	801490c <_fclose_r+0x84>
 80148a6:	686c      	ldr	r4, [r5, #4]
 80148a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d0ef      	beq.n	8014890 <_fclose_r+0x8>
 80148b0:	4621      	mov	r1, r4
 80148b2:	4628      	mov	r0, r5
 80148b4:	f000 f842 	bl	801493c <__sflush_r>
 80148b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80148ba:	4606      	mov	r6, r0
 80148bc:	b133      	cbz	r3, 80148cc <_fclose_r+0x44>
 80148be:	6a21      	ldr	r1, [r4, #32]
 80148c0:	4628      	mov	r0, r5
 80148c2:	4798      	blx	r3
 80148c4:	2800      	cmp	r0, #0
 80148c6:	bfb8      	it	lt
 80148c8:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 80148cc:	89a3      	ldrh	r3, [r4, #12]
 80148ce:	061b      	lsls	r3, r3, #24
 80148d0:	d503      	bpl.n	80148da <_fclose_r+0x52>
 80148d2:	6921      	ldr	r1, [r4, #16]
 80148d4:	4628      	mov	r0, r5
 80148d6:	f000 fc5b 	bl	8015190 <_free_r>
 80148da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148dc:	b141      	cbz	r1, 80148f0 <_fclose_r+0x68>
 80148de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148e2:	4299      	cmp	r1, r3
 80148e4:	d002      	beq.n	80148ec <_fclose_r+0x64>
 80148e6:	4628      	mov	r0, r5
 80148e8:	f000 fc52 	bl	8015190 <_free_r>
 80148ec:	2300      	movs	r3, #0
 80148ee:	6363      	str	r3, [r4, #52]	; 0x34
 80148f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80148f2:	b121      	cbz	r1, 80148fe <_fclose_r+0x76>
 80148f4:	4628      	mov	r0, r5
 80148f6:	f000 fc4b 	bl	8015190 <_free_r>
 80148fa:	2300      	movs	r3, #0
 80148fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80148fe:	f000 f98b 	bl	8014c18 <__sfp_lock_acquire>
 8014902:	2300      	movs	r3, #0
 8014904:	81a3      	strh	r3, [r4, #12]
 8014906:	f000 f988 	bl	8014c1a <__sfp_lock_release>
 801490a:	e7c2      	b.n	8014892 <_fclose_r+0xa>
 801490c:	4b05      	ldr	r3, [pc, #20]	; (8014924 <_fclose_r+0x9c>)
 801490e:	429c      	cmp	r4, r3
 8014910:	d101      	bne.n	8014916 <_fclose_r+0x8e>
 8014912:	68ac      	ldr	r4, [r5, #8]
 8014914:	e7c8      	b.n	80148a8 <_fclose_r+0x20>
 8014916:	4b04      	ldr	r3, [pc, #16]	; (8014928 <_fclose_r+0xa0>)
 8014918:	429c      	cmp	r4, r3
 801491a:	bf08      	it	eq
 801491c:	68ec      	ldreq	r4, [r5, #12]
 801491e:	e7c3      	b.n	80148a8 <_fclose_r+0x20>
 8014920:	08019f00 	.word	0x08019f00
 8014924:	08019f20 	.word	0x08019f20
 8014928:	08019ee0 	.word	0x08019ee0

0801492c <fclose>:
 801492c:	4b02      	ldr	r3, [pc, #8]	; (8014938 <fclose+0xc>)
 801492e:	4601      	mov	r1, r0
 8014930:	6818      	ldr	r0, [r3, #0]
 8014932:	f7ff bfa9 	b.w	8014888 <_fclose_r>
 8014936:	bf00      	nop
 8014938:	20000010 	.word	0x20000010

0801493c <__sflush_r>:
 801493c:	898a      	ldrh	r2, [r1, #12]
 801493e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014942:	4605      	mov	r5, r0
 8014944:	0710      	lsls	r0, r2, #28
 8014946:	460c      	mov	r4, r1
 8014948:	d458      	bmi.n	80149fc <__sflush_r+0xc0>
 801494a:	684b      	ldr	r3, [r1, #4]
 801494c:	2b00      	cmp	r3, #0
 801494e:	dc05      	bgt.n	801495c <__sflush_r+0x20>
 8014950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014952:	2b00      	cmp	r3, #0
 8014954:	dc02      	bgt.n	801495c <__sflush_r+0x20>
 8014956:	2000      	movs	r0, #0
 8014958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801495c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801495e:	2e00      	cmp	r6, #0
 8014960:	d0f9      	beq.n	8014956 <__sflush_r+0x1a>
 8014962:	2300      	movs	r3, #0
 8014964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014968:	682f      	ldr	r7, [r5, #0]
 801496a:	6a21      	ldr	r1, [r4, #32]
 801496c:	602b      	str	r3, [r5, #0]
 801496e:	d032      	beq.n	80149d6 <__sflush_r+0x9a>
 8014970:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014972:	89a3      	ldrh	r3, [r4, #12]
 8014974:	075a      	lsls	r2, r3, #29
 8014976:	d505      	bpl.n	8014984 <__sflush_r+0x48>
 8014978:	6863      	ldr	r3, [r4, #4]
 801497a:	1ac0      	subs	r0, r0, r3
 801497c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801497e:	b10b      	cbz	r3, 8014984 <__sflush_r+0x48>
 8014980:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014982:	1ac0      	subs	r0, r0, r3
 8014984:	2300      	movs	r3, #0
 8014986:	4602      	mov	r2, r0
 8014988:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801498a:	6a21      	ldr	r1, [r4, #32]
 801498c:	4628      	mov	r0, r5
 801498e:	47b0      	blx	r6
 8014990:	1c43      	adds	r3, r0, #1
 8014992:	89a3      	ldrh	r3, [r4, #12]
 8014994:	d106      	bne.n	80149a4 <__sflush_r+0x68>
 8014996:	6829      	ldr	r1, [r5, #0]
 8014998:	291d      	cmp	r1, #29
 801499a:	d848      	bhi.n	8014a2e <__sflush_r+0xf2>
 801499c:	4a29      	ldr	r2, [pc, #164]	; (8014a44 <__sflush_r+0x108>)
 801499e:	40ca      	lsrs	r2, r1
 80149a0:	07d6      	lsls	r6, r2, #31
 80149a2:	d544      	bpl.n	8014a2e <__sflush_r+0xf2>
 80149a4:	2200      	movs	r2, #0
 80149a6:	6062      	str	r2, [r4, #4]
 80149a8:	04d9      	lsls	r1, r3, #19
 80149aa:	6922      	ldr	r2, [r4, #16]
 80149ac:	6022      	str	r2, [r4, #0]
 80149ae:	d504      	bpl.n	80149ba <__sflush_r+0x7e>
 80149b0:	1c42      	adds	r2, r0, #1
 80149b2:	d101      	bne.n	80149b8 <__sflush_r+0x7c>
 80149b4:	682b      	ldr	r3, [r5, #0]
 80149b6:	b903      	cbnz	r3, 80149ba <__sflush_r+0x7e>
 80149b8:	6560      	str	r0, [r4, #84]	; 0x54
 80149ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149bc:	602f      	str	r7, [r5, #0]
 80149be:	2900      	cmp	r1, #0
 80149c0:	d0c9      	beq.n	8014956 <__sflush_r+0x1a>
 80149c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149c6:	4299      	cmp	r1, r3
 80149c8:	d002      	beq.n	80149d0 <__sflush_r+0x94>
 80149ca:	4628      	mov	r0, r5
 80149cc:	f000 fbe0 	bl	8015190 <_free_r>
 80149d0:	2000      	movs	r0, #0
 80149d2:	6360      	str	r0, [r4, #52]	; 0x34
 80149d4:	e7c0      	b.n	8014958 <__sflush_r+0x1c>
 80149d6:	2301      	movs	r3, #1
 80149d8:	4628      	mov	r0, r5
 80149da:	47b0      	blx	r6
 80149dc:	1c41      	adds	r1, r0, #1
 80149de:	d1c8      	bne.n	8014972 <__sflush_r+0x36>
 80149e0:	682b      	ldr	r3, [r5, #0]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d0c5      	beq.n	8014972 <__sflush_r+0x36>
 80149e6:	2b1d      	cmp	r3, #29
 80149e8:	d001      	beq.n	80149ee <__sflush_r+0xb2>
 80149ea:	2b16      	cmp	r3, #22
 80149ec:	d101      	bne.n	80149f2 <__sflush_r+0xb6>
 80149ee:	602f      	str	r7, [r5, #0]
 80149f0:	e7b1      	b.n	8014956 <__sflush_r+0x1a>
 80149f2:	89a3      	ldrh	r3, [r4, #12]
 80149f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149f8:	81a3      	strh	r3, [r4, #12]
 80149fa:	e7ad      	b.n	8014958 <__sflush_r+0x1c>
 80149fc:	690f      	ldr	r7, [r1, #16]
 80149fe:	2f00      	cmp	r7, #0
 8014a00:	d0a9      	beq.n	8014956 <__sflush_r+0x1a>
 8014a02:	0793      	lsls	r3, r2, #30
 8014a04:	680e      	ldr	r6, [r1, #0]
 8014a06:	bf08      	it	eq
 8014a08:	694b      	ldreq	r3, [r1, #20]
 8014a0a:	600f      	str	r7, [r1, #0]
 8014a0c:	bf18      	it	ne
 8014a0e:	2300      	movne	r3, #0
 8014a10:	eba6 0807 	sub.w	r8, r6, r7
 8014a14:	608b      	str	r3, [r1, #8]
 8014a16:	f1b8 0f00 	cmp.w	r8, #0
 8014a1a:	dd9c      	ble.n	8014956 <__sflush_r+0x1a>
 8014a1c:	4643      	mov	r3, r8
 8014a1e:	463a      	mov	r2, r7
 8014a20:	6a21      	ldr	r1, [r4, #32]
 8014a22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a24:	4628      	mov	r0, r5
 8014a26:	47b0      	blx	r6
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	dc06      	bgt.n	8014a3a <__sflush_r+0xfe>
 8014a2c:	89a3      	ldrh	r3, [r4, #12]
 8014a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a32:	81a3      	strh	r3, [r4, #12]
 8014a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a38:	e78e      	b.n	8014958 <__sflush_r+0x1c>
 8014a3a:	4407      	add	r7, r0
 8014a3c:	eba8 0800 	sub.w	r8, r8, r0
 8014a40:	e7e9      	b.n	8014a16 <__sflush_r+0xda>
 8014a42:	bf00      	nop
 8014a44:	20400001 	.word	0x20400001

08014a48 <_fflush_r>:
 8014a48:	b538      	push	{r3, r4, r5, lr}
 8014a4a:	690b      	ldr	r3, [r1, #16]
 8014a4c:	4605      	mov	r5, r0
 8014a4e:	460c      	mov	r4, r1
 8014a50:	b1db      	cbz	r3, 8014a8a <_fflush_r+0x42>
 8014a52:	b118      	cbz	r0, 8014a5c <_fflush_r+0x14>
 8014a54:	6983      	ldr	r3, [r0, #24]
 8014a56:	b90b      	cbnz	r3, 8014a5c <_fflush_r+0x14>
 8014a58:	f000 f872 	bl	8014b40 <__sinit>
 8014a5c:	4b0c      	ldr	r3, [pc, #48]	; (8014a90 <_fflush_r+0x48>)
 8014a5e:	429c      	cmp	r4, r3
 8014a60:	d109      	bne.n	8014a76 <_fflush_r+0x2e>
 8014a62:	686c      	ldr	r4, [r5, #4]
 8014a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a68:	b17b      	cbz	r3, 8014a8a <_fflush_r+0x42>
 8014a6a:	4621      	mov	r1, r4
 8014a6c:	4628      	mov	r0, r5
 8014a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a72:	f7ff bf63 	b.w	801493c <__sflush_r>
 8014a76:	4b07      	ldr	r3, [pc, #28]	; (8014a94 <_fflush_r+0x4c>)
 8014a78:	429c      	cmp	r4, r3
 8014a7a:	d101      	bne.n	8014a80 <_fflush_r+0x38>
 8014a7c:	68ac      	ldr	r4, [r5, #8]
 8014a7e:	e7f1      	b.n	8014a64 <_fflush_r+0x1c>
 8014a80:	4b05      	ldr	r3, [pc, #20]	; (8014a98 <_fflush_r+0x50>)
 8014a82:	429c      	cmp	r4, r3
 8014a84:	bf08      	it	eq
 8014a86:	68ec      	ldreq	r4, [r5, #12]
 8014a88:	e7ec      	b.n	8014a64 <_fflush_r+0x1c>
 8014a8a:	2000      	movs	r0, #0
 8014a8c:	bd38      	pop	{r3, r4, r5, pc}
 8014a8e:	bf00      	nop
 8014a90:	08019f00 	.word	0x08019f00
 8014a94:	08019f20 	.word	0x08019f20
 8014a98:	08019ee0 	.word	0x08019ee0

08014a9c <fflush>:
 8014a9c:	4601      	mov	r1, r0
 8014a9e:	b920      	cbnz	r0, 8014aaa <fflush+0xe>
 8014aa0:	4b04      	ldr	r3, [pc, #16]	; (8014ab4 <fflush+0x18>)
 8014aa2:	4905      	ldr	r1, [pc, #20]	; (8014ab8 <fflush+0x1c>)
 8014aa4:	6818      	ldr	r0, [r3, #0]
 8014aa6:	f000 ba17 	b.w	8014ed8 <_fwalk_reent>
 8014aaa:	4b04      	ldr	r3, [pc, #16]	; (8014abc <fflush+0x20>)
 8014aac:	6818      	ldr	r0, [r3, #0]
 8014aae:	f7ff bfcb 	b.w	8014a48 <_fflush_r>
 8014ab2:	bf00      	nop
 8014ab4:	08019f40 	.word	0x08019f40
 8014ab8:	08014a49 	.word	0x08014a49
 8014abc:	20000010 	.word	0x20000010

08014ac0 <std>:
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	b510      	push	{r4, lr}
 8014ac4:	4604      	mov	r4, r0
 8014ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8014aca:	6083      	str	r3, [r0, #8]
 8014acc:	8181      	strh	r1, [r0, #12]
 8014ace:	6643      	str	r3, [r0, #100]	; 0x64
 8014ad0:	81c2      	strh	r2, [r0, #14]
 8014ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014ad6:	6183      	str	r3, [r0, #24]
 8014ad8:	4619      	mov	r1, r3
 8014ada:	2208      	movs	r2, #8
 8014adc:	305c      	adds	r0, #92	; 0x5c
 8014ade:	f000 fb40 	bl	8015162 <memset>
 8014ae2:	4b05      	ldr	r3, [pc, #20]	; (8014af8 <std+0x38>)
 8014ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8014ae6:	4b05      	ldr	r3, [pc, #20]	; (8014afc <std+0x3c>)
 8014ae8:	62a3      	str	r3, [r4, #40]	; 0x28
 8014aea:	4b05      	ldr	r3, [pc, #20]	; (8014b00 <std+0x40>)
 8014aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014aee:	4b05      	ldr	r3, [pc, #20]	; (8014b04 <std+0x44>)
 8014af0:	6224      	str	r4, [r4, #32]
 8014af2:	6323      	str	r3, [r4, #48]	; 0x30
 8014af4:	bd10      	pop	{r4, pc}
 8014af6:	bf00      	nop
 8014af8:	080156b9 	.word	0x080156b9
 8014afc:	080156db 	.word	0x080156db
 8014b00:	08015713 	.word	0x08015713
 8014b04:	08015737 	.word	0x08015737

08014b08 <_cleanup_r>:
 8014b08:	4901      	ldr	r1, [pc, #4]	; (8014b10 <_cleanup_r+0x8>)
 8014b0a:	f000 b9e5 	b.w	8014ed8 <_fwalk_reent>
 8014b0e:	bf00      	nop
 8014b10:	08014a49 	.word	0x08014a49

08014b14 <__sfmoreglue>:
 8014b14:	b570      	push	{r4, r5, r6, lr}
 8014b16:	1e4a      	subs	r2, r1, #1
 8014b18:	2568      	movs	r5, #104	; 0x68
 8014b1a:	4355      	muls	r5, r2
 8014b1c:	460e      	mov	r6, r1
 8014b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b22:	f000 fb83 	bl	801522c <_malloc_r>
 8014b26:	4604      	mov	r4, r0
 8014b28:	b140      	cbz	r0, 8014b3c <__sfmoreglue+0x28>
 8014b2a:	2100      	movs	r1, #0
 8014b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8014b30:	300c      	adds	r0, #12
 8014b32:	60a0      	str	r0, [r4, #8]
 8014b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b38:	f000 fb13 	bl	8015162 <memset>
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	bd70      	pop	{r4, r5, r6, pc}

08014b40 <__sinit>:
 8014b40:	6983      	ldr	r3, [r0, #24]
 8014b42:	b510      	push	{r4, lr}
 8014b44:	4604      	mov	r4, r0
 8014b46:	bb33      	cbnz	r3, 8014b96 <__sinit+0x56>
 8014b48:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014b4c:	6503      	str	r3, [r0, #80]	; 0x50
 8014b4e:	4b12      	ldr	r3, [pc, #72]	; (8014b98 <__sinit+0x58>)
 8014b50:	4a12      	ldr	r2, [pc, #72]	; (8014b9c <__sinit+0x5c>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	6282      	str	r2, [r0, #40]	; 0x28
 8014b56:	4298      	cmp	r0, r3
 8014b58:	bf04      	itt	eq
 8014b5a:	2301      	moveq	r3, #1
 8014b5c:	6183      	streq	r3, [r0, #24]
 8014b5e:	f000 f81f 	bl	8014ba0 <__sfp>
 8014b62:	6060      	str	r0, [r4, #4]
 8014b64:	4620      	mov	r0, r4
 8014b66:	f000 f81b 	bl	8014ba0 <__sfp>
 8014b6a:	60a0      	str	r0, [r4, #8]
 8014b6c:	4620      	mov	r0, r4
 8014b6e:	f000 f817 	bl	8014ba0 <__sfp>
 8014b72:	2200      	movs	r2, #0
 8014b74:	60e0      	str	r0, [r4, #12]
 8014b76:	2104      	movs	r1, #4
 8014b78:	6860      	ldr	r0, [r4, #4]
 8014b7a:	f7ff ffa1 	bl	8014ac0 <std>
 8014b7e:	2201      	movs	r2, #1
 8014b80:	2109      	movs	r1, #9
 8014b82:	68a0      	ldr	r0, [r4, #8]
 8014b84:	f7ff ff9c 	bl	8014ac0 <std>
 8014b88:	2202      	movs	r2, #2
 8014b8a:	2112      	movs	r1, #18
 8014b8c:	68e0      	ldr	r0, [r4, #12]
 8014b8e:	f7ff ff97 	bl	8014ac0 <std>
 8014b92:	2301      	movs	r3, #1
 8014b94:	61a3      	str	r3, [r4, #24]
 8014b96:	bd10      	pop	{r4, pc}
 8014b98:	08019f40 	.word	0x08019f40
 8014b9c:	08014b09 	.word	0x08014b09

08014ba0 <__sfp>:
 8014ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ba2:	4b1b      	ldr	r3, [pc, #108]	; (8014c10 <__sfp+0x70>)
 8014ba4:	681e      	ldr	r6, [r3, #0]
 8014ba6:	69b3      	ldr	r3, [r6, #24]
 8014ba8:	4607      	mov	r7, r0
 8014baa:	b913      	cbnz	r3, 8014bb2 <__sfp+0x12>
 8014bac:	4630      	mov	r0, r6
 8014bae:	f7ff ffc7 	bl	8014b40 <__sinit>
 8014bb2:	3648      	adds	r6, #72	; 0x48
 8014bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014bb8:	3b01      	subs	r3, #1
 8014bba:	d503      	bpl.n	8014bc4 <__sfp+0x24>
 8014bbc:	6833      	ldr	r3, [r6, #0]
 8014bbe:	b133      	cbz	r3, 8014bce <__sfp+0x2e>
 8014bc0:	6836      	ldr	r6, [r6, #0]
 8014bc2:	e7f7      	b.n	8014bb4 <__sfp+0x14>
 8014bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014bc8:	b16d      	cbz	r5, 8014be6 <__sfp+0x46>
 8014bca:	3468      	adds	r4, #104	; 0x68
 8014bcc:	e7f4      	b.n	8014bb8 <__sfp+0x18>
 8014bce:	2104      	movs	r1, #4
 8014bd0:	4638      	mov	r0, r7
 8014bd2:	f7ff ff9f 	bl	8014b14 <__sfmoreglue>
 8014bd6:	6030      	str	r0, [r6, #0]
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	d1f1      	bne.n	8014bc0 <__sfp+0x20>
 8014bdc:	230c      	movs	r3, #12
 8014bde:	603b      	str	r3, [r7, #0]
 8014be0:	4604      	mov	r4, r0
 8014be2:	4620      	mov	r0, r4
 8014be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014be6:	4b0b      	ldr	r3, [pc, #44]	; (8014c14 <__sfp+0x74>)
 8014be8:	6665      	str	r5, [r4, #100]	; 0x64
 8014bea:	e9c4 5500 	strd	r5, r5, [r4]
 8014bee:	60a5      	str	r5, [r4, #8]
 8014bf0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014bf4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014bf8:	2208      	movs	r2, #8
 8014bfa:	4629      	mov	r1, r5
 8014bfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c00:	f000 faaf 	bl	8015162 <memset>
 8014c04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c0c:	e7e9      	b.n	8014be2 <__sfp+0x42>
 8014c0e:	bf00      	nop
 8014c10:	08019f40 	.word	0x08019f40
 8014c14:	ffff0001 	.word	0xffff0001

08014c18 <__sfp_lock_acquire>:
 8014c18:	4770      	bx	lr

08014c1a <__sfp_lock_release>:
 8014c1a:	4770      	bx	lr

08014c1c <_fopen_r>:
 8014c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c1e:	460f      	mov	r7, r1
 8014c20:	4611      	mov	r1, r2
 8014c22:	aa01      	add	r2, sp, #4
 8014c24:	4605      	mov	r5, r0
 8014c26:	f000 fe7d 	bl	8015924 <__sflags>
 8014c2a:	4606      	mov	r6, r0
 8014c2c:	b918      	cbnz	r0, 8014c36 <_fopen_r+0x1a>
 8014c2e:	2400      	movs	r4, #0
 8014c30:	4620      	mov	r0, r4
 8014c32:	b003      	add	sp, #12
 8014c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c36:	4628      	mov	r0, r5
 8014c38:	f7ff ffb2 	bl	8014ba0 <__sfp>
 8014c3c:	4604      	mov	r4, r0
 8014c3e:	2800      	cmp	r0, #0
 8014c40:	d0f5      	beq.n	8014c2e <_fopen_r+0x12>
 8014c42:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8014c46:	9a01      	ldr	r2, [sp, #4]
 8014c48:	4639      	mov	r1, r7
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	f000 fb48 	bl	80152e0 <_open_r>
 8014c50:	2800      	cmp	r0, #0
 8014c52:	da06      	bge.n	8014c62 <_fopen_r+0x46>
 8014c54:	2500      	movs	r5, #0
 8014c56:	f7ff ffdf 	bl	8014c18 <__sfp_lock_acquire>
 8014c5a:	81a5      	strh	r5, [r4, #12]
 8014c5c:	f7ff ffdd 	bl	8014c1a <__sfp_lock_release>
 8014c60:	e7e5      	b.n	8014c2e <_fopen_r+0x12>
 8014c62:	4b0a      	ldr	r3, [pc, #40]	; (8014c8c <_fopen_r+0x70>)
 8014c64:	6263      	str	r3, [r4, #36]	; 0x24
 8014c66:	4b0a      	ldr	r3, [pc, #40]	; (8014c90 <_fopen_r+0x74>)
 8014c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8014c6a:	4b0a      	ldr	r3, [pc, #40]	; (8014c94 <_fopen_r+0x78>)
 8014c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014c6e:	4b0a      	ldr	r3, [pc, #40]	; (8014c98 <_fopen_r+0x7c>)
 8014c70:	6323      	str	r3, [r4, #48]	; 0x30
 8014c72:	05f3      	lsls	r3, r6, #23
 8014c74:	81e0      	strh	r0, [r4, #14]
 8014c76:	81a6      	strh	r6, [r4, #12]
 8014c78:	6224      	str	r4, [r4, #32]
 8014c7a:	d5d9      	bpl.n	8014c30 <_fopen_r+0x14>
 8014c7c:	2302      	movs	r3, #2
 8014c7e:	2200      	movs	r2, #0
 8014c80:	4621      	mov	r1, r4
 8014c82:	4628      	mov	r0, r5
 8014c84:	f000 f870 	bl	8014d68 <_fseek_r>
 8014c88:	e7d2      	b.n	8014c30 <_fopen_r+0x14>
 8014c8a:	bf00      	nop
 8014c8c:	080156b9 	.word	0x080156b9
 8014c90:	080156db 	.word	0x080156db
 8014c94:	08015713 	.word	0x08015713
 8014c98:	08015737 	.word	0x08015737

08014c9c <fopen>:
 8014c9c:	4b02      	ldr	r3, [pc, #8]	; (8014ca8 <fopen+0xc>)
 8014c9e:	460a      	mov	r2, r1
 8014ca0:	4601      	mov	r1, r0
 8014ca2:	6818      	ldr	r0, [r3, #0]
 8014ca4:	f7ff bfba 	b.w	8014c1c <_fopen_r>
 8014ca8:	20000010 	.word	0x20000010

08014cac <_fread_r>:
 8014cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb0:	4615      	mov	r5, r2
 8014cb2:	435d      	muls	r5, r3
 8014cb4:	4607      	mov	r7, r0
 8014cb6:	4689      	mov	r9, r1
 8014cb8:	4693      	mov	fp, r2
 8014cba:	469a      	mov	sl, r3
 8014cbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014cbe:	d03b      	beq.n	8014d38 <_fread_r+0x8c>
 8014cc0:	b118      	cbz	r0, 8014cca <_fread_r+0x1e>
 8014cc2:	6983      	ldr	r3, [r0, #24]
 8014cc4:	b90b      	cbnz	r3, 8014cca <_fread_r+0x1e>
 8014cc6:	f7ff ff3b 	bl	8014b40 <__sinit>
 8014cca:	4b1d      	ldr	r3, [pc, #116]	; (8014d40 <_fread_r+0x94>)
 8014ccc:	429c      	cmp	r4, r3
 8014cce:	d116      	bne.n	8014cfe <_fread_r+0x52>
 8014cd0:	687c      	ldr	r4, [r7, #4]
 8014cd2:	6863      	ldr	r3, [r4, #4]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	da01      	bge.n	8014cdc <_fread_r+0x30>
 8014cd8:	2300      	movs	r3, #0
 8014cda:	6063      	str	r3, [r4, #4]
 8014cdc:	462e      	mov	r6, r5
 8014cde:	e9d4 1800 	ldrd	r1, r8, [r4]
 8014ce2:	45b0      	cmp	r8, r6
 8014ce4:	d315      	bcc.n	8014d12 <_fread_r+0x66>
 8014ce6:	4632      	mov	r2, r6
 8014ce8:	4648      	mov	r0, r9
 8014cea:	f000 fa16 	bl	801511a <memcpy>
 8014cee:	6863      	ldr	r3, [r4, #4]
 8014cf0:	6825      	ldr	r5, [r4, #0]
 8014cf2:	1b9b      	subs	r3, r3, r6
 8014cf4:	4435      	add	r5, r6
 8014cf6:	6025      	str	r5, [r4, #0]
 8014cf8:	6063      	str	r3, [r4, #4]
 8014cfa:	4655      	mov	r5, sl
 8014cfc:	e01c      	b.n	8014d38 <_fread_r+0x8c>
 8014cfe:	4b11      	ldr	r3, [pc, #68]	; (8014d44 <_fread_r+0x98>)
 8014d00:	429c      	cmp	r4, r3
 8014d02:	d101      	bne.n	8014d08 <_fread_r+0x5c>
 8014d04:	68bc      	ldr	r4, [r7, #8]
 8014d06:	e7e4      	b.n	8014cd2 <_fread_r+0x26>
 8014d08:	4b0f      	ldr	r3, [pc, #60]	; (8014d48 <_fread_r+0x9c>)
 8014d0a:	429c      	cmp	r4, r3
 8014d0c:	bf08      	it	eq
 8014d0e:	68fc      	ldreq	r4, [r7, #12]
 8014d10:	e7df      	b.n	8014cd2 <_fread_r+0x26>
 8014d12:	4648      	mov	r0, r9
 8014d14:	4642      	mov	r2, r8
 8014d16:	f000 fa00 	bl	801511a <memcpy>
 8014d1a:	6823      	ldr	r3, [r4, #0]
 8014d1c:	4443      	add	r3, r8
 8014d1e:	6023      	str	r3, [r4, #0]
 8014d20:	4621      	mov	r1, r4
 8014d22:	4638      	mov	r0, r7
 8014d24:	44c1      	add	r9, r8
 8014d26:	eba6 0608 	sub.w	r6, r6, r8
 8014d2a:	f000 fb85 	bl	8015438 <__srefill_r>
 8014d2e:	2800      	cmp	r0, #0
 8014d30:	d0d5      	beq.n	8014cde <_fread_r+0x32>
 8014d32:	1bad      	subs	r5, r5, r6
 8014d34:	fbb5 f5fb 	udiv	r5, r5, fp
 8014d38:	4628      	mov	r0, r5
 8014d3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d3e:	bf00      	nop
 8014d40:	08019f00 	.word	0x08019f00
 8014d44:	08019f20 	.word	0x08019f20
 8014d48:	08019ee0 	.word	0x08019ee0

08014d4c <fread>:
 8014d4c:	b507      	push	{r0, r1, r2, lr}
 8014d4e:	9300      	str	r3, [sp, #0]
 8014d50:	4613      	mov	r3, r2
 8014d52:	460a      	mov	r2, r1
 8014d54:	4601      	mov	r1, r0
 8014d56:	4803      	ldr	r0, [pc, #12]	; (8014d64 <fread+0x18>)
 8014d58:	6800      	ldr	r0, [r0, #0]
 8014d5a:	f7ff ffa7 	bl	8014cac <_fread_r>
 8014d5e:	b003      	add	sp, #12
 8014d60:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d64:	20000010 	.word	0x20000010

08014d68 <_fseek_r>:
 8014d68:	f000 b80a 	b.w	8014d80 <_fseeko_r>

08014d6c <fseek>:
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	460a      	mov	r2, r1
 8014d70:	4601      	mov	r1, r0
 8014d72:	4802      	ldr	r0, [pc, #8]	; (8014d7c <fseek+0x10>)
 8014d74:	6800      	ldr	r0, [r0, #0]
 8014d76:	f000 b803 	b.w	8014d80 <_fseeko_r>
 8014d7a:	bf00      	nop
 8014d7c:	20000010 	.word	0x20000010

08014d80 <_fseeko_r>:
 8014d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d84:	460c      	mov	r4, r1
 8014d86:	4691      	mov	r9, r2
 8014d88:	461e      	mov	r6, r3
 8014d8a:	4605      	mov	r5, r0
 8014d8c:	b118      	cbz	r0, 8014d96 <_fseeko_r+0x16>
 8014d8e:	6983      	ldr	r3, [r0, #24]
 8014d90:	b90b      	cbnz	r3, 8014d96 <_fseeko_r+0x16>
 8014d92:	f7ff fed5 	bl	8014b40 <__sinit>
 8014d96:	4b3f      	ldr	r3, [pc, #252]	; (8014e94 <_fseeko_r+0x114>)
 8014d98:	429c      	cmp	r4, r3
 8014d9a:	d112      	bne.n	8014dc2 <_fseeko_r+0x42>
 8014d9c:	686c      	ldr	r4, [r5, #4]
 8014d9e:	89a3      	ldrh	r3, [r4, #12]
 8014da0:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8014da4:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8014da8:	d103      	bne.n	8014db2 <_fseeko_r+0x32>
 8014daa:	4621      	mov	r1, r4
 8014dac:	4628      	mov	r0, r5
 8014dae:	f7ff fe4b 	bl	8014a48 <_fflush_r>
 8014db2:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8014db6:	f1b8 0f00 	cmp.w	r8, #0
 8014dba:	d10c      	bne.n	8014dd6 <_fseeko_r+0x56>
 8014dbc:	231d      	movs	r3, #29
 8014dbe:	602b      	str	r3, [r5, #0]
 8014dc0:	e057      	b.n	8014e72 <_fseeko_r+0xf2>
 8014dc2:	4b35      	ldr	r3, [pc, #212]	; (8014e98 <_fseeko_r+0x118>)
 8014dc4:	429c      	cmp	r4, r3
 8014dc6:	d101      	bne.n	8014dcc <_fseeko_r+0x4c>
 8014dc8:	68ac      	ldr	r4, [r5, #8]
 8014dca:	e7e8      	b.n	8014d9e <_fseeko_r+0x1e>
 8014dcc:	4b33      	ldr	r3, [pc, #204]	; (8014e9c <_fseeko_r+0x11c>)
 8014dce:	429c      	cmp	r4, r3
 8014dd0:	bf08      	it	eq
 8014dd2:	68ec      	ldreq	r4, [r5, #12]
 8014dd4:	e7e3      	b.n	8014d9e <_fseeko_r+0x1e>
 8014dd6:	2e01      	cmp	r6, #1
 8014dd8:	d030      	beq.n	8014e3c <_fseeko_r+0xbc>
 8014dda:	2e02      	cmp	r6, #2
 8014ddc:	d001      	beq.n	8014de2 <_fseeko_r+0x62>
 8014dde:	2e00      	cmp	r6, #0
 8014de0:	d155      	bne.n	8014e8e <_fseeko_r+0x10e>
 8014de2:	6923      	ldr	r3, [r4, #16]
 8014de4:	b91b      	cbnz	r3, 8014dee <_fseeko_r+0x6e>
 8014de6:	4621      	mov	r1, r4
 8014de8:	4628      	mov	r0, r5
 8014dea:	f000 f937 	bl	801505c <__smakebuf_r>
 8014dee:	4621      	mov	r1, r4
 8014df0:	4628      	mov	r0, r5
 8014df2:	f7ff fe29 	bl	8014a48 <_fflush_r>
 8014df6:	4607      	mov	r7, r0
 8014df8:	2800      	cmp	r0, #0
 8014dfa:	d13a      	bne.n	8014e72 <_fseeko_r+0xf2>
 8014dfc:	4633      	mov	r3, r6
 8014dfe:	464a      	mov	r2, r9
 8014e00:	6a21      	ldr	r1, [r4, #32]
 8014e02:	4628      	mov	r0, r5
 8014e04:	47c0      	blx	r8
 8014e06:	3001      	adds	r0, #1
 8014e08:	d033      	beq.n	8014e72 <_fseeko_r+0xf2>
 8014e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e0c:	b141      	cbz	r1, 8014e20 <_fseeko_r+0xa0>
 8014e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e12:	4299      	cmp	r1, r3
 8014e14:	d002      	beq.n	8014e1c <_fseeko_r+0x9c>
 8014e16:	4628      	mov	r0, r5
 8014e18:	f000 f9ba 	bl	8015190 <_free_r>
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	6363      	str	r3, [r4, #52]	; 0x34
 8014e20:	6923      	ldr	r3, [r4, #16]
 8014e22:	6023      	str	r3, [r4, #0]
 8014e24:	89a3      	ldrh	r3, [r4, #12]
 8014e26:	2100      	movs	r1, #0
 8014e28:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8014e2c:	6061      	str	r1, [r4, #4]
 8014e2e:	81a3      	strh	r3, [r4, #12]
 8014e30:	2208      	movs	r2, #8
 8014e32:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014e36:	f000 f994 	bl	8015162 <memset>
 8014e3a:	e01c      	b.n	8014e76 <_fseeko_r+0xf6>
 8014e3c:	4621      	mov	r1, r4
 8014e3e:	4628      	mov	r0, r5
 8014e40:	f7ff fe02 	bl	8014a48 <_fflush_r>
 8014e44:	89a2      	ldrh	r2, [r4, #12]
 8014e46:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e4a:	d00c      	beq.n	8014e66 <_fseeko_r+0xe6>
 8014e4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e4e:	89a3      	ldrh	r3, [r4, #12]
 8014e50:	075a      	lsls	r2, r3, #29
 8014e52:	d513      	bpl.n	8014e7c <_fseeko_r+0xfc>
 8014e54:	6863      	ldr	r3, [r4, #4]
 8014e56:	1ac0      	subs	r0, r0, r3
 8014e58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e5a:	b10b      	cbz	r3, 8014e60 <_fseeko_r+0xe0>
 8014e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e5e:	1ac0      	subs	r0, r0, r3
 8014e60:	4481      	add	r9, r0
 8014e62:	2600      	movs	r6, #0
 8014e64:	e7bd      	b.n	8014de2 <_fseeko_r+0x62>
 8014e66:	6a21      	ldr	r1, [r4, #32]
 8014e68:	4633      	mov	r3, r6
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	47c0      	blx	r8
 8014e6e:	1c41      	adds	r1, r0, #1
 8014e70:	d1ed      	bne.n	8014e4e <_fseeko_r+0xce>
 8014e72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014e76:	4638      	mov	r0, r7
 8014e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e7c:	071b      	lsls	r3, r3, #28
 8014e7e:	d5ef      	bpl.n	8014e60 <_fseeko_r+0xe0>
 8014e80:	6823      	ldr	r3, [r4, #0]
 8014e82:	6922      	ldr	r2, [r4, #16]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d0eb      	beq.n	8014e60 <_fseeko_r+0xe0>
 8014e88:	1a9b      	subs	r3, r3, r2
 8014e8a:	4418      	add	r0, r3
 8014e8c:	e7e8      	b.n	8014e60 <_fseeko_r+0xe0>
 8014e8e:	2316      	movs	r3, #22
 8014e90:	e795      	b.n	8014dbe <_fseeko_r+0x3e>
 8014e92:	bf00      	nop
 8014e94:	08019f00 	.word	0x08019f00
 8014e98:	08019f20 	.word	0x08019f20
 8014e9c:	08019ee0 	.word	0x08019ee0

08014ea0 <_fwalk>:
 8014ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ea4:	4688      	mov	r8, r1
 8014ea6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014eaa:	2600      	movs	r6, #0
 8014eac:	b914      	cbnz	r4, 8014eb4 <_fwalk+0x14>
 8014eae:	4630      	mov	r0, r6
 8014eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eb4:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014eb8:	3f01      	subs	r7, #1
 8014eba:	d501      	bpl.n	8014ec0 <_fwalk+0x20>
 8014ebc:	6824      	ldr	r4, [r4, #0]
 8014ebe:	e7f5      	b.n	8014eac <_fwalk+0xc>
 8014ec0:	89ab      	ldrh	r3, [r5, #12]
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d906      	bls.n	8014ed4 <_fwalk+0x34>
 8014ec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014eca:	3301      	adds	r3, #1
 8014ecc:	d002      	beq.n	8014ed4 <_fwalk+0x34>
 8014ece:	4628      	mov	r0, r5
 8014ed0:	47c0      	blx	r8
 8014ed2:	4306      	orrs	r6, r0
 8014ed4:	3568      	adds	r5, #104	; 0x68
 8014ed6:	e7ef      	b.n	8014eb8 <_fwalk+0x18>

08014ed8 <_fwalk_reent>:
 8014ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014edc:	4680      	mov	r8, r0
 8014ede:	4689      	mov	r9, r1
 8014ee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014ee4:	2600      	movs	r6, #0
 8014ee6:	b914      	cbnz	r4, 8014eee <_fwalk_reent+0x16>
 8014ee8:	4630      	mov	r0, r6
 8014eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014ef2:	3f01      	subs	r7, #1
 8014ef4:	d501      	bpl.n	8014efa <_fwalk_reent+0x22>
 8014ef6:	6824      	ldr	r4, [r4, #0]
 8014ef8:	e7f5      	b.n	8014ee6 <_fwalk_reent+0xe>
 8014efa:	89ab      	ldrh	r3, [r5, #12]
 8014efc:	2b01      	cmp	r3, #1
 8014efe:	d907      	bls.n	8014f10 <_fwalk_reent+0x38>
 8014f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f04:	3301      	adds	r3, #1
 8014f06:	d003      	beq.n	8014f10 <_fwalk_reent+0x38>
 8014f08:	4629      	mov	r1, r5
 8014f0a:	4640      	mov	r0, r8
 8014f0c:	47c8      	blx	r9
 8014f0e:	4306      	orrs	r6, r0
 8014f10:	3568      	adds	r5, #104	; 0x68
 8014f12:	e7ee      	b.n	8014ef2 <_fwalk_reent+0x1a>

08014f14 <_fwrite_r>:
 8014f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f18:	9c08      	ldr	r4, [sp, #32]
 8014f1a:	4689      	mov	r9, r1
 8014f1c:	4617      	mov	r7, r2
 8014f1e:	fb02 f803 	mul.w	r8, r2, r3
 8014f22:	4606      	mov	r6, r0
 8014f24:	b118      	cbz	r0, 8014f2e <_fwrite_r+0x1a>
 8014f26:	6983      	ldr	r3, [r0, #24]
 8014f28:	b90b      	cbnz	r3, 8014f2e <_fwrite_r+0x1a>
 8014f2a:	f7ff fe09 	bl	8014b40 <__sinit>
 8014f2e:	4b1d      	ldr	r3, [pc, #116]	; (8014fa4 <_fwrite_r+0x90>)
 8014f30:	429c      	cmp	r4, r3
 8014f32:	d11a      	bne.n	8014f6a <_fwrite_r+0x56>
 8014f34:	6874      	ldr	r4, [r6, #4]
 8014f36:	89a3      	ldrh	r3, [r4, #12]
 8014f38:	071b      	lsls	r3, r3, #28
 8014f3a:	d520      	bpl.n	8014f7e <_fwrite_r+0x6a>
 8014f3c:	6923      	ldr	r3, [r4, #16]
 8014f3e:	b1f3      	cbz	r3, 8014f7e <_fwrite_r+0x6a>
 8014f40:	2500      	movs	r5, #0
 8014f42:	4545      	cmp	r5, r8
 8014f44:	d029      	beq.n	8014f9a <_fwrite_r+0x86>
 8014f46:	68a3      	ldr	r3, [r4, #8]
 8014f48:	f819 1005 	ldrb.w	r1, [r9, r5]
 8014f4c:	3b01      	subs	r3, #1
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	60a3      	str	r3, [r4, #8]
 8014f52:	da04      	bge.n	8014f5e <_fwrite_r+0x4a>
 8014f54:	69a2      	ldr	r2, [r4, #24]
 8014f56:	4293      	cmp	r3, r2
 8014f58:	db19      	blt.n	8014f8e <_fwrite_r+0x7a>
 8014f5a:	290a      	cmp	r1, #10
 8014f5c:	d017      	beq.n	8014f8e <_fwrite_r+0x7a>
 8014f5e:	6823      	ldr	r3, [r4, #0]
 8014f60:	1c5a      	adds	r2, r3, #1
 8014f62:	6022      	str	r2, [r4, #0]
 8014f64:	7019      	strb	r1, [r3, #0]
 8014f66:	3501      	adds	r5, #1
 8014f68:	e7eb      	b.n	8014f42 <_fwrite_r+0x2e>
 8014f6a:	4b0f      	ldr	r3, [pc, #60]	; (8014fa8 <_fwrite_r+0x94>)
 8014f6c:	429c      	cmp	r4, r3
 8014f6e:	d101      	bne.n	8014f74 <_fwrite_r+0x60>
 8014f70:	68b4      	ldr	r4, [r6, #8]
 8014f72:	e7e0      	b.n	8014f36 <_fwrite_r+0x22>
 8014f74:	4b0d      	ldr	r3, [pc, #52]	; (8014fac <_fwrite_r+0x98>)
 8014f76:	429c      	cmp	r4, r3
 8014f78:	bf08      	it	eq
 8014f7a:	68f4      	ldreq	r4, [r6, #12]
 8014f7c:	e7db      	b.n	8014f36 <_fwrite_r+0x22>
 8014f7e:	4621      	mov	r1, r4
 8014f80:	4630      	mov	r0, r6
 8014f82:	f000 fc51 	bl	8015828 <__swsetup_r>
 8014f86:	2800      	cmp	r0, #0
 8014f88:	d0da      	beq.n	8014f40 <_fwrite_r+0x2c>
 8014f8a:	2500      	movs	r5, #0
 8014f8c:	e005      	b.n	8014f9a <_fwrite_r+0x86>
 8014f8e:	4622      	mov	r2, r4
 8014f90:	4630      	mov	r0, r6
 8014f92:	f000 fbe5 	bl	8015760 <__swbuf_r>
 8014f96:	3001      	adds	r0, #1
 8014f98:	d1e5      	bne.n	8014f66 <_fwrite_r+0x52>
 8014f9a:	fbb5 f0f7 	udiv	r0, r5, r7
 8014f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fa2:	bf00      	nop
 8014fa4:	08019f00 	.word	0x08019f00
 8014fa8:	08019f20 	.word	0x08019f20
 8014fac:	08019ee0 	.word	0x08019ee0

08014fb0 <fwrite>:
 8014fb0:	b507      	push	{r0, r1, r2, lr}
 8014fb2:	9300      	str	r3, [sp, #0]
 8014fb4:	4613      	mov	r3, r2
 8014fb6:	460a      	mov	r2, r1
 8014fb8:	4601      	mov	r1, r0
 8014fba:	4803      	ldr	r0, [pc, #12]	; (8014fc8 <fwrite+0x18>)
 8014fbc:	6800      	ldr	r0, [r0, #0]
 8014fbe:	f7ff ffa9 	bl	8014f14 <_fwrite_r>
 8014fc2:	b003      	add	sp, #12
 8014fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fc8:	20000010 	.word	0x20000010

08014fcc <__libc_init_array>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	4e0d      	ldr	r6, [pc, #52]	; (8015004 <__libc_init_array+0x38>)
 8014fd0:	4c0d      	ldr	r4, [pc, #52]	; (8015008 <__libc_init_array+0x3c>)
 8014fd2:	1ba4      	subs	r4, r4, r6
 8014fd4:	10a4      	asrs	r4, r4, #2
 8014fd6:	2500      	movs	r5, #0
 8014fd8:	42a5      	cmp	r5, r4
 8014fda:	d109      	bne.n	8014ff0 <__libc_init_array+0x24>
 8014fdc:	4e0b      	ldr	r6, [pc, #44]	; (801500c <__libc_init_array+0x40>)
 8014fde:	4c0c      	ldr	r4, [pc, #48]	; (8015010 <__libc_init_array+0x44>)
 8014fe0:	f001 f9ae 	bl	8016340 <_init>
 8014fe4:	1ba4      	subs	r4, r4, r6
 8014fe6:	10a4      	asrs	r4, r4, #2
 8014fe8:	2500      	movs	r5, #0
 8014fea:	42a5      	cmp	r5, r4
 8014fec:	d105      	bne.n	8014ffa <__libc_init_array+0x2e>
 8014fee:	bd70      	pop	{r4, r5, r6, pc}
 8014ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014ff4:	4798      	blx	r3
 8014ff6:	3501      	adds	r5, #1
 8014ff8:	e7ee      	b.n	8014fd8 <__libc_init_array+0xc>
 8014ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014ffe:	4798      	blx	r3
 8015000:	3501      	adds	r5, #1
 8015002:	e7f2      	b.n	8014fea <__libc_init_array+0x1e>
 8015004:	08019f78 	.word	0x08019f78
 8015008:	08019f78 	.word	0x08019f78
 801500c:	08019f78 	.word	0x08019f78
 8015010:	08019f7c 	.word	0x08019f7c

08015014 <__swhatbuf_r>:
 8015014:	b570      	push	{r4, r5, r6, lr}
 8015016:	460e      	mov	r6, r1
 8015018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801501c:	2900      	cmp	r1, #0
 801501e:	b096      	sub	sp, #88	; 0x58
 8015020:	4614      	mov	r4, r2
 8015022:	461d      	mov	r5, r3
 8015024:	da07      	bge.n	8015036 <__swhatbuf_r+0x22>
 8015026:	2300      	movs	r3, #0
 8015028:	602b      	str	r3, [r5, #0]
 801502a:	89b3      	ldrh	r3, [r6, #12]
 801502c:	061a      	lsls	r2, r3, #24
 801502e:	d410      	bmi.n	8015052 <__swhatbuf_r+0x3e>
 8015030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015034:	e00e      	b.n	8015054 <__swhatbuf_r+0x40>
 8015036:	466a      	mov	r2, sp
 8015038:	f000 fcaa 	bl	8015990 <_fstat_r>
 801503c:	2800      	cmp	r0, #0
 801503e:	dbf2      	blt.n	8015026 <__swhatbuf_r+0x12>
 8015040:	9a01      	ldr	r2, [sp, #4]
 8015042:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015046:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801504a:	425a      	negs	r2, r3
 801504c:	415a      	adcs	r2, r3
 801504e:	602a      	str	r2, [r5, #0]
 8015050:	e7ee      	b.n	8015030 <__swhatbuf_r+0x1c>
 8015052:	2340      	movs	r3, #64	; 0x40
 8015054:	2000      	movs	r0, #0
 8015056:	6023      	str	r3, [r4, #0]
 8015058:	b016      	add	sp, #88	; 0x58
 801505a:	bd70      	pop	{r4, r5, r6, pc}

0801505c <__smakebuf_r>:
 801505c:	898b      	ldrh	r3, [r1, #12]
 801505e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015060:	079d      	lsls	r5, r3, #30
 8015062:	4606      	mov	r6, r0
 8015064:	460c      	mov	r4, r1
 8015066:	d507      	bpl.n	8015078 <__smakebuf_r+0x1c>
 8015068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801506c:	6023      	str	r3, [r4, #0]
 801506e:	6123      	str	r3, [r4, #16]
 8015070:	2301      	movs	r3, #1
 8015072:	6163      	str	r3, [r4, #20]
 8015074:	b002      	add	sp, #8
 8015076:	bd70      	pop	{r4, r5, r6, pc}
 8015078:	ab01      	add	r3, sp, #4
 801507a:	466a      	mov	r2, sp
 801507c:	f7ff ffca 	bl	8015014 <__swhatbuf_r>
 8015080:	9900      	ldr	r1, [sp, #0]
 8015082:	4605      	mov	r5, r0
 8015084:	4630      	mov	r0, r6
 8015086:	f000 f8d1 	bl	801522c <_malloc_r>
 801508a:	b948      	cbnz	r0, 80150a0 <__smakebuf_r+0x44>
 801508c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015090:	059a      	lsls	r2, r3, #22
 8015092:	d4ef      	bmi.n	8015074 <__smakebuf_r+0x18>
 8015094:	f023 0303 	bic.w	r3, r3, #3
 8015098:	f043 0302 	orr.w	r3, r3, #2
 801509c:	81a3      	strh	r3, [r4, #12]
 801509e:	e7e3      	b.n	8015068 <__smakebuf_r+0xc>
 80150a0:	4b0d      	ldr	r3, [pc, #52]	; (80150d8 <__smakebuf_r+0x7c>)
 80150a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80150a4:	89a3      	ldrh	r3, [r4, #12]
 80150a6:	6020      	str	r0, [r4, #0]
 80150a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150ac:	81a3      	strh	r3, [r4, #12]
 80150ae:	9b00      	ldr	r3, [sp, #0]
 80150b0:	6163      	str	r3, [r4, #20]
 80150b2:	9b01      	ldr	r3, [sp, #4]
 80150b4:	6120      	str	r0, [r4, #16]
 80150b6:	b15b      	cbz	r3, 80150d0 <__smakebuf_r+0x74>
 80150b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150bc:	4630      	mov	r0, r6
 80150be:	f000 fc79 	bl	80159b4 <_isatty_r>
 80150c2:	b128      	cbz	r0, 80150d0 <__smakebuf_r+0x74>
 80150c4:	89a3      	ldrh	r3, [r4, #12]
 80150c6:	f023 0303 	bic.w	r3, r3, #3
 80150ca:	f043 0301 	orr.w	r3, r3, #1
 80150ce:	81a3      	strh	r3, [r4, #12]
 80150d0:	89a3      	ldrh	r3, [r4, #12]
 80150d2:	431d      	orrs	r5, r3
 80150d4:	81a5      	strh	r5, [r4, #12]
 80150d6:	e7cd      	b.n	8015074 <__smakebuf_r+0x18>
 80150d8:	08014b09 	.word	0x08014b09

080150dc <malloc>:
 80150dc:	4b02      	ldr	r3, [pc, #8]	; (80150e8 <malloc+0xc>)
 80150de:	4601      	mov	r1, r0
 80150e0:	6818      	ldr	r0, [r3, #0]
 80150e2:	f000 b8a3 	b.w	801522c <_malloc_r>
 80150e6:	bf00      	nop
 80150e8:	20000010 	.word	0x20000010

080150ec <free>:
 80150ec:	4b02      	ldr	r3, [pc, #8]	; (80150f8 <free+0xc>)
 80150ee:	4601      	mov	r1, r0
 80150f0:	6818      	ldr	r0, [r3, #0]
 80150f2:	f000 b84d 	b.w	8015190 <_free_r>
 80150f6:	bf00      	nop
 80150f8:	20000010 	.word	0x20000010

080150fc <memcmp>:
 80150fc:	b530      	push	{r4, r5, lr}
 80150fe:	2400      	movs	r4, #0
 8015100:	42a2      	cmp	r2, r4
 8015102:	d101      	bne.n	8015108 <memcmp+0xc>
 8015104:	2000      	movs	r0, #0
 8015106:	e007      	b.n	8015118 <memcmp+0x1c>
 8015108:	5d03      	ldrb	r3, [r0, r4]
 801510a:	3401      	adds	r4, #1
 801510c:	190d      	adds	r5, r1, r4
 801510e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8015112:	42ab      	cmp	r3, r5
 8015114:	d0f4      	beq.n	8015100 <memcmp+0x4>
 8015116:	1b58      	subs	r0, r3, r5
 8015118:	bd30      	pop	{r4, r5, pc}

0801511a <memcpy>:
 801511a:	b510      	push	{r4, lr}
 801511c:	1e43      	subs	r3, r0, #1
 801511e:	440a      	add	r2, r1
 8015120:	4291      	cmp	r1, r2
 8015122:	d100      	bne.n	8015126 <memcpy+0xc>
 8015124:	bd10      	pop	{r4, pc}
 8015126:	f811 4b01 	ldrb.w	r4, [r1], #1
 801512a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801512e:	e7f7      	b.n	8015120 <memcpy+0x6>

08015130 <memmove>:
 8015130:	4288      	cmp	r0, r1
 8015132:	b510      	push	{r4, lr}
 8015134:	eb01 0302 	add.w	r3, r1, r2
 8015138:	d807      	bhi.n	801514a <memmove+0x1a>
 801513a:	1e42      	subs	r2, r0, #1
 801513c:	4299      	cmp	r1, r3
 801513e:	d00a      	beq.n	8015156 <memmove+0x26>
 8015140:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015144:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015148:	e7f8      	b.n	801513c <memmove+0xc>
 801514a:	4283      	cmp	r3, r0
 801514c:	d9f5      	bls.n	801513a <memmove+0xa>
 801514e:	1881      	adds	r1, r0, r2
 8015150:	1ad2      	subs	r2, r2, r3
 8015152:	42d3      	cmn	r3, r2
 8015154:	d100      	bne.n	8015158 <memmove+0x28>
 8015156:	bd10      	pop	{r4, pc}
 8015158:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801515c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015160:	e7f7      	b.n	8015152 <memmove+0x22>

08015162 <memset>:
 8015162:	4402      	add	r2, r0
 8015164:	4603      	mov	r3, r0
 8015166:	4293      	cmp	r3, r2
 8015168:	d100      	bne.n	801516c <memset+0xa>
 801516a:	4770      	bx	lr
 801516c:	f803 1b01 	strb.w	r1, [r3], #1
 8015170:	e7f9      	b.n	8015166 <memset+0x4>

08015172 <_calloc_r>:
 8015172:	b538      	push	{r3, r4, r5, lr}
 8015174:	fb02 f401 	mul.w	r4, r2, r1
 8015178:	4621      	mov	r1, r4
 801517a:	f000 f857 	bl	801522c <_malloc_r>
 801517e:	4605      	mov	r5, r0
 8015180:	b118      	cbz	r0, 801518a <_calloc_r+0x18>
 8015182:	4622      	mov	r2, r4
 8015184:	2100      	movs	r1, #0
 8015186:	f7ff ffec 	bl	8015162 <memset>
 801518a:	4628      	mov	r0, r5
 801518c:	bd38      	pop	{r3, r4, r5, pc}
	...

08015190 <_free_r>:
 8015190:	b538      	push	{r3, r4, r5, lr}
 8015192:	4605      	mov	r5, r0
 8015194:	2900      	cmp	r1, #0
 8015196:	d045      	beq.n	8015224 <_free_r+0x94>
 8015198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801519c:	1f0c      	subs	r4, r1, #4
 801519e:	2b00      	cmp	r3, #0
 80151a0:	bfb8      	it	lt
 80151a2:	18e4      	addlt	r4, r4, r3
 80151a4:	f000 fc3a 	bl	8015a1c <__malloc_lock>
 80151a8:	4a1f      	ldr	r2, [pc, #124]	; (8015228 <_free_r+0x98>)
 80151aa:	6813      	ldr	r3, [r2, #0]
 80151ac:	4610      	mov	r0, r2
 80151ae:	b933      	cbnz	r3, 80151be <_free_r+0x2e>
 80151b0:	6063      	str	r3, [r4, #4]
 80151b2:	6014      	str	r4, [r2, #0]
 80151b4:	4628      	mov	r0, r5
 80151b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151ba:	f000 bc30 	b.w	8015a1e <__malloc_unlock>
 80151be:	42a3      	cmp	r3, r4
 80151c0:	d90c      	bls.n	80151dc <_free_r+0x4c>
 80151c2:	6821      	ldr	r1, [r4, #0]
 80151c4:	1862      	adds	r2, r4, r1
 80151c6:	4293      	cmp	r3, r2
 80151c8:	bf04      	itt	eq
 80151ca:	681a      	ldreq	r2, [r3, #0]
 80151cc:	685b      	ldreq	r3, [r3, #4]
 80151ce:	6063      	str	r3, [r4, #4]
 80151d0:	bf04      	itt	eq
 80151d2:	1852      	addeq	r2, r2, r1
 80151d4:	6022      	streq	r2, [r4, #0]
 80151d6:	6004      	str	r4, [r0, #0]
 80151d8:	e7ec      	b.n	80151b4 <_free_r+0x24>
 80151da:	4613      	mov	r3, r2
 80151dc:	685a      	ldr	r2, [r3, #4]
 80151de:	b10a      	cbz	r2, 80151e4 <_free_r+0x54>
 80151e0:	42a2      	cmp	r2, r4
 80151e2:	d9fa      	bls.n	80151da <_free_r+0x4a>
 80151e4:	6819      	ldr	r1, [r3, #0]
 80151e6:	1858      	adds	r0, r3, r1
 80151e8:	42a0      	cmp	r0, r4
 80151ea:	d10b      	bne.n	8015204 <_free_r+0x74>
 80151ec:	6820      	ldr	r0, [r4, #0]
 80151ee:	4401      	add	r1, r0
 80151f0:	1858      	adds	r0, r3, r1
 80151f2:	4282      	cmp	r2, r0
 80151f4:	6019      	str	r1, [r3, #0]
 80151f6:	d1dd      	bne.n	80151b4 <_free_r+0x24>
 80151f8:	6810      	ldr	r0, [r2, #0]
 80151fa:	6852      	ldr	r2, [r2, #4]
 80151fc:	605a      	str	r2, [r3, #4]
 80151fe:	4401      	add	r1, r0
 8015200:	6019      	str	r1, [r3, #0]
 8015202:	e7d7      	b.n	80151b4 <_free_r+0x24>
 8015204:	d902      	bls.n	801520c <_free_r+0x7c>
 8015206:	230c      	movs	r3, #12
 8015208:	602b      	str	r3, [r5, #0]
 801520a:	e7d3      	b.n	80151b4 <_free_r+0x24>
 801520c:	6820      	ldr	r0, [r4, #0]
 801520e:	1821      	adds	r1, r4, r0
 8015210:	428a      	cmp	r2, r1
 8015212:	bf04      	itt	eq
 8015214:	6811      	ldreq	r1, [r2, #0]
 8015216:	6852      	ldreq	r2, [r2, #4]
 8015218:	6062      	str	r2, [r4, #4]
 801521a:	bf04      	itt	eq
 801521c:	1809      	addeq	r1, r1, r0
 801521e:	6021      	streq	r1, [r4, #0]
 8015220:	605c      	str	r4, [r3, #4]
 8015222:	e7c7      	b.n	80151b4 <_free_r+0x24>
 8015224:	bd38      	pop	{r3, r4, r5, pc}
 8015226:	bf00      	nop
 8015228:	200028a0 	.word	0x200028a0

0801522c <_malloc_r>:
 801522c:	b570      	push	{r4, r5, r6, lr}
 801522e:	1ccd      	adds	r5, r1, #3
 8015230:	f025 0503 	bic.w	r5, r5, #3
 8015234:	3508      	adds	r5, #8
 8015236:	2d0c      	cmp	r5, #12
 8015238:	bf38      	it	cc
 801523a:	250c      	movcc	r5, #12
 801523c:	2d00      	cmp	r5, #0
 801523e:	4606      	mov	r6, r0
 8015240:	db01      	blt.n	8015246 <_malloc_r+0x1a>
 8015242:	42a9      	cmp	r1, r5
 8015244:	d903      	bls.n	801524e <_malloc_r+0x22>
 8015246:	230c      	movs	r3, #12
 8015248:	6033      	str	r3, [r6, #0]
 801524a:	2000      	movs	r0, #0
 801524c:	bd70      	pop	{r4, r5, r6, pc}
 801524e:	f000 fbe5 	bl	8015a1c <__malloc_lock>
 8015252:	4a21      	ldr	r2, [pc, #132]	; (80152d8 <_malloc_r+0xac>)
 8015254:	6814      	ldr	r4, [r2, #0]
 8015256:	4621      	mov	r1, r4
 8015258:	b991      	cbnz	r1, 8015280 <_malloc_r+0x54>
 801525a:	4c20      	ldr	r4, [pc, #128]	; (80152dc <_malloc_r+0xb0>)
 801525c:	6823      	ldr	r3, [r4, #0]
 801525e:	b91b      	cbnz	r3, 8015268 <_malloc_r+0x3c>
 8015260:	4630      	mov	r0, r6
 8015262:	f000 f9a1 	bl	80155a8 <_sbrk_r>
 8015266:	6020      	str	r0, [r4, #0]
 8015268:	4629      	mov	r1, r5
 801526a:	4630      	mov	r0, r6
 801526c:	f000 f99c 	bl	80155a8 <_sbrk_r>
 8015270:	1c43      	adds	r3, r0, #1
 8015272:	d124      	bne.n	80152be <_malloc_r+0x92>
 8015274:	230c      	movs	r3, #12
 8015276:	6033      	str	r3, [r6, #0]
 8015278:	4630      	mov	r0, r6
 801527a:	f000 fbd0 	bl	8015a1e <__malloc_unlock>
 801527e:	e7e4      	b.n	801524a <_malloc_r+0x1e>
 8015280:	680b      	ldr	r3, [r1, #0]
 8015282:	1b5b      	subs	r3, r3, r5
 8015284:	d418      	bmi.n	80152b8 <_malloc_r+0x8c>
 8015286:	2b0b      	cmp	r3, #11
 8015288:	d90f      	bls.n	80152aa <_malloc_r+0x7e>
 801528a:	600b      	str	r3, [r1, #0]
 801528c:	50cd      	str	r5, [r1, r3]
 801528e:	18cc      	adds	r4, r1, r3
 8015290:	4630      	mov	r0, r6
 8015292:	f000 fbc4 	bl	8015a1e <__malloc_unlock>
 8015296:	f104 000b 	add.w	r0, r4, #11
 801529a:	1d23      	adds	r3, r4, #4
 801529c:	f020 0007 	bic.w	r0, r0, #7
 80152a0:	1ac3      	subs	r3, r0, r3
 80152a2:	d0d3      	beq.n	801524c <_malloc_r+0x20>
 80152a4:	425a      	negs	r2, r3
 80152a6:	50e2      	str	r2, [r4, r3]
 80152a8:	e7d0      	b.n	801524c <_malloc_r+0x20>
 80152aa:	428c      	cmp	r4, r1
 80152ac:	684b      	ldr	r3, [r1, #4]
 80152ae:	bf16      	itet	ne
 80152b0:	6063      	strne	r3, [r4, #4]
 80152b2:	6013      	streq	r3, [r2, #0]
 80152b4:	460c      	movne	r4, r1
 80152b6:	e7eb      	b.n	8015290 <_malloc_r+0x64>
 80152b8:	460c      	mov	r4, r1
 80152ba:	6849      	ldr	r1, [r1, #4]
 80152bc:	e7cc      	b.n	8015258 <_malloc_r+0x2c>
 80152be:	1cc4      	adds	r4, r0, #3
 80152c0:	f024 0403 	bic.w	r4, r4, #3
 80152c4:	42a0      	cmp	r0, r4
 80152c6:	d005      	beq.n	80152d4 <_malloc_r+0xa8>
 80152c8:	1a21      	subs	r1, r4, r0
 80152ca:	4630      	mov	r0, r6
 80152cc:	f000 f96c 	bl	80155a8 <_sbrk_r>
 80152d0:	3001      	adds	r0, #1
 80152d2:	d0cf      	beq.n	8015274 <_malloc_r+0x48>
 80152d4:	6025      	str	r5, [r4, #0]
 80152d6:	e7db      	b.n	8015290 <_malloc_r+0x64>
 80152d8:	200028a0 	.word	0x200028a0
 80152dc:	200028a4 	.word	0x200028a4

080152e0 <_open_r>:
 80152e0:	b538      	push	{r3, r4, r5, lr}
 80152e2:	4c07      	ldr	r4, [pc, #28]	; (8015300 <_open_r+0x20>)
 80152e4:	4605      	mov	r5, r0
 80152e6:	4608      	mov	r0, r1
 80152e8:	4611      	mov	r1, r2
 80152ea:	2200      	movs	r2, #0
 80152ec:	6022      	str	r2, [r4, #0]
 80152ee:	461a      	mov	r2, r3
 80152f0:	f7eb fbc3 	bl	8000a7a <_open>
 80152f4:	1c43      	adds	r3, r0, #1
 80152f6:	d102      	bne.n	80152fe <_open_r+0x1e>
 80152f8:	6823      	ldr	r3, [r4, #0]
 80152fa:	b103      	cbz	r3, 80152fe <_open_r+0x1e>
 80152fc:	602b      	str	r3, [r5, #0]
 80152fe:	bd38      	pop	{r3, r4, r5, pc}
 8015300:	200028c8 	.word	0x200028c8

08015304 <iprintf>:
 8015304:	b40f      	push	{r0, r1, r2, r3}
 8015306:	4b0a      	ldr	r3, [pc, #40]	; (8015330 <iprintf+0x2c>)
 8015308:	b513      	push	{r0, r1, r4, lr}
 801530a:	681c      	ldr	r4, [r3, #0]
 801530c:	b124      	cbz	r4, 8015318 <iprintf+0x14>
 801530e:	69a3      	ldr	r3, [r4, #24]
 8015310:	b913      	cbnz	r3, 8015318 <iprintf+0x14>
 8015312:	4620      	mov	r0, r4
 8015314:	f7ff fc14 	bl	8014b40 <__sinit>
 8015318:	ab05      	add	r3, sp, #20
 801531a:	9a04      	ldr	r2, [sp, #16]
 801531c:	68a1      	ldr	r1, [r4, #8]
 801531e:	9301      	str	r3, [sp, #4]
 8015320:	4620      	mov	r0, r4
 8015322:	f000 fcf9 	bl	8015d18 <_vfiprintf_r>
 8015326:	b002      	add	sp, #8
 8015328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801532c:	b004      	add	sp, #16
 801532e:	4770      	bx	lr
 8015330:	20000010 	.word	0x20000010

08015334 <putchar>:
 8015334:	b538      	push	{r3, r4, r5, lr}
 8015336:	4b08      	ldr	r3, [pc, #32]	; (8015358 <putchar+0x24>)
 8015338:	681c      	ldr	r4, [r3, #0]
 801533a:	4605      	mov	r5, r0
 801533c:	b124      	cbz	r4, 8015348 <putchar+0x14>
 801533e:	69a3      	ldr	r3, [r4, #24]
 8015340:	b913      	cbnz	r3, 8015348 <putchar+0x14>
 8015342:	4620      	mov	r0, r4
 8015344:	f7ff fbfc 	bl	8014b40 <__sinit>
 8015348:	68a2      	ldr	r2, [r4, #8]
 801534a:	4629      	mov	r1, r5
 801534c:	4620      	mov	r0, r4
 801534e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015352:	f000 bf7f 	b.w	8016254 <_putc_r>
 8015356:	bf00      	nop
 8015358:	20000010 	.word	0x20000010

0801535c <_puts_r>:
 801535c:	b570      	push	{r4, r5, r6, lr}
 801535e:	460e      	mov	r6, r1
 8015360:	4605      	mov	r5, r0
 8015362:	b118      	cbz	r0, 801536c <_puts_r+0x10>
 8015364:	6983      	ldr	r3, [r0, #24]
 8015366:	b90b      	cbnz	r3, 801536c <_puts_r+0x10>
 8015368:	f7ff fbea 	bl	8014b40 <__sinit>
 801536c:	69ab      	ldr	r3, [r5, #24]
 801536e:	68ac      	ldr	r4, [r5, #8]
 8015370:	b913      	cbnz	r3, 8015378 <_puts_r+0x1c>
 8015372:	4628      	mov	r0, r5
 8015374:	f7ff fbe4 	bl	8014b40 <__sinit>
 8015378:	4b23      	ldr	r3, [pc, #140]	; (8015408 <_puts_r+0xac>)
 801537a:	429c      	cmp	r4, r3
 801537c:	d117      	bne.n	80153ae <_puts_r+0x52>
 801537e:	686c      	ldr	r4, [r5, #4]
 8015380:	89a3      	ldrh	r3, [r4, #12]
 8015382:	071b      	lsls	r3, r3, #28
 8015384:	d51d      	bpl.n	80153c2 <_puts_r+0x66>
 8015386:	6923      	ldr	r3, [r4, #16]
 8015388:	b1db      	cbz	r3, 80153c2 <_puts_r+0x66>
 801538a:	3e01      	subs	r6, #1
 801538c:	68a3      	ldr	r3, [r4, #8]
 801538e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015392:	3b01      	subs	r3, #1
 8015394:	60a3      	str	r3, [r4, #8]
 8015396:	b9e9      	cbnz	r1, 80153d4 <_puts_r+0x78>
 8015398:	2b00      	cmp	r3, #0
 801539a:	da2e      	bge.n	80153fa <_puts_r+0x9e>
 801539c:	4622      	mov	r2, r4
 801539e:	210a      	movs	r1, #10
 80153a0:	4628      	mov	r0, r5
 80153a2:	f000 f9dd 	bl	8015760 <__swbuf_r>
 80153a6:	3001      	adds	r0, #1
 80153a8:	d011      	beq.n	80153ce <_puts_r+0x72>
 80153aa:	200a      	movs	r0, #10
 80153ac:	e011      	b.n	80153d2 <_puts_r+0x76>
 80153ae:	4b17      	ldr	r3, [pc, #92]	; (801540c <_puts_r+0xb0>)
 80153b0:	429c      	cmp	r4, r3
 80153b2:	d101      	bne.n	80153b8 <_puts_r+0x5c>
 80153b4:	68ac      	ldr	r4, [r5, #8]
 80153b6:	e7e3      	b.n	8015380 <_puts_r+0x24>
 80153b8:	4b15      	ldr	r3, [pc, #84]	; (8015410 <_puts_r+0xb4>)
 80153ba:	429c      	cmp	r4, r3
 80153bc:	bf08      	it	eq
 80153be:	68ec      	ldreq	r4, [r5, #12]
 80153c0:	e7de      	b.n	8015380 <_puts_r+0x24>
 80153c2:	4621      	mov	r1, r4
 80153c4:	4628      	mov	r0, r5
 80153c6:	f000 fa2f 	bl	8015828 <__swsetup_r>
 80153ca:	2800      	cmp	r0, #0
 80153cc:	d0dd      	beq.n	801538a <_puts_r+0x2e>
 80153ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153d2:	bd70      	pop	{r4, r5, r6, pc}
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	da04      	bge.n	80153e2 <_puts_r+0x86>
 80153d8:	69a2      	ldr	r2, [r4, #24]
 80153da:	429a      	cmp	r2, r3
 80153dc:	dc06      	bgt.n	80153ec <_puts_r+0x90>
 80153de:	290a      	cmp	r1, #10
 80153e0:	d004      	beq.n	80153ec <_puts_r+0x90>
 80153e2:	6823      	ldr	r3, [r4, #0]
 80153e4:	1c5a      	adds	r2, r3, #1
 80153e6:	6022      	str	r2, [r4, #0]
 80153e8:	7019      	strb	r1, [r3, #0]
 80153ea:	e7cf      	b.n	801538c <_puts_r+0x30>
 80153ec:	4622      	mov	r2, r4
 80153ee:	4628      	mov	r0, r5
 80153f0:	f000 f9b6 	bl	8015760 <__swbuf_r>
 80153f4:	3001      	adds	r0, #1
 80153f6:	d1c9      	bne.n	801538c <_puts_r+0x30>
 80153f8:	e7e9      	b.n	80153ce <_puts_r+0x72>
 80153fa:	6823      	ldr	r3, [r4, #0]
 80153fc:	200a      	movs	r0, #10
 80153fe:	1c5a      	adds	r2, r3, #1
 8015400:	6022      	str	r2, [r4, #0]
 8015402:	7018      	strb	r0, [r3, #0]
 8015404:	e7e5      	b.n	80153d2 <_puts_r+0x76>
 8015406:	bf00      	nop
 8015408:	08019f00 	.word	0x08019f00
 801540c:	08019f20 	.word	0x08019f20
 8015410:	08019ee0 	.word	0x08019ee0

08015414 <puts>:
 8015414:	4b02      	ldr	r3, [pc, #8]	; (8015420 <puts+0xc>)
 8015416:	4601      	mov	r1, r0
 8015418:	6818      	ldr	r0, [r3, #0]
 801541a:	f7ff bf9f 	b.w	801535c <_puts_r>
 801541e:	bf00      	nop
 8015420:	20000010 	.word	0x20000010

08015424 <lflush>:
 8015424:	8983      	ldrh	r3, [r0, #12]
 8015426:	f003 0309 	and.w	r3, r3, #9
 801542a:	2b09      	cmp	r3, #9
 801542c:	d101      	bne.n	8015432 <lflush+0xe>
 801542e:	f7ff bb35 	b.w	8014a9c <fflush>
 8015432:	2000      	movs	r0, #0
 8015434:	4770      	bx	lr
	...

08015438 <__srefill_r>:
 8015438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801543a:	460c      	mov	r4, r1
 801543c:	4605      	mov	r5, r0
 801543e:	b118      	cbz	r0, 8015448 <__srefill_r+0x10>
 8015440:	6983      	ldr	r3, [r0, #24]
 8015442:	b90b      	cbnz	r3, 8015448 <__srefill_r+0x10>
 8015444:	f7ff fb7c 	bl	8014b40 <__sinit>
 8015448:	4b3c      	ldr	r3, [pc, #240]	; (801553c <__srefill_r+0x104>)
 801544a:	429c      	cmp	r4, r3
 801544c:	d10a      	bne.n	8015464 <__srefill_r+0x2c>
 801544e:	686c      	ldr	r4, [r5, #4]
 8015450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015454:	2300      	movs	r3, #0
 8015456:	6063      	str	r3, [r4, #4]
 8015458:	b293      	uxth	r3, r2
 801545a:	069e      	lsls	r6, r3, #26
 801545c:	d50c      	bpl.n	8015478 <__srefill_r+0x40>
 801545e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015462:	e067      	b.n	8015534 <__srefill_r+0xfc>
 8015464:	4b36      	ldr	r3, [pc, #216]	; (8015540 <__srefill_r+0x108>)
 8015466:	429c      	cmp	r4, r3
 8015468:	d101      	bne.n	801546e <__srefill_r+0x36>
 801546a:	68ac      	ldr	r4, [r5, #8]
 801546c:	e7f0      	b.n	8015450 <__srefill_r+0x18>
 801546e:	4b35      	ldr	r3, [pc, #212]	; (8015544 <__srefill_r+0x10c>)
 8015470:	429c      	cmp	r4, r3
 8015472:	bf08      	it	eq
 8015474:	68ec      	ldreq	r4, [r5, #12]
 8015476:	e7eb      	b.n	8015450 <__srefill_r+0x18>
 8015478:	0758      	lsls	r0, r3, #29
 801547a:	d449      	bmi.n	8015510 <__srefill_r+0xd8>
 801547c:	06d9      	lsls	r1, r3, #27
 801547e:	d405      	bmi.n	801548c <__srefill_r+0x54>
 8015480:	2309      	movs	r3, #9
 8015482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015486:	602b      	str	r3, [r5, #0]
 8015488:	81a2      	strh	r2, [r4, #12]
 801548a:	e7e8      	b.n	801545e <__srefill_r+0x26>
 801548c:	071a      	lsls	r2, r3, #28
 801548e:	d50b      	bpl.n	80154a8 <__srefill_r+0x70>
 8015490:	4621      	mov	r1, r4
 8015492:	4628      	mov	r0, r5
 8015494:	f7ff fad8 	bl	8014a48 <_fflush_r>
 8015498:	2800      	cmp	r0, #0
 801549a:	d1e0      	bne.n	801545e <__srefill_r+0x26>
 801549c:	89a3      	ldrh	r3, [r4, #12]
 801549e:	60a0      	str	r0, [r4, #8]
 80154a0:	f023 0308 	bic.w	r3, r3, #8
 80154a4:	81a3      	strh	r3, [r4, #12]
 80154a6:	61a0      	str	r0, [r4, #24]
 80154a8:	89a3      	ldrh	r3, [r4, #12]
 80154aa:	f043 0304 	orr.w	r3, r3, #4
 80154ae:	81a3      	strh	r3, [r4, #12]
 80154b0:	6923      	ldr	r3, [r4, #16]
 80154b2:	b91b      	cbnz	r3, 80154bc <__srefill_r+0x84>
 80154b4:	4621      	mov	r1, r4
 80154b6:	4628      	mov	r0, r5
 80154b8:	f7ff fdd0 	bl	801505c <__smakebuf_r>
 80154bc:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80154c0:	b2be      	uxth	r6, r7
 80154c2:	07b3      	lsls	r3, r6, #30
 80154c4:	d00f      	beq.n	80154e6 <__srefill_r+0xae>
 80154c6:	2301      	movs	r3, #1
 80154c8:	81a3      	strh	r3, [r4, #12]
 80154ca:	4b1f      	ldr	r3, [pc, #124]	; (8015548 <__srefill_r+0x110>)
 80154cc:	491f      	ldr	r1, [pc, #124]	; (801554c <__srefill_r+0x114>)
 80154ce:	6818      	ldr	r0, [r3, #0]
 80154d0:	f006 0609 	and.w	r6, r6, #9
 80154d4:	f7ff fce4 	bl	8014ea0 <_fwalk>
 80154d8:	2e09      	cmp	r6, #9
 80154da:	81a7      	strh	r7, [r4, #12]
 80154dc:	d103      	bne.n	80154e6 <__srefill_r+0xae>
 80154de:	4621      	mov	r1, r4
 80154e0:	4628      	mov	r0, r5
 80154e2:	f7ff fa2b 	bl	801493c <__sflush_r>
 80154e6:	6922      	ldr	r2, [r4, #16]
 80154e8:	6022      	str	r2, [r4, #0]
 80154ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80154ec:	6963      	ldr	r3, [r4, #20]
 80154ee:	6a21      	ldr	r1, [r4, #32]
 80154f0:	4628      	mov	r0, r5
 80154f2:	47b0      	blx	r6
 80154f4:	2800      	cmp	r0, #0
 80154f6:	6060      	str	r0, [r4, #4]
 80154f8:	dc1d      	bgt.n	8015536 <__srefill_r+0xfe>
 80154fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154fe:	bf17      	itett	ne
 8015500:	2200      	movne	r2, #0
 8015502:	f043 0320 	orreq.w	r3, r3, #32
 8015506:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 801550a:	6062      	strne	r2, [r4, #4]
 801550c:	81a3      	strh	r3, [r4, #12]
 801550e:	e7a6      	b.n	801545e <__srefill_r+0x26>
 8015510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015512:	2900      	cmp	r1, #0
 8015514:	d0cc      	beq.n	80154b0 <__srefill_r+0x78>
 8015516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801551a:	4299      	cmp	r1, r3
 801551c:	d002      	beq.n	8015524 <__srefill_r+0xec>
 801551e:	4628      	mov	r0, r5
 8015520:	f7ff fe36 	bl	8015190 <_free_r>
 8015524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015526:	6063      	str	r3, [r4, #4]
 8015528:	2000      	movs	r0, #0
 801552a:	6360      	str	r0, [r4, #52]	; 0x34
 801552c:	2b00      	cmp	r3, #0
 801552e:	d0bf      	beq.n	80154b0 <__srefill_r+0x78>
 8015530:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015532:	6023      	str	r3, [r4, #0]
 8015534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015536:	2000      	movs	r0, #0
 8015538:	e7fc      	b.n	8015534 <__srefill_r+0xfc>
 801553a:	bf00      	nop
 801553c:	08019f00 	.word	0x08019f00
 8015540:	08019f20 	.word	0x08019f20
 8015544:	08019ee0 	.word	0x08019ee0
 8015548:	08019f40 	.word	0x08019f40
 801554c:	08015425 	.word	0x08015425

08015550 <_remove_r>:
 8015550:	b508      	push	{r3, lr}
 8015552:	f000 f8f5 	bl	8015740 <_unlink_r>
 8015556:	3001      	adds	r0, #1
 8015558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801555c:	bf18      	it	ne
 801555e:	2000      	movne	r0, #0
 8015560:	bd08      	pop	{r3, pc}
	...

08015564 <remove>:
 8015564:	4b02      	ldr	r3, [pc, #8]	; (8015570 <remove+0xc>)
 8015566:	4601      	mov	r1, r0
 8015568:	6818      	ldr	r0, [r3, #0]
 801556a:	f7ff bff1 	b.w	8015550 <_remove_r>
 801556e:	bf00      	nop
 8015570:	20000010 	.word	0x20000010

08015574 <rename>:
 8015574:	4b02      	ldr	r3, [pc, #8]	; (8015580 <rename+0xc>)
 8015576:	460a      	mov	r2, r1
 8015578:	4601      	mov	r1, r0
 801557a:	6818      	ldr	r0, [r3, #0]
 801557c:	f000 b802 	b.w	8015584 <_rename_r>
 8015580:	20000010 	.word	0x20000010

08015584 <_rename_r>:
 8015584:	b538      	push	{r3, r4, r5, lr}
 8015586:	4604      	mov	r4, r0
 8015588:	460d      	mov	r5, r1
 801558a:	f000 fa23 	bl	80159d4 <_link_r>
 801558e:	1c43      	adds	r3, r0, #1
 8015590:	d008      	beq.n	80155a4 <_rename_r+0x20>
 8015592:	4629      	mov	r1, r5
 8015594:	4620      	mov	r0, r4
 8015596:	f000 f8d3 	bl	8015740 <_unlink_r>
 801559a:	3001      	adds	r0, #1
 801559c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155a0:	bf18      	it	ne
 80155a2:	2000      	movne	r0, #0
 80155a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080155a8 <_sbrk_r>:
 80155a8:	b538      	push	{r3, r4, r5, lr}
 80155aa:	4c06      	ldr	r4, [pc, #24]	; (80155c4 <_sbrk_r+0x1c>)
 80155ac:	2300      	movs	r3, #0
 80155ae:	4605      	mov	r5, r0
 80155b0:	4608      	mov	r0, r1
 80155b2:	6023      	str	r3, [r4, #0]
 80155b4:	f7eb fa8e 	bl	8000ad4 <_sbrk>
 80155b8:	1c43      	adds	r3, r0, #1
 80155ba:	d102      	bne.n	80155c2 <_sbrk_r+0x1a>
 80155bc:	6823      	ldr	r3, [r4, #0]
 80155be:	b103      	cbz	r3, 80155c2 <_sbrk_r+0x1a>
 80155c0:	602b      	str	r3, [r5, #0]
 80155c2:	bd38      	pop	{r3, r4, r5, pc}
 80155c4:	200028c8 	.word	0x200028c8

080155c8 <_raise_r>:
 80155c8:	291f      	cmp	r1, #31
 80155ca:	b538      	push	{r3, r4, r5, lr}
 80155cc:	4604      	mov	r4, r0
 80155ce:	460d      	mov	r5, r1
 80155d0:	d904      	bls.n	80155dc <_raise_r+0x14>
 80155d2:	2316      	movs	r3, #22
 80155d4:	6003      	str	r3, [r0, #0]
 80155d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155da:	bd38      	pop	{r3, r4, r5, pc}
 80155dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80155de:	b112      	cbz	r2, 80155e6 <_raise_r+0x1e>
 80155e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80155e4:	b94b      	cbnz	r3, 80155fa <_raise_r+0x32>
 80155e6:	4620      	mov	r0, r4
 80155e8:	f000 f830 	bl	801564c <_getpid_r>
 80155ec:	462a      	mov	r2, r5
 80155ee:	4601      	mov	r1, r0
 80155f0:	4620      	mov	r0, r4
 80155f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155f6:	f000 b817 	b.w	8015628 <_kill_r>
 80155fa:	2b01      	cmp	r3, #1
 80155fc:	d00a      	beq.n	8015614 <_raise_r+0x4c>
 80155fe:	1c59      	adds	r1, r3, #1
 8015600:	d103      	bne.n	801560a <_raise_r+0x42>
 8015602:	2316      	movs	r3, #22
 8015604:	6003      	str	r3, [r0, #0]
 8015606:	2001      	movs	r0, #1
 8015608:	e7e7      	b.n	80155da <_raise_r+0x12>
 801560a:	2400      	movs	r4, #0
 801560c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015610:	4628      	mov	r0, r5
 8015612:	4798      	blx	r3
 8015614:	2000      	movs	r0, #0
 8015616:	e7e0      	b.n	80155da <_raise_r+0x12>

08015618 <raise>:
 8015618:	4b02      	ldr	r3, [pc, #8]	; (8015624 <raise+0xc>)
 801561a:	4601      	mov	r1, r0
 801561c:	6818      	ldr	r0, [r3, #0]
 801561e:	f7ff bfd3 	b.w	80155c8 <_raise_r>
 8015622:	bf00      	nop
 8015624:	20000010 	.word	0x20000010

08015628 <_kill_r>:
 8015628:	b538      	push	{r3, r4, r5, lr}
 801562a:	4c07      	ldr	r4, [pc, #28]	; (8015648 <_kill_r+0x20>)
 801562c:	2300      	movs	r3, #0
 801562e:	4605      	mov	r5, r0
 8015630:	4608      	mov	r0, r1
 8015632:	4611      	mov	r1, r2
 8015634:	6023      	str	r3, [r4, #0]
 8015636:	f7eb f999 	bl	800096c <_kill>
 801563a:	1c43      	adds	r3, r0, #1
 801563c:	d102      	bne.n	8015644 <_kill_r+0x1c>
 801563e:	6823      	ldr	r3, [r4, #0]
 8015640:	b103      	cbz	r3, 8015644 <_kill_r+0x1c>
 8015642:	602b      	str	r3, [r5, #0]
 8015644:	bd38      	pop	{r3, r4, r5, pc}
 8015646:	bf00      	nop
 8015648:	200028c8 	.word	0x200028c8

0801564c <_getpid_r>:
 801564c:	f7eb b986 	b.w	800095c <_getpid>

08015650 <sniprintf>:
 8015650:	b40c      	push	{r2, r3}
 8015652:	b530      	push	{r4, r5, lr}
 8015654:	4b17      	ldr	r3, [pc, #92]	; (80156b4 <sniprintf+0x64>)
 8015656:	1e0c      	subs	r4, r1, #0
 8015658:	b09d      	sub	sp, #116	; 0x74
 801565a:	681d      	ldr	r5, [r3, #0]
 801565c:	da08      	bge.n	8015670 <sniprintf+0x20>
 801565e:	238b      	movs	r3, #139	; 0x8b
 8015660:	602b      	str	r3, [r5, #0]
 8015662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015666:	b01d      	add	sp, #116	; 0x74
 8015668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801566c:	b002      	add	sp, #8
 801566e:	4770      	bx	lr
 8015670:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015674:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015678:	bf14      	ite	ne
 801567a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801567e:	4623      	moveq	r3, r4
 8015680:	9304      	str	r3, [sp, #16]
 8015682:	9307      	str	r3, [sp, #28]
 8015684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015688:	9002      	str	r0, [sp, #8]
 801568a:	9006      	str	r0, [sp, #24]
 801568c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015690:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015692:	ab21      	add	r3, sp, #132	; 0x84
 8015694:	a902      	add	r1, sp, #8
 8015696:	4628      	mov	r0, r5
 8015698:	9301      	str	r3, [sp, #4]
 801569a:	f000 fa1b 	bl	8015ad4 <_svfiprintf_r>
 801569e:	1c43      	adds	r3, r0, #1
 80156a0:	bfbc      	itt	lt
 80156a2:	238b      	movlt	r3, #139	; 0x8b
 80156a4:	602b      	strlt	r3, [r5, #0]
 80156a6:	2c00      	cmp	r4, #0
 80156a8:	d0dd      	beq.n	8015666 <sniprintf+0x16>
 80156aa:	9b02      	ldr	r3, [sp, #8]
 80156ac:	2200      	movs	r2, #0
 80156ae:	701a      	strb	r2, [r3, #0]
 80156b0:	e7d9      	b.n	8015666 <sniprintf+0x16>
 80156b2:	bf00      	nop
 80156b4:	20000010 	.word	0x20000010

080156b8 <__sread>:
 80156b8:	b510      	push	{r4, lr}
 80156ba:	460c      	mov	r4, r1
 80156bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156c0:	f000 fdfe 	bl	80162c0 <_read_r>
 80156c4:	2800      	cmp	r0, #0
 80156c6:	bfab      	itete	ge
 80156c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80156ca:	89a3      	ldrhlt	r3, [r4, #12]
 80156cc:	181b      	addge	r3, r3, r0
 80156ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80156d2:	bfac      	ite	ge
 80156d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80156d6:	81a3      	strhlt	r3, [r4, #12]
 80156d8:	bd10      	pop	{r4, pc}

080156da <__swrite>:
 80156da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156de:	461f      	mov	r7, r3
 80156e0:	898b      	ldrh	r3, [r1, #12]
 80156e2:	05db      	lsls	r3, r3, #23
 80156e4:	4605      	mov	r5, r0
 80156e6:	460c      	mov	r4, r1
 80156e8:	4616      	mov	r6, r2
 80156ea:	d505      	bpl.n	80156f8 <__swrite+0x1e>
 80156ec:	2302      	movs	r3, #2
 80156ee:	2200      	movs	r2, #0
 80156f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156f4:	f000 f980 	bl	80159f8 <_lseek_r>
 80156f8:	89a3      	ldrh	r3, [r4, #12]
 80156fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015702:	81a3      	strh	r3, [r4, #12]
 8015704:	4632      	mov	r2, r6
 8015706:	463b      	mov	r3, r7
 8015708:	4628      	mov	r0, r5
 801570a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801570e:	f000 b879 	b.w	8015804 <_write_r>

08015712 <__sseek>:
 8015712:	b510      	push	{r4, lr}
 8015714:	460c      	mov	r4, r1
 8015716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801571a:	f000 f96d 	bl	80159f8 <_lseek_r>
 801571e:	1c43      	adds	r3, r0, #1
 8015720:	89a3      	ldrh	r3, [r4, #12]
 8015722:	bf15      	itete	ne
 8015724:	6560      	strne	r0, [r4, #84]	; 0x54
 8015726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801572a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801572e:	81a3      	strheq	r3, [r4, #12]
 8015730:	bf18      	it	ne
 8015732:	81a3      	strhne	r3, [r4, #12]
 8015734:	bd10      	pop	{r4, pc}

08015736 <__sclose>:
 8015736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801573a:	f000 b8e3 	b.w	8015904 <_close_r>
	...

08015740 <_unlink_r>:
 8015740:	b538      	push	{r3, r4, r5, lr}
 8015742:	4c06      	ldr	r4, [pc, #24]	; (801575c <_unlink_r+0x1c>)
 8015744:	2300      	movs	r3, #0
 8015746:	4605      	mov	r5, r0
 8015748:	4608      	mov	r0, r1
 801574a:	6023      	str	r3, [r4, #0]
 801574c:	f7eb f9a3 	bl	8000a96 <_unlink>
 8015750:	1c43      	adds	r3, r0, #1
 8015752:	d102      	bne.n	801575a <_unlink_r+0x1a>
 8015754:	6823      	ldr	r3, [r4, #0]
 8015756:	b103      	cbz	r3, 801575a <_unlink_r+0x1a>
 8015758:	602b      	str	r3, [r5, #0]
 801575a:	bd38      	pop	{r3, r4, r5, pc}
 801575c:	200028c8 	.word	0x200028c8

08015760 <__swbuf_r>:
 8015760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015762:	460e      	mov	r6, r1
 8015764:	4614      	mov	r4, r2
 8015766:	4605      	mov	r5, r0
 8015768:	b118      	cbz	r0, 8015772 <__swbuf_r+0x12>
 801576a:	6983      	ldr	r3, [r0, #24]
 801576c:	b90b      	cbnz	r3, 8015772 <__swbuf_r+0x12>
 801576e:	f7ff f9e7 	bl	8014b40 <__sinit>
 8015772:	4b21      	ldr	r3, [pc, #132]	; (80157f8 <__swbuf_r+0x98>)
 8015774:	429c      	cmp	r4, r3
 8015776:	d12a      	bne.n	80157ce <__swbuf_r+0x6e>
 8015778:	686c      	ldr	r4, [r5, #4]
 801577a:	69a3      	ldr	r3, [r4, #24]
 801577c:	60a3      	str	r3, [r4, #8]
 801577e:	89a3      	ldrh	r3, [r4, #12]
 8015780:	071a      	lsls	r2, r3, #28
 8015782:	d52e      	bpl.n	80157e2 <__swbuf_r+0x82>
 8015784:	6923      	ldr	r3, [r4, #16]
 8015786:	b363      	cbz	r3, 80157e2 <__swbuf_r+0x82>
 8015788:	6923      	ldr	r3, [r4, #16]
 801578a:	6820      	ldr	r0, [r4, #0]
 801578c:	1ac0      	subs	r0, r0, r3
 801578e:	6963      	ldr	r3, [r4, #20]
 8015790:	b2f6      	uxtb	r6, r6
 8015792:	4283      	cmp	r3, r0
 8015794:	4637      	mov	r7, r6
 8015796:	dc04      	bgt.n	80157a2 <__swbuf_r+0x42>
 8015798:	4621      	mov	r1, r4
 801579a:	4628      	mov	r0, r5
 801579c:	f7ff f954 	bl	8014a48 <_fflush_r>
 80157a0:	bb28      	cbnz	r0, 80157ee <__swbuf_r+0x8e>
 80157a2:	68a3      	ldr	r3, [r4, #8]
 80157a4:	3b01      	subs	r3, #1
 80157a6:	60a3      	str	r3, [r4, #8]
 80157a8:	6823      	ldr	r3, [r4, #0]
 80157aa:	1c5a      	adds	r2, r3, #1
 80157ac:	6022      	str	r2, [r4, #0]
 80157ae:	701e      	strb	r6, [r3, #0]
 80157b0:	6963      	ldr	r3, [r4, #20]
 80157b2:	3001      	adds	r0, #1
 80157b4:	4283      	cmp	r3, r0
 80157b6:	d004      	beq.n	80157c2 <__swbuf_r+0x62>
 80157b8:	89a3      	ldrh	r3, [r4, #12]
 80157ba:	07db      	lsls	r3, r3, #31
 80157bc:	d519      	bpl.n	80157f2 <__swbuf_r+0x92>
 80157be:	2e0a      	cmp	r6, #10
 80157c0:	d117      	bne.n	80157f2 <__swbuf_r+0x92>
 80157c2:	4621      	mov	r1, r4
 80157c4:	4628      	mov	r0, r5
 80157c6:	f7ff f93f 	bl	8014a48 <_fflush_r>
 80157ca:	b190      	cbz	r0, 80157f2 <__swbuf_r+0x92>
 80157cc:	e00f      	b.n	80157ee <__swbuf_r+0x8e>
 80157ce:	4b0b      	ldr	r3, [pc, #44]	; (80157fc <__swbuf_r+0x9c>)
 80157d0:	429c      	cmp	r4, r3
 80157d2:	d101      	bne.n	80157d8 <__swbuf_r+0x78>
 80157d4:	68ac      	ldr	r4, [r5, #8]
 80157d6:	e7d0      	b.n	801577a <__swbuf_r+0x1a>
 80157d8:	4b09      	ldr	r3, [pc, #36]	; (8015800 <__swbuf_r+0xa0>)
 80157da:	429c      	cmp	r4, r3
 80157dc:	bf08      	it	eq
 80157de:	68ec      	ldreq	r4, [r5, #12]
 80157e0:	e7cb      	b.n	801577a <__swbuf_r+0x1a>
 80157e2:	4621      	mov	r1, r4
 80157e4:	4628      	mov	r0, r5
 80157e6:	f000 f81f 	bl	8015828 <__swsetup_r>
 80157ea:	2800      	cmp	r0, #0
 80157ec:	d0cc      	beq.n	8015788 <__swbuf_r+0x28>
 80157ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80157f2:	4638      	mov	r0, r7
 80157f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157f6:	bf00      	nop
 80157f8:	08019f00 	.word	0x08019f00
 80157fc:	08019f20 	.word	0x08019f20
 8015800:	08019ee0 	.word	0x08019ee0

08015804 <_write_r>:
 8015804:	b538      	push	{r3, r4, r5, lr}
 8015806:	4c07      	ldr	r4, [pc, #28]	; (8015824 <_write_r+0x20>)
 8015808:	4605      	mov	r5, r0
 801580a:	4608      	mov	r0, r1
 801580c:	4611      	mov	r1, r2
 801580e:	2200      	movs	r2, #0
 8015810:	6022      	str	r2, [r4, #0]
 8015812:	461a      	mov	r2, r3
 8015814:	f7eb f8e1 	bl	80009da <_write>
 8015818:	1c43      	adds	r3, r0, #1
 801581a:	d102      	bne.n	8015822 <_write_r+0x1e>
 801581c:	6823      	ldr	r3, [r4, #0]
 801581e:	b103      	cbz	r3, 8015822 <_write_r+0x1e>
 8015820:	602b      	str	r3, [r5, #0]
 8015822:	bd38      	pop	{r3, r4, r5, pc}
 8015824:	200028c8 	.word	0x200028c8

08015828 <__swsetup_r>:
 8015828:	4b32      	ldr	r3, [pc, #200]	; (80158f4 <__swsetup_r+0xcc>)
 801582a:	b570      	push	{r4, r5, r6, lr}
 801582c:	681d      	ldr	r5, [r3, #0]
 801582e:	4606      	mov	r6, r0
 8015830:	460c      	mov	r4, r1
 8015832:	b125      	cbz	r5, 801583e <__swsetup_r+0x16>
 8015834:	69ab      	ldr	r3, [r5, #24]
 8015836:	b913      	cbnz	r3, 801583e <__swsetup_r+0x16>
 8015838:	4628      	mov	r0, r5
 801583a:	f7ff f981 	bl	8014b40 <__sinit>
 801583e:	4b2e      	ldr	r3, [pc, #184]	; (80158f8 <__swsetup_r+0xd0>)
 8015840:	429c      	cmp	r4, r3
 8015842:	d10f      	bne.n	8015864 <__swsetup_r+0x3c>
 8015844:	686c      	ldr	r4, [r5, #4]
 8015846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801584a:	b29a      	uxth	r2, r3
 801584c:	0715      	lsls	r5, r2, #28
 801584e:	d42c      	bmi.n	80158aa <__swsetup_r+0x82>
 8015850:	06d0      	lsls	r0, r2, #27
 8015852:	d411      	bmi.n	8015878 <__swsetup_r+0x50>
 8015854:	2209      	movs	r2, #9
 8015856:	6032      	str	r2, [r6, #0]
 8015858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801585c:	81a3      	strh	r3, [r4, #12]
 801585e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015862:	e03e      	b.n	80158e2 <__swsetup_r+0xba>
 8015864:	4b25      	ldr	r3, [pc, #148]	; (80158fc <__swsetup_r+0xd4>)
 8015866:	429c      	cmp	r4, r3
 8015868:	d101      	bne.n	801586e <__swsetup_r+0x46>
 801586a:	68ac      	ldr	r4, [r5, #8]
 801586c:	e7eb      	b.n	8015846 <__swsetup_r+0x1e>
 801586e:	4b24      	ldr	r3, [pc, #144]	; (8015900 <__swsetup_r+0xd8>)
 8015870:	429c      	cmp	r4, r3
 8015872:	bf08      	it	eq
 8015874:	68ec      	ldreq	r4, [r5, #12]
 8015876:	e7e6      	b.n	8015846 <__swsetup_r+0x1e>
 8015878:	0751      	lsls	r1, r2, #29
 801587a:	d512      	bpl.n	80158a2 <__swsetup_r+0x7a>
 801587c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801587e:	b141      	cbz	r1, 8015892 <__swsetup_r+0x6a>
 8015880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015884:	4299      	cmp	r1, r3
 8015886:	d002      	beq.n	801588e <__swsetup_r+0x66>
 8015888:	4630      	mov	r0, r6
 801588a:	f7ff fc81 	bl	8015190 <_free_r>
 801588e:	2300      	movs	r3, #0
 8015890:	6363      	str	r3, [r4, #52]	; 0x34
 8015892:	89a3      	ldrh	r3, [r4, #12]
 8015894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015898:	81a3      	strh	r3, [r4, #12]
 801589a:	2300      	movs	r3, #0
 801589c:	6063      	str	r3, [r4, #4]
 801589e:	6923      	ldr	r3, [r4, #16]
 80158a0:	6023      	str	r3, [r4, #0]
 80158a2:	89a3      	ldrh	r3, [r4, #12]
 80158a4:	f043 0308 	orr.w	r3, r3, #8
 80158a8:	81a3      	strh	r3, [r4, #12]
 80158aa:	6923      	ldr	r3, [r4, #16]
 80158ac:	b94b      	cbnz	r3, 80158c2 <__swsetup_r+0x9a>
 80158ae:	89a3      	ldrh	r3, [r4, #12]
 80158b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80158b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80158b8:	d003      	beq.n	80158c2 <__swsetup_r+0x9a>
 80158ba:	4621      	mov	r1, r4
 80158bc:	4630      	mov	r0, r6
 80158be:	f7ff fbcd 	bl	801505c <__smakebuf_r>
 80158c2:	89a2      	ldrh	r2, [r4, #12]
 80158c4:	f012 0301 	ands.w	r3, r2, #1
 80158c8:	d00c      	beq.n	80158e4 <__swsetup_r+0xbc>
 80158ca:	2300      	movs	r3, #0
 80158cc:	60a3      	str	r3, [r4, #8]
 80158ce:	6963      	ldr	r3, [r4, #20]
 80158d0:	425b      	negs	r3, r3
 80158d2:	61a3      	str	r3, [r4, #24]
 80158d4:	6923      	ldr	r3, [r4, #16]
 80158d6:	b953      	cbnz	r3, 80158ee <__swsetup_r+0xc6>
 80158d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80158e0:	d1ba      	bne.n	8015858 <__swsetup_r+0x30>
 80158e2:	bd70      	pop	{r4, r5, r6, pc}
 80158e4:	0792      	lsls	r2, r2, #30
 80158e6:	bf58      	it	pl
 80158e8:	6963      	ldrpl	r3, [r4, #20]
 80158ea:	60a3      	str	r3, [r4, #8]
 80158ec:	e7f2      	b.n	80158d4 <__swsetup_r+0xac>
 80158ee:	2000      	movs	r0, #0
 80158f0:	e7f7      	b.n	80158e2 <__swsetup_r+0xba>
 80158f2:	bf00      	nop
 80158f4:	20000010 	.word	0x20000010
 80158f8:	08019f00 	.word	0x08019f00
 80158fc:	08019f20 	.word	0x08019f20
 8015900:	08019ee0 	.word	0x08019ee0

08015904 <_close_r>:
 8015904:	b538      	push	{r3, r4, r5, lr}
 8015906:	4c06      	ldr	r4, [pc, #24]	; (8015920 <_close_r+0x1c>)
 8015908:	2300      	movs	r3, #0
 801590a:	4605      	mov	r5, r0
 801590c:	4608      	mov	r0, r1
 801590e:	6023      	str	r3, [r4, #0]
 8015910:	f7eb f87f 	bl	8000a12 <_close>
 8015914:	1c43      	adds	r3, r0, #1
 8015916:	d102      	bne.n	801591e <_close_r+0x1a>
 8015918:	6823      	ldr	r3, [r4, #0]
 801591a:	b103      	cbz	r3, 801591e <_close_r+0x1a>
 801591c:	602b      	str	r3, [r5, #0]
 801591e:	bd38      	pop	{r3, r4, r5, pc}
 8015920:	200028c8 	.word	0x200028c8

08015924 <__sflags>:
 8015924:	780b      	ldrb	r3, [r1, #0]
 8015926:	2b72      	cmp	r3, #114	; 0x72
 8015928:	b530      	push	{r4, r5, lr}
 801592a:	d02c      	beq.n	8015986 <__sflags+0x62>
 801592c:	2b77      	cmp	r3, #119	; 0x77
 801592e:	d007      	beq.n	8015940 <__sflags+0x1c>
 8015930:	2b61      	cmp	r3, #97	; 0x61
 8015932:	d10f      	bne.n	8015954 <__sflags+0x30>
 8015934:	f44f 7402 	mov.w	r4, #520	; 0x208
 8015938:	2301      	movs	r3, #1
 801593a:	f44f 7084 	mov.w	r0, #264	; 0x108
 801593e:	e003      	b.n	8015948 <__sflags+0x24>
 8015940:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8015944:	2301      	movs	r3, #1
 8015946:	2008      	movs	r0, #8
 8015948:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801594c:	b935      	cbnz	r5, 801595c <__sflags+0x38>
 801594e:	4323      	orrs	r3, r4
 8015950:	6013      	str	r3, [r2, #0]
 8015952:	e002      	b.n	801595a <__sflags+0x36>
 8015954:	2316      	movs	r3, #22
 8015956:	6003      	str	r3, [r0, #0]
 8015958:	2000      	movs	r0, #0
 801595a:	bd30      	pop	{r4, r5, pc}
 801595c:	2d62      	cmp	r5, #98	; 0x62
 801595e:	d00c      	beq.n	801597a <__sflags+0x56>
 8015960:	2d78      	cmp	r5, #120	; 0x78
 8015962:	d00d      	beq.n	8015980 <__sflags+0x5c>
 8015964:	2d2b      	cmp	r5, #43	; 0x2b
 8015966:	d1ef      	bne.n	8015948 <__sflags+0x24>
 8015968:	f020 001c 	bic.w	r0, r0, #28
 801596c:	f023 0303 	bic.w	r3, r3, #3
 8015970:	f040 0010 	orr.w	r0, r0, #16
 8015974:	f043 0302 	orr.w	r3, r3, #2
 8015978:	e7e6      	b.n	8015948 <__sflags+0x24>
 801597a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801597e:	e7e3      	b.n	8015948 <__sflags+0x24>
 8015980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015984:	e7e0      	b.n	8015948 <__sflags+0x24>
 8015986:	2400      	movs	r4, #0
 8015988:	4623      	mov	r3, r4
 801598a:	2004      	movs	r0, #4
 801598c:	e7dc      	b.n	8015948 <__sflags+0x24>
	...

08015990 <_fstat_r>:
 8015990:	b538      	push	{r3, r4, r5, lr}
 8015992:	4c07      	ldr	r4, [pc, #28]	; (80159b0 <_fstat_r+0x20>)
 8015994:	2300      	movs	r3, #0
 8015996:	4605      	mov	r5, r0
 8015998:	4608      	mov	r0, r1
 801599a:	4611      	mov	r1, r2
 801599c:	6023      	str	r3, [r4, #0]
 801599e:	f7eb f844 	bl	8000a2a <_fstat>
 80159a2:	1c43      	adds	r3, r0, #1
 80159a4:	d102      	bne.n	80159ac <_fstat_r+0x1c>
 80159a6:	6823      	ldr	r3, [r4, #0]
 80159a8:	b103      	cbz	r3, 80159ac <_fstat_r+0x1c>
 80159aa:	602b      	str	r3, [r5, #0]
 80159ac:	bd38      	pop	{r3, r4, r5, pc}
 80159ae:	bf00      	nop
 80159b0:	200028c8 	.word	0x200028c8

080159b4 <_isatty_r>:
 80159b4:	b538      	push	{r3, r4, r5, lr}
 80159b6:	4c06      	ldr	r4, [pc, #24]	; (80159d0 <_isatty_r+0x1c>)
 80159b8:	2300      	movs	r3, #0
 80159ba:	4605      	mov	r5, r0
 80159bc:	4608      	mov	r0, r1
 80159be:	6023      	str	r3, [r4, #0]
 80159c0:	f7eb f843 	bl	8000a4a <_isatty>
 80159c4:	1c43      	adds	r3, r0, #1
 80159c6:	d102      	bne.n	80159ce <_isatty_r+0x1a>
 80159c8:	6823      	ldr	r3, [r4, #0]
 80159ca:	b103      	cbz	r3, 80159ce <_isatty_r+0x1a>
 80159cc:	602b      	str	r3, [r5, #0]
 80159ce:	bd38      	pop	{r3, r4, r5, pc}
 80159d0:	200028c8 	.word	0x200028c8

080159d4 <_link_r>:
 80159d4:	b538      	push	{r3, r4, r5, lr}
 80159d6:	4c07      	ldr	r4, [pc, #28]	; (80159f4 <_link_r+0x20>)
 80159d8:	2300      	movs	r3, #0
 80159da:	4605      	mov	r5, r0
 80159dc:	4608      	mov	r0, r1
 80159de:	4611      	mov	r1, r2
 80159e0:	6023      	str	r3, [r4, #0]
 80159e2:	f7eb f867 	bl	8000ab4 <_link>
 80159e6:	1c43      	adds	r3, r0, #1
 80159e8:	d102      	bne.n	80159f0 <_link_r+0x1c>
 80159ea:	6823      	ldr	r3, [r4, #0]
 80159ec:	b103      	cbz	r3, 80159f0 <_link_r+0x1c>
 80159ee:	602b      	str	r3, [r5, #0]
 80159f0:	bd38      	pop	{r3, r4, r5, pc}
 80159f2:	bf00      	nop
 80159f4:	200028c8 	.word	0x200028c8

080159f8 <_lseek_r>:
 80159f8:	b538      	push	{r3, r4, r5, lr}
 80159fa:	4c07      	ldr	r4, [pc, #28]	; (8015a18 <_lseek_r+0x20>)
 80159fc:	4605      	mov	r5, r0
 80159fe:	4608      	mov	r0, r1
 8015a00:	4611      	mov	r1, r2
 8015a02:	2200      	movs	r2, #0
 8015a04:	6022      	str	r2, [r4, #0]
 8015a06:	461a      	mov	r2, r3
 8015a08:	f7eb f82a 	bl	8000a60 <_lseek>
 8015a0c:	1c43      	adds	r3, r0, #1
 8015a0e:	d102      	bne.n	8015a16 <_lseek_r+0x1e>
 8015a10:	6823      	ldr	r3, [r4, #0]
 8015a12:	b103      	cbz	r3, 8015a16 <_lseek_r+0x1e>
 8015a14:	602b      	str	r3, [r5, #0]
 8015a16:	bd38      	pop	{r3, r4, r5, pc}
 8015a18:	200028c8 	.word	0x200028c8

08015a1c <__malloc_lock>:
 8015a1c:	4770      	bx	lr

08015a1e <__malloc_unlock>:
 8015a1e:	4770      	bx	lr

08015a20 <__ssputs_r>:
 8015a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a24:	688e      	ldr	r6, [r1, #8]
 8015a26:	429e      	cmp	r6, r3
 8015a28:	4682      	mov	sl, r0
 8015a2a:	460c      	mov	r4, r1
 8015a2c:	4690      	mov	r8, r2
 8015a2e:	4699      	mov	r9, r3
 8015a30:	d837      	bhi.n	8015aa2 <__ssputs_r+0x82>
 8015a32:	898a      	ldrh	r2, [r1, #12]
 8015a34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015a38:	d031      	beq.n	8015a9e <__ssputs_r+0x7e>
 8015a3a:	6825      	ldr	r5, [r4, #0]
 8015a3c:	6909      	ldr	r1, [r1, #16]
 8015a3e:	1a6f      	subs	r7, r5, r1
 8015a40:	6965      	ldr	r5, [r4, #20]
 8015a42:	2302      	movs	r3, #2
 8015a44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a48:	fb95 f5f3 	sdiv	r5, r5, r3
 8015a4c:	f109 0301 	add.w	r3, r9, #1
 8015a50:	443b      	add	r3, r7
 8015a52:	429d      	cmp	r5, r3
 8015a54:	bf38      	it	cc
 8015a56:	461d      	movcc	r5, r3
 8015a58:	0553      	lsls	r3, r2, #21
 8015a5a:	d530      	bpl.n	8015abe <__ssputs_r+0x9e>
 8015a5c:	4629      	mov	r1, r5
 8015a5e:	f7ff fbe5 	bl	801522c <_malloc_r>
 8015a62:	4606      	mov	r6, r0
 8015a64:	b950      	cbnz	r0, 8015a7c <__ssputs_r+0x5c>
 8015a66:	230c      	movs	r3, #12
 8015a68:	f8ca 3000 	str.w	r3, [sl]
 8015a6c:	89a3      	ldrh	r3, [r4, #12]
 8015a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a72:	81a3      	strh	r3, [r4, #12]
 8015a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a7c:	463a      	mov	r2, r7
 8015a7e:	6921      	ldr	r1, [r4, #16]
 8015a80:	f7ff fb4b 	bl	801511a <memcpy>
 8015a84:	89a3      	ldrh	r3, [r4, #12]
 8015a86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a8e:	81a3      	strh	r3, [r4, #12]
 8015a90:	6126      	str	r6, [r4, #16]
 8015a92:	6165      	str	r5, [r4, #20]
 8015a94:	443e      	add	r6, r7
 8015a96:	1bed      	subs	r5, r5, r7
 8015a98:	6026      	str	r6, [r4, #0]
 8015a9a:	60a5      	str	r5, [r4, #8]
 8015a9c:	464e      	mov	r6, r9
 8015a9e:	454e      	cmp	r6, r9
 8015aa0:	d900      	bls.n	8015aa4 <__ssputs_r+0x84>
 8015aa2:	464e      	mov	r6, r9
 8015aa4:	4632      	mov	r2, r6
 8015aa6:	4641      	mov	r1, r8
 8015aa8:	6820      	ldr	r0, [r4, #0]
 8015aaa:	f7ff fb41 	bl	8015130 <memmove>
 8015aae:	68a3      	ldr	r3, [r4, #8]
 8015ab0:	1b9b      	subs	r3, r3, r6
 8015ab2:	60a3      	str	r3, [r4, #8]
 8015ab4:	6823      	ldr	r3, [r4, #0]
 8015ab6:	441e      	add	r6, r3
 8015ab8:	6026      	str	r6, [r4, #0]
 8015aba:	2000      	movs	r0, #0
 8015abc:	e7dc      	b.n	8015a78 <__ssputs_r+0x58>
 8015abe:	462a      	mov	r2, r5
 8015ac0:	f000 fc10 	bl	80162e4 <_realloc_r>
 8015ac4:	4606      	mov	r6, r0
 8015ac6:	2800      	cmp	r0, #0
 8015ac8:	d1e2      	bne.n	8015a90 <__ssputs_r+0x70>
 8015aca:	6921      	ldr	r1, [r4, #16]
 8015acc:	4650      	mov	r0, sl
 8015ace:	f7ff fb5f 	bl	8015190 <_free_r>
 8015ad2:	e7c8      	b.n	8015a66 <__ssputs_r+0x46>

08015ad4 <_svfiprintf_r>:
 8015ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad8:	461d      	mov	r5, r3
 8015ada:	898b      	ldrh	r3, [r1, #12]
 8015adc:	061f      	lsls	r7, r3, #24
 8015ade:	b09d      	sub	sp, #116	; 0x74
 8015ae0:	4680      	mov	r8, r0
 8015ae2:	460c      	mov	r4, r1
 8015ae4:	4616      	mov	r6, r2
 8015ae6:	d50f      	bpl.n	8015b08 <_svfiprintf_r+0x34>
 8015ae8:	690b      	ldr	r3, [r1, #16]
 8015aea:	b96b      	cbnz	r3, 8015b08 <_svfiprintf_r+0x34>
 8015aec:	2140      	movs	r1, #64	; 0x40
 8015aee:	f7ff fb9d 	bl	801522c <_malloc_r>
 8015af2:	6020      	str	r0, [r4, #0]
 8015af4:	6120      	str	r0, [r4, #16]
 8015af6:	b928      	cbnz	r0, 8015b04 <_svfiprintf_r+0x30>
 8015af8:	230c      	movs	r3, #12
 8015afa:	f8c8 3000 	str.w	r3, [r8]
 8015afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b02:	e0c8      	b.n	8015c96 <_svfiprintf_r+0x1c2>
 8015b04:	2340      	movs	r3, #64	; 0x40
 8015b06:	6163      	str	r3, [r4, #20]
 8015b08:	2300      	movs	r3, #0
 8015b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8015b0c:	2320      	movs	r3, #32
 8015b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b12:	2330      	movs	r3, #48	; 0x30
 8015b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b18:	9503      	str	r5, [sp, #12]
 8015b1a:	f04f 0b01 	mov.w	fp, #1
 8015b1e:	4637      	mov	r7, r6
 8015b20:	463d      	mov	r5, r7
 8015b22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015b26:	b10b      	cbz	r3, 8015b2c <_svfiprintf_r+0x58>
 8015b28:	2b25      	cmp	r3, #37	; 0x25
 8015b2a:	d13e      	bne.n	8015baa <_svfiprintf_r+0xd6>
 8015b2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8015b30:	d00b      	beq.n	8015b4a <_svfiprintf_r+0x76>
 8015b32:	4653      	mov	r3, sl
 8015b34:	4632      	mov	r2, r6
 8015b36:	4621      	mov	r1, r4
 8015b38:	4640      	mov	r0, r8
 8015b3a:	f7ff ff71 	bl	8015a20 <__ssputs_r>
 8015b3e:	3001      	adds	r0, #1
 8015b40:	f000 80a4 	beq.w	8015c8c <_svfiprintf_r+0x1b8>
 8015b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b46:	4453      	add	r3, sl
 8015b48:	9309      	str	r3, [sp, #36]	; 0x24
 8015b4a:	783b      	ldrb	r3, [r7, #0]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	f000 809d 	beq.w	8015c8c <_svfiprintf_r+0x1b8>
 8015b52:	2300      	movs	r3, #0
 8015b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b5c:	9304      	str	r3, [sp, #16]
 8015b5e:	9307      	str	r3, [sp, #28]
 8015b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015b64:	931a      	str	r3, [sp, #104]	; 0x68
 8015b66:	462f      	mov	r7, r5
 8015b68:	2205      	movs	r2, #5
 8015b6a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015b6e:	4850      	ldr	r0, [pc, #320]	; (8015cb0 <_svfiprintf_r+0x1dc>)
 8015b70:	f7ea fb36 	bl	80001e0 <memchr>
 8015b74:	9b04      	ldr	r3, [sp, #16]
 8015b76:	b9d0      	cbnz	r0, 8015bae <_svfiprintf_r+0xda>
 8015b78:	06d9      	lsls	r1, r3, #27
 8015b7a:	bf44      	itt	mi
 8015b7c:	2220      	movmi	r2, #32
 8015b7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015b82:	071a      	lsls	r2, r3, #28
 8015b84:	bf44      	itt	mi
 8015b86:	222b      	movmi	r2, #43	; 0x2b
 8015b88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015b8c:	782a      	ldrb	r2, [r5, #0]
 8015b8e:	2a2a      	cmp	r2, #42	; 0x2a
 8015b90:	d015      	beq.n	8015bbe <_svfiprintf_r+0xea>
 8015b92:	9a07      	ldr	r2, [sp, #28]
 8015b94:	462f      	mov	r7, r5
 8015b96:	2000      	movs	r0, #0
 8015b98:	250a      	movs	r5, #10
 8015b9a:	4639      	mov	r1, r7
 8015b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ba0:	3b30      	subs	r3, #48	; 0x30
 8015ba2:	2b09      	cmp	r3, #9
 8015ba4:	d94d      	bls.n	8015c42 <_svfiprintf_r+0x16e>
 8015ba6:	b1b8      	cbz	r0, 8015bd8 <_svfiprintf_r+0x104>
 8015ba8:	e00f      	b.n	8015bca <_svfiprintf_r+0xf6>
 8015baa:	462f      	mov	r7, r5
 8015bac:	e7b8      	b.n	8015b20 <_svfiprintf_r+0x4c>
 8015bae:	4a40      	ldr	r2, [pc, #256]	; (8015cb0 <_svfiprintf_r+0x1dc>)
 8015bb0:	1a80      	subs	r0, r0, r2
 8015bb2:	fa0b f000 	lsl.w	r0, fp, r0
 8015bb6:	4318      	orrs	r0, r3
 8015bb8:	9004      	str	r0, [sp, #16]
 8015bba:	463d      	mov	r5, r7
 8015bbc:	e7d3      	b.n	8015b66 <_svfiprintf_r+0x92>
 8015bbe:	9a03      	ldr	r2, [sp, #12]
 8015bc0:	1d11      	adds	r1, r2, #4
 8015bc2:	6812      	ldr	r2, [r2, #0]
 8015bc4:	9103      	str	r1, [sp, #12]
 8015bc6:	2a00      	cmp	r2, #0
 8015bc8:	db01      	blt.n	8015bce <_svfiprintf_r+0xfa>
 8015bca:	9207      	str	r2, [sp, #28]
 8015bcc:	e004      	b.n	8015bd8 <_svfiprintf_r+0x104>
 8015bce:	4252      	negs	r2, r2
 8015bd0:	f043 0302 	orr.w	r3, r3, #2
 8015bd4:	9207      	str	r2, [sp, #28]
 8015bd6:	9304      	str	r3, [sp, #16]
 8015bd8:	783b      	ldrb	r3, [r7, #0]
 8015bda:	2b2e      	cmp	r3, #46	; 0x2e
 8015bdc:	d10c      	bne.n	8015bf8 <_svfiprintf_r+0x124>
 8015bde:	787b      	ldrb	r3, [r7, #1]
 8015be0:	2b2a      	cmp	r3, #42	; 0x2a
 8015be2:	d133      	bne.n	8015c4c <_svfiprintf_r+0x178>
 8015be4:	9b03      	ldr	r3, [sp, #12]
 8015be6:	1d1a      	adds	r2, r3, #4
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	9203      	str	r2, [sp, #12]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	bfb8      	it	lt
 8015bf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015bf4:	3702      	adds	r7, #2
 8015bf6:	9305      	str	r3, [sp, #20]
 8015bf8:	4d2e      	ldr	r5, [pc, #184]	; (8015cb4 <_svfiprintf_r+0x1e0>)
 8015bfa:	7839      	ldrb	r1, [r7, #0]
 8015bfc:	2203      	movs	r2, #3
 8015bfe:	4628      	mov	r0, r5
 8015c00:	f7ea faee 	bl	80001e0 <memchr>
 8015c04:	b138      	cbz	r0, 8015c16 <_svfiprintf_r+0x142>
 8015c06:	2340      	movs	r3, #64	; 0x40
 8015c08:	1b40      	subs	r0, r0, r5
 8015c0a:	fa03 f000 	lsl.w	r0, r3, r0
 8015c0e:	9b04      	ldr	r3, [sp, #16]
 8015c10:	4303      	orrs	r3, r0
 8015c12:	3701      	adds	r7, #1
 8015c14:	9304      	str	r3, [sp, #16]
 8015c16:	7839      	ldrb	r1, [r7, #0]
 8015c18:	4827      	ldr	r0, [pc, #156]	; (8015cb8 <_svfiprintf_r+0x1e4>)
 8015c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c1e:	2206      	movs	r2, #6
 8015c20:	1c7e      	adds	r6, r7, #1
 8015c22:	f7ea fadd 	bl	80001e0 <memchr>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	d038      	beq.n	8015c9c <_svfiprintf_r+0x1c8>
 8015c2a:	4b24      	ldr	r3, [pc, #144]	; (8015cbc <_svfiprintf_r+0x1e8>)
 8015c2c:	bb13      	cbnz	r3, 8015c74 <_svfiprintf_r+0x1a0>
 8015c2e:	9b03      	ldr	r3, [sp, #12]
 8015c30:	3307      	adds	r3, #7
 8015c32:	f023 0307 	bic.w	r3, r3, #7
 8015c36:	3308      	adds	r3, #8
 8015c38:	9303      	str	r3, [sp, #12]
 8015c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c3c:	444b      	add	r3, r9
 8015c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8015c40:	e76d      	b.n	8015b1e <_svfiprintf_r+0x4a>
 8015c42:	fb05 3202 	mla	r2, r5, r2, r3
 8015c46:	2001      	movs	r0, #1
 8015c48:	460f      	mov	r7, r1
 8015c4a:	e7a6      	b.n	8015b9a <_svfiprintf_r+0xc6>
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	3701      	adds	r7, #1
 8015c50:	9305      	str	r3, [sp, #20]
 8015c52:	4619      	mov	r1, r3
 8015c54:	250a      	movs	r5, #10
 8015c56:	4638      	mov	r0, r7
 8015c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c5c:	3a30      	subs	r2, #48	; 0x30
 8015c5e:	2a09      	cmp	r2, #9
 8015c60:	d903      	bls.n	8015c6a <_svfiprintf_r+0x196>
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d0c8      	beq.n	8015bf8 <_svfiprintf_r+0x124>
 8015c66:	9105      	str	r1, [sp, #20]
 8015c68:	e7c6      	b.n	8015bf8 <_svfiprintf_r+0x124>
 8015c6a:	fb05 2101 	mla	r1, r5, r1, r2
 8015c6e:	2301      	movs	r3, #1
 8015c70:	4607      	mov	r7, r0
 8015c72:	e7f0      	b.n	8015c56 <_svfiprintf_r+0x182>
 8015c74:	ab03      	add	r3, sp, #12
 8015c76:	9300      	str	r3, [sp, #0]
 8015c78:	4622      	mov	r2, r4
 8015c7a:	4b11      	ldr	r3, [pc, #68]	; (8015cc0 <_svfiprintf_r+0x1ec>)
 8015c7c:	a904      	add	r1, sp, #16
 8015c7e:	4640      	mov	r0, r8
 8015c80:	f3af 8000 	nop.w
 8015c84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015c88:	4681      	mov	r9, r0
 8015c8a:	d1d6      	bne.n	8015c3a <_svfiprintf_r+0x166>
 8015c8c:	89a3      	ldrh	r3, [r4, #12]
 8015c8e:	065b      	lsls	r3, r3, #25
 8015c90:	f53f af35 	bmi.w	8015afe <_svfiprintf_r+0x2a>
 8015c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c96:	b01d      	add	sp, #116	; 0x74
 8015c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c9c:	ab03      	add	r3, sp, #12
 8015c9e:	9300      	str	r3, [sp, #0]
 8015ca0:	4622      	mov	r2, r4
 8015ca2:	4b07      	ldr	r3, [pc, #28]	; (8015cc0 <_svfiprintf_r+0x1ec>)
 8015ca4:	a904      	add	r1, sp, #16
 8015ca6:	4640      	mov	r0, r8
 8015ca8:	f000 f9c2 	bl	8016030 <_printf_i>
 8015cac:	e7ea      	b.n	8015c84 <_svfiprintf_r+0x1b0>
 8015cae:	bf00      	nop
 8015cb0:	08019f44 	.word	0x08019f44
 8015cb4:	08019f4a 	.word	0x08019f4a
 8015cb8:	08019f4e 	.word	0x08019f4e
 8015cbc:	00000000 	.word	0x00000000
 8015cc0:	08015a21 	.word	0x08015a21

08015cc4 <__sfputc_r>:
 8015cc4:	6893      	ldr	r3, [r2, #8]
 8015cc6:	3b01      	subs	r3, #1
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	b410      	push	{r4}
 8015ccc:	6093      	str	r3, [r2, #8]
 8015cce:	da08      	bge.n	8015ce2 <__sfputc_r+0x1e>
 8015cd0:	6994      	ldr	r4, [r2, #24]
 8015cd2:	42a3      	cmp	r3, r4
 8015cd4:	db01      	blt.n	8015cda <__sfputc_r+0x16>
 8015cd6:	290a      	cmp	r1, #10
 8015cd8:	d103      	bne.n	8015ce2 <__sfputc_r+0x1e>
 8015cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cde:	f7ff bd3f 	b.w	8015760 <__swbuf_r>
 8015ce2:	6813      	ldr	r3, [r2, #0]
 8015ce4:	1c58      	adds	r0, r3, #1
 8015ce6:	6010      	str	r0, [r2, #0]
 8015ce8:	7019      	strb	r1, [r3, #0]
 8015cea:	4608      	mov	r0, r1
 8015cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cf0:	4770      	bx	lr

08015cf2 <__sfputs_r>:
 8015cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cf4:	4606      	mov	r6, r0
 8015cf6:	460f      	mov	r7, r1
 8015cf8:	4614      	mov	r4, r2
 8015cfa:	18d5      	adds	r5, r2, r3
 8015cfc:	42ac      	cmp	r4, r5
 8015cfe:	d101      	bne.n	8015d04 <__sfputs_r+0x12>
 8015d00:	2000      	movs	r0, #0
 8015d02:	e007      	b.n	8015d14 <__sfputs_r+0x22>
 8015d04:	463a      	mov	r2, r7
 8015d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d0a:	4630      	mov	r0, r6
 8015d0c:	f7ff ffda 	bl	8015cc4 <__sfputc_r>
 8015d10:	1c43      	adds	r3, r0, #1
 8015d12:	d1f3      	bne.n	8015cfc <__sfputs_r+0xa>
 8015d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015d18 <_vfiprintf_r>:
 8015d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d1c:	460c      	mov	r4, r1
 8015d1e:	b09d      	sub	sp, #116	; 0x74
 8015d20:	4617      	mov	r7, r2
 8015d22:	461d      	mov	r5, r3
 8015d24:	4606      	mov	r6, r0
 8015d26:	b118      	cbz	r0, 8015d30 <_vfiprintf_r+0x18>
 8015d28:	6983      	ldr	r3, [r0, #24]
 8015d2a:	b90b      	cbnz	r3, 8015d30 <_vfiprintf_r+0x18>
 8015d2c:	f7fe ff08 	bl	8014b40 <__sinit>
 8015d30:	4b7c      	ldr	r3, [pc, #496]	; (8015f24 <_vfiprintf_r+0x20c>)
 8015d32:	429c      	cmp	r4, r3
 8015d34:	d158      	bne.n	8015de8 <_vfiprintf_r+0xd0>
 8015d36:	6874      	ldr	r4, [r6, #4]
 8015d38:	89a3      	ldrh	r3, [r4, #12]
 8015d3a:	0718      	lsls	r0, r3, #28
 8015d3c:	d55e      	bpl.n	8015dfc <_vfiprintf_r+0xe4>
 8015d3e:	6923      	ldr	r3, [r4, #16]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d05b      	beq.n	8015dfc <_vfiprintf_r+0xe4>
 8015d44:	2300      	movs	r3, #0
 8015d46:	9309      	str	r3, [sp, #36]	; 0x24
 8015d48:	2320      	movs	r3, #32
 8015d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d4e:	2330      	movs	r3, #48	; 0x30
 8015d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d54:	9503      	str	r5, [sp, #12]
 8015d56:	f04f 0b01 	mov.w	fp, #1
 8015d5a:	46b8      	mov	r8, r7
 8015d5c:	4645      	mov	r5, r8
 8015d5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015d62:	b10b      	cbz	r3, 8015d68 <_vfiprintf_r+0x50>
 8015d64:	2b25      	cmp	r3, #37	; 0x25
 8015d66:	d154      	bne.n	8015e12 <_vfiprintf_r+0xfa>
 8015d68:	ebb8 0a07 	subs.w	sl, r8, r7
 8015d6c:	d00b      	beq.n	8015d86 <_vfiprintf_r+0x6e>
 8015d6e:	4653      	mov	r3, sl
 8015d70:	463a      	mov	r2, r7
 8015d72:	4621      	mov	r1, r4
 8015d74:	4630      	mov	r0, r6
 8015d76:	f7ff ffbc 	bl	8015cf2 <__sfputs_r>
 8015d7a:	3001      	adds	r0, #1
 8015d7c:	f000 80c2 	beq.w	8015f04 <_vfiprintf_r+0x1ec>
 8015d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d82:	4453      	add	r3, sl
 8015d84:	9309      	str	r3, [sp, #36]	; 0x24
 8015d86:	f898 3000 	ldrb.w	r3, [r8]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	f000 80ba 	beq.w	8015f04 <_vfiprintf_r+0x1ec>
 8015d90:	2300      	movs	r3, #0
 8015d92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d9a:	9304      	str	r3, [sp, #16]
 8015d9c:	9307      	str	r3, [sp, #28]
 8015d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015da2:	931a      	str	r3, [sp, #104]	; 0x68
 8015da4:	46a8      	mov	r8, r5
 8015da6:	2205      	movs	r2, #5
 8015da8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015dac:	485e      	ldr	r0, [pc, #376]	; (8015f28 <_vfiprintf_r+0x210>)
 8015dae:	f7ea fa17 	bl	80001e0 <memchr>
 8015db2:	9b04      	ldr	r3, [sp, #16]
 8015db4:	bb78      	cbnz	r0, 8015e16 <_vfiprintf_r+0xfe>
 8015db6:	06d9      	lsls	r1, r3, #27
 8015db8:	bf44      	itt	mi
 8015dba:	2220      	movmi	r2, #32
 8015dbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015dc0:	071a      	lsls	r2, r3, #28
 8015dc2:	bf44      	itt	mi
 8015dc4:	222b      	movmi	r2, #43	; 0x2b
 8015dc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015dca:	782a      	ldrb	r2, [r5, #0]
 8015dcc:	2a2a      	cmp	r2, #42	; 0x2a
 8015dce:	d02a      	beq.n	8015e26 <_vfiprintf_r+0x10e>
 8015dd0:	9a07      	ldr	r2, [sp, #28]
 8015dd2:	46a8      	mov	r8, r5
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	250a      	movs	r5, #10
 8015dd8:	4641      	mov	r1, r8
 8015dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015dde:	3b30      	subs	r3, #48	; 0x30
 8015de0:	2b09      	cmp	r3, #9
 8015de2:	d969      	bls.n	8015eb8 <_vfiprintf_r+0x1a0>
 8015de4:	b360      	cbz	r0, 8015e40 <_vfiprintf_r+0x128>
 8015de6:	e024      	b.n	8015e32 <_vfiprintf_r+0x11a>
 8015de8:	4b50      	ldr	r3, [pc, #320]	; (8015f2c <_vfiprintf_r+0x214>)
 8015dea:	429c      	cmp	r4, r3
 8015dec:	d101      	bne.n	8015df2 <_vfiprintf_r+0xda>
 8015dee:	68b4      	ldr	r4, [r6, #8]
 8015df0:	e7a2      	b.n	8015d38 <_vfiprintf_r+0x20>
 8015df2:	4b4f      	ldr	r3, [pc, #316]	; (8015f30 <_vfiprintf_r+0x218>)
 8015df4:	429c      	cmp	r4, r3
 8015df6:	bf08      	it	eq
 8015df8:	68f4      	ldreq	r4, [r6, #12]
 8015dfa:	e79d      	b.n	8015d38 <_vfiprintf_r+0x20>
 8015dfc:	4621      	mov	r1, r4
 8015dfe:	4630      	mov	r0, r6
 8015e00:	f7ff fd12 	bl	8015828 <__swsetup_r>
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d09d      	beq.n	8015d44 <_vfiprintf_r+0x2c>
 8015e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e0c:	b01d      	add	sp, #116	; 0x74
 8015e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e12:	46a8      	mov	r8, r5
 8015e14:	e7a2      	b.n	8015d5c <_vfiprintf_r+0x44>
 8015e16:	4a44      	ldr	r2, [pc, #272]	; (8015f28 <_vfiprintf_r+0x210>)
 8015e18:	1a80      	subs	r0, r0, r2
 8015e1a:	fa0b f000 	lsl.w	r0, fp, r0
 8015e1e:	4318      	orrs	r0, r3
 8015e20:	9004      	str	r0, [sp, #16]
 8015e22:	4645      	mov	r5, r8
 8015e24:	e7be      	b.n	8015da4 <_vfiprintf_r+0x8c>
 8015e26:	9a03      	ldr	r2, [sp, #12]
 8015e28:	1d11      	adds	r1, r2, #4
 8015e2a:	6812      	ldr	r2, [r2, #0]
 8015e2c:	9103      	str	r1, [sp, #12]
 8015e2e:	2a00      	cmp	r2, #0
 8015e30:	db01      	blt.n	8015e36 <_vfiprintf_r+0x11e>
 8015e32:	9207      	str	r2, [sp, #28]
 8015e34:	e004      	b.n	8015e40 <_vfiprintf_r+0x128>
 8015e36:	4252      	negs	r2, r2
 8015e38:	f043 0302 	orr.w	r3, r3, #2
 8015e3c:	9207      	str	r2, [sp, #28]
 8015e3e:	9304      	str	r3, [sp, #16]
 8015e40:	f898 3000 	ldrb.w	r3, [r8]
 8015e44:	2b2e      	cmp	r3, #46	; 0x2e
 8015e46:	d10e      	bne.n	8015e66 <_vfiprintf_r+0x14e>
 8015e48:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8015e4e:	d138      	bne.n	8015ec2 <_vfiprintf_r+0x1aa>
 8015e50:	9b03      	ldr	r3, [sp, #12]
 8015e52:	1d1a      	adds	r2, r3, #4
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	9203      	str	r2, [sp, #12]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	bfb8      	it	lt
 8015e5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015e60:	f108 0802 	add.w	r8, r8, #2
 8015e64:	9305      	str	r3, [sp, #20]
 8015e66:	4d33      	ldr	r5, [pc, #204]	; (8015f34 <_vfiprintf_r+0x21c>)
 8015e68:	f898 1000 	ldrb.w	r1, [r8]
 8015e6c:	2203      	movs	r2, #3
 8015e6e:	4628      	mov	r0, r5
 8015e70:	f7ea f9b6 	bl	80001e0 <memchr>
 8015e74:	b140      	cbz	r0, 8015e88 <_vfiprintf_r+0x170>
 8015e76:	2340      	movs	r3, #64	; 0x40
 8015e78:	1b40      	subs	r0, r0, r5
 8015e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8015e7e:	9b04      	ldr	r3, [sp, #16]
 8015e80:	4303      	orrs	r3, r0
 8015e82:	f108 0801 	add.w	r8, r8, #1
 8015e86:	9304      	str	r3, [sp, #16]
 8015e88:	f898 1000 	ldrb.w	r1, [r8]
 8015e8c:	482a      	ldr	r0, [pc, #168]	; (8015f38 <_vfiprintf_r+0x220>)
 8015e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e92:	2206      	movs	r2, #6
 8015e94:	f108 0701 	add.w	r7, r8, #1
 8015e98:	f7ea f9a2 	bl	80001e0 <memchr>
 8015e9c:	2800      	cmp	r0, #0
 8015e9e:	d037      	beq.n	8015f10 <_vfiprintf_r+0x1f8>
 8015ea0:	4b26      	ldr	r3, [pc, #152]	; (8015f3c <_vfiprintf_r+0x224>)
 8015ea2:	bb1b      	cbnz	r3, 8015eec <_vfiprintf_r+0x1d4>
 8015ea4:	9b03      	ldr	r3, [sp, #12]
 8015ea6:	3307      	adds	r3, #7
 8015ea8:	f023 0307 	bic.w	r3, r3, #7
 8015eac:	3308      	adds	r3, #8
 8015eae:	9303      	str	r3, [sp, #12]
 8015eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eb2:	444b      	add	r3, r9
 8015eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8015eb6:	e750      	b.n	8015d5a <_vfiprintf_r+0x42>
 8015eb8:	fb05 3202 	mla	r2, r5, r2, r3
 8015ebc:	2001      	movs	r0, #1
 8015ebe:	4688      	mov	r8, r1
 8015ec0:	e78a      	b.n	8015dd8 <_vfiprintf_r+0xc0>
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	f108 0801 	add.w	r8, r8, #1
 8015ec8:	9305      	str	r3, [sp, #20]
 8015eca:	4619      	mov	r1, r3
 8015ecc:	250a      	movs	r5, #10
 8015ece:	4640      	mov	r0, r8
 8015ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ed4:	3a30      	subs	r2, #48	; 0x30
 8015ed6:	2a09      	cmp	r2, #9
 8015ed8:	d903      	bls.n	8015ee2 <_vfiprintf_r+0x1ca>
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d0c3      	beq.n	8015e66 <_vfiprintf_r+0x14e>
 8015ede:	9105      	str	r1, [sp, #20]
 8015ee0:	e7c1      	b.n	8015e66 <_vfiprintf_r+0x14e>
 8015ee2:	fb05 2101 	mla	r1, r5, r1, r2
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	4680      	mov	r8, r0
 8015eea:	e7f0      	b.n	8015ece <_vfiprintf_r+0x1b6>
 8015eec:	ab03      	add	r3, sp, #12
 8015eee:	9300      	str	r3, [sp, #0]
 8015ef0:	4622      	mov	r2, r4
 8015ef2:	4b13      	ldr	r3, [pc, #76]	; (8015f40 <_vfiprintf_r+0x228>)
 8015ef4:	a904      	add	r1, sp, #16
 8015ef6:	4630      	mov	r0, r6
 8015ef8:	f3af 8000 	nop.w
 8015efc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015f00:	4681      	mov	r9, r0
 8015f02:	d1d5      	bne.n	8015eb0 <_vfiprintf_r+0x198>
 8015f04:	89a3      	ldrh	r3, [r4, #12]
 8015f06:	065b      	lsls	r3, r3, #25
 8015f08:	f53f af7e 	bmi.w	8015e08 <_vfiprintf_r+0xf0>
 8015f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f0e:	e77d      	b.n	8015e0c <_vfiprintf_r+0xf4>
 8015f10:	ab03      	add	r3, sp, #12
 8015f12:	9300      	str	r3, [sp, #0]
 8015f14:	4622      	mov	r2, r4
 8015f16:	4b0a      	ldr	r3, [pc, #40]	; (8015f40 <_vfiprintf_r+0x228>)
 8015f18:	a904      	add	r1, sp, #16
 8015f1a:	4630      	mov	r0, r6
 8015f1c:	f000 f888 	bl	8016030 <_printf_i>
 8015f20:	e7ec      	b.n	8015efc <_vfiprintf_r+0x1e4>
 8015f22:	bf00      	nop
 8015f24:	08019f00 	.word	0x08019f00
 8015f28:	08019f44 	.word	0x08019f44
 8015f2c:	08019f20 	.word	0x08019f20
 8015f30:	08019ee0 	.word	0x08019ee0
 8015f34:	08019f4a 	.word	0x08019f4a
 8015f38:	08019f4e 	.word	0x08019f4e
 8015f3c:	00000000 	.word	0x00000000
 8015f40:	08015cf3 	.word	0x08015cf3

08015f44 <_printf_common>:
 8015f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f48:	4691      	mov	r9, r2
 8015f4a:	461f      	mov	r7, r3
 8015f4c:	688a      	ldr	r2, [r1, #8]
 8015f4e:	690b      	ldr	r3, [r1, #16]
 8015f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015f54:	4293      	cmp	r3, r2
 8015f56:	bfb8      	it	lt
 8015f58:	4613      	movlt	r3, r2
 8015f5a:	f8c9 3000 	str.w	r3, [r9]
 8015f5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015f62:	4606      	mov	r6, r0
 8015f64:	460c      	mov	r4, r1
 8015f66:	b112      	cbz	r2, 8015f6e <_printf_common+0x2a>
 8015f68:	3301      	adds	r3, #1
 8015f6a:	f8c9 3000 	str.w	r3, [r9]
 8015f6e:	6823      	ldr	r3, [r4, #0]
 8015f70:	0699      	lsls	r1, r3, #26
 8015f72:	bf42      	ittt	mi
 8015f74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015f78:	3302      	addmi	r3, #2
 8015f7a:	f8c9 3000 	strmi.w	r3, [r9]
 8015f7e:	6825      	ldr	r5, [r4, #0]
 8015f80:	f015 0506 	ands.w	r5, r5, #6
 8015f84:	d107      	bne.n	8015f96 <_printf_common+0x52>
 8015f86:	f104 0a19 	add.w	sl, r4, #25
 8015f8a:	68e3      	ldr	r3, [r4, #12]
 8015f8c:	f8d9 2000 	ldr.w	r2, [r9]
 8015f90:	1a9b      	subs	r3, r3, r2
 8015f92:	42ab      	cmp	r3, r5
 8015f94:	dc28      	bgt.n	8015fe8 <_printf_common+0xa4>
 8015f96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015f9a:	6822      	ldr	r2, [r4, #0]
 8015f9c:	3300      	adds	r3, #0
 8015f9e:	bf18      	it	ne
 8015fa0:	2301      	movne	r3, #1
 8015fa2:	0692      	lsls	r2, r2, #26
 8015fa4:	d42d      	bmi.n	8016002 <_printf_common+0xbe>
 8015fa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015faa:	4639      	mov	r1, r7
 8015fac:	4630      	mov	r0, r6
 8015fae:	47c0      	blx	r8
 8015fb0:	3001      	adds	r0, #1
 8015fb2:	d020      	beq.n	8015ff6 <_printf_common+0xb2>
 8015fb4:	6823      	ldr	r3, [r4, #0]
 8015fb6:	68e5      	ldr	r5, [r4, #12]
 8015fb8:	f8d9 2000 	ldr.w	r2, [r9]
 8015fbc:	f003 0306 	and.w	r3, r3, #6
 8015fc0:	2b04      	cmp	r3, #4
 8015fc2:	bf08      	it	eq
 8015fc4:	1aad      	subeq	r5, r5, r2
 8015fc6:	68a3      	ldr	r3, [r4, #8]
 8015fc8:	6922      	ldr	r2, [r4, #16]
 8015fca:	bf0c      	ite	eq
 8015fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015fd0:	2500      	movne	r5, #0
 8015fd2:	4293      	cmp	r3, r2
 8015fd4:	bfc4      	itt	gt
 8015fd6:	1a9b      	subgt	r3, r3, r2
 8015fd8:	18ed      	addgt	r5, r5, r3
 8015fda:	f04f 0900 	mov.w	r9, #0
 8015fde:	341a      	adds	r4, #26
 8015fe0:	454d      	cmp	r5, r9
 8015fe2:	d11a      	bne.n	801601a <_printf_common+0xd6>
 8015fe4:	2000      	movs	r0, #0
 8015fe6:	e008      	b.n	8015ffa <_printf_common+0xb6>
 8015fe8:	2301      	movs	r3, #1
 8015fea:	4652      	mov	r2, sl
 8015fec:	4639      	mov	r1, r7
 8015fee:	4630      	mov	r0, r6
 8015ff0:	47c0      	blx	r8
 8015ff2:	3001      	adds	r0, #1
 8015ff4:	d103      	bne.n	8015ffe <_printf_common+0xba>
 8015ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ffe:	3501      	adds	r5, #1
 8016000:	e7c3      	b.n	8015f8a <_printf_common+0x46>
 8016002:	18e1      	adds	r1, r4, r3
 8016004:	1c5a      	adds	r2, r3, #1
 8016006:	2030      	movs	r0, #48	; 0x30
 8016008:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801600c:	4422      	add	r2, r4
 801600e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016012:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016016:	3302      	adds	r3, #2
 8016018:	e7c5      	b.n	8015fa6 <_printf_common+0x62>
 801601a:	2301      	movs	r3, #1
 801601c:	4622      	mov	r2, r4
 801601e:	4639      	mov	r1, r7
 8016020:	4630      	mov	r0, r6
 8016022:	47c0      	blx	r8
 8016024:	3001      	adds	r0, #1
 8016026:	d0e6      	beq.n	8015ff6 <_printf_common+0xb2>
 8016028:	f109 0901 	add.w	r9, r9, #1
 801602c:	e7d8      	b.n	8015fe0 <_printf_common+0x9c>
	...

08016030 <_printf_i>:
 8016030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016034:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016038:	460c      	mov	r4, r1
 801603a:	7e09      	ldrb	r1, [r1, #24]
 801603c:	b085      	sub	sp, #20
 801603e:	296e      	cmp	r1, #110	; 0x6e
 8016040:	4617      	mov	r7, r2
 8016042:	4606      	mov	r6, r0
 8016044:	4698      	mov	r8, r3
 8016046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016048:	f000 80b3 	beq.w	80161b2 <_printf_i+0x182>
 801604c:	d822      	bhi.n	8016094 <_printf_i+0x64>
 801604e:	2963      	cmp	r1, #99	; 0x63
 8016050:	d036      	beq.n	80160c0 <_printf_i+0x90>
 8016052:	d80a      	bhi.n	801606a <_printf_i+0x3a>
 8016054:	2900      	cmp	r1, #0
 8016056:	f000 80b9 	beq.w	80161cc <_printf_i+0x19c>
 801605a:	2958      	cmp	r1, #88	; 0x58
 801605c:	f000 8083 	beq.w	8016166 <_printf_i+0x136>
 8016060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016064:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016068:	e032      	b.n	80160d0 <_printf_i+0xa0>
 801606a:	2964      	cmp	r1, #100	; 0x64
 801606c:	d001      	beq.n	8016072 <_printf_i+0x42>
 801606e:	2969      	cmp	r1, #105	; 0x69
 8016070:	d1f6      	bne.n	8016060 <_printf_i+0x30>
 8016072:	6820      	ldr	r0, [r4, #0]
 8016074:	6813      	ldr	r3, [r2, #0]
 8016076:	0605      	lsls	r5, r0, #24
 8016078:	f103 0104 	add.w	r1, r3, #4
 801607c:	d52a      	bpl.n	80160d4 <_printf_i+0xa4>
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	6011      	str	r1, [r2, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	da03      	bge.n	801608e <_printf_i+0x5e>
 8016086:	222d      	movs	r2, #45	; 0x2d
 8016088:	425b      	negs	r3, r3
 801608a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801608e:	486f      	ldr	r0, [pc, #444]	; (801624c <_printf_i+0x21c>)
 8016090:	220a      	movs	r2, #10
 8016092:	e039      	b.n	8016108 <_printf_i+0xd8>
 8016094:	2973      	cmp	r1, #115	; 0x73
 8016096:	f000 809d 	beq.w	80161d4 <_printf_i+0x1a4>
 801609a:	d808      	bhi.n	80160ae <_printf_i+0x7e>
 801609c:	296f      	cmp	r1, #111	; 0x6f
 801609e:	d020      	beq.n	80160e2 <_printf_i+0xb2>
 80160a0:	2970      	cmp	r1, #112	; 0x70
 80160a2:	d1dd      	bne.n	8016060 <_printf_i+0x30>
 80160a4:	6823      	ldr	r3, [r4, #0]
 80160a6:	f043 0320 	orr.w	r3, r3, #32
 80160aa:	6023      	str	r3, [r4, #0]
 80160ac:	e003      	b.n	80160b6 <_printf_i+0x86>
 80160ae:	2975      	cmp	r1, #117	; 0x75
 80160b0:	d017      	beq.n	80160e2 <_printf_i+0xb2>
 80160b2:	2978      	cmp	r1, #120	; 0x78
 80160b4:	d1d4      	bne.n	8016060 <_printf_i+0x30>
 80160b6:	2378      	movs	r3, #120	; 0x78
 80160b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80160bc:	4864      	ldr	r0, [pc, #400]	; (8016250 <_printf_i+0x220>)
 80160be:	e055      	b.n	801616c <_printf_i+0x13c>
 80160c0:	6813      	ldr	r3, [r2, #0]
 80160c2:	1d19      	adds	r1, r3, #4
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	6011      	str	r1, [r2, #0]
 80160c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80160d0:	2301      	movs	r3, #1
 80160d2:	e08c      	b.n	80161ee <_printf_i+0x1be>
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	6011      	str	r1, [r2, #0]
 80160d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80160dc:	bf18      	it	ne
 80160de:	b21b      	sxthne	r3, r3
 80160e0:	e7cf      	b.n	8016082 <_printf_i+0x52>
 80160e2:	6813      	ldr	r3, [r2, #0]
 80160e4:	6825      	ldr	r5, [r4, #0]
 80160e6:	1d18      	adds	r0, r3, #4
 80160e8:	6010      	str	r0, [r2, #0]
 80160ea:	0628      	lsls	r0, r5, #24
 80160ec:	d501      	bpl.n	80160f2 <_printf_i+0xc2>
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	e002      	b.n	80160f8 <_printf_i+0xc8>
 80160f2:	0668      	lsls	r0, r5, #25
 80160f4:	d5fb      	bpl.n	80160ee <_printf_i+0xbe>
 80160f6:	881b      	ldrh	r3, [r3, #0]
 80160f8:	4854      	ldr	r0, [pc, #336]	; (801624c <_printf_i+0x21c>)
 80160fa:	296f      	cmp	r1, #111	; 0x6f
 80160fc:	bf14      	ite	ne
 80160fe:	220a      	movne	r2, #10
 8016100:	2208      	moveq	r2, #8
 8016102:	2100      	movs	r1, #0
 8016104:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016108:	6865      	ldr	r5, [r4, #4]
 801610a:	60a5      	str	r5, [r4, #8]
 801610c:	2d00      	cmp	r5, #0
 801610e:	f2c0 8095 	blt.w	801623c <_printf_i+0x20c>
 8016112:	6821      	ldr	r1, [r4, #0]
 8016114:	f021 0104 	bic.w	r1, r1, #4
 8016118:	6021      	str	r1, [r4, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d13d      	bne.n	801619a <_printf_i+0x16a>
 801611e:	2d00      	cmp	r5, #0
 8016120:	f040 808e 	bne.w	8016240 <_printf_i+0x210>
 8016124:	4665      	mov	r5, ip
 8016126:	2a08      	cmp	r2, #8
 8016128:	d10b      	bne.n	8016142 <_printf_i+0x112>
 801612a:	6823      	ldr	r3, [r4, #0]
 801612c:	07db      	lsls	r3, r3, #31
 801612e:	d508      	bpl.n	8016142 <_printf_i+0x112>
 8016130:	6923      	ldr	r3, [r4, #16]
 8016132:	6862      	ldr	r2, [r4, #4]
 8016134:	429a      	cmp	r2, r3
 8016136:	bfde      	ittt	le
 8016138:	2330      	movle	r3, #48	; 0x30
 801613a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801613e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016142:	ebac 0305 	sub.w	r3, ip, r5
 8016146:	6123      	str	r3, [r4, #16]
 8016148:	f8cd 8000 	str.w	r8, [sp]
 801614c:	463b      	mov	r3, r7
 801614e:	aa03      	add	r2, sp, #12
 8016150:	4621      	mov	r1, r4
 8016152:	4630      	mov	r0, r6
 8016154:	f7ff fef6 	bl	8015f44 <_printf_common>
 8016158:	3001      	adds	r0, #1
 801615a:	d14d      	bne.n	80161f8 <_printf_i+0x1c8>
 801615c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016160:	b005      	add	sp, #20
 8016162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016166:	4839      	ldr	r0, [pc, #228]	; (801624c <_printf_i+0x21c>)
 8016168:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801616c:	6813      	ldr	r3, [r2, #0]
 801616e:	6821      	ldr	r1, [r4, #0]
 8016170:	1d1d      	adds	r5, r3, #4
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	6015      	str	r5, [r2, #0]
 8016176:	060a      	lsls	r2, r1, #24
 8016178:	d50b      	bpl.n	8016192 <_printf_i+0x162>
 801617a:	07ca      	lsls	r2, r1, #31
 801617c:	bf44      	itt	mi
 801617e:	f041 0120 	orrmi.w	r1, r1, #32
 8016182:	6021      	strmi	r1, [r4, #0]
 8016184:	b91b      	cbnz	r3, 801618e <_printf_i+0x15e>
 8016186:	6822      	ldr	r2, [r4, #0]
 8016188:	f022 0220 	bic.w	r2, r2, #32
 801618c:	6022      	str	r2, [r4, #0]
 801618e:	2210      	movs	r2, #16
 8016190:	e7b7      	b.n	8016102 <_printf_i+0xd2>
 8016192:	064d      	lsls	r5, r1, #25
 8016194:	bf48      	it	mi
 8016196:	b29b      	uxthmi	r3, r3
 8016198:	e7ef      	b.n	801617a <_printf_i+0x14a>
 801619a:	4665      	mov	r5, ip
 801619c:	fbb3 f1f2 	udiv	r1, r3, r2
 80161a0:	fb02 3311 	mls	r3, r2, r1, r3
 80161a4:	5cc3      	ldrb	r3, [r0, r3]
 80161a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80161aa:	460b      	mov	r3, r1
 80161ac:	2900      	cmp	r1, #0
 80161ae:	d1f5      	bne.n	801619c <_printf_i+0x16c>
 80161b0:	e7b9      	b.n	8016126 <_printf_i+0xf6>
 80161b2:	6813      	ldr	r3, [r2, #0]
 80161b4:	6825      	ldr	r5, [r4, #0]
 80161b6:	6961      	ldr	r1, [r4, #20]
 80161b8:	1d18      	adds	r0, r3, #4
 80161ba:	6010      	str	r0, [r2, #0]
 80161bc:	0628      	lsls	r0, r5, #24
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	d501      	bpl.n	80161c6 <_printf_i+0x196>
 80161c2:	6019      	str	r1, [r3, #0]
 80161c4:	e002      	b.n	80161cc <_printf_i+0x19c>
 80161c6:	066a      	lsls	r2, r5, #25
 80161c8:	d5fb      	bpl.n	80161c2 <_printf_i+0x192>
 80161ca:	8019      	strh	r1, [r3, #0]
 80161cc:	2300      	movs	r3, #0
 80161ce:	6123      	str	r3, [r4, #16]
 80161d0:	4665      	mov	r5, ip
 80161d2:	e7b9      	b.n	8016148 <_printf_i+0x118>
 80161d4:	6813      	ldr	r3, [r2, #0]
 80161d6:	1d19      	adds	r1, r3, #4
 80161d8:	6011      	str	r1, [r2, #0]
 80161da:	681d      	ldr	r5, [r3, #0]
 80161dc:	6862      	ldr	r2, [r4, #4]
 80161de:	2100      	movs	r1, #0
 80161e0:	4628      	mov	r0, r5
 80161e2:	f7e9 fffd 	bl	80001e0 <memchr>
 80161e6:	b108      	cbz	r0, 80161ec <_printf_i+0x1bc>
 80161e8:	1b40      	subs	r0, r0, r5
 80161ea:	6060      	str	r0, [r4, #4]
 80161ec:	6863      	ldr	r3, [r4, #4]
 80161ee:	6123      	str	r3, [r4, #16]
 80161f0:	2300      	movs	r3, #0
 80161f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80161f6:	e7a7      	b.n	8016148 <_printf_i+0x118>
 80161f8:	6923      	ldr	r3, [r4, #16]
 80161fa:	462a      	mov	r2, r5
 80161fc:	4639      	mov	r1, r7
 80161fe:	4630      	mov	r0, r6
 8016200:	47c0      	blx	r8
 8016202:	3001      	adds	r0, #1
 8016204:	d0aa      	beq.n	801615c <_printf_i+0x12c>
 8016206:	6823      	ldr	r3, [r4, #0]
 8016208:	079b      	lsls	r3, r3, #30
 801620a:	d413      	bmi.n	8016234 <_printf_i+0x204>
 801620c:	68e0      	ldr	r0, [r4, #12]
 801620e:	9b03      	ldr	r3, [sp, #12]
 8016210:	4298      	cmp	r0, r3
 8016212:	bfb8      	it	lt
 8016214:	4618      	movlt	r0, r3
 8016216:	e7a3      	b.n	8016160 <_printf_i+0x130>
 8016218:	2301      	movs	r3, #1
 801621a:	464a      	mov	r2, r9
 801621c:	4639      	mov	r1, r7
 801621e:	4630      	mov	r0, r6
 8016220:	47c0      	blx	r8
 8016222:	3001      	adds	r0, #1
 8016224:	d09a      	beq.n	801615c <_printf_i+0x12c>
 8016226:	3501      	adds	r5, #1
 8016228:	68e3      	ldr	r3, [r4, #12]
 801622a:	9a03      	ldr	r2, [sp, #12]
 801622c:	1a9b      	subs	r3, r3, r2
 801622e:	42ab      	cmp	r3, r5
 8016230:	dcf2      	bgt.n	8016218 <_printf_i+0x1e8>
 8016232:	e7eb      	b.n	801620c <_printf_i+0x1dc>
 8016234:	2500      	movs	r5, #0
 8016236:	f104 0919 	add.w	r9, r4, #25
 801623a:	e7f5      	b.n	8016228 <_printf_i+0x1f8>
 801623c:	2b00      	cmp	r3, #0
 801623e:	d1ac      	bne.n	801619a <_printf_i+0x16a>
 8016240:	7803      	ldrb	r3, [r0, #0]
 8016242:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016246:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801624a:	e76c      	b.n	8016126 <_printf_i+0xf6>
 801624c:	08019f55 	.word	0x08019f55
 8016250:	08019f66 	.word	0x08019f66

08016254 <_putc_r>:
 8016254:	b570      	push	{r4, r5, r6, lr}
 8016256:	460d      	mov	r5, r1
 8016258:	4614      	mov	r4, r2
 801625a:	4606      	mov	r6, r0
 801625c:	b118      	cbz	r0, 8016266 <_putc_r+0x12>
 801625e:	6983      	ldr	r3, [r0, #24]
 8016260:	b90b      	cbnz	r3, 8016266 <_putc_r+0x12>
 8016262:	f7fe fc6d 	bl	8014b40 <__sinit>
 8016266:	4b13      	ldr	r3, [pc, #76]	; (80162b4 <_putc_r+0x60>)
 8016268:	429c      	cmp	r4, r3
 801626a:	d112      	bne.n	8016292 <_putc_r+0x3e>
 801626c:	6874      	ldr	r4, [r6, #4]
 801626e:	68a3      	ldr	r3, [r4, #8]
 8016270:	3b01      	subs	r3, #1
 8016272:	2b00      	cmp	r3, #0
 8016274:	60a3      	str	r3, [r4, #8]
 8016276:	da16      	bge.n	80162a6 <_putc_r+0x52>
 8016278:	69a2      	ldr	r2, [r4, #24]
 801627a:	4293      	cmp	r3, r2
 801627c:	db02      	blt.n	8016284 <_putc_r+0x30>
 801627e:	b2eb      	uxtb	r3, r5
 8016280:	2b0a      	cmp	r3, #10
 8016282:	d110      	bne.n	80162a6 <_putc_r+0x52>
 8016284:	4622      	mov	r2, r4
 8016286:	4629      	mov	r1, r5
 8016288:	4630      	mov	r0, r6
 801628a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801628e:	f7ff ba67 	b.w	8015760 <__swbuf_r>
 8016292:	4b09      	ldr	r3, [pc, #36]	; (80162b8 <_putc_r+0x64>)
 8016294:	429c      	cmp	r4, r3
 8016296:	d101      	bne.n	801629c <_putc_r+0x48>
 8016298:	68b4      	ldr	r4, [r6, #8]
 801629a:	e7e8      	b.n	801626e <_putc_r+0x1a>
 801629c:	4b07      	ldr	r3, [pc, #28]	; (80162bc <_putc_r+0x68>)
 801629e:	429c      	cmp	r4, r3
 80162a0:	bf08      	it	eq
 80162a2:	68f4      	ldreq	r4, [r6, #12]
 80162a4:	e7e3      	b.n	801626e <_putc_r+0x1a>
 80162a6:	6823      	ldr	r3, [r4, #0]
 80162a8:	1c5a      	adds	r2, r3, #1
 80162aa:	6022      	str	r2, [r4, #0]
 80162ac:	701d      	strb	r5, [r3, #0]
 80162ae:	b2e8      	uxtb	r0, r5
 80162b0:	bd70      	pop	{r4, r5, r6, pc}
 80162b2:	bf00      	nop
 80162b4:	08019f00 	.word	0x08019f00
 80162b8:	08019f20 	.word	0x08019f20
 80162bc:	08019ee0 	.word	0x08019ee0

080162c0 <_read_r>:
 80162c0:	b538      	push	{r3, r4, r5, lr}
 80162c2:	4c07      	ldr	r4, [pc, #28]	; (80162e0 <_read_r+0x20>)
 80162c4:	4605      	mov	r5, r0
 80162c6:	4608      	mov	r0, r1
 80162c8:	4611      	mov	r1, r2
 80162ca:	2200      	movs	r2, #0
 80162cc:	6022      	str	r2, [r4, #0]
 80162ce:	461a      	mov	r2, r3
 80162d0:	f7ea fb66 	bl	80009a0 <_read>
 80162d4:	1c43      	adds	r3, r0, #1
 80162d6:	d102      	bne.n	80162de <_read_r+0x1e>
 80162d8:	6823      	ldr	r3, [r4, #0]
 80162da:	b103      	cbz	r3, 80162de <_read_r+0x1e>
 80162dc:	602b      	str	r3, [r5, #0]
 80162de:	bd38      	pop	{r3, r4, r5, pc}
 80162e0:	200028c8 	.word	0x200028c8

080162e4 <_realloc_r>:
 80162e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162e6:	4607      	mov	r7, r0
 80162e8:	4614      	mov	r4, r2
 80162ea:	460e      	mov	r6, r1
 80162ec:	b921      	cbnz	r1, 80162f8 <_realloc_r+0x14>
 80162ee:	4611      	mov	r1, r2
 80162f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80162f4:	f7fe bf9a 	b.w	801522c <_malloc_r>
 80162f8:	b922      	cbnz	r2, 8016304 <_realloc_r+0x20>
 80162fa:	f7fe ff49 	bl	8015190 <_free_r>
 80162fe:	4625      	mov	r5, r4
 8016300:	4628      	mov	r0, r5
 8016302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016304:	f000 f814 	bl	8016330 <_malloc_usable_size_r>
 8016308:	42a0      	cmp	r0, r4
 801630a:	d20f      	bcs.n	801632c <_realloc_r+0x48>
 801630c:	4621      	mov	r1, r4
 801630e:	4638      	mov	r0, r7
 8016310:	f7fe ff8c 	bl	801522c <_malloc_r>
 8016314:	4605      	mov	r5, r0
 8016316:	2800      	cmp	r0, #0
 8016318:	d0f2      	beq.n	8016300 <_realloc_r+0x1c>
 801631a:	4631      	mov	r1, r6
 801631c:	4622      	mov	r2, r4
 801631e:	f7fe fefc 	bl	801511a <memcpy>
 8016322:	4631      	mov	r1, r6
 8016324:	4638      	mov	r0, r7
 8016326:	f7fe ff33 	bl	8015190 <_free_r>
 801632a:	e7e9      	b.n	8016300 <_realloc_r+0x1c>
 801632c:	4635      	mov	r5, r6
 801632e:	e7e7      	b.n	8016300 <_realloc_r+0x1c>

08016330 <_malloc_usable_size_r>:
 8016330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016334:	1f18      	subs	r0, r3, #4
 8016336:	2b00      	cmp	r3, #0
 8016338:	bfbc      	itt	lt
 801633a:	580b      	ldrlt	r3, [r1, r0]
 801633c:	18c0      	addlt	r0, r0, r3
 801633e:	4770      	bx	lr

08016340 <_init>:
 8016340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016342:	bf00      	nop
 8016344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016346:	bc08      	pop	{r3}
 8016348:	469e      	mov	lr, r3
 801634a:	4770      	bx	lr

0801634c <_fini>:
 801634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801634e:	bf00      	nop
 8016350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016352:	bc08      	pop	{r3}
 8016354:	469e      	mov	lr, r3
 8016356:	4770      	bx	lr
